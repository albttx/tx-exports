{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1j59vzpzm868hj94uz04pjsgwlxq645p62aeh23","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"fgkv5ZmrUDDalfXAzDCSpLl9U7zOJbc4e3jL3UOaUN9EA1u8yry7WtJaoGPXmJaSMwTwZ2y9Mq0KnUOrf7VB8w=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1j59vzpzm868hj94uz04pjsgwlxq645p62aeh23","to_address":"g1j59vzpzm868hj94uz04pjsgwlxq645p62aeh23","amount":"11000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"An7DSPbVUZR4SzI71d6+9H5/dKXf36QUNvkd0JORg8B7"},"signature":"54pk54iRtXRhhsF6j/SoPe194+g1hZ2sTs/sEErgW+gknApBPduxYVL2vmLnXL6tjv3E51G9RevshJ26puxRUA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1d4rhqahl2v0xgm5pfchuh9hh5jmv7rvp2dmmxj","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"I8453LJW+MgP2h/FlZy84AMPjFkFp0D2Tm5Nb1bTD25RJkVA8y0uQD49NXaLlrCBCvdj7YIWjZu35/g4OOZoWA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1d4rhqahl2v0xgm5pfchuh9hh5jmv7rvp2dmmxj","to_address":"g1d4rhqahl2v0xgm5pfchuh9hh5jmv7rvp2dmmxj","amount":"111000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhDvMq5Ucb2hmj7b0IKvWzVY6LsO/UWGldJUS3FsalM8"},"signature":"61YfJhssfz29DYxjF3TyjozmQ46Ps2C1Yux+7A1l9W8iD2aWH1+zcJ0GrIvp/LWXuM9UhaIlLNrccAyWlkBCCw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g199v7gv2frx27lkvd4fwh92tu89hdwd62csp4j8","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"1XQCpCXurASaNbJ9UohUEpd+acd3gmDfaoKUhC2m5S9kBcyGjmuyOkRaKjb8gjSuRFivWMi3t9legdkVn115UA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g199v7gv2frx27lkvd4fwh92tu89hdwd62csp4j8","to_address":"g199v7gv2frx27lkvd4fwh92tu89hdwd62csp4j8","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8TU069RCP3DZ92aumMT/I+/3BEHqtVLtxI3iulxfATo"},"signature":"1OWc/SA5aYhbQrc+xqnZyQqhDgKi/KoW0JZeK1NR0CIUrm8eCZw5mBITt/MHxx3tD5g1wIe4wfPcBS8AvrOeMg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12aznq83k4wqh3qmrpv74cx2q53f86nqg596khm","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Pgjlo6BIEPs7OsXiqre8FIbz+m13ldsOur7GzvGuw/4KZ6yWLrVWCM46REWkmZ4gr72LPPe3bqLSN+kezEV22g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g12aznq83k4wqh3qmrpv74cx2q53f86nqg596khm","to_address":"g12aznq83k4wqh3qmrpv74cx2q53f86nqg596khm","amount":"111000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ar3HWk5scj0lhdDL88pEuRXrPwnMQpGgQE0MazdFPuXI"},"signature":"RFAm/jTV7K40zKLDniEqFqHmR/5j20J5MbBRabQtv4lNNf6szLRXrt9bTUdkKU8sqLGrwSxhX3H1lo1E/XUKZw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1wv4z64qvymx2syprx22fyz9x98z44lrgfccqvd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"4wTcTLvuj6hMWvTwsB3H+8HXX+t9uPLo8ARkO9oIfFd2QHU/Q8hTTOt/gx1OWDQ9cGeBO3heCX443sIWbVwjVg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1wv4z64qvymx2syprx22fyz9x98z44lrgfccqvd","to_address":"g1wv4z64qvymx2syprx22fyz9x98z44lrgfccqvd","amount":"23000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ahvf7MIQScoo+3JbMuwYfG8+sNfwtalMijcQarimQ7Zn"},"signature":"4BtE0dlL6mvfv7CMY46Dd+QwQNPuF5z9pVHT45ADIN9lMp8uwBnqonkSgoyWNTEXoy6QEiDfwrvBEe+99J01iQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1wya9kmeyq6cm5p5sere0z2jlpazkyvnky2xy4e","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"po2nR4z1QH+NRkjEJzUosabEdVl+kTJi5Cnw93/V4bVHzKIybsgZKpKRK1OZY1I0oSlCrN5EEHrcwCDoR7CasQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1vp4vc0hgtdr8d60evcfqv2tzktxygtv4t7l8qr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"8S3/SWhDz5QG+9TsPP+dnNkTBX8HWzeVtX4mQVhxpQMlD0wsv230d7z8zk0PYzS28CGhx8q8+K9P6R10tHOHWA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1vp4vc0hgtdr8d60evcfqv2tzktxygtv4t7l8qr","to_address":"g1vp4vc0hgtdr8d60evcfqv2tzktxygtv4t7l8qr","amount":"54000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4e0VHuBCVUviWcl8YpDky7nqVrqAfGy7MNdt3gd42Jb"},"signature":"vYubo9t3vO3iRYCC5T/2TeoM2kQ3BdhCMY4fdgCmxb5hOvJTRyN1j2owFR0C/IbQe42QFcJ3NkI3LB24YLU4ww=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1paa55jvhu9r43ylyde552wpsqwhagy6ugwndk8","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"dcpBODV7eOac6b7i4nAIb9qvK5kqUA0lKwIzUDTndQ4Acz8smw/plNBajfdLsNkRSYQWtKe+dnYjYorp1/EsVw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1paa55jvhu9r43ylyde552wpsqwhagy6ugwndk8","to_address":"g1paa55jvhu9r43ylyde552wpsqwhagy6ugwndk8","amount":"34000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A88FYOZvB33Ay3G6Og+le+EoxK6GwM++bvYY+bUn6ktM"},"signature":"x/luwIxQRW1nttRXwOwoGcTBaO1FDYeT4iUwUIPXSBgviph1RzX/AF/MGaay1XuDVlri1DWgQTFfKRfomxGl4g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1avdc2xq03q2awp55ksxjky58fvjdeylke9kasq","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"FC5DfJxo+Iu944jmJAq+A/jRuCJxb1m3w+fmE9VYdPo/Fw8tTokQHc/S29eVxavpZhX8L1Jc+XOAoxHyEqv9VA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1avdc2xq03q2awp55ksxjky58fvjdeylke9kasq","to_address":"g1avdc2xq03q2awp55ksxjky58fvjdeylke9kasq","amount":"23000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aw8X+6VkBOLJ6p03TUKhrjuYhrLlr5RyhsDh9ef9MfYL"},"signature":"76aIeGmZHuGyOz1i3RjiMF3LDk1JfjDj0tuCgkWd0HsjDbceBYJ9xpK0Xz/A1X4H/19S/bo3oyOJstHA336laQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1lhmlkpnzjl5c8wsprphq44n38n5uhwuz5czxm2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"C/Y1kbpJQKodz0IRu7M0ygASZPNL/OsHEkOyZ1GTh9BvvbXZQ2SWFzITjFUapSTGlo5U60tDNjwkDHPIfYerVA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1lhmlkpnzjl5c8wsprphq44n38n5uhwuz5czxm2","to_address":"g1lhmlkpnzjl5c8wsprphq44n38n5uhwuz5czxm2","amount":"88000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"An1NdV9T7eArCsp+jRuGeoyy+tbUAJWLa6CmFfyesYeU"},"signature":"aNMadR8EoY2ukmSmnMb3nMwWspRdQ1oaveaiG22kmoJXXbyLHY5lwBcuPckODX9SAXfZXT4UERljMshP29tXOQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1kzjyxngzfej2v5gxmv4pj2q5s8jsdp0mq5jznx","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"mDsRRxW+Nru7AVzsvecUCqjUdkAJRIwr2LwKca26Je1lVfWZD9Imcg5rk61Ht57m02j5WSFxEHOW8KKC1SOlog=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1kzjyxngzfej2v5gxmv4pj2q5s8jsdp0mq5jznx","to_address":"g1kzjyxngzfej2v5gxmv4pj2q5s8jsdp0mq5jznx","amount":"2000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxQ5PPMYVZ8DZvPg5JkMrG4PqigiLXiyQUbGg1B3U/rw"},"signature":"P2Sr8olvTEoQVOqiie5jCyxLmVH1rmzCFo3YyX5iegkhBGOAnGwrb+8J5NuBZUqxdSrYXWR2F4JpzDeeeRl5OA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1apyagxrzex8lm009k7r7ruda8nvsf4q4wu45l7","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"hSOtenTY3ejQ4z24SLUklCasVEka2iXbYJNNeMkqKS8gWhppIgel0u3avmVzlCff4M//19lUE+C204I4qjYu3g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1apyagxrzex8lm009k7r7ruda8nvsf4q4wu45l7","to_address":"g1apyagxrzex8lm009k7r7ruda8nvsf4q4wu45l7","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxWSylKuc+pTbghvULPAHvlM8C5dRAFhufS+4G8JehUE"},"signature":"yhOigYsmefBNbpVGKqSgSiLcKEorwqcBZEQ+ftT4+y9MKAuHhbVx3IgYD67DklpL56b89nALsIHasoDtoXB4uQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1emkwklu890l0ktaeqxa39hzlw6qmc0h0fgtkjr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"eLsaDDNIhdlc5XNuHI2BbsJ+IUWEtvlSEFYNX9g36TlXxVuEfE8wJNS5rHRA/K7prlqhJ5jqgkGZijBkQ1kfqg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1emkwklu890l0ktaeqxa39hzlw6qmc0h0fgtkjr","to_address":"g1emkwklu890l0ktaeqxa39hzlw6qmc0h0fgtkjr","amount":"23000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvMa/5mzng32sDhZrqL7eRLstQ1S+/pc2tUpL3zwhYPi"},"signature":"cV7ZzfICFQTj3p8YDU+B1gQrDPbUINw/tn1X+WvtEuMAqLsAZAH97fPw46+lOY95VigOOGZlcr8qogFcIMvXqA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1m53l7vywz3zytyajsgjw66jj80pqrhwrz0xa5k","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"QN+PGD94lGdmIq/y2dkjKlYTGFpU5dco7IhZAXN2ftta9Uf9xvODuM0sUJ6pUdSITTGnKjq62dYXmGQSzdrKYg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1m53l7vywz3zytyajsgjw66jj80pqrhwrz0xa5k","to_address":"g1m53l7vywz3zytyajsgjw66jj80pqrhwrz0xa5k","amount":"5000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmJPwHivoo3GUmyvz0swBB81/fY9MsNyLIHG/mhY5M2E"},"signature":"Ad9MD7XauqM1UAhjjbXUCcLFcki9tQ8dKG188d1+S+k+K5g8cuWo4eNwn3AmaDvWORnl6YRco2WdMADtsHJC3A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1grkxazllkqxzjkrwfcz5k8gjlncq9knljvs03h","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"mssqPsbWH+CqEYRZJak8QSmCbVu+Bk0f2ndSRP+luxlScPFOPMQX1qKbiOcd0p2dPoaove/oObkJfD+x+qRCjQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1grkxazllkqxzjkrwfcz5k8gjlncq9knljvs03h","to_address":"g1grkxazllkqxzjkrwfcz5k8gjlncq9knljvs03h","amount":"11000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Atn7Lh3ECcRHTQZXuhyQyqxx7QvLWO0+IZyiBnGS9eb/"},"signature":"dXsSlkF00ZsUnBzLUDTUWfsbjClCsKi2SYjo6Q1DYdA8wYQ3DswOlkqoazhA5UPLk8DUzEqjIR5sHYOMjefkhQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1n5j5cmr4rlw0q074x4gup3jtfeqc0j8nysau0p","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"zBa4RIUPMC3tCVUAllAGowVAUABl99Nux9WkhELLV2ByAuvyoPEhgPpSitG5SBPzfgCJpLhV8CIFev6kWbTGJA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1n5j5cmr4rlw0q074x4gup3jtfeqc0j8nysau0p","to_address":"g1n5j5cmr4rlw0q074x4gup3jtfeqc0j8nysau0p","amount":"23000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Am9OgD0wAEf0YogMhd1vP18ZojvYbdExYKCTZcnGNwBq"},"signature":"xEbEwo2fFPJuZvzidfnehYIQAkSkAzFR0n89cvUq9OoXwNZvRB42J07Re14bS7pecTIUPKsnQ4aTT73rdIpJXg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1f4zc226hdmdg78n67yt94ux8ldrt2e2wwx5fvr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"QhyyNPInGqxoaRjUZgMFgEuYLb/xVwfNJwRdkvePlcVmHXINb6nhQD8/o79GCnxqUnzc0Pr/zB3Xko/e6M7cyA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1f4zc226hdmdg78n67yt94ux8ldrt2e2wwx5fvr","to_address":"g1f4zc226hdmdg78n67yt94ux8ldrt2e2wwx5fvr","amount":"223000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Auxh+FrmG91jrd5JzRxrRbFDXv2E3kR9jb2kgI6Kqpra"},"signature":"skNd8VcGRMyokrUTw6exP5J09HLLFfxei2oKiDRgYPQoDOzpvzW6QDc9CIO5gK4aI8ThdR3I2wIbHhdtQ+yY5g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ufr0gyq6gdv0ymt3ctfm8yrlpterf24axyg4ys","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"yQKjM3tVlhNd6vew1tMhmZrdwQbOAZaCdpYujPCWYDc+ByOg37FpH2EUpVusa1D7zW9vPHfkXFi6WWnpgqbZAg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ufr0gyq6gdv0ymt3ctfm8yrlpterf24axyg4ys","to_address":"g1ufr0gyq6gdv0ymt3ctfm8yrlpterf24axyg4ys","amount":"34000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2Pk3t66SJfvDwMwmHpmbF0sA47M8h6BLIF5zSpYrpPx"},"signature":"+wnD3jwIBQhf5WKBk4k766DD/wDgVRweHo1uhIruIpdJCVvRb57hJewlIkpD1InaM2LTqaWEpnoyebG6jOgwIQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1r0h05rw3wmptj7f8wvs0yp05jl7apc555lzsh3","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"xGkwDyMFetGNd/xppqc9+rew1ctFCwR6nhPgHGWDSpom2/Tp07c+PIHroFrlDDP6FoFuVwDVmbGEiGFqfy5pQQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1r0h05rw3wmptj7f8wvs0yp05jl7apc555lzsh3","to_address":"g1r0h05rw3wmptj7f8wvs0yp05jl7apc555lzsh3","amount":"4000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9lDEcvxVI6Iks62jeBTE56G1YU9iDVIIITe2/H+AHJ/"},"signature":"bvwTK018arursebCUS36xn3lf8y0pkL07X0iHgUqghZlyrhTQkVff0hov3+SsNllKUe7HFTQQXTiNFGO8wc8pA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ak9rnkx2nddnpf0c92pnn47f6407jrk2nmja0a","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Rbh9UoRQHDis0EQ/yjejASqNr/lWs0MKWS2la5QRgiAsC0wXcYAVOOcbzinhx01h0BkVzsOJgskFwb3BSlmRLw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ak9rnkx2nddnpf0c92pnn47f6407jrk2nmja0a","to_address":"g1ak9rnkx2nddnpf0c92pnn47f6407jrk2nmja0a","amount":"2000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsYRzmvgQfngkJMKYw6YOmUxXw1XgT7YLa6QzBIXu81P"},"signature":"5awnCg3qxipZA9nSpIxiTD3J5SeJ19h1+jQO1rpGeCA66g2/68nkUsdVDWFz2jytFoF8qJN18jJtJeTHbK+uzQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1r5d7gmg3lssfg42zg4r9688se8vcqf9y2he8jd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"iM1SR8rbqguj1Zpmt1YLY9yj5LZbRf2oZlZHTjU7RvEMrtRBhMDZyj/pndPebNFJPxZh+yTKpRs3FpUuSSoE+g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1r5d7gmg3lssfg42zg4r9688se8vcqf9y2he8jd","to_address":"g1r5d7gmg3lssfg42zg4r9688se8vcqf9y2he8jd","amount":"2000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3FJbGeLPbqSvdgTpiZA+z9kG/ciTX2ztxTSOxSs2INu"},"signature":"6JhYEsTWwzbdy2EaoYmC3x/OqTYX8bpQ0jD0zXZtp7sba8X1SX2t+anWRE6sfAp81+zEEf3ATY+AWgIwABtABQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12flncmd4km5w0086e09ze4qwj4duz653x8h04u","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ivqp/YeU8z1RDn5PB1uul1GeA6X51whHhD10N582eS4KfIPvjbXuLHNQtbZTLHfXRLUvHJ9+sMuIp4zdr+XeZw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g12flncmd4km5w0086e09ze4qwj4duz653x8h04u","to_address":"g12flncmd4km5w0086e09ze4qwj4duz653x8h04u","amount":"56000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aml7piE5vHyW1btgx4w6ViPTlvrOZ/SKBvSvEH17hRTO"},"signature":"axzA1Zq+nkPG0ZWFF06U9QtL/zy1g5/kmYJd+U9SmEZCZJjpKI8IDeDOuNz6sMOUUiMGWtyBHOUkVFwo6g9/OQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1cwek2hs3pyxluvars2gp6p6a29em2axa8ntlr2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"sl6gnOFDKOVIXc1YmujdGrD10AnEfzaz19VhfcZhTFBjZqaCDnzlSd3FSyU3MDWchXESAWA/weH2rP9kEIP/WA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1cwek2hs3pyxluvars2gp6p6a29em2axa8ntlr2","to_address":"g1cwek2hs3pyxluvars2gp6p6a29em2axa8ntlr2","amount":"213000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aj/74UMUYXL7ogCitrNIOKbgTejRelTKdbip6gyfNh9K"},"signature":"vZVNpCsk/kJ81Tpyzk4gDJNIa3I1jNzXI8+f3XRmWPkDya5mXzXBJsylecypXcAMQPVjPNgKE6VbkqHtU5wDqw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g19mtntgcwr5eq9fu9gtuqqnwea9959kynd8434j","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"l7AGZEO7h6mqD/sVGOYEpo2xobKT0a9z3xk69BtO7ck97V5+7RKmswMl4qcsj9qLNIQXMD9sK85eWMqsG9zRpg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19mtntgcwr5eq9fu9gtuqqnwea9959kynd8434j","to_address":"g19mtntgcwr5eq9fu9gtuqqnwea9959kynd8434j","amount":"309999999ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Av6O5RvABqOM6VU8+f+PXKZXozLZrYkuHeatFniTq7zZ"},"signature":"/a/ihee0y2lQ55/RQ4HBE+LUSuvjM/xVPhI2p1jPcNc9I1DdM7aXvrRoXFfVQW57FKBPnahcNtpuGny8++ScQQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g16f822fs6q697t3qz4vmndel7r2e3uypcgguxv7","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"dau2+00wuwULqncHFheN0dTFWXi+1p/8pVhi2ptJS+8YsNdlzL1MNi97MupfoC9k36WwYDOwls+rZZc3+Xdh+Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g16f822fs6q697t3qz4vmndel7r2e3uypcgguxv7","to_address":"g16f822fs6q697t3qz4vmndel7r2e3uypcgguxv7","amount":"309999999ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ahi4va8u0y9QC9n+qz4KiQkZqj2mQL7vr3RwVsJZ6Ugz"},"signature":"t2RJ31dlmQWfqUe43m0syemjV2f1PPROMToufwD9lmU3gZbFqJTBnnu8urJRgm0CzTBSQEuOoLzsy8Zyw0gyQw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1mzflkfzwwgje03lnqpmz2wqp2fwyktkmxegxhz","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"SAdPjI1DQTpsR2ts6hLk8nyBfZLRw86f5pT/mv36QCRgh9STRHHLB0HmKSZ4fPEWuSgQjqZ/szy3y2xTnW8++g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1wjnypy6varyh08u9dszq4rzc5rqhle4elp5ce0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"lKWiXG6wq4AQV13N5j5YjkCPXVwyyGwKJlN09J14etM36E60v4H3amc2WSQIUjiHLbXJ61wPa74dZqwoVN3c1w=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1wjnypy6varyh08u9dszq4rzc5rqhle4elp5ce0","to_address":"g1wjnypy6varyh08u9dszq4rzc5rqhle4elp5ce0","amount":"309999999ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0rafUydVhjm5grcQdL5kI5BT2UaEmUxgNte0f++MUJH"},"signature":"62IIVeNXXtSt39cgfxwWy4NUCk8IJBZxgKHRGFjP8WcwfRPfqT6yIQV6ps0gvQpy52/C3xYXI5KHjxsyqrTO6Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g15yg6plp35au4hed00gyvsxaf8ky2mksd24uqag","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"gsjX3CG9jOZpUYsWODTi9vUbRiFKtAgdajd24RXSX/ctG11GhHCb9W8dXq0qTxrfxcm7h9/osZV/fozmYJ1H3A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1uzpwcm2pgjctdag5y3vk2ju4rcxd28mx3sp6rt","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"FVfXVdl2PgqsJfkIUhQhInE2QF0awzzuIpnIYi5FeNtwnFAXY1R1i2+0GifJbSOOLZUz7bAYYe3O7yKpbcAVjg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uzpwcm2pgjctdag5y3vk2ju4rcxd28mx3sp6rt","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","eurythmics",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Arjdw4vw3cme+ycSu8myGuxDXBCh//LHKCW5KxhUyWdY"},"signature":"bNhVrdhrfM215PybdhlvGOp88kWrA5W1CvOTzsMFtPI129kM7g141pgPtA+0XXzfQ9RNOlftR+gfabKwgBS8vA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uzpwcm2pgjctdag5y3vk2ju4rcxd28mx3sp6rt","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["eurythmics"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Arjdw4vw3cme+ycSu8myGuxDXBCh//LHKCW5KxhUyWdY"},"signature":"tojedwkZPNGXRxtoe+0cx8uzUE981AbPSFLcQ8cqAfNXgCGh3RnubVpsos6L3AplpY4nAOCBAELMC8iDqo9Ssg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uzpwcm2pgjctdag5y3vk2ju4rcxd28mx3sp6rt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1248","High level overview of gnoland reviewed","https://medium.com/@monachinojoel/during-the-first-session-dongwon-our-ceo-gave-a-high-level-overview-of-gnoland-reviewed-the-3c7ca26402b7 "]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Arjdw4vw3cme+ycSu8myGuxDXBCh//LHKCW5KxhUyWdY"},"signature":"JIB2asmafC4WfKygqAeWtEtqnv74M3AJ1Gin+HGVbUhQYLGuWr4/ivMgZBNBKjyi5+NI+Q6jRXum+rKkDLbfTQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","to_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","amount":"123000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsnpfjgZGhgrGlRGVw4gXzS5IWpcOoBNKgDhdIwpQrz8"},"signature":"uKokZwAFgf/oTa9WwVgxNTveJ3A1mSeDsKagnXHs4I8m7akbxu28twaIp9YqGULZoMJEr1fKfbe9ptA3eJaB0w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18w6wdx2pu5x877xjcsd9hdmdghssa298jz329x","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"6WbpfgrhqCkBVe78GI+UMnmzeO+HZqrL3yJcurCbbwwLiZ6jzZGSWEX9AI84RaG9oQUM8ZH+zLe14+FzwZfQfA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18w6wdx2pu5x877xjcsd9hdmdghssa298jz329x","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","tectonic",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Asg4HLMI+mEwih83DOHoHgKOBigcHB06nEnwmUeET26G"},"signature":"NfJmrzr35UsfjZLNVccmwYT/qSQMKhlWnGLbNYHGmAwDLiTqyQEXG33sTphx0dOV1tkC85AUL7pGz0cnRWUrnA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18w6wdx2pu5x877xjcsd9hdmdghssa298jz329x","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["tectonic"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Asg4HLMI+mEwih83DOHoHgKOBigcHB06nEnwmUeET26G"},"signature":"yPAVB4SDSGM1j9LnBWFPX8Xq0xV2wiJF5X7BtmpKBjVd4sNsJN6JQYUzo8NanOPwhlnwBcsHrEXXPvQnYIwS9g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1rzgvt0hhneqdvcu0ueava9m3rgw5yvgwe6n6yq","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"WaaFzyBmwzMUZ0R9wRnMD5ZBdIieDT2mzonp2mO5pgh9NJFMsWuFKCfr2vHHeMKZ/HYWPd+ABmn7okgSW8KtpA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1lemva0q4yayuuwuu9lfpfsygwpc67tdmupukjx","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"GRZU0kLB9Dr8Rb10NQgQJwBYeFv0M7Jb3Shwe9j3eXAX1MlcSGi4ZfyAGqplkF+6RU6d2es4tLkrNgTUEit79Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lemva0q4yayuuwuu9lfpfsygwpc67tdmupukjx","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","zoophily",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhzAQpo3e/CIDkQxKhOg6nCUfSNDkz4IfjX6RReGhEtk"},"signature":"jS2E3y1BRqVK6CI9i6wsoOyy60+STYMNR1eKKafjbQdEmxflA5zrr70y9EOl6ht/CQ9T2KGqwp1/hBkexupclg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lemva0q4yayuuwuu9lfpfsygwpc67tdmupukjx","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["zoophily"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhzAQpo3e/CIDkQxKhOg6nCUfSNDkz4IfjX6RReGhEtk"},"signature":"0urC8wT7W/woKAxb+LctHhhvFjYg//0T5sb73d3uoV8YFGMVp57buitzzAuyqaMGPPK+F3iqg4aPPC3k3o2xpw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1sflx8tuurswhlrz3eukflnvz8p2n9nffvp3t84","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"OnXKnJYVKnMKVlg3ReDjyHCYDXPCBZLc6m57mWFUUQoD6+xgpg4qCzThK6nTKyzTvbyXGe2smNa6t7k71GXxHg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sflx8tuurswhlrz3eukflnvz8p2n9nffvp3t84","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","despumate",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzPpSLuzA0yN4YEZvnaJnMIAtQInbm7hvJiuJVVMX+u9"},"signature":"IPOXlz7UIza1TWLDLtSUt89CxWkAK4phgVe66HCnjvcyGZaw56iChiE8T3bwy9MuoVX0BNt7k7tyGnetCZP5eA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sflx8tuurswhlrz3eukflnvz8p2n9nffvp3t84","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["despumate"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzPpSLuzA0yN4YEZvnaJnMIAtQInbm7hvJiuJVVMX+u9"},"signature":"LLBolRDLatGyqAh6ETdoBqFrU8taoIIXcFh/DqErx85j4mpA9MpTLWwd4QVcBoGfJPzY70QdFNDg9TBTtBj3oQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1jllnvzkaydj0n9lz95pt53mjn46qkex4ckpruy","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"/PY5/aXvDAx6TOwN0ZyPqaqdi9/dnE9IOgbttS+nDfAmSv5imaDD0DHizNxlHgioPUyCN0OSDJ4XUm8aYbwBHg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jllnvzkaydj0n9lz95pt53mjn46qkex4ckpruy","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","lissome",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A12DPIxfTbWBym7vwymmnAfBZdQypYCEThsUFYQ24srh"},"signature":"GyorKG37fEC5AVuuDlrkxXOAT6yERFWS+YR6N46wvV1gLV4jBEw2IOudfC9y9GS76eRv+02sBlfRN2UVG/CDgA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jllnvzkaydj0n9lz95pt53mjn46qkex4ckpruy","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["lissome"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A12DPIxfTbWBym7vwymmnAfBZdQypYCEThsUFYQ24srh"},"signature":"6i8lXTZImS0MUpfTZ/7s/WK0rVaKceD7OqnudZVgnqdfMGk1qSC0Zzhgq/a0qCUE57EGO489JIMGA1NBwG4dnw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ragajcr6cxp6f5p9y5uej2leyyyl7dnpfvevcx","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"5bpWir9RYok2TjCkgj3dCqnGA2+ET1Wb3ts26MzBnlhwMKyUJCOMk9dNMlj9NGcIz7rKb6axstzhycxrvHmKUg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ragajcr6cxp6f5p9y5uej2leyyyl7dnpfvevcx","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","farruca",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ai1WEaVVBwSv5P2H9+E/zxRQNRRSPe45SkwCj4TQ9j4b"},"signature":"HcmXvlQuKrgOVlr8BCD9Y1cKrMsG5+B5Si+tr4lv6+Mxw4+ZoOTEbaUs9wTEwLJyhb5gppPE3sfQOW+rJnLzCA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ragajcr6cxp6f5p9y5uej2leyyyl7dnpfvevcx","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["farruca"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ai1WEaVVBwSv5P2H9+E/zxRQNRRSPe45SkwCj4TQ9j4b"},"signature":"Owy1wkphnoS6da9wAK+hFVj9zQwkBGUBcxw/0BTNx+FsormSl+PofP2OHFTpSHi5Hi8iJz4sE6A1J5bvDwpuNg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g186v8nz89sk8xa7svmctf9chm96ah7lnk8sldcd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"CVc7pVWhAkRLu7+5ZoxSjZa0sZWkjte2u2cL/RwD5jdED2GjFMOAlw3NRR5mN5U0AFyziHGsRCCiEMzS0w2B7w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g186v8nz89sk8xa7svmctf9chm96ah7lnk8sldcd","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","ismatic",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8v6ciuA+3HCELNqEGTIEuyE5yimJvj/x9IXXQcGtRnd"},"signature":"MI985wgemx04kEJ7cRWn76g4lcZByIN6pMOZo027LdIBFsMp/eOQNWV7DOFpLHNRd9kWS+WD7mlQ/7AQfRxUkg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g186v8nz89sk8xa7svmctf9chm96ah7lnk8sldcd","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["ismatic"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8v6ciuA+3HCELNqEGTIEuyE5yimJvj/x9IXXQcGtRnd"},"signature":"FHtnWFwuIcU3heKDYf2Ud9TPiTCjwD35SNlbeXJkKg46LaoDmaWwrJmL75mGI3xDEaB5KltXZAnR4ll/yGhAqA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1hqqjkx6gqxj6fthsykp04ghm5tpt4kdpvk5967","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"MGnx4lwDmt9LZStYPc2VqAHAbkMc29T71OJSY3PO0Whj5voAR6xwiRslOPlNu+urXhihnUMStdkESKwjdm0o1A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hqqjkx6gqxj6fthsykp04ghm5tpt4kdpvk5967","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","mordacious",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0JjGjgFFuEsDimaWho/eiRKqQnDFO9B2LfOEOUQAQyq"},"signature":"HxFVtjINSkqjLZp6Or4q+9ZWsIOdexQLkud63qpZlE1qb7C1Hk9F/dxU98Hd6+MG6fZEJZiVWOL20Fzo0i41ew=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hqqjkx6gqxj6fthsykp04ghm5tpt4kdpvk5967","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["mordacious"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0JjGjgFFuEsDimaWho/eiRKqQnDFO9B2LfOEOUQAQyq"},"signature":"ZjzLo7ZP6mvnJHdfdEd+7TvcP/AxeeClPGdpJrSmTlIcit3fjevD01HBQOTBQopLNLRXA4/vJ3McKkyLXcco4Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18w6wdx2pu5x877xjcsd9hdmdghssa298jz329x","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1249","Contribute","https://medium.com/@dmytro.khomenko20/contribute-d3ec78703bcb?postPublishedType=initial "]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Asg4HLMI+mEwih83DOHoHgKOBigcHB06nEnwmUeET26G"},"signature":"KYyQ0xmdGXTwy4kywNTWR4+MgCK4CK/hTIV7yHkH3r1Obhiue7y0Wr5vUJAzN7HPAc0AHrqiIdSjln1ZNci/qA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hqqjkx6gqxj6fthsykp04ghm5tpt4kdpvk5967","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1255","what-is-gno","https://medium.com/@mariiamartinova/what-is-gno-72799ca4b564 "]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0JjGjgFFuEsDimaWho/eiRKqQnDFO9B2LfOEOUQAQyq"},"signature":"1UiAo4K5lb3PN/9NC0y8x7qa/vyXyK/oMIfcKYZuSeZXiIsS8KllTGNZDOCr2oz+T/Kanyds43CMnR5xWpnb1A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lemva0q4yayuuwuu9lfpfsygwpc67tdmupukjx","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1250","what-is-gnoland","https://medium.com/@olga.klyuk1990/what-is-gnoland-5edf820f4415 "]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhzAQpo3e/CIDkQxKhOg6nCUfSNDkz4IfjX6RReGhEtk"},"signature":"FGtcfeapEuomm1mFsn8o24rvh1bERFLfiBS3vbh9kR0Rgtml3aFr9mCmedZUgYyE6SQGhAa9WjZE9ZNSXy1fIQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sflx8tuurswhlrz3eukflnvz8p2n9nffvp3t84","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1251","gnoland-is-a-blockchain-project","https://medium.com/@eelleennaabakanova/gnoland-is-a-blockchain-project-built-on-a-tendermint-fork-and-created-by-jae-kwon-the-co-founder-1366e4c574ab "]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzPpSLuzA0yN4YEZvnaJnMIAtQInbm7hvJiuJVVMX+u9"},"signature":"BZGvpi+hqitHzY1+L2clnIpacE7REM+Dq0h4n9RO6ToMfYvfg4NeurHPryB9hSj78vE/V8O0ihbFW1O3qvL+9w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jllnvzkaydj0n9lz95pt53mjn46qkex4ckpruy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1252","jae-kwon-co-founder-of-cosmos","https://medium.com/@irynakryl/gnoland-is-a-blockchain-l1-project-founded-in-2020-by-jae-kwon-co-founder-of-cosmos-and-f91fcc22a315 "]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A12DPIxfTbWBym7vwymmnAfBZdQypYCEThsUFYQ24srh"},"signature":"slrbDtAKsvu4nCClsbxDJ6WeSgk+TCkZUlJNPDUt+SEKBxCKxkk/bJUaiNcLpfxiwJkt5smvUw/AseoVNJnkXg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ragajcr6cxp6f5p9y5uej2leyyyl7dnpfvevcx","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1253","gnoland-is-a-decentralized-smart-contract-platform","https://medium.com/@pavlozuevloo/gnoland-is-a-decentralized-smart-contract-platform-built-on-a-blockchain-l1-project-41b42afe7a9e "]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ai1WEaVVBwSv5P2H9+E/zxRQNRRSPe45SkwCj4TQ9j4b"},"signature":"4oVbZAw0hhhzHsppAsOPWivVNDsyZmXeWj9J/hO0ljUCG0X/QNHqM4CkK2Zi0WKAS1aijtXzzIpbr8AlsV2Ksg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g186v8nz89sk8xa7svmctf9chm96ah7lnk8sldcd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1254","jae-kwon-the-co-founder-of-cosmos-and-tendermint","https://medium.com/@pavlo.zahharovv/jae-kwon-the-co-founder-of-cosmos-and-tendermint-established-gnoland-as-a-blockchain-l1-project-20fd7fd713ca?postPublishedType=initial"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8v6ciuA+3HCELNqEGTIEuyE5yimJvj/x9IXXQcGtRnd"},"signature":"5k4wpB8gw17XTFbSGDjPB9THMQQormlcXS8eQWjofAsac67rLFMuAsZtKHNGF37uhclueHIeM4F/u+ADtB+klQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g132xa7hsjq2qhsvuwxd7xendmayparr3fax0m98","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"86rsne9XI9WlPZ/0nRe1oqqQSbj0mpXkt4UUC5Otj0kcbQJGqBxu5pk80HTC8g6KsTS4qaylpPKRKqyYrAg1XA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g132xa7hsjq2qhsvuwxd7xendmayparr3fax0m98","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","liquate",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5tW/KXLItDYZJJmggLw02MJPzfpaIz3KPOptEk6FbAt"},"signature":"TE/Q586aiOjSqRq9tnaYaZTVVpUqKr0Fpbp8n79zCoB3fvr6HunJJrUbSq8epLOaeegYKJGMOZfBkWq46LqI+w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g132xa7hsjq2qhsvuwxd7xendmayparr3fax0m98","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["liquate"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5tW/KXLItDYZJJmggLw02MJPzfpaIz3KPOptEk6FbAt"},"signature":"fENnLcHEgd9SqqAkmdowXA6y6+u+w7z21lRcyYz5VoV+1wnKcHhysjSAeiUozvYWK+mEBz2Sih18B5lZ8lgD1g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g132xa7hsjq2qhsvuwxd7xendmayparr3fax0m98","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1256","gnoland-is-a-blockchain-based-l1-project","https://medium.com/@dmitriymarkov19900/gnoland-is-a-blockchain-based-l1-project-that-offers-a-decentralized-platform-for-developing-secure-a8808e67602b "]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5tW/KXLItDYZJJmggLw02MJPzfpaIz3KPOptEk6FbAt"},"signature":"01IKL6XLLmKYtUBzLS6293q4y4FTDhicC7FuKhI/7EhcmUUrej7AOVKz8tJJTVD3Bs+9pbgSTKoTZ5Lv60rHeg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18lywl024a9wrg9hht8qv24wrs2ahvfv6q3cq6c","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"XVu7eGm0AxMP/apOceDOvpm7cUcy1NmjlyW09uhndZwD01ZQMIEL4hLrW1Rn1b9agLUPIhcXiKdXNDWgoeWJ9w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18lywl024a9wrg9hht8qv24wrs2ahvfv6q3cq6c","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","pontlevis",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvFzQFnL1f8IK1T4P4j03Xis81RO6c7S2l5MoIQwto/S"},"signature":"0BYNMIB+1GANmzxmWvpHshA1Cz7OSCEKYWzW2RlZUBdOLR9P0MCDllPv1ASJrkLMxCE4zGnujExMoO4TU3Ot0g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18lywl024a9wrg9hht8qv24wrs2ahvfv6q3cq6c","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["pontlevis"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvFzQFnL1f8IK1T4P4j03Xis81RO6c7S2l5MoIQwto/S"},"signature":"1kZxncOxm5AV8WGiYwkiHlukc5nQw0x02y1GjWKlKKEXQsUmwaNtgKBDuuM0tDV7mpliWcSFeGfqd+6j3zG68Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18lywl024a9wrg9hht8qv24wrs2ahvfv6q3cq6c","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1257","gnoland-to-provide-a-decentralized","https://medium.com/@lev.kozlenkoolevo/jae-kwon-the-co-founder-of-cosmos-and-tendermint-established-gnoland-to-provide-a-decentralized-ae44c2ccfbe4 "]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvFzQFnL1f8IK1T4P4j03Xis81RO6c7S2l5MoIQwto/S"},"signature":"zsBQCTtgmwVtS0h552vLMJg4iKDy+QEFq2ho8vOE08oqyecdFBKEF1YMVtysuge2ceWvAHvrtaU4Vw5U1qECpw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g13al0eegftse2spvufpgud8h3e9v2ygug22s7ag","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"0IicvxAqZPRrTVfe4/M+BKzlm2VChfqKOCq7Dh2OlngvwIeUwpXBwKVBLEa59Yt+RfRlF3ZX9aTksq0aLhQEpQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13al0eegftse2spvufpgud8h3e9v2ygug22s7ag","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","exuviate",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ayr0zSNCqIcXHbixod4O0mXzAjXFqXuqBmF44EhLjqSE"},"signature":"k/LrlXjN+m6CTW0khTvQJvnMxe9w8SLpZhrER4zXm/IOkbixzgV7Hd79oEOnWydRwO/1ap9YeOGGdk9DR3Q8aQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13al0eegftse2spvufpgud8h3e9v2ygug22s7ag","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["exuviate"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ayr0zSNCqIcXHbixod4O0mXzAjXFqXuqBmF44EhLjqSE"},"signature":"fe/He/J9AME2Sl0d+4bDhEQ7oWVwWq8VKsbgbtcPMPx8uep4zhqsjNhFOU97urKdNb8RUuO5VrHLDMixlEnkwQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13al0eegftse2spvufpgud8h3e9v2ygug22s7ag","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1258","jae-kwon-the-co-founder-of-cosmos-and-tendermint-established-gnoland","https://medium.com/@edgarcircle/jae-kwon-the-co-founder-of-cosmos-and-tendermint-established-gnoland-as-a-decentralized-smart-cabd873cccf3"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ayr0zSNCqIcXHbixod4O0mXzAjXFqXuqBmF44EhLjqSE"},"signature":"TyR3tsa95n/5yHwvmKuLpSnoRRP/r8+ps76TGJNQFdR6S+3mz1kpmxZwWMq02lG+JynEYjItKQRiTx0BEZPkZw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"12000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArADVPfUBrZVmlqmZWPWucRTe9gkJ9wJFyTszJoU5Ebi"},"signature":"v3Q9u2suLQ9dGEVZ8qqQDBt3tM94qUD9VBXAnm/hDUtoTLPkyojkLUKkLtY4UMo+lwfsq1YIC1VhP6d2csWB9A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArADVPfUBrZVmlqmZWPWucRTe9gkJ9wJFyTszJoU5Ebi"},"signature":"8qjqzfhU/zIPI6awyzwRgydsWj9wBNyzYhfFBrO3tPcgaXt58GJwDmggKegq0zqlBrY+s/qOSZci6hgLleNlUg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArADVPfUBrZVmlqmZWPWucRTe9gkJ9wJFyTszJoU5Ebi"},"signature":"F8RNIrv6hCRD24hqXtE8sHrkJ3fNvhZ12nmLf/bM4RQeHUklngsVe5pZqHQ/QEMunuFkBsuDf66bScyb5oTk7A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArADVPfUBrZVmlqmZWPWucRTe9gkJ9wJFyTszJoU5Ebi"},"signature":"PKo+2z8ZAsNkz+z+fYVuVSZdvz1ubXXOf5+KUfBhZ991B67nZ5kpFrRB8K4c0p2rUPd+MASJh3ouuPOGTSzmhw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArADVPfUBrZVmlqmZWPWucRTe9gkJ9wJFyTszJoU5Ebi"},"signature":"eDnkgItk9/ZgbIs/WdZFNFeZHkkrarE6ZyBxBaFY6GVtCW2ANyzqWSHdLPezWlPyMg7HClMBBzjynZXfj+xE3Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"2000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArADVPfUBrZVmlqmZWPWucRTe9gkJ9wJFyTszJoU5Ebi"},"signature":"POHSiCHBkwHX9TY/Bc78ZonI+Nqy5Kpm6OikoxX/u9YY+4JDfeHvtqW1gZKv5Lo2ncM6RwFpe0jAi16PsLbTQQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"Rc5UGW44q37ArrpdBBvEZ4mhXr1RYYSE+xBpuwd7vTkyUxHm5T22UBdl6R3LGGhp5iECN3SrASDZKaQNWf1r+w=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"xPm5419IzDZSyCFMeWH1TsbrY0V5hXjPcni55pdjompJKaccLMp9ggm5xidI6+Y6t3W6rfUQOj+IMrSFO+zVdg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"hod1WprYRGaFqar9UNkVcR8qj2yPp92lpOOl8dcyxi1E8FO8v/Meq9iQnC51w4ugtuyAAWIoyt9ralRUN2If+g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"ISqJyHhITY6QpMyRG1hc68pPpamKwLpUxmErGc2AC/wS23mKVwTw14+eqUzA55zoc/YpDixldyqGh4c8MNFTtA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"UVWs/A8kgIkItDB10bumrkCCnGymAqgGyG8gB9iTAm90FoMu+PkNrYwk7EhdQYewPk5Pn1bjr8q5LLsvsTkZ3g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"mLX+2lSbZUXO9BpASfVb8w3KqEYtO368Abb7+qbWXV8sb7y2fZct8tXxOeoaHvVuqCMv3kWMr94wEcX1Kk3HWw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"2000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"ZVHBDC5CjVNb6j730Lz/NGAQMXuhzRhKgwN4P6VfrsZOpQWTMBTrFNeqZqFL2WnqF3T0cVj+HFYzjGumd+pTpg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","to_address":"g12v70cpesur5ykstcduk5uhvmeurq6x2fshzn8a","amount":"800844ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsnpfjgZGhgrGlRGVw4gXzS5IWpcOoBNKgDhdIwpQrz8"},"signature":"+TqP+NwxQa94vJwFD21qL2yRxSX0ff0BG0KjxbS7zAdPnR5RDgPgGinCyyptsAP7mHExpAYidD+AyS6dZk0CdQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"pc1Lp6WWIzS8vQ6v2GU1MsY2sR41EXR5JXnZJJGaf6owL4U+xDWDCK5yf8QlJSCC1xbSrtw5TdWPMgL+wjvUfA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1kvhxmvusrmfj3c7qj5675c5lsvf6vfnetz82af","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"3WE/SFP68fH7vqXhjPtL3S9vcGRDFA5DXgJ9JwZWzYZH17KSwbASnOjP3wFCr9gZZ7eby4deDi2ez8pcuzgPsQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1pv8a4jpkem62n6x8ml8tsf4gr2mk2lcv3jrh6h","to_address":"g1pv8a4jpkem62n6x8ml8tsf4gr2mk2lcv3jrh6h","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Awvj5StPKEF21j9WPA2PmwPmaqFdQVsimNFMT6Amcugj"},"signature":"SDYBnb9TLEKYHeZMTrbX2twWFbKxjwFj0PoaP/40/wUbHzA437lL/Fq12eKx5MQwpRJxlkQBw0UDp0PbfmuCMw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kvhxmvusrmfj3c7qj5675c5lsvf6vfnetz82af","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","danil",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwIlV8TI742FJLkm5xZVpkb2/RtPETmJP9vmgFuY2Qzs"},"signature":"XEJl7ckohk4Kc62OW2lhsRSeRr/BtoewXRrgDi7fhaFcDEl8KBWYuthvje1rQlQeGolyDlTKQDV2ZYjgAE19eg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kvhxmvusrmfj3c7qj5675c5lsvf6vfnetz82af","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","daniil",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwIlV8TI742FJLkm5xZVpkb2/RtPETmJP9vmgFuY2Qzs"},"signature":"mNn+HdqCVhqdV63ytY/rOzdtu/jGcP/4cMk5tx+9iZlP2yBm765lVuAQ/YPWSaiePK6COVQOaO+j5YM6TYSGmA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kvhxmvusrmfj3c7qj5675c5lsvf6vfnetz82af","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","daniil",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwIlV8TI742FJLkm5xZVpkb2/RtPETmJP9vmgFuY2Qzs"},"signature":"aRLBq2i2cXY2kOiaEcCFbV+sDtxD6SffbL3E+4wxC5IvYsN7fV3Pc8o0fPW/yCEkqaez3RkSJ3zlF+SxSqemng=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kvhxmvusrmfj3c7qj5675c5lsvf6vfnetz82af","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","daniil",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwIlV8TI742FJLkm5xZVpkb2/RtPETmJP9vmgFuY2Qzs"},"signature":"rc5HRbdZy1lNi79XhfMBfiIRD8EKcqnyGKPwKEdJuoNeYHkngYzWCpjR/I64/vVgf22jZ5xis/OqmzOV4KCXWg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kvhxmvusrmfj3c7qj5675c5lsvf6vfnetz82af","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","данила228",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwIlV8TI742FJLkm5xZVpkb2/RtPETmJP9vmgFuY2Qzs"},"signature":"ZqIC+s+FNZrK5kWN8QAsEMGbxmEuJB8/IH/fDld+i2cL8H4pUejyJ/g84YzZsdtwH6Du02rPLsGQ2ODE3iyuJg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1279l46947p3y3ccnt6ls32s36tksj84y4e5v7d","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"cx+71JWSsAGQizEPgy6yMQ9zD7OM4mxoUgaTxu7HxSE9yEFpFm2B8FpgkUwJYjwG0dNFL4AS/xjLZIwTmnrEUQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kvhxmvusrmfj3c7qj5675c5lsvf6vfnetz82af","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","данила228",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwIlV8TI742FJLkm5xZVpkb2/RtPETmJP9vmgFuY2Qzs"},"signature":"MmvFSn3LpAHRZIs4zANHqAWW3KHP0Go3aOkngJNwJJcuVz2AKDdHWnCJjPfL/mbSF1U0g0Kdp+T/FOWY6UWRng=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kvhxmvusrmfj3c7qj5675c5lsvf6vfnetz82af","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","данила228",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwIlV8TI742FJLkm5xZVpkb2/RtPETmJP9vmgFuY2Qzs"},"signature":"+KV5tgvLD6BpxtVUQnKTQ5fPVbRwI3Wx7ns8SchJSNcug7Qi/HIna2Ni0C+BpRT1HGwEl5feak3v51hecs0urg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kvhxmvusrmfj3c7qj5675c5lsvf6vfnetz82af","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","daniila228",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwIlV8TI742FJLkm5xZVpkb2/RtPETmJP9vmgFuY2Qzs"},"signature":"WHl14jA1mzzvh3KnzOoCRnJ5bAVpX+UTbcWQLwR9xKMR2v8NHyu3fBTZyFcheu0KeoejQHFJ8qwBDtmYH02/lQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kvhxmvusrmfj3c7qj5675c5lsvf6vfnetz82af","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","daniila",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwIlV8TI742FJLkm5xZVpkb2/RtPETmJP9vmgFuY2Qzs"},"signature":"M+ko2Q0M5wX7s0T0lXIbmDxMeFr7NDmxEh8OJO6e4ktsdIWDSfXXmgoHztOSY031EXY/JGGZU/gQW1oEba8W7A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qh0ah6kzznnt762dr0zskqvz7k99w5mrdsejs3","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","guburi",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6TbUDhFm6efzKwnwPmPyo2dTXr/Q6YqdCAQskppBtiW"},"signature":"bRaySTxvgaN+3pqae2O+uhNmkeZOoVO+9mLm7cd73dgf9ccDKeTlw6lCK0Vnn4FK/W3kRhZ5QGhSGtHq0cXKDw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1jc65pas64ercrl67dfynzapcdqe46gm3y2cq5y","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"MnTBQyUgljwxOW13fGrdH426U8rxsJI8QpLnP7cIJz8b+yliRfKLywA1M61m4KHRYBPetSSBCA/eoKyWo/amHw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jc65pas64ercrl67dfynzapcdqe46gm3y2cq5y","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","tester gno",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwLRfsyxUNXN1yTwXPFjZA5m9GFM8uyrpVKuBLxv8zkd"},"signature":"HE23tbEw8sC4h3lfunifUYQrBxr5dGb6FSD32Atxik99nRczVm57JdRGqRM/OhCG++tp+PA9XljflK71oMMwZQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qpfgn2gwx30k975un5x67uyklhcf7h8248605s","to_address":"g1czgcgj953gn9csw5xzkh7796gs0ntcugfvfnel","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aj/PFOvI7nLTPlUpmfAqUrVTiwXnz9QFiW2cVHHrIhR+"},"signature":"f3mdcYWxrRz2Pdp7/6LN/pJ38D4ccZa4kI1E3O5hw3ZgPdS0/pimhXtM16qJmfWk4AikhHvBbJFK4dag0HOOYA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g100g62jsndc989t83u3r9w4p9ucy9kps63d8khn","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"eCETf6AHlh4XVm1x4i1fG5A8pClYv9BI5uIrux+aq01f0miTB3TDEkm2NF4ZnB6dwzlXbcr5DxxOdPvWDxBydA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kvhxmvusrmfj3c7qj5675c5lsvf6vfnetz82af","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","daniila",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwIlV8TI742FJLkm5xZVpkb2/RtPETmJP9vmgFuY2Qzs"},"signature":"fMx89CaEkFjHobbXbgOsBhDj8Ckquj6+xjpnrENAGUIa6fku1gpZHDrXtuMmrbeb25KIKr/uyA0xYo9iFwU61Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1sm0ncqzkqamxsgzxd85a6wwpr56lmg04ee8q5z","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"mg3KeRiJ/irCOXBbqQjlizBd/d8yJEeOQv4VbhSL05lJnvBrfixQLjiPO+nHgPzyugun851YPxl+eTAM09Yleg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1gjnhj9tv88fu5jaqlmz0tdx7lepy4e6f3fx6ec","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"haAPno+qKCDL6c3loEa4U/UTvd9CmqiLYVTdZ60+w2EK+kgtnIbs4vDbshJvLeMFM1l1XUOVMeQxQ66hKfAC+Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gjnhj9tv88fu5jaqlmz0tdx7lepy4e6f3fx6ec","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","daniilakey2",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4TFbR4dG8gFLq3kICpeJM/ZVgGuOK07PzVUxtqn6bIV"},"signature":"FvA9d5jHs1HtZBpqNh43eM6CRi28WXLs1b2X+5CYlf0QhsJ3VRbvx/9U0OwfYjZy7eUBrMPIILfTl+a2Db2Ikg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gjnhj9tv88fu5jaqlmz0tdx7lepy4e6f3fx6ec","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["daniilakey2"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4TFbR4dG8gFLq3kICpeJM/ZVgGuOK07PzVUxtqn6bIV"},"signature":"vwRKKYz7/sRNKppNLGovYJ7TiNhUOIrloAVylIHNroZU/cuop8PAg4GHz5NU18/BGg6VKC/N/OZVghBFEH3OlQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gjnhj9tv88fu5jaqlmz0tdx7lepy4e6f3fx6ec","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1259","GNOT","The primary token of Gnoland is the $GNOT (Gno token), often used with the ugnot unit on-chain. The token first use case will be to pay the transaction fees and reward validators."]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4TFbR4dG8gFLq3kICpeJM/ZVgGuOK07PzVUxtqn6bIV"},"signature":"rdaamF3UALADpKQYAllFUzC4jXvAYSdNkjAGlVHZXjkEzHYgGOEzv2JvfLyzhSNLVLcyHld8/nTHUEanm431gw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Faucet","args":["g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"v19St1tz7inF/MMIRH815utqavLhExa2Ag6HxzBzv88cG/GZC5QTLC0PbMCIupbcDeGpEs/ufPiIYYB3VGBz9g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Faucet","args":null}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"Q9wXsNrsTAnrwpXbynuNQ2mx5OW6vV4WHvw9sxtz/hl0Z0gxUK7JUnecAKYs7r2u8drlmfEz22n9dAEFTIJ28g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"BalanceOf","args":["g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"9hk/tXawVLqEhH9j9dwy6Vn87bwSO+LMzXeYRmgWe3Rt2Dl43XH9PXP7zEnHXDh97FrE5s28DtuKRqPgc0R1wg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","111"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"u1AX/ftaEuVDyEj6f34tzblkLAi8Sm1LFdg+jcm+SntMNF0GjQ2oAul4zeJnwUQru8KhMejOzDtLOyuLPT0u+A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qpfgn2gwx30k975un5x67uyklhcf7h8248605s","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1","2","2","nice to meet you"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aj/PFOvI7nLTPlUpmfAqUrVTiwXnz9QFiW2cVHHrIhR+"},"signature":"r8xd4bCP4u77PaC35DW4Svbr+7ioBFOjLgMg4F8M8jBmmFOODOaPDr5+LgLyFT0NUlUqngz8W5V6AUfZBX6bEA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"2000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"gyshUHeL1FXDjrxxcqjan4HSGr0p66zceziC5zGs0zgH9Rmwe5IHzX0YeiLgG/IbPrBqz0I3Xy3Rqq1zdMh5+A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","package":{"Name":"inject_test4","Path":"gno.land/r/deme/inject_test4","Files":[{"Name":"inject_test.gno","Body":"package main\n\nimport (\n\t\"std\"\n)\n\nfunc main() {\n\tprintln(\"done\")\n}"}]},"deposit":"100ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"Nnr9g5i/ir6C8foBqjw+JFD4PnsMbiIwJ3WawvP23KhmxaI/LIn6UXzm0pe9wr1yn9ZEhFMktLtD4Hl5SSTpSA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"CHW/mII5FeF/taR8haPVskb0uzbwRx0f4P830aRWS5JdS+uTTIw5rzL40YfWfv3LxM8rUTlmOMzILbBPVKKPEA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","1"]}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"AmWfhcPx0zc+aLJuBmc5OPc6a20iE4fKnvWa2+A6uRoY+BCY+CaoSzMWnQHfWbnR7XhA3Z04w9GtY9DU1cgIhw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","2"]}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"dPMsoo/RTioU+LLo+gsn+NVrNK++s3aFKzfSoNqpq4w3fwf4by3vBubueiO6pgyz0ZuE928FfZx9WHCe2YWYSg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","2"]}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"DN3codg7tiFWTetMi7onE94y7hx9Gz7cYS4vaq3tMO9TJTCu1WDkUgdXHc0HfvDjx0RDIqHVDU7nsZVt/MjoNg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","2"]}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"Q3z0ZhFdxht+kvpQ6iYNaAwA7M8g5zEaemiA+GZ7xSc3sSPUlGfBI3D9YVQ0zw8yrKWvchV7KsYstau/3RM1Iw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"AdxTJ6Zj6PK1kdXcqhgY9ZNROXyyTwHxXFdfq5yvKwZLUCka4QIrH6+XPGg+1VgIxk1Z02F2N988bifkYRipjg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","333"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"2vtYgZl/ZQPuKeZj+lLvjHFS66vK3MyhxcfeZnYc4IxTL732CEhl47Kr0i2aMJ21kZbNuQr0M9ePGyoEt+dRFg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1qvytrvt4fsukde58atgmcmv8qrns5p2a8fttdt","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"rfdPbYHJNyPoJ1Pp+m7Z/AEInq5TEoXpZZT8Pa45JZwafa2j2G1eI2WdAbcKGFOgzsrXBlLsDNahEysZSt2eJg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","package":{"Name":"src","Path":"gno.land/p/demo/acl_src","Files":[{"Name":"src.gno","Body":"package src\n\n\nvar BigVar int = 1\nvar smallVar int = 9\n"},{"Name":"src_test.gno","Body":"package src"}]},"deposit":""}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"9eZb10MIEbhCgL+7mYell5/lXGd2YEmzi73VcGb/a35uEvO4fviJsc1Or9pHHMPZKOtn/Zexl8oJ0+C9OTNGrA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","package":{"Name":"dst","Path":"gno.land/p/demo/acl_dst","Files":[{"Name":"dst.gno","Body":"package dst\n\n\nimport (\n\tsrc \"gno.land/p/demo/acl_src\"\n)\n\n\nfunc EditSrcBigVal() {\n\tprintln(\"old__src.BigVar:\", src.BigVar)\n\n\tsrc.BigVar += 111\n\tprintln(\"new__src.BigVar #1:\", src.BigVar)\n\n\tsrc.BigVar += 222\n\tprintln(\"new__src.BigVar #2:\", src.BigVar)\n}"},{"Name":"dst_test.gno","Body":"package dst\n\nimport (\n\t\"testing\"\n)\n\n\nfunc TestEditSrcBigVal(t *testing.T) {\n\tEditSrcBigVal()\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"hAo1jDFpmwl0Qlfkyud3N3uVHz96kD/zpNHAzwBNlcFJ3hIO5I2tg0hD9GvXT5ClvSF/4WRXO066RYrCc3uRmg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/p/demo/acl_dst","func":"EditSrcBigVal","args":null}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"1GDD/m9TrsNnTg/Mf1mUIDTVivf1bKFuQmlk+xc/Qwg1jD+A9yuJZB5of6GNRffRDf1/yha5gRC9Z+HYBNA8BA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1hm7f7sjmlmzqzavhcaqmxzh4nah0m4kchc2ue3","to_address":"g1s00kdfz98mjwztfwquk06sag8jdpfslyv47efj","amount":"67000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9gNz/EigAmuvt/50S9KqTWyZKg1OIoZOnEg65xOsqkV"},"signature":"TzvkRpgKlnaVEmSzq6/2nGUv0E7UZ3hOuB/jz684B3IU5hC58Q6vSTTHeyZ1eNFTqNkzBa/yNQIxLGbfH6T9Eg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"990000464ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"UUpEQPE+26o7oSZW6x+izw9iER24eLT4xCeadCmZ6kQBNbw8jLlAKIAcQD7ER8KcaO8WKbJ9mfz0r6hujyWuNQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1t4du52tfdfcnsrhlkfxhulr3r2a8a965zs07tx","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoWl1n0gPDWHmsIdghOux9H5dKTvm5LHh/7c9EXMTS0y"},"signature":"cDenEuMVwjRyGXWo9sb9bHoqX2WgrnsrSxhANvpFbegrnxEwyceJRri/g5P5hE+JUXsKCvfiQUEFP/lP9fNO+g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18fh8kd3nq4j335dshdv9m20vugptnsun8cn02v","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"MVicLDKS+euSEOKvZBozcrhyZ3TOYVKyp65cR4I3biFQFufl12zeoZoYryLiAzF4bE72XPcGVRV9KjOWk10OQg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g18fh8kd3nq4j335dshdv9m20vugptnsun8cn02v","to_address":"g1ghjt2zplcg67372s0y3nsn3ww9034g6h0tj7er","amount":"100000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApSXmxFF9hhXqeuqfS3u1tkrBqUmtT4iWSrVyAfa9bJS"},"signature":"RypIoj5tj0Dc/rogRbfM598MqBv3dq4u0FSBGkH0sNRVMFbtjedX/dmZ/+LF01NedRClBE5uhZHCUvZ471l9Xw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1h7kpavpayq6sm5s4a5y90kfsvj6ytmtkz2k26j","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"4GQsWnCunZHxK8g58i5OfMx38C9FgyB4Gps4K0/xYrE5rv98nSdSLCpj6fmyLLM0v27xXwKky9cEn9VnDnK1Zg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"gQcSSieP8ZLIEinMWR3nGp6Qtp88IZOzPZ5Tga6aZ+sw0rPREMGjxSzuf00Lz90B607ZBGZYT/URFHckHyfgJQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"86xJuDndt8JTR9499NQUu7eNWr3Q1jyWcnYq04ABU5MtFICwzQseGyycffznF16fI330tMoWJJ2dZQ+xMGc0Ng=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","1000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"pDReJAuXeWR/7nhF+m59Pri5j0TVxYBMvsPQktF7b8gRh4IIQlYIbskFknZZJWWB+uIB+/MuAkz/lsu5q8s2hA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"990000462ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"8rLUiFY21zLKC2oK7Nt4XWPqPh/mq8A5mKUw2V0ZptljTD9i5qhLeC6vSQO369VIUf2WzL0/CAKFuAcEbI8s9g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"u4664X8foNT8Bi5X5E1LetzROWlpKv4+YNMVtLvwWiJoWCLTKSlHGag1SdKaSjoTWYHKUQIjO6URBjCBSnt+DQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1maq7y4t97h82v0062rxjq2akqxsm3kck5paswg","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"iVDSZ8+IRUiAIaS++R8dhG71vmrj+AKFFyBf0AiG4+QYchw1moLJSJ0RWunnCdBlLzScxQ5Eyj0hNjgLlQkkjQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","999999"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"sa0r9MRnmdfjN+MvuUodrdLCCm85B5j5AuuGAXXKZ9lSi7OWXVg1XX9Ss+JGyPNc6Otmre1AT5p7wciBpNMn6Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1maq7y4t97h82v0062rxjq2akqxsm3kck5paswg","0.1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"DeB6lniBQOfVZJv6mPP7zyp0jmUzObX3kaTN5sX8br4iHgLNM0k0HJm5z93ck5WO34GnWwWPDEg45BMta2gitw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1maq7y4t97h82v0062rxjq2akqxsm3kck5paswg","0.1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"npiH/tlbbCMaIeLogptUwUJdRIE7syvCqQC3vrzjKx8Txi61xu4Jnr3emh8jBYVI8fQxtxYgFfzCT2Lf/O+NOg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","0.1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"8x0yZL/fCcchnKTfQAHjpe+GqRj3RpH68uAhgyRxDFlpRmMbfw2INCuIWPIr3RbB7SFl9aJJ4ui/s1cc5itkyw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"H5UcPHgTkq0pWmLOgJSN2Txw3x4/eVdiFklK7yNoMKstFva9V8ugUgqmIW/HFik4avKOlUbJVqNest89OOZZWA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"rRrHriVOQ2RgS+L9Vp+bnfcjTX2Zi/BuWpB0Uz799mgO3VNwF5+xzb88juhqAah52ufGc9cYcV8WNC7TJCppww=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","55555"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"rmucYxj28Cw3VE3dN0EaN1AqLVFHpz+TvVUbwO6xFO57bXrQjANJUE/LBs3d2yns8f8aNXD0rSsdWYPXm/Bziw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"251127008ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"8zd9EPFJyR3qV9zwzHz6Ff6xv5Ss3Z3vt9hvBrmD+Zh8ymJQfymltrUjK2YmacsCTZs4ZE2lKo/mPyZWW2Is1g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"hello","Path":"gno.land/p/std_test1","Files":[{"Name":"hello.gno","Body":"package hello\n\n\nimport \"std\"\n\nvar (\n\thash_str string = \"hello\"\n)\n\nfunc Hello() (string, bigint) {\n\t// println(\"std.AssertOriginCall()\", std.AssertOriginCall())\n\tprintln(\"std.IsOriginCall()\", std.IsOriginCall())\n\tprintln(\"std.Hash([]byte(hash_str))\", std.Hash([]byte(hash_str)))\n\tprintln(\"std.CurrentRealmPath()\", std.CurrentRealmPath())\n\tprintln(\"std.GetChainID()\", std.GetChainID())\n\tprintln(\"std.GetHeight()\", std.GetHeight())\n\tprintln(\"std.GetOrigSend()\", std.GetOrigSend())\n\tprintln(\"std.GetOrigCaller()\", std.GetOrigCaller())\n\tprintln(\"std.GetOrigPkgAddr()\", std.GetOrigPkgAddr())\n\t// println(\"std.GetCallerAt(0)\", std.GetCallerAt(0))\n\tprintln(\"std.GetCallerAt(1)\", std.GetCallerAt(1))\n\tprintln(\"std.GetCallerAt(2)\", std.GetCallerAt(2))\n\t// println(\"std.GetCallerAt(3)\", std.GetCallerAt(3))\n\tprintln(\"std.GetBanker(0)\", std.GetBanker(0))\n\tprintln(\"std.GetBanker(1)\", std.GetBanker(1))\n\tprintln(\"std.GetBanker(2)\", std.GetBanker(2))\n\tprintln(\"std.GetBanker(3)\", std.GetBanker(3))\n\t// println(\"std.GetBanker(4)\", std.GetBanker(4))\n\tprintln(\"std.GetTimestamp()\", std.GetTimestamp())\n\t// println(\"std.FormatTimestamp(1, \\\"\\\\%s\\\")\", std.FormatTimestamp(123456789, \"%m%h%s\"))\n\t// println(\"std.EncodeBech32('g1', '[]byte(12345678901234567890)' )\")\n\t\n\tprintln(\"HELLLLLO\")\n\n\treturn \"res_str\", bigint(123)\n}\n\n\n/*\n\nstd.IsOriginCall() true\nstd.Hash([]byte(hash_str)) array[0x91320DE1A87805C93C8FF5BE268A86406DD851AA]\nstd.CurrentRealmPath()\nstd.GetChainID() dev\nstd.GetHeight() 123\nstd.GetOrigSend()\nstd.GetOrigCaller() g1wymu47drhr0kuq2098m792lytgtj2nyx77yrsm\nstd.GetOrigPkgAddr() g17rgsdnfxzza0sdfsdma37sdwxagsz378833ca4\nstd.GetCallerAt(1) g18p6su7e40fpyudgcgfx65gch6trdzt8nyzetea\nstd.GetCallerAt(2) g18p6su7e40fpyudgcgfx65gch6trdzt8nyzetea\nstd.GetCallerAt(3) g199ugqdxfx3dut209p0q6f078fw96dwhs9cddff\nstd.GetBanker(0) struct{(gonative{{0x14000314388}} gonative{stdlibs.ReadonlyBanker})}\nstd.GetBanker(1) struct{(gonative{{0x14000314388 g17rgsdnfxzza0sdfsdma37sdwxagsz378833ca4 [] 0x14000128b58}} gonative{stdlibs.OrigSendBanker})}\nstd.GetBanker(2) struct{(gonative{{0x14000314388 g17rgsdnfxzza0sdfsdma37sdwxagsz378833ca4}} gonative{stdlibs.RealmSendBanker})}\nstd.GetBanker(3) struct{(gonative{\u0026{map[g17rgsdnfxzza0sdfsdma37sdwxagsz378833ca4:[{ugnot 200000000}]]}} gonative{*tests.testBanker})}\nstd.GetTimestamp() 1234567890\nHELLLLLO\n\n*/"},{"Name":"hello_test.gno","Body":"package hello\n\nimport (\n\t\"std\"\n\t\"testing\"\n)\n\nfunc TestHello(t *testing.T) {\n\tHello()\n}"}]},"deposit":""}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"fUdMiCVhwH0Q6JY2s4JoNqzm7Ot7P09suRAAvL/YSeEaSMUsVUs8LG3zs4C8cGzlN5gxpf5HtsNn2KFmATJ/Gg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1gnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"bnhjzs5SP8cbVdoH8+g2hPGNsZYd7CTXcINHRXoBzUNpqja9CpLjzRNZ9XLedaSEbWUy55uRCjG0eBaWUW7fSw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"xNZ3Jc9Fft2rqoN5Rk7u8uBUFA82WKXrAcuwxabdbLVqboJCRwRGp1QHIpD7hU9J4K4O3w4cOKFE23a/IcfCog=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"djglze2WkCWIEwVqia2+yuAA1KZNHwBdgR+k8ob5ZbkGGsl8jB9hUGrUpiZOcBWUsZgrMaRDlVcekwklnZLDCQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"2000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"RPIq6OW5QeAgNcwG6RZzgKMiMResObfVBViiHBs7XxpvjYcRv90h20M9qRphPlTLm77uJs6E0GGwskda721VAg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1fnakf9vrd6uqn8qdmp88yam4p0ngy572answ9f","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"2500000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3cWVULHSHC1mwK8o1vfJHKfNMvLEvKU/sHPQoFWRoey"},"signature":"b8hPZT4ac7ETIcxDl6yTe+r4Rhk6XRm46QlCv0VmQ+BrNpKCfOVRmNlfotm9nnTsQrpuPBh44SjQSrqJFPCgxQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1wehlwqnsjhlufmztnuy6cn2f9kw7dk6g8xh0uh","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"pirOKsUB6LP9De0BMSNTeKLQuCCV2gDjZn3AH+3HJC4Dqsz6bTJD7KMcCBTLwFTvdztMbmQLKIkEyrRYBV5MHQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1u0as80r52axwt36frcqwaqtdlw07a729mu83f2","12"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"UtCQfBfTXzJhzb13j7CHTMc9dioOaIoMlZ9a8pDraAxJoWDFrd/ELqcXL+4FVkNsez+w7ZI7BfxLqDhOeQnh8g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1u0as80r52axwt36frcqwaqtdlw07a729mu83f2","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"n3DmeUptj6ceCjiEq9z7w+hz/ama1SrH0E+ibt6EolUCVt0mVe099wB6ssCx5VCZDb2OPIwKwGvmfgIf1uj+YA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"14230571ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"mHnBN7JxVS2ZsQcuryIKnwAHnm1C0NPAaU3ZUvjU228Mh0fYAd16BalCtuoTWtoy8xZBStFPKmxESQahTKrogA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","142.025081"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"qFYS2+bMr2TLcEPXG9QNBR/rJ8dtGrVSq96L129M4ORw/3rnKsEJgyKttEqL7lZIurkFbpuVDsYc0k2GIyfHWA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1021017005ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"p5vxaS4xIbitGaKHqtbuXpJfRfwaW84gTUkTcSN6FoNNzG8nHt45r20quRnTjRXeXEMMUYWWRdVo7RXwmXAI8w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","2"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"P4GRjY+Rq4AgtKrZa+vgJ3QkqMapRxdWf2h1XiR8lwMvzT/V2xm77hTMS21+cXbyPPNA1fvwbtv8hZ+KKzcwHA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","242424"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"kng1F9xQR80zsute0GByCNNI2kD62fbKdVWMDwQudA4BzVuAdPFTFoOpGmnST6L7Yu6IeuJj+rF/7fs1z5U7yg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"993000459ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"2jXjyXxBOK442UvTRq0bFzHA4lbQoPFdxkdr0PaMzItCWVFkOCq/fETU9f/ZCkKJ5Y2ZyCMwWDT6+90usEeH9A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"lRrZGnAxmNyhiCWJ2WrKdJv8oKtTxB6JDrX8gokcpXIrd4Ob/oONUfW+q7aQc0lvgQ4H/ExUgJcHGg9yek4Y7A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"144000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"4urryKeNLP2MayFpKlytczGoiP0zrwOaaNYcMcfypmpoo8EllvEmkVfKtpyPEOCUamOKHAhmXmzhjUhjQK9Rmw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1111111001ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"r4LCrcOH30TF5U40VJUd5b6AKkWcQHPARJNMtQ9Km3woPaHf4fxLK3oG3ZfpW8d71nArjN0/zpc2DT+kaNQszg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","122"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"8OHWSGUKczJdIf6nLh3A9NOf0epeJJ4R7vTid7dwED4LlHO18mi6z7Ii5uwkXMuZOjBxOkTsoW+8pI//LxgoMA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"10000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"yvyeIKhTxmPvhCIdBysQlbDhdXzE3BPYcgmiNvkbu20l4teThvxXP0trBpGiMyaJ1GSZ+3heW5h7mOiGg5vsmg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"MXhNcJz08oXJUrba6mY15yFiqK0d2eBpilxj5vngoT0dwEGmGJyRkB1kBHYwT/UQar77OusCkLWqtSAHXKISEQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"14000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"RY/HyvcxW2agxHmPd6pGjr5CM0Tj1F6GVkTFKJZW/PkrJjGPeeXMo/ttZfOPtmk7S8xfcPcJu8UTuKiWPMNyKA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1t4du52tfdfcnsrhlkfxhulr3r2a8a965zs07tx","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoWl1n0gPDWHmsIdghOux9H5dKTvm5LHh/7c9EXMTS0y"},"signature":"TrL7DGHJcjKYRzO/OI4YsDXnS9r38naHAg9Avy9Q1ZpopEGcnAJJwrblz68qEQbffmSnPla1LU16oV9esu9wFw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1n7eukpp2nshzgdtcs452l5c4as749c8cappe8u","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"tBjXWSCxCje7o3mzxbdmAVIBxwCBGp4Bdknl+P7ev4ce3ds8EYXxz3gAcJo/t0SgXTL/AX5mFB1X161EGXcz6g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1n7eukpp2nshzgdtcs452l5c4as749c8cappe8u","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","preadamic",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6QNQ9iFLoLRR5kYgW0+w55O69Pz8HA6UTbrKpbzjH1v"},"signature":"r8S3ahdSjfXXQ+btHpHsqYobcqZMTc5O8LkKRNipkhInB0Ek6O9aBjb5cnjnul9OtOCho9+Nzugla3sB0V40Tg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1n7eukpp2nshzgdtcs452l5c4as749c8cappe8u","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["preadamic"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6QNQ9iFLoLRR5kYgW0+w55O69Pz8HA6UTbrKpbzjH1v"},"signature":"Jq0s1N5PW6EFV5HEx+PlM4ws8RtlzEdo3yBOt9HtVdF6TXrcuqRrESU7uMbqq28BwxKZoKkDYIaP8t7zDyNxPA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1n7eukpp2nshzgdtcs452l5c4as749c8cappe8u","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1260","The evolution of blockchain technology","https://medium.com/@alex.buushko/the-evolution-of-blockchain-technology-has-led-to-significant-improvements-in-both-user-experience-16ef826ddc9c?postPublishedType=initial "]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6QNQ9iFLoLRR5kYgW0+w55O69Pz8HA6UTbrKpbzjH1v"},"signature":"KlPqdHem8giedSIgMkfUbZJLyIlhA/5G3WfZlDY4C+9SDWDCYjNmG/O+CD3e/ZmdEnacfEayq5y6Sp4gzj7hsw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1k2g84d9wj0myvzs3ue0j2heecrkaq3kwpen06s","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"NqO/tdoK9atnYqHMssHikbHyaEkUHk6ED2qouq/FVK4q2D06yX/r+AJ1Bw1MHyMz1C5fRfGgOe4PXoSYQ4ECsg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1k2g84d9wj0myvzs3ue0j2heecrkaq3kwpen06s","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","myrmicine",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/XRbOUB96yVAYL7nwPs310UzgMn58ZxwCnzkFq4eTAF"},"signature":"phMa3BJzSrX/eaw9FY2NmK94gYTuAfIFGmLeiTUw8DRXQJ+ZBWaWeLPmAATLnaz/laD4S7uUyD/HpS8JayhzkA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1k2g84d9wj0myvzs3ue0j2heecrkaq3kwpen06s","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["myrmicine"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/XRbOUB96yVAYL7nwPs310UzgMn58ZxwCnzkFq4eTAF"},"signature":"VStrsHlSXWpQnl7+kt0ylB1iLJrq4AGUzISBQyRIv0kzd4fiDGkyUxB1DBJKHjiCROM84dfPPR8d/xWnXLKSWg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1k2g84d9wj0myvzs3ue0j2heecrkaq3kwpen06s","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1261","Smart contract platforms function","https://medium.com/@arprutenko/smart-contract-platforms-function-as-decentralized-virtual-machines-operated-by-untrusted-nodes-5c1abcf2afcc "]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/XRbOUB96yVAYL7nwPs310UzgMn58ZxwCnzkFq4eTAF"},"signature":"GWjoMw121PY+UqwNqnhSZLqi2ZSgg6WVsMXTd62Fu6QnKEHmXfrAf8oAxufJPFKoIXgvxnE7uaY9yzZoCETdIw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1sg2rvnx0gxfcgg9txe4vz2ufzy00ujtdzp59wc","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"yfExMJjmjxFoxTjA4c47s9KCh82c6FeowY5FUnWmtlgVVsX8cyYtGZh3EdrtTieZVviV0YMuiu7N5s0RvKcYSA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sg2rvnx0gxfcgg9txe4vz2ufzy00ujtdzp59wc","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","madescent",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Asb6Do37lmuX4OEBAb/mAQWgv4nU/vBsMPVHu8Ys9pm/"},"signature":"HggYoPxbxy1QFXymiXr/naWB59RMdFKFEBuKXJUWs5M2zLioQEDezBkniRrNeC6EPOuv+bbTI60Vtm1sfbWwWw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sg2rvnx0gxfcgg9txe4vz2ufzy00ujtdzp59wc","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["madescent"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Asb6Do37lmuX4OEBAb/mAQWgv4nU/vBsMPVHu8Ys9pm/"},"signature":"rFbaAGVK5cjvMOHUw72wR6Q9+RvdpczLb0dJk4lsYXko3OCX2j6kegZGtbCME93kTwaeT2LTjt10Eoe9QuR4NA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sg2rvnx0gxfcgg9txe4vz2ufzy00ujtdzp59wc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1262","Most blockchains currently available","https://medium.com/@sashkafalion/most-blockchains-currently-available-operate-on-a-single-thread-which-can-cause-issues-with-4725420189be?postPublishedType=initial"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Asb6Do37lmuX4OEBAb/mAQWgv4nU/vBsMPVHu8Ys9pm/"},"signature":"Yy4zQbMZBCpX25OMr9VsTwSNCmZmscsgqGlNT75EGDEVeiRdzkuxGq4Gq/5SLfVxJimw2jV2yO9NfgxGvkRsSQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"45000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"9zT6TCr7pUxOFZkvTxSURrULJ76mqzu2L9cmCcFm7e9xArx0vylRtPXRhQrwJj8iA4O2ce2PIVgX1PBZmT4f9w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g19terucph2thrms24gaaz4e7cjrm9n9kl9yfu5j","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"js7XTi4ECiOwJ5r023ltYVeeifJ+tVxfCzFYJsu+0Yp1rtANRomRfarlzpkaUuyO/bImQgQPjXkIBSeen4WSxw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19terucph2thrms24gaaz4e7cjrm9n9kl9yfu5j","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","synaesthesia",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnFN2kgNVxPpBLiNRChxRXsGnIrs44VFVt60/iR+d4NJ"},"signature":"5tlBhoLMu77QzTyS9q9wtIZI6P8Na7ekq1RnpesgbwUbRjV2ANJHLZslUVruvEpVdhoSbSi8mrsnQnLsCsUSMg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19terucph2thrms24gaaz4e7cjrm9n9kl9yfu5j","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["synaesthesia"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnFN2kgNVxPpBLiNRChxRXsGnIrs44VFVt60/iR+d4NJ"},"signature":"M+LzEp6KP7SIULZnygMUg0QC6XBSAVa5GQAmn2D0oiNxxP4l1lb/paKmtFpdI908+WGAqLqqDhKLscJb5kjoIA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1paqd687fgs365pkx5fnaus90zgclgfzejj4jlh","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"amhXmvskyVEJb04EUTkw+oXxSMMudGi+i+gwmbxyVql7pRfeoKDcbLFngQKrfUtjfHWNEZDeZotTtMYYl0e8Zg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1paqd687fgs365pkx5fnaus90zgclgfzejj4jlh","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","amphibolic",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Apyjju3yVoE6VVn+FeuqPrrtdqNRDvP9iPtka3z8/G1U"},"signature":"6JW77IAuopWc7m5pPyADdmaijqHnJM+oM5feBuBUP+dR/m48gQPJ5O0kzTTMYXMhGm0OpaxkOtckmqmMWn/poQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1paqd687fgs365pkx5fnaus90zgclgfzejj4jlh","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["amphibolic"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Apyjju3yVoE6VVn+FeuqPrrtdqNRDvP9iPtka3z8/G1U"},"signature":"CDWPx43gf9qI2QNpik7ANbYZ910+aqX7EMX8dww21gR6PlwCKcs1MqFhx89y2j6YvBFEkiDBNdsyimvgF/GTaw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1qrwpv3p0rxpc02n6kt9mwjr77z0n9ye2dh7gmp","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"CqoqmvuRXSCMhFyEtLXDjP0hEecY53weHsjGb3GXBUJnru+cF2HmMfYh5RsJbuQfQsrQYGwzTVuKiST/DFXQUg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qrwpv3p0rxpc02n6kt9mwjr77z0n9ye2dh7gmp","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","photopia",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AknRF2cbFn2v31fWU255+I33s8Cvk/gSTRuwEi1wUab2"},"signature":"ApjkL24Q72d+4hku3jK+dY3XgNBdL0p4fqi4VkOGq+wesk6BkpOuOuuezFb8Kb540bmSDM4rmLaP6oK5g7f5zA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qrwpv3p0rxpc02n6kt9mwjr77z0n9ye2dh7gmp","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["photopia"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AknRF2cbFn2v31fWU255+I33s8Cvk/gSTRuwEi1wUab2"},"signature":"RrGro6ti/5jc6J+S1CLfCzVdwQYe9Ws85iBmgkL6xu4X2rskAX4eR7fumM6VWowDbF6I0IKX5nPm+4nLbSghqA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ez74qp42mmrz3ujkdfav6p04jxd08hvuk46pdw","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"VZfKyjb0BkN/yn9GhmvAcJpc70ddETdNohMwxWlZS/Q143XdtIGNd9fXC86BnWs2X+ZDCYkTe5aolXWYw3qIOA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ez74qp42mmrz3ujkdfav6p04jxd08hvuk46pdw","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","sacculiform",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AntEvXnIaHW3JClWA5mx8YMWQaaQIPlV2MoQxfmb5UoI"},"signature":"7x/d5YjG2KYKXlsmlJxYi8zOXTMAsK9i1l/goRP/h5o9TozxPQyaAbixYN0vO6YQS3sd7J5L/wDES5gpmSO74A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ez74qp42mmrz3ujkdfav6p04jxd08hvuk46pdw","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["sacculiform"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AntEvXnIaHW3JClWA5mx8YMWQaaQIPlV2MoQxfmb5UoI"},"signature":"f9fvHAMKrieWQi8H7vsh2bylqu92PGV50ob3yWj1uyoaRAptJpdj138fm4LZqufImiZyXeZ+9vb3b75l06JR5A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1gmxxylnmm6r36mykag5mnexqjyrqg4pnfr6qul","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"GjqVOe5N2ElAlpl344Nvc8s+10Vqannuve8ylPNNRLV+HF0vJRsD9FdpyhNxbT8D4uKkZNX6Ke3xrrLS1pPjLA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gmxxylnmm6r36mykag5mnexqjyrqg4pnfr6qul","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","polemoscope",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3WW225KSRjhDw/EFLviwUxinA8RSQnXxt4zvvhkzIrX"},"signature":"wz4mqPgvElGtz2lnGdj8JO4zUjDAOMhStKWUAVPdKcJSLFNTcBEPbxhmI7JJKwpPpV7DQ+aP8ir0YPgq1h9iRA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gmxxylnmm6r36mykag5mnexqjyrqg4pnfr6qul","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["polemoscope"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3WW225KSRjhDw/EFLviwUxinA8RSQnXxt4zvvhkzIrX"},"signature":"cpFx7Fv8hKLiqLuGFP75m1+ED9TAkfH2lUuuYO/nJdEKWAV5VmANynV3ZD9wMnq/59jATCqRIPb3l/Tmnb0QNg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1dm4r0hh7j363guas3eehq02t5fh2f32d9h5nrt","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"5LCtXQ8385gJAKZc/0u/8HHUXrqzB3KOuQWKoDyJPiYmeN2b1Za6al/tRRMIgYfFN0Mp6o7JwSMrKbmH65zNrA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dm4r0hh7j363guas3eehq02t5fh2f32d9h5nrt","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","mousseline",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4T4TxRrNdRSg8rezPXImKTrbPF/ZiD91DGOrmAqmnPa"},"signature":"+hFnodFWzNE30n1KAZ8aN630Flgx9S9lwZ3raSKYZks8JKnyu5LxBtej3gubIX80wAdz36TNOJ9fKPi4Tg5u3Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dm4r0hh7j363guas3eehq02t5fh2f32d9h5nrt","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["mousseline"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4T4TxRrNdRSg8rezPXImKTrbPF/ZiD91DGOrmAqmnPa"},"signature":"pJMYaDVkvbV0Izzt87J/OwFxgCHWiufOCxxQ/YrBeqhK6Cj/BKrR/rXHSSqtCfIpYcklhc/Bgg6Ohhp4AHsh6Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12mwajrqmkxr6z07r8l8wkmmxlpsrsqhrheh53n","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"fS9n2pm6sSlmexvaVXLtyHSV7J20eja/jpdWgvYUGYYgdVLu4Pycb0JciP0YhhMNrdQlpC97qrk5vMLaVNwY8Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12mwajrqmkxr6z07r8l8wkmmxlpsrsqhrheh53n","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","babirusa",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwDwqQeRjs83LIG++ttY8hiagQ0UURYknwZJ66issUkJ"},"signature":"O/YH4EfjSnDIi4NGDSNO13UtxCWW7betv5+Wk6elhQQscYnhDBGwzDugDWWBijU3XZSteHa2WQYMCETOfWbXGg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12mwajrqmkxr6z07r8l8wkmmxlpsrsqhrheh53n","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["babirusa"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwDwqQeRjs83LIG++ttY8hiagQ0UURYknwZJ66issUkJ"},"signature":"zyMEVzYhk/M5Dw1wdVzJwDwHHgWEEwbPoQ+WpoHX+Dp16ef6wM2vwnHFVvToBHftMFW29EFWBYSjDxHMlqh2Sw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g16wemwpekhn8e6467t0dynu4dcd2dsfhwarz9l8","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"YKJuS5oGlKFNclTC4dCCXNVTnYD3lDReRNy64XU3WqI2NY/PRSyl/YooDLeMfvmvHpdAOrKtAP1xMH7RaRhI3w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16wemwpekhn8e6467t0dynu4dcd2dsfhwarz9l8","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","parvanimity",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArXh8k4mTmeidT/XF6iNDJvIYElvrCXUaBO3hhPlk6Lo"},"signature":"EcQO5twCaBb9UlInhN/ZJAHxRAusCptoJW0+KUpPMsFyVBP8OYKfeyIup9De+xmdz+xiElQ+ihEUx7VavpMxSA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16wemwpekhn8e6467t0dynu4dcd2dsfhwarz9l8","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["parvanimity"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArXh8k4mTmeidT/XF6iNDJvIYElvrCXUaBO3hhPlk6Lo"},"signature":"k8FVAhcNyZho30XrKBeiTbBeDxDoWvIccfOduqobneNbF67YwLMCr7rrAKBbVCWZQuK2MJoTB/vCnzqkdsAZeQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1pudu5yx0w00fv5j9svgpghlhsqne3kgd9jg4ka","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"W+G2KD6B+6qQPv/MZDH/+47afyRCZBVe0/sAqVpgVI9GaoLuiyPtwk7Xag0lokxp3QuNWWPX4YO+RhEmeR+M4w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pudu5yx0w00fv5j9svgpghlhsqne3kgd9jg4ka","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","outcross",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxbbnCjH2Zf4jf6POFzqRz9HfCMJhcUjItvqPzbfux7a"},"signature":"TY2Mm53CSQgroxWC3cCYBxS+GcRiITtOc2Hd2jstQjduGWmWGMbgX4ZtyMqj9kEMhfOF51g6uq96OAbr28/QMw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pudu5yx0w00fv5j9svgpghlhsqne3kgd9jg4ka","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["outcross"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxbbnCjH2Zf4jf6POFzqRz9HfCMJhcUjItvqPzbfux7a"},"signature":"UcrnBO/OsSpe7fEEIR/4hsQkzpmsehPk3sO0UCOjvZdYJ0uCg37xdIFy7OFU/7BZZv09yC5nldylf2ioXFd+5Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19terucph2thrms24gaaz4e7cjrm9n9kl9yfu5j","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1263","About gnoland","https://medium.com/@prokoopenko.nz/about-gnoland-cc0bc78020eb "]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnFN2kgNVxPpBLiNRChxRXsGnIrs44VFVt60/iR+d4NJ"},"signature":"l9Heap80UWfM4HqFzUvFf1pDc5GOAeUIOafCt8FBc3lWt1QElxHbl6GvlnhR+o9h4mfyAnxV3AvNnKlIO0NZ7g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1paqd687fgs365pkx5fnaus90zgclgfzejj4jlh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1264","Blockchain is encountering major obstacles","https://medium.com/@akex.korni/blockchain-is-encountering-major-obstacles-that-are-causing-issues-for-users-of-different-platforms-f82d67301434 "]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Apyjju3yVoE6VVn+FeuqPrrtdqNRDvP9iPtka3z8/G1U"},"signature":"ml8kKd4yBzsZ2pNiPeDnaPMkaKu7uKvzx3c949MEQu1Q++krEfEgM/nhthpt/WjMu2mM2Oduto30XHBuaFDU5A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1g7lyw0m57uwxhjvz20jl94arqtl6xkyujhy970","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"1vi50u54hku3uO8vSaJwq2JWZM0I0cASGAMdD4AV0AgaaMCdigNv2Fhu8yLPrJrmNZf1woa+ABfEBXW1ukC0Ng=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g7lyw0m57uwxhjvz20jl94arqtl6xkyujhy970","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","almandine",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Auvm9qcLSzup2ePelH97TGn+XsGgdQHf5dbCjAeF03tK"},"signature":"Jdg/dRUOgyTjrcVksMHg6+H/UcEyHB3q8Vcprsl6wokfFLNk+0dMLp8qyKTMxYzGuUJmazX9D9DzIEMCeYgGFw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g7lyw0m57uwxhjvz20jl94arqtl6xkyujhy970","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["almandine"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Auvm9qcLSzup2ePelH97TGn+XsGgdQHf5dbCjAeF03tK"},"signature":"0IhnsaQdT84D5E5a38bcs5CKIKA1+sWy8ywCkcrj+L1P9mTXHzMKNJq/yiPUKOW4Zn5ymtgXXTmD3aLYziYTig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16wemwpekhn8e6467t0dynu4dcd2dsfhwarz9l8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1270","A litle about gnoland","https://medium.com/@maxik.konok/a-litle-about-gnoland-96087be07125?postPublishedType=initial "]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArXh8k4mTmeidT/XF6iNDJvIYElvrCXUaBO3hhPlk6Lo"},"signature":"MO4yyMsZPD6tx0dO3NMqlealdjYsB7DvTVxex7m56v9cz0P+UTUTUtK39yfYUuWNhfKcOCx5PjmEyOUTIZslng=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qrwpv3p0rxpc02n6kt9mwjr77z0n9ye2dh7gmp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1265","Gnoland","https://medium.com/@goordoleg/gnoland-e503a7443ce9 "]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AknRF2cbFn2v31fWU255+I33s8Cvk/gSTRuwEi1wUab2"},"signature":"Lc+5wXZLh6Bb7AbEMSagUpr9lR1gP5RcAQAkIWqKEpBrPByyvipi8qmqhlOcGMhfs78TSvuHM2qk2zZ5Wd8W0w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ez74qp42mmrz3ujkdfav6p04jxd08hvuk46pdw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1266","Gnoland wow","https://medium.com/@egorvilskiy/gnoland-wow-2f7ba3987e24 "]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AntEvXnIaHW3JClWA5mx8YMWQaaQIPlV2MoQxfmb5UoI"},"signature":"kyW52FUdhSMqy9xoYbWB7J/iC8SouyxD1pMfwZNnMNpysBWeW2WBlXMiaSY/0jNRBx7VIoJ1lvch/5Ld2BH0fQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pudu5yx0w00fv5j9svgpghlhsqne3kgd9jg4ka","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1271","I love gnoland","https://medium.com/@vasromanch/i-love-gnoland-8aef6d998e12 "]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxbbnCjH2Zf4jf6POFzqRz9HfCMJhcUjItvqPzbfux7a"},"signature":"ytmI3Xx6jEzY160Sf8iY21C4Xdqk04mU6u/HWKr6qRR+8e+JvIM5DilNn2ma+Av4d9cxAl4xp8i2BJqOumEQRw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gmxxylnmm6r36mykag5mnexqjyrqg4pnfr6qul","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1267","Gnoland project","https://medium.com/@ivan.lozoviy77/gnoland-project-dff304c76fe9?postPublishedType=initial "]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3WW225KSRjhDw/EFLviwUxinA8RSQnXxt4zvvhkzIrX"},"signature":"WUx8IMtS5QdmOil8m+DwHHF9ZLlw3JPhZOw5av+BZAZrZdM0VSPUSo9bKOqpu5EqHz5PJjzNIVXZOx6JdC0TLw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g7lyw0m57uwxhjvz20jl94arqtl6xkyujhy970","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1272","Origin story of gno land","https://medium.com/@ivannprudkiy/gno-land-the-origin-story-of-gno-land-646cd7af4efa "]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Auvm9qcLSzup2ePelH97TGn+XsGgdQHf5dbCjAeF03tK"},"signature":"k0vgMhkYoEpLhkk6zN3aj16bxOJvfezm6JZjwcjQa45qP+hcFkXqAnF6n43Xx2EJZT5OvNyuZMTzfbRjoAkfEA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dm4r0hh7j363guas3eehq02t5fh2f32d9h5nrt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1268","The gno land origin story","https://medium.com/@alex.dugus/the-gno-land-origin-story-as-documented-in-the-gno-repository-illustrates-the-progression-of-a49abc858096?postPublishedType=initial "]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4T4TxRrNdRSg8rezPXImKTrbPF/ZiD91DGOrmAqmnPa"},"signature":"+/Jt9RUKzTlvQjFFDxe6IxeBPaiDAwXc3ScjYj0P+f1L/Jhuo2DiOAv0DH+pjLJ1VqHWOHNCehN30WCETNGisg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12mwajrqmkxr6z07r8l8wkmmxlpsrsqhrheh53n","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1269","Gnoland info","https://medium.com/@leoplasssko/gnoland-info-9459d69408e?postPublishedType=initial "]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwDwqQeRjs83LIG++ttY8hiagQ0UURYknwZJ66issUkJ"},"signature":"7FTxbtt7Wro/qGXJGZgccovxJqS1zci/Ec5Auszm964gi8UkMNVpl63119lFmUKgg6/yGBgT7sBJrX9UKg5MGA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1pr6ukr0d8j6uwjykchuvv7hucl6mlm8d9c4muj","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"VxdjKX23FC28ZxqjUlpjTLRWOvzcs/XHEmh5EoQh9UFjbR09QtUDzo11jqaPfHBcARCI6X9aTevxuNp/Gl5CGw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"KzGHvgwX6+eQRXvr+IOMdVpGP+V9395L0+WvhBTzAakDjBwsAsis4fQ4evy2p9KRoqxQL47F26Ulx/hCy8csow=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"3ayFf/DaC7RsduHvrmAhDIqT4UyDvEuLqMyLTtyMK8wXke6wvha0aQuYT5Pfi0hQLCt7Li3fhotBqmfOMiT8eg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"12000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"x4dS6jsS9siqDfAlIyODUdE+qYMHKVhJFF6cYA+ZMPF0Zv8XJkO8G8X5dQLPjHU82cDpd2XmDzu1YmQ2Qa6WvA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","999986"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"km3yFRzxchdKARDlSaAIYWSoQlcb0jQE+weB3NpmThgipK0RJ6j9uCZzgRl5ji0WCZERyO8zXlGyaOJRjGyHLg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"12000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"v/RWXC2KQJsp5ggqIZm7ARpj5s/CKpG0cHmnnSC4fZ5zpoinPqtFABp8Qkqo3bo1I+34BP0paV5gRf0dllwDDw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","999986"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"QUA4OlF/QOg/OGpdIlClpTZ/cElfu6kRXDEuHOG45tgmMHoWQJkgziuJM+AwoCrCYHUttF62y23FA05X99qqfA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1234"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"UOD/xo+uQ2EUWMb/+VEmjuL85QqDlwPibgb8lTL/EopwXDHRT/hwmCqJPEp1jiXcKNKapI+Jt7s+UzL7lZHzRA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","144"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"/TL9kY1ZLmLomAEbfA8ShoiHmxfaojEhs1Ll+zGEQf4uNmzbQjwvA8XMlZS6TpzgjHsrKCdEaVFMJHbkU/80MA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","1.111"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"rf+7/xD28sxseZyhrnmrzJ0j+bLv5nD12XwigCljB9EP6lalXVGQukbF1z0yx8fqBlepwVw2BzdEhVL54IcAEg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"s47QvMkyx4HibCCJL698Zb/t+sPtYWZA12YW1QXo2LkalawWBKUXctAB8znUURRMR+sbDWbaB79IwzBzkIsoXw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","141414"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"tMnkKBYN2/uy11ZhDXtQo36pVFJg2LrOdVlV1dw8NKkEtnGF3CO4d79/bnlHuvMK3812/i4plBVYeAkwZGW52A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","package":{"Name":"inject_test82","Path":"gno.land/r/deme/inject_test82","Files":[{"Name":"inject_test82.gno","Body":"package main\n\nimport (\n\t\"std\"\n)\n\nfunc main() {\n\tprintln(\"done\")\n}"}]},"deposit":"100ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"Lo9q/HBEIi4p9VqA2Bd4lC1QWR1DQR6g3tUvqnohzBElYsvVBHKTerLp8JQ+EDwM+Y+ltN5XecT44h4fob7Ogg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","package":{"Name":"inject_test82","Path":"gno.land/r/deme/inject_test82","Files":[{"Name":"inject_test82.gno","Body":"package main\n\nimport (\n\t\"std\"\n)\n\nfunc main() {\n\tprintln(\"done\")\n}"}]},"deposit":"100ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"FrNmz7Ei42qPL0VHWIznqB3gk+SmXHKyLWjdVTTFbusPMZTdCHUV+HHeY3vLqGx4V7Dba2KU42rdLzd7M5Fvfg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","package":{"Name":"inject_test82","Path":"gno.land/r/deme/inject_test82","Files":[{"Name":"inject_test82","Body":"package main\n\nimport (\n\t\"std\"\n)\n\nfunc main() {\n\tprintln(\"done\")\n}"}]},"deposit":"100ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"BBFgo+ZADDgvPWOIYFkVdxAhtJc52ZuIIK/DwBUMOoBfPeOzf2O6sj1JTHsghOAox2X7XXdlk8WMcFuahH//Vw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","package":{"Name":"inject_test4","Path":"gno.land/r/deme/inject_test24104","Files":[{"Name":"inject_test.gno","Body":"package main\n\nimport (\n\t\"std\"\n)\n\nfunc main() {\n\tprintln(\"done\")\n}"}]},"deposit":"100ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"WyiCxt7rxlXVH3dp40cbmGHPP/g3AdRsCgXpx//DdH9+nVT4h9J+HPkn5IRHIdUD9W3WuMe/KD5hFEtEEOO6BQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1234"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"B1MOqGRi2/7gxh2oJE7gHZEBpP5p7C5MKGkFDYHSlDcTtssGLs96kMlRNW4pLSJgQcjFv0ub9d2sOSt0HbRlcQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","10"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"84JVxtX5fTjf1Ahv4GB9ZCnAplRfOHnHQFxqciDJ6lopzXoxfn9h1l5g/h8XeS0HjAN7xh4d6p2rKE+oZPjv7Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"1000000ugnot"},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"1000000ugnot"},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"1000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"glnXTfCr/xRak2LNXPM23clyjALD/zyEq10vVoHRc905GP6ZiTtTtWskGTFq0dL4UjFBSKTAeJT5UiWg0Ec1QA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"1000000ugnot"},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"1000000ugnot"},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"1000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"DS0VBspVQ6JPExzL+tw2YF4Z33gpWmzwkLdP5bbeIB9DxHn3DFrFr5GambQJnDV94nT2BE3kmJOSbjB7M4T0vg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"12000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"FAVFD7eZUkeT41G4zRH/tAcpKAZgWSTonxg8bustPhRnQMLxcUldxxilp9ZFCArQKI1sFteZTNG5LOhERnrfuw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","122"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"na42nsPTj+pFiNm3ufmHLhFveqwxCNq4G3BrN5Q8WId7LiGII3trNaArmiJ6gOY7mSLJgtSu/aEFopHCd2ThFg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","122222222222222222222222222222"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"LASJ0BOfsIDHWFe12HRaASY2P7aeW5bIz+fIxbl1tJASTPf/QPoHu/b+7O/9NT7SQjrC4mAYQ2SBqalfuCaLWA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"12121241ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"zB8vXUFntOS6fwbohS1ezs49Y3I9qkRift/76GqIqF96alaNZlR1mwl1FZkkVqYKBUV7NBDmtyz4Pwl/vTj+LQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"aXMAx7b+Btwpauwtkf7FiX8+rYStxMF6uek7aDkzzZ0cF6HFzw4/DNIXd0oO8Am+1IUY3gN0QdKjKuDDJDuXWw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","2"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"+kUjtG2YP55996NZKlzVO3AlGbXgTG1yVN4gtODfUo5BeA1bI2qR+emEt4gMI3aJGOUbnp8DrSVCAaN/LAW7mg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","14"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"IF6wz0SkmRwGIiGVeoprUwNnCW/EURYIBvvwsP73hghLowA12XEUjKgnba+Bj1/t8C+f60A9jqc1csF2vskhIw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","to_address":"g1l47x640c4petu4chfjge3qg2uplakx78hkxqxd","amount":"12000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"k6sDWyImvnoUrbbUfPA3onDfXVimQ87OX29nwpr5xKw5enUAlt5XMkLgH0TfItHKsDqrQYScnw+zEZLzZon1RQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1l47x640c4petu4chfjge3qg2uplakx78hkxqxd","12.121212"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"qWn/2+yuhdxqAEEy+h9de4NQ8FEg1ldsq14628xz54VmSGLB+WvWu4djLwQTAOpPDF16ZuLt+a37i1gZ/1IZkA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1l47x640c4petu4chfjge3qg2uplakx78hkxqxd","12121"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"briI+MxeQeZuVRC1UUBQ30T9fi4ar43dmPI1amuuHmYJWMhytgUjrEDIrC3RMRjW/6IgPllk2Rrz3MhhzXYcnw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"1004100482ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"5SH97VzXb/UdmP6EpZ14/61fpT+FFqqGMcmzgMCybeEDmxeMTcZN98UX4avayUOBAF9kfce4NyDXbQyJUpxSwg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1201"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"rqIuNSyDBz7QqKPuN8R5SkGcikWP0CFEBC0H8sSpNT0JeoqKVRkkg1Io80nf8a8gNRIUgIAZtCJVuA4o98cuOQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","2401"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"Hnsr1OH1GFA1tZcJYUb6jT66QMxM4wsTd9EZ1e/YjPcDnslqbCGDFRyabhwVPko9IZTKru58RN9Msz+we0wJhg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"EHejYu3ANc9AYFiHZ6+sPb3GDYcJgkDDcfd8Fnn+snJyIxT48x4TeXqcpGsBuDOOo94WNyh4J3Mrzz5GX45X0Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"FBduwUk0bZmoy4ZTwQsLDPCbj0/Hu1QmJxdl3iSyVAQSq2/8HaYaJOawMdzDdQqAXQCqfZe/O4R9zVfuO8uilA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"st71gWdWnZTNMO+QIeMUKhMNJl7BvvKvIxR9GGivJQVfaZ32r02txzMlDdeHIbCRIWOyGP3+tpMMjUVbqJ1TAA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"a6LdzhBaRdQgDqWYX0W4qmg+4GDpHBlOj5aARd4drfAsXFPH01IwuGXhbj2x4dUu7K0ZnPzoISIdBFfWMg/yRw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"jDVWwJenSVeZsmzNb0sZlkk2ght4A8/52YTIALI+Hsh/EeXeUtgjySgySzIRwG/ZIbluw6HMZAyxH4dVfNxt8w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","12121"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"7Df8z4qMETehFDLsXsuQ97o5X4ctnPVbgrSXu/X4kExC/KHsbyuooX+HGnkbIJV8pstyWT3itW8fgUl5m4+SHg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1t4du52tfdfcnsrhlkfxhulr3r2a8a965zs07tx","100"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"F4NAZV6gZarza/b85+hCjolZfvQR2h43UukmhZpcNo8TWUthMUlPQXTdSL14igkxhx8QLoY3tywWcQNueUn06g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","10507"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"95Ow9e0g6SfXJcGc9vZk/R8RSn0SPVAW3izUQttNrJ9LAkB7cGd15K57HiCMKlCdxubPLiDq7qrqevCCtkEhOw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"GC06mlz92BqCqfZuVRFAkvl5ZH4SJ94Xu6NpSys1nE08gIp9SfKrUl1aQ8WCYY1epRZx82NoPlZof+PGeaTd/Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"23000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"mByCMUIt05HsfJlV8GP/AFiQQDn/lb5t8b1LoH6r6jAUovQF09m4coJVQ8nhniSV3QIts0JTd2/7oy29CzMKPw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","12345"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"E5Vevzc5glhMX0ke45b0x8+f5qJY3K4gQzQDbaCA4lRGQvYhEcsRwHO86HKY9rkAZ2A/dqY3uL7ZVvwSYZSOTA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1qv3dqyw46fut94z9t90jka58saw2e7l99nzqtr","22"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"fXVqJNuOAs0gkaW9Fy48rRys4u+iffE61pxBecIKmyA8U5dF+LyznPkf+rvtNBdsAmg/O2UaaHFaaP8rGjftTw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1231"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"aMGFrw+BeMII+5X/n4U2XawD5Dhzgc8R5XkiLldectgyqm+S5YafgSKnukWEi3dXOREEfLPzOppQh5MR+7PXFA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"hijinoosss","func":"hiyo","args":["123"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"+5ZKVJrfVoUjXBOwsfEfkOjhpxT8JAFnWr8pDRxR/sQCe6bpPe+E3iNvr8CbtYUQL8t70J/XHOjlht/GnvtXUQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1pdzfz3uru9llhnqlvrhamepl8m4krxs6j72pj6","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ZmKUq0lejb/4JIGoKHOwCU0NOAFuolMzPAis2CA9IOQsF4t3zK6XDLrB5QDzMALni8ImMwVeb064bt2TAMv9UQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1hkgdcua64pcuwy88n548wggv0eefgy3u8k9s00","to_address":"g1758vjtngu4ccpl3vd9lsf4pk8cevpuc8rvkux4","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax3RxhAfdxKyrn0Sy8DWV8fze5AyY/9v3QLpdpSmNZdq"},"signature":"t7lh4H/JAKjqOH8LOGgsV2IJqRAcOecsxq3F5Inpw3oc9M/NzduWmEt++bo2LUTFg63rfe3VPetT+D0FZVXKjw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1hkgdcua64pcuwy88n548wggv0eefgy3u8k9s00","to_address":"g1758vjtngu4ccpl3vd9lsf4pk8cevpuc8rvkux4","amount":"59000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax3RxhAfdxKyrn0Sy8DWV8fze5AyY/9v3QLpdpSmNZdq"},"signature":"qy0pxz7s8pNTqGcc2zxfhtk2E/X7IUck0TeX8BR2akl4flb67tdDkc+m5Ew/8ZS+sA7DXogvPCp9wBzWJTobqw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"DfBtnGVz7UYKIm+2Xir9f35gW84TffbudsAxPsmP+twGHkq78d+VOmJ5NJWzaV0SBBfRu1mTZnI46tqjUKNG/w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"ad/BjTwQZq96tC/LOFaGzGlsbG6TNQlCDsZ8rBu/TvFZjBsYUYqpxt0blwD8Ys/v1UZNjNkznrEv0xwk3JLezw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","2"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"m0nV4NEKT5brPUoWpUFb5E2mT8fxKkC6rWXqAW17wkdM/iHTMzMK0v/WAa2zNvxNfTM3H3YoDuczlyRMGMHZxA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"GD29YHwWxErN2lVFT2uisbFZCWhmfHvmTWIfJdH+0dVojxKcLQZ0uC/iaqox2qkSCaU1lsKo5DFrSSLLDecN7w=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"1fdcwssJIccTGztR+20Lj/YOV+/LYG6w2/mJtbbHOd9GsGrn684kZ66ZYlPWskV+qZ9MCunxQViIneS8LXKrHw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"H8t8Ty7lfZucEXJYeBhNhi81xLKzjbav6mlDf6JExB9GrZRajxmKSMCMgAZfJuDu8nFUWI9Jso3aYCk69ECLjA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"4lS20ScfdY/hIwC0cTfKZv72i3Ab+zRt/fyuOqhy9t0Ht8j5L6eghlzgosBnj/bwW4IFYuGQY31Jxx2zBu5lWQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"},{"@type":"/bank.MsgSend","from_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"},{"@type":"/bank.MsgSend","from_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"Hqhg+jRUUXXslE5S2979erj+UWWAZyXMPmhEHJME1hVVIz5B7+H/SfUdvsuoqF4fZ4A2JCnlCMGDD8D+XbYPWQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qv3dqyw46fut94z9t90jka58saw2e7l99nzqtr","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1qv3dqyw46fut94z9t90jka58saw2e7l99nzqtr","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3Tw76GV0BAtfeMytcN0YmNQsmhocbe7kMs7sCF8SJVx"},"signature":"KLIIcKte5AmmaC4yecSn/5si1ZpbhhgGVE8+FxdfypMSXIuimyvR82hYVhklZtAAqCupIsjXb6dY5WDSGDtGKA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","123"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"Ee3WJeuuEwsZ6ndf1ezlp4sMgMK1t4AMndqO+Cwx4SFctE3mYWE3IawJoariD2+I30ZESJ4oxvff9fYF1oWygQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16gjaj9m7yvrcnwzz5w97yge9k9xja50t0ezsx2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","123abc",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsPtg0UqivnO6e8ZPCtZF9IO2vLb4dotZbvmcQX0NJQ5"},"signature":"JzzkALbdnq7P1qKhUFddMJ7Vd9nAfXJu9B8s5tBpk5lQZzl1jPoUXyUrR9ZXpjjBUFeP/Qr+6EcUZzt/5IAcow=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16gjaj9m7yvrcnwzz5w97yge9k9xja50t0ezsx2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","123abc",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsPtg0UqivnO6e8ZPCtZF9IO2vLb4dotZbvmcQX0NJQ5"},"signature":"yD+ClsDy0XBPqEEK/+xl6KYDiSxRrSjV9JW1yrKsx8c18qbMXX8CgrG4lssRkwa6nVa2HPAYNFslIDVf6zss9A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1rgrj3tskykzkeffqpllqaz7n83k8zllldgqzyp","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Ng1WOeEbJ099chmPAs4QcPtQ7AC42GZSVJZEByB7jUVoR5SxtXWuZZufa1nrnCOycr++IVhxmbAvEd/FjEmvvA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"123000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"Q7P2XGvPZoqGcBFHhLdJU/e41QAwbPpxhrOWb/y6dAhRaYbWK2s02DEqofSTSi34Ya/TMTgpJhtfP3Q99LCkcg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Faucet","args":null}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"mD0qRh68itmBcKP6AoW5zsQLlXX31QRQzRIJcf8kB8g3ArYd20RWM0/+se/Pwg+xDEvwSl8swnUDVtvtqrh3ow=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1flk9z2qmkgqeyrl654r3639rzgz7xczdfwwqw7","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"SOHpRiY658cTz0GC7/ej5/eANbgNHqkbz2FnNN9PC9Jk4WJ+JU8COCHat9Np9btcW7+uLrhW/g7YSdZ5odd/Sg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1u3t3jlc9a533r8ke2zzqwpereqpx5hv38m98na","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"bMHN/sbrslU+IPElIfOiI9iYyfAhQYKHHD2vCR/pJshad8gBT6x/pKAGUKuk7siniE0Lh41nKcJelL8abU9sxw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1u3t3jlc9a533r8ke2zzqwpereqpx5hv38m98na","to_address":"g12xmr2memn9q3nn7a4exh60sh44l2cnvuvlck4t","amount":"5000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"At8Lv7DzDvdpZp9c2rOMYkL6ZlS2tkdTEE7EprVXkZAu"},"signature":"MRJ4YEGz5phv6kYc7KcG35/DizBqmFd6pC9vmBFlASE8WuJQCDzaHXNj2KE5GMO83eB1VXEvW9dD8nSSj5eqeQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","amount":"123000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"XHrwOfa1TdNfDYrwuJSXM+yakm2dTxP48747rgJHyyZoJBAvLbwjcQ8h4aVB3PQ5ZlVDT85zpvyF0fSE+zKHEQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","123"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"4GWtgcCPPIpi9aVtKb8QhbZi7maWBCGfg4yMmoxjM0JfzyAVNLZf4Rf/aDGqiVcBjfyqs/3CogwZhIj1yMWqpg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"12000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"n0AuBgqggMjV/JLm1EgYvqtNKbm7xPJh5q+oqdCpVc5K0YEEv2lLxpthGjzGy8by+Od6f1sw6ddzDUpUt7VaQQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1qe2hz4wcqx9z3s26l90660fwq8gqcqrde3e2ce","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"zbfMiKlLGepdgwVKVnJdb1alPfqfyxnsUT1jEGArINl2bzrnWrtKf+Dqeh2z3NPlXrKRWCOYbvAHBniLeHd6qw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1u4zdvqhe2qpw862pfqcz2vkxj56nnktm9583eg","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"/DcbzBE7JzjYkbbxNgjzIdKOJxlZOuYzUOVeDWBcmpVv3LN6CCM7IlAeS6uAJIZ278Rz5TlJgDU8B28lcWx7Xg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","amount":"111499964ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"KtiDIh7J3tmFjQ4RdqlTnLmniVSMlN3L0a6tLbjvu4Ip7tFYMGdkH0/JgTnZ+AlXklN904pWJKqkp1F9gDR8fw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","amount":"111499964ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"N2OHKXEwvqDSumZPMZfaTghiutWGBcdbjIZqvYyJtEwed/mywq69mmANaxJcjeZt2ijLGGr9suGYzBzMU7BcLw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"jcF+UwFReSyTyjC5yqRSGOiLDIvc77N1gSDWYpCYZWReknItb0trDilPgMV1jw7TRmhJXyIDDUeCZtCApnIyDw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"eVX4HDPHaHCf0VJLL7uM+xPAZKToc2jrKKbX9wSqblMLqichLTeye/qtAhMV1cwMQ3462IrFV5CvBh13RDxWYg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"lsy696jkt/4/wO18Bt7tAOiIMLTd0OqspjQEPPuvDc5CBoTZ4LX8rQ+HsrnU7V0mSCfnZl4fkfIn7nwhFgmLhA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","amount":"2000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"KtvN/TWPkGdDJCoyJPzfW+J32sFjI7Se3pSvrJQufktWO132xhomkuc2fv5yT8YrEdwpU2j3EOuVY051zkKqTw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"lm2kxJoV103QiYrvmXNuDQyrKabgTTp20Qj5Gu76sS4uXYbfTvJwjJS2I+WiLMW4VGmkN+6T5lz+JYvnrjPRWg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"jGHcAMLA1Z3qY7D5h1D5a1WkFVDORwu10iNMoq2U7BFc0ITiX9chZPMZYD1YPrcKC8GGckt3c+gxAogz1zaaSw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"Vo+YgZKLDJwow/i+S1/OU3OXnfX3y/sQRmRIy+5cRwlx4XNxwNiUG21Af/vAELN1cYOiYPipujpaBzcQKjHYkQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"kAEt7DUwS9Q1Gs+3dprOW1hBH8NmLmmzXqNqdUFIxzcy4ACZhmv6FirW49lya2TW1b6/2RfkUEXVeIfFh4x9cw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"zO8pgTp3vpOblzxGNVjvMn/8WmHqXq25dNlkWQ3MnCE0x4CPOddcdFrOSeTLkJkbOpClCwTDhJS0u/X1xnsOUQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"nIuFUIBTQK20eezPqAvMSDc/0JnIwPm0qHawi/GjM0hUf4KxH6tEx5TW4Cv8fr/IUfLcBPB+C8TjWO/oa3a32g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"YK9ZAPFxkA205YG3Eukm/yrxmslMfbSTwI4dDZeGY149V7Lu6Vv543nVsp9d7My90UOh8rPSq/X28hEY+rqnlQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"fYU59DZ4ohx8BprItNFYs7C8/d0ScHcJ448Weyj7Wy05vQ8ndmNNMRCXQkX+tU3BBE6FHrLLnTcwLAHeKvV+kQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"jpuCsTAUuhTtw8jBwCj+rJlYX4DiGQCFwVXZUDLX6xoVeIXs8FiuU/aJlVH/CmT948I/8hzWluvYLSswXQIoGA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1esdpk7sn2k5px08q3zmcpj8qfnsqtl08zznqhh","amount":"12150000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"G1CHocEuR0ZVRw98uP3VZ8AwgiCZUXlz9DQl2CjY9sc5mIrgkcb6mj4U28bwS5aB1nXc6KuB2dXxj70a1ZQwPA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1esdpk7sn2k5px08q3zmcpj8qfnsqtl08zznqhh","500"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"amwJ1tP0cNNu/+GndMgVZvieYi7heeg2eEcikaNJNqkI3xOL7cD8nocH5UOtNjYcqA/4+HfdxoL2+VgXJBvj0g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1esdpk7sn2k5px08q3zmcpj8qfnsqtl08zznqhh","to_address":"g1uvf8cwwtutaefv5730xycqazjqp5w7kdtm0qme","amount":"1gnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax76olykT7PhhQFyoPUGRvHEiBPzZOD7eJxctbHsf86Y"},"signature":"sgCMQlGosNeTUmSNYyQJql/X74rnFb4uWcpW81wQl/MENXt/l6BCN57fiZdrQaOKLtwm6P3L9BB6JujlaxOlGA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1esdpk7sn2k5px08q3zmcpj8qfnsqtl08zznqhh","to_address":"g1uvf8cwwtutaefv5730xycqazjqp5w7kdtm0qme","amount":"1ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax76olykT7PhhQFyoPUGRvHEiBPzZOD7eJxctbHsf86Y"},"signature":"VFclYszqYYhzGsKl+Dx8dyGXRpYpGB6/ks5ihQJ6yRU1NeZAfHbv4uLcdfilc8rG/gQ/jg8cqBxfXqxg7/vDmA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","to_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","amount":"123000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"6DMJCgkhfwCuv48yuvACsJ1WSGQ2UJASMGXNS1qdhe8gWXYoXsnPBubLM7jaqUCUEYCyrl4GICJpM+K6Ob2nxA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1esdpk7sn2k5px08q3zmcpj8qfnsqtl08zznqhh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1270"," "," "]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax76olykT7PhhQFyoPUGRvHEiBPzZOD7eJxctbHsf86Y"},"signature":"9IDraAQi6ctBBEE62sp1Y4MVe2eU21sWuMAmtpUJldJ9Ry7obRNZ7OHPFpWahxyd62xYhpnc9CbLalf4rh02Mg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1esdpk7sn2k5px08q3zmcpj8qfnsqtl08zznqhh","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["testing123412"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax76olykT7PhhQFyoPUGRvHEiBPzZOD7eJxctbHsf86Y"},"signature":"yOXAwoXeGR+6VbH+pJk3huWMJOYUwV2Cph/vkAW6kHYfkqEFqWp9o2P393p+3I1dR34d42P0XHcTJvXadwBpeA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1esdpk7sn2k5px08q3zmcpj8qfnsqtl08zznqhh","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["testing123412"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax76olykT7PhhQFyoPUGRvHEiBPzZOD7eJxctbHsf86Y"},"signature":"u0VLiDh/osR46kWflCezwVdAV2AzHP+zydiOUWps9W0QWS+UFNF4NBKWfqfWPA3TWhH9PLbkZfzRX0xgKVdUUA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"1CRgDFvodxzEkdt4weB4soO1VcrxU3ns71vOO6AOEmN2iu3WoBAT8CN0+2CGCDHEBUWhtaIk7rEcqnoezWAKiQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["testing123412"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"rnBbmrergSXsDQdZpJ9J6v65IJRBuAmjhhKIadMMlyc/72zTAyqCGn5DiN3VEesI9fltMBATAnhlQoKxUsCPMQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","135248"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"BeH10z+6WOECIyt5sMBVKooymXuIZm6p0Nw3CD6rQJoJNJZrriIlDCpVJT+wNEpIqcmcOcgeA3OgEq4mqbjBRg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"1ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"3OvKGp2ZpuuihZbRW1LgLhYmoSkhXcuCDh3aeJugHRx8ZLgKUjGV0h28XQy+J0Fv9/MxZnhr9e9lBpGY2qp65g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1164882725ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"szSZTGYjMzTzpYr1e3xCc+LIPDpO3vQDvISWZXza0GtX/XDGy5DkjyDUdfP1EGG2pVrNkzmzOnnGnPNw63d5UQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","100"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"/t7/3dXnI09sX4X9Aukl/ZxIQ1xxcgHrW6JLJMXgb0hKDg72bsHyuawBnKXPnbdrJWcw4bu9HhqgfAkYDCBdCg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"10ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"v42d8CPVLdlD1A9W5Mj4EyA41Sjw/yeMscRjqvPezAgV+MhSjyuagvyGQc4zNNUzQYgM5PkAwgx/mKsd5vphUw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","100"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"7+SBBr1nBVN/y12b3aGfGQv4PYjPGsbp7i2nIOJbGa1zogLAnIVjnpxgy91e1BdQmwWOgTaNdgSZcMOA+l9eMg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","500"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"JRlZPGXYxupMev8L2Gcr4VSphlw3tgiem3ZMIBROouAbyiOAKOhZ+Tktn6SI9HmYzTXCU9QVQ7/IICRlt++lag=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"100ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"1Gnsx9MF1ooDkBWPocY6pJEK6B0rQ3nfPhxdrMGhb8VVI+lo7zrD/n8hRKB35UvVGzF75dwlPM6CZM6MAzAiNQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"VLgpLNI2/eXaLjey7L4rkAnK3VTqj4+azeiwTnb9KLIMz4t8Y85fY0LWLZXSPzWJsd2kfiTrYU7D6knkmg9ILg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"10ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"7ufvq8G9aG9uAXd8NChHwlOYQdX4C49eNqvMAqIVmogdfUkTwlq56IlxqbwyXRjL2o+0mO5pyFguP1jiH2kg3g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","to_address":"g1qv3dqyw46fut94z9t90jka58saw2e7l99nzqtr","amount":"100000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"eBSJhY2WSaePtXTwzcBvdqLrNh8kF2vCpZDNUI3i+j8rIZ8B5kdUej6qV7qYyySD/z4KtS2+vcHgCnPeAMKVOw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"ZGJxLrlQiyWyO4/wWUsT49Yj7JkjXEWyx+JU9a6bLXgjEvjfYhzAlkCam5Oyzpb7AQfS0cer6XK15a4wDIt+aQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g1929vm8rekhgafscf5a9jqlxparzmfcw7f8h3ef","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"2gpffFloAI5K8ORfUiZf97wlGUoAksSRSbgBAN2p5S9Wditlqe+k+pct2m0k2n2/CZIx4GCSJ/yIt3RDzrIzmQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"NoUenWnimZbB3ru9jEsepc6cuxtsdPAm8VlsTXHqKJYCSNLOd+NHdb1KV0bsl8zMOHIckP8j0ORL1IgiwXTR0A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"Jj7YZoEa0NZzs0DAuMzVt2vHHxF+CsIXyXvoxLWQ17teYiMb5VmcLrMpb6rWnlkmwPAf70pIF4SkKN1AEKZoqA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","12345"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"YFL53USbt2H7WzuChQG8LpjCVbxkLWfNhHqJpCexWXdRMqohs69JTx5hKSz5/EdfE6pBgGt6x3T4TVwT7rQW3g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","1234"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"d/1iZGs7AXNDLCmWPxz1CbkZazro6/fXs+gAiLI0oxg+nitMctih22buhAftm3h9CHlRTGi/dJAx7eIxSARe1A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","1234"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"63IQgcdyV0MZi7XEZc+a+sMeoUyoUDF8HOThhJD8h1ZZLmedLIObDWTUJ2q6zYqyHPCWONVrcB7iANUp8gfg/A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"12000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"AXqJNgYP1sFOvBDDam+hj5Yivz3vLm7F7amtBf/qKVs/Tfet/Z9Kfq0YdM/RkWhUbJpA7YHF+62lbcWbjL7XWg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","package":{"Name":"inner","Path":"gno.land/r/demo/contract_inner","Files":[{"Name":"inner.gno","Body":"package inner\n\n\nfunc InnerFunc() string {\n\tprintln(\"print InnerFunc()\")\n\n\treturn \"return InnerFunc()\"\n}"}]},"deposit":""}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"KW3cCRl6poEF6NLVapMpzsq8pXC6JqeozYlssDQYRedtJ82IsOWNOgVi46WrV1TL/lRv+etsZaveDgUyaMc36A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","package":{"Name":"outer","Path":"gno.land/r/demo/contract_outer","Files":[{"Name":"outer.gno","Body":"package outer\n\nimport (\n\tinner \"gno.land/r/demo/contract_inner\"\n)\n\n\nfunc OuterFunc() string {\n\tprintln(\"print OuterFunc()\")\n\treturn \"return OuterFunc()\"\n}\n\nfunc InnerFunc() string {\n\tprintln(\"println Outer-InnterFunc()\")\n\n\tres := inner.InnferFunc()\n\tprintln(res)\n\n\treturn \"return Outer-InnerFunc()\"\n}"}]},"deposit":""}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"5nzQkKDWblieetnynYHNKDodSGmqn6YPP9JJOn3vrsBkypruhyyBRmX90ymPEMuJox4NJ0JECLAV8eRN2C6F1g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","package":{"Name":"outer","Path":"gno.land/r/demo/contract_outer","Files":[{"Name":"outer.gno","Body":"package outer\n\nimport (\n\tinner \"gno.land/r/demo/contract_inner\"\n)\n\n\nfunc OuterFunc() string {\n\tprintln(\"print OuterFunc()\")\n\treturn \"return OuterFunc()\"\n}\n\nfunc InnerFunc() string {\n\tprintln(\"println Outer-InnterFunc()\")\n\n\tres := inner.InnerFunc()\n\tprintln(res)\n\n\treturn \"return Outer-InnerFunc()\"\n}"}]},"deposit":""}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"ENbUoHwhqgeH/07ZFy3yEHUTfKBWn6SUneVmhHJ6NNNxMbpvN2vbO96+1XJ4xdcLYu4/ZmpzXsJ195umaE00gw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/contract_outer","func":"OuterFunc","args":null}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"6bPDeSHarfDsGQIK7LlFLwcGHRBAFZYHeN9q/5DmQRsZOOKxp3/9g/RNS7JYMskyoW7lyjz/xP7vhRwkFRFvug=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/contract_outer","func":"InnerFunc","args":null}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"XxgPu2Nlzl9jMf0HXbOOphUJqA+C5HOWcUXMmKP9/x8i0qzKc8xbwQ3Oq2ye7tGcOmXLeGmy3PGbXkTLGBe6vQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","123"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"hhTm2XZapW9NgGCWJebacSipqASoqe+qzfPxqf/51+F9o/MTcRyLt6MpwM+ExyFxG9DVlfzP6kAKGRz3/h6cxA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g1k8p7x84gjcy0recfkzvfgljxyyxdlgu02y6w50","amount":"800000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"nlBKnPLE4XdYjLPYkqDJmBP+IuyTP8UYMZo5K277a+cO/JKDs230cC/DfQfgdl/x4qD7+dMHDOH+rjDJ71OlMA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","678"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"7/loo5tO+cGeE9tvXI9dUZz55Di/H+IaOJWcHrm/59sSYN4SBkYU9i6UrFgvJx7xoDZveSlPA3CpNiTZBySEgA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1qv3dqyw46fut94z9t90jka58saw2e7l99nzqtr","333"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"gDFk0qHPchbkqTP23WzUrFRsDxHHiS0Qg+W5JIeX9ZVkBCbywz7IisESIBEfq8p6ez8TIT9DbahT19nC8QsyCQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"pps9fE4f3xraIuqI7OR4Ti+JNGdbuYhLx5PT/bCPxIN93blGN8O+x7b2GvivqRwMrIR4FJ2TBuhTcFnuZzNRsA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"Ha2bF7dy8y6ZohSsHEDbqnF7dk19L+AMAzejFd5s2JE6VWNy+4nmER+ha/nZ8zaXlkWDnsoyfLYYAikNS5paFQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g188sxst5tpvlp2hrheul9r2q87f0ggevu8742x3","to_address":"g188sxst5tpvlp2hrheul9r2q87f0ggevu8742x3","amount":"1000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1Y42RvJ47zi22nSmc0uKlrkfF/6DHEFC5472UJjSzU+"},"signature":"q9KHk3en+4MzWzQtZAIZARngKbsfS741ZlmQKvfvz7Q36soKCb88Hccgur5xC9z+XangzI1oSwy9z6eS9Tkrlg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g17j9y7xmxsjz57xxvxd4crpnfmsjnut0aqwedx9","to_address":"g12xmr2memn9q3nn7a4exh60sh44l2cnvuvlck4t","amount":"5000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwVrtwdi1lJ6bXwz9+XjAAtoJVMpy1MG6OtAZiuZhcI1"},"signature":"UPbnxqMgSRrLsYKXx9MmVqqNKfvpHPnuxGRJnqQOTdFZ7MKQfcHjrHCF+W388aOO3YKL9GhFiNzcprByUOnmZg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g14guhyq2r7sjquj6v0l03a4t99hrvxxpl5lf0tx","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"rrbLholCleGrmyu4CXI9TSJblSYYkuefEMv1PN8AgexBB879MBU4o0ahIsJfxtDkK7pddQ2w7ZgVuQFd7mZ6Dg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1l7nmtmzptycmt36lrju4ypum2yr5zx244c52r3","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"1WCY5DxYKMYZvECFoTfK+9ydEj5vMJUqFcPIFOdlJwAlrN3WhoifVUXIu2IsiGRhNOkzS0HdrZtA8juE+fe9Ng=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1z6ups0smz4sw6flu0d8zwtlc8cumaskgxsduqz","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"f2FG2gkSXD8m2E8NgkDEqeaYrCLd0lAdqVkF5/iOSXwGxngTNw5LUlDIvvANpB2p5zpeJgcgX8SX/9GvpaykXQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1rejcrwppfqcsfsrgh8tk0eyjqg62c84ff8qg6n","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"iLZahIBWZqGC+ZXRsc3rQf88YC5Gwfbp1dzY412/IEkoeES0UP0/jXet1QXpe/9ry8M4YMAEZcVDy2jZrC37gw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1pgwh67d3ghrmhcz9t07jxhdklmpxwsnal0l87v","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ZwlOcRTpwajGlBA53NMwbfkhncDCXkzuLmH8+1jg9lsUjK29QO/CrFyFi5qDKByrR7T7pBjIFmLBvaO6Lt7ALg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g15j83gtqs6e6rh5yh7hlhd6g26vq0k8mgucqddx","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ZiktQ1GJcN+7toIGZdcJGAg0GPn5C574Kv5WQ+hPhYFOtJJWNr2H010laJJeMQl+15jlNQDQnvHbfe7XhzY7XA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1pu7txjfe8yt8exkput4sj59v27stjz986a9rdg","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Sdr1c7h+LHYC+3PcrHAkxvDMyOI/R9pv2+mt+YJpi5oSuSiMGx38QoVeksX7HdURHYN+adEn5WwEtIxFFbdGGw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pu7txjfe8yt8exkput4sj59v27stjz986a9rdg","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","crumdek",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap15Z66LhFVad4vz+gOlgxIUqakkZrrQ/v8I1zpLCyEx"},"signature":"IIebMQIN/dczaQIF9mm2SGXrOehJYrKuqYakB7E6lOFVCJdJS0mZqpAXg4POTabC18hWBAkCCQPRmXK30XThmg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pu7txjfe8yt8exkput4sj59v27stjz986a9rdg","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["crumdek"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap15Z66LhFVad4vz+gOlgxIUqakkZrrQ/v8I1zpLCyEx"},"signature":"kG1YU0RVaTpKbvTmGvBs7LLQBF3O5Qyf9ajXkyssuPJlHmLm4n56aohYu7kW4wRc2uec7pE2zfCwP8MUV3uqQg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pu7txjfe8yt8exkput4sj59v27stjz986a9rdg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1274","gno-land-provides-a-platform-for-developers","https://medium.com/@kirrpop/gno-land-provides-a-platform-for-developers-to-create-blockchain-apps-and-smart-contracts-using-91eeda2ea1f5"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap15Z66LhFVad4vz+gOlgxIUqakkZrrQ/v8I1zpLCyEx"},"signature":"owyKBHgzNXgKWQ4Q9erQfUPBz9QiAuIMYZ92x9AER9YWc/1IDzDRlq11Tsm5QQsPlTDUjWjoDvtR7eryhGxAsg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1umfykc3tnsjz5u2h6mmxtkvxktwz4lue4sfjs4","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"tlmXN+UBawM527Api88ygAkJfLGpA6oib1XgoWGsnpBbRKCFljgTLPNHGeLByHmOZSGZ8FTtusyju+QfARU4/g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1umfykc3tnsjz5u2h6mmxtkvxktwz4lue4sfjs4","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","tactkom",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApdhHVnL5iJPUuE4k26Vrdt8arPFT6cfu6VhqSBs8S4d"},"signature":"lnvnNtPjgY02Ju4bvj2eDacVvJKF8I0uoT43P3aEEa0PYRHvo6o6l2LzVRE7otIJAhuEtcF+BmAk0mKpFj7TLA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1umfykc3tnsjz5u2h6mmxtkvxktwz4lue4sfjs4","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["tactkom"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApdhHVnL5iJPUuE4k26Vrdt8arPFT6cfu6VhqSBs8S4d"},"signature":"jR1oZgI1Kvuw1EMwIEpGLtXyTShJdQMmzONMa9AzqrINiHUrwpuageTVnWeYSJVS5CoV0EhYTqV6Itw9DYaMEQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1umfykc3tnsjz5u2h6mmxtkvxktwz4lue4sfjs4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1275","enables-developers-to-write-blockchain-apps","https://medium.com/@petr0vnazarka/gno-land-is-a-platform-that-enables-developers-to-write-blockchain-apps-and-smart-contracts-using-4d541d0c2473"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApdhHVnL5iJPUuE4k26Vrdt8arPFT6cfu6VhqSBs8S4d"},"signature":"sSF7kbDRs7XtiH6+cSlCdIIwawbKN9H0IUbglKmhdUV6PKPQjiS3HwN7l5IVmw738EVpyaRcSf6/gg0I/rC2dw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1juysjrlry5r34a9umh4606yl2m3nq5t2p737as","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"HjgSgeH9g+ls77WhMdqliRvgQ+tQGfpkvPQqNPDFa0MIrrVlsOVQ2gb7HDld2iGxgT7LN58auYmv4ZOxpV6jyA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1juysjrlry5r34a9umh4606yl2m3nq5t2p737as","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","endsene",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah1LReuVXPgNzsza4zv1zskgIYDpfQg8DZWVjlXRN2hG"},"signature":"/LsaJl0RXSbRsQmatWHt97lFWGM8/RYS3qS7D+Q6Bt83Kbh61VISoxQbX24rol/3zJOWifgRt4VOR2PTjk9wwA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1juysjrlry5r34a9umh4606yl2m3nq5t2p737as","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["endsene"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah1LReuVXPgNzsza4zv1zskgIYDpfQg8DZWVjlXRN2hG"},"signature":"WlF2bZK78GhfJ403fPNsVgZ/J6sV9LivQderszJSKWJuHSpz0pHw7uepGjAoxeurlmahuH5Ltk4ciupylCSJiA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1juysjrlry5r34a9umh4606yl2m3nq5t2p737as","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1276","applications-and-smart","https://medium.com/@orestkang/gno-land-is-a-platform-that-enables-developers-to-create-blockchain-applications-and-smart-652a4da07814"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah1LReuVXPgNzsza4zv1zskgIYDpfQg8DZWVjlXRN2hG"},"signature":"jO9JIRpd3+Sd/IzcS5y4+K6gFQHVt9tuLNyHit/Rvw8DWco1Bp+7E9taq+Ggogwz9KsRF3aUzJTIzM7KUebBwg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g137juunqfjd34wf6msz728d99l83z9t2mh963h6","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Fqd5PDl8IeWUKd2rmozmQQu+TnohyVvDJBgX6THbbZArLkxvIfxhuPYY3j0wsgf0sHrL22j3o4aOmlRa8yr5tg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g137juunqfjd34wf6msz728d99l83z9t2mh963h6","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","lenchwy",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0fyqndZC1OecloTim/JGi3z0QgQVFu1h0MJUvJtvVxC"},"signature":"IflCGnByI/xuf80d7SuVQ6LZsPJsRXKxfwdpCXBStvJ3lVNeaC9kOeKDOPRRik+xqH/C/zHIuRbzvQYJqwvNbw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g137juunqfjd34wf6msz728d99l83z9t2mh963h6","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["lenchwy"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0fyqndZC1OecloTim/JGi3z0QgQVFu1h0MJUvJtvVxC"},"signature":"urAeIaiWn0FXfvxhwXVwxf3Dqhqd+9h1BVHPsYgCl+MN8lo8R1i3mQ3CRN5XaHLkP+g5EAL41VAYtM/vuzMFyg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g137juunqfjd34wf6msz728d99l83z9t2mh963h6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1277","Gnoland is a platform","https://medium.com/@olegkoronn8811/gno-land-is-a-platform-that-allows-developers-to-create-blockchain-apps-and-smart-contracts-using-c3b516ec7970"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0fyqndZC1OecloTim/JGi3z0QgQVFu1h0MJUvJtvVxC"},"signature":"sgzGQNrLALDQ449Z5FHQny8gIpTSzBDAEXnmdmKLsvwprhntGVK+yOgvtvyKGWn3StFgchJV25ppODFnAIQW2w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g19mzy9nm3zj6za6ws6jtvlxsvcpxzvuznfcuqa7","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"6WGl00+Bk8scp6E229uw7HYzGp7h7bHIKPFMeeJBnRBNYmMCHOhcdWw2ZetbY7AAdezMBwXiFSH5C/uX07rT1A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19mzy9nm3zj6za6ws6jtvlxsvcpxzvuznfcuqa7","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","uinround",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5MEh6eFFvlnuAQjw0MJMPnZlR9zNCj9/QVJVBDVclxu"},"signature":"zHA+x/2ihsKy7CyMtpQV5b1+6CL6a1rj34J8HBdKhxhenhrwPf68/OlkZxZCRoxGx0Ou1O55msAUR+zohn0pHg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19mzy9nm3zj6za6ws6jtvlxsvcpxzvuznfcuqa7","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["uinround"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5MEh6eFFvlnuAQjw0MJMPnZlR9zNCj9/QVJVBDVclxu"},"signature":"8FGNUWnGKe1MGEJuyjnOGHigWkkPOBxnuh7Pl+EHZUMxm1Mh+df0Dp6mhT/IZzocp4+YR3fxBietvgc6V+EoZw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19mzy9nm3zj6za6ws6jtvlxsvcpxzvuznfcuqa7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1278","create-blockchain-applications-and-smart-contracts","https://medium.com/@miartem111/gno-land-is-a-platform-that-allows-developers-to-create-blockchain-applications-and-smart-contracts-a0e2b9fb9b25"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5MEh6eFFvlnuAQjw0MJMPnZlR9zNCj9/QVJVBDVclxu"},"signature":"cikXGZ17pPgIqW+0sKCqvNPr10F8oX1kG62VXDGLYMANnd9n7zLwfmxtggNUh1wpAFowMLmlmykkbrQYHFiYgw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","amount":"10000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"rG2/hHwavs94xg4h/V8PQW7t6zkjomMHEJ4+AH+pRqZ1j5NDA8WeHyme+GWADBVqOs8Rr265AfD2q5nwghM/ow=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"hello","Path":"gno.land/r/demo/hello","Files":[{"Name":"contract.gno","Body":"package example\n\nfunc Render(path string) string {\n  return \"Hello, example!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"ot78/Mf3fta7xI2Ar9cZPObsBG4zZhnEFPaVdVSR6HUARiGQAuYc4HemdKnPAeK/UIVEd2N5SrSVhV81Tu8CoA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"hello","Path":"gno.land/r/demo/hello","Files":[{"Name":"contract.gno","Body":"package example\n\nfunc Render(path string) string {\n  return \"Hello, example!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"v5W6VVVE/aVr0bgP37ssPoNExhme5mZgE5QVYRYvV+kz/+OxFatdzWURPs2P4Co7QWcGiLbSeSG6ZlrWE0PDFQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"600000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"ZDKoVLgxcm22jnY59w7wAB5z2orsuCRFA495bRYk965qu8TsSMPRUiDtnbpEdmlPOfZ5q6FXn2UpnRhBeoEg6w=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000gnot"}],"fee":{"gas_wanted":"600000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"I7+Z3ViEiud36g/pY9J7jIiFZRODfl4trm8zZCOvZkopN/CJdJcDnGouMMzXVbn+klwsZN4BmoRQ4CQfNXGkaw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"600000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"pWOyam5EOBAny8MKYoqioaAUgYOK1P6X/0LLPERdZGZRZzUdu+ZhlYhb6kgw5Dt5RXJ5Yq9SUg+5+txO66/iHA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","package":{"Name":"maptest","Path":"gno.land/r/demo/maptest","Files":[{"Name":"ff.gno","Body":"package maptest\n\nvar (\n\tmymap map[int64]int64 = make(map[int64]int64)\n)\n\n\nfunc UP(key, value int64) {\n\tprintln(\"=== CURRENT MAP === \")\n\tprintln(mymap)\n\n\tv := mymap[key]\n\n\tif v == 0 {\n\t\tprintln(\"insert key:\", key)\n\t\tprintln(\"insert value:\", value)\n\t\tmymap[key] = value\n\t} else {\n\t\tprintln(\"update key:\", key)\n\t\tprintln(\"update value:\", value)\n\t\tmymap[key] = value\n\t}\n\n\tprintln(\"=== AFTER UPSERT === \")\n\tprintln(mymap)\n\tprintln()\n}"},{"Name":"ff_test.gno","Body":"package maptest\n\nimport (\n\t\"testing\"\n)\n\nfunc TestUP(t *testing.T) {\n\t// gno test ok\n\t// gnokey maketx ok\n\tUP(int64(1), int64(100)) \n\n\t// gno test ok\n\t// gnokey maketx fail\n\tUP(int64(2), int64(200))\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"eeoTWS+Hsku56xQVkDwjZgu+Tzxf3zX0bvQ2aQH+rAdIBamHIvLaJW3wQnAhDux9FzF8Sr76HdEDCJNvgBKkdg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","package":{"Name":"maptest","Path":"gno.land/r/demo/maptest","Files":[{"Name":"ff.gno","Body":"package maptest\n\nvar (\n\tmymap map[int64]int64 = make(map[int64]int64)\n)\n\n\nfunc UP(key, value int64) {\n\tprintln(\"=== CURRENT MAP === \")\n\tprintln(mymap)\n\n\tv := mymap[key]\n\n\tif v == 0 {\n\t\tprintln(\"insert key:\", key)\n\t\tprintln(\"insert value:\", value)\n\t\tmymap[key] = value\n\t} else {\n\t\tprintln(\"update key:\", key)\n\t\tprintln(\"update value:\", value)\n\t\tmymap[key] = value\n\t}\n\n\tprintln(\"=== AFTER UPSERT === \")\n\tprintln(mymap)\n\tprintln()\n}"},{"Name":"ff_test.gno","Body":"package maptest\n\nimport (\n\t\"testing\"\n)\n\nfunc TestUP(t *testing.T) {\n\t// gno test ok\n\t// gnokey maketx ok\n\tUP(int64(1), int64(100)) \n\n\t// gno test ok\n\t// gnokey maketx fail\n\tUP(int64(2), int64(200))\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"E/ejM+g2W6xhwAoS6XHTGpELt4hNxBjzylZRqYrD0sQJI8CC7cyeFOO2N068eZ2CW0sxdt+8R8qkkVDeVob+rA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","package":{"Name":"maptest","Path":"gno.land/r/demo/maptest","Files":[{"Name":"ff.gno","Body":"package maptest\n\nvar (\n\tmymap map[int64]int64 = make(map[int64]int64)\n)\n\n\nfunc UP(key, value int64) {\n\tprintln(\"=== CURRENT MAP === \")\n\tprintln(mymap)\n\n\tv := mymap[key]\n\n\tif v == 0 {\n\t\tprintln(\"insert key:\", key)\n\t\tprintln(\"insert value:\", value)\n\t\tmymap[key] = value\n\t} else {\n\t\tprintln(\"update key:\", key)\n\t\tprintln(\"update value:\", value)\n\t\tmymap[key] = value\n\t}\n\n\tprintln(\"=== AFTER UPSERT === \")\n\tprintln(mymap)\n\tprintln()\n}"},{"Name":"ff_test.gno","Body":"package maptest\n\nimport (\n\t\"testing\"\n)\n\nfunc TestUP(t *testing.T) {\n\t// gno test ok\n\t// gnokey maketx ok\n\tUP(int64(1), int64(100)) \n\n\t// gno test ok\n\t// gnokey maketx fail\n\tUP(int64(2), int64(200))\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"af/Ut75kJa34e0SZu0xLDtJeWMr/zRZ4YZY1zpgZSQBXfTHXLjdwJdv/q8r0MPQ3iCS5Ed4PVYpf1/b7mnUVHQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/maptest","func":"UP","args":["1","1000"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"56Yu5JFwJU12S/Vz4/WwiFBB5lfg33Oo+XU4hSRlDjNuyqCPsgGCySyb/HTDIcwYDOy2ctIRNn/AvEihY42u1g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/maptest","func":"UP","args":["2","2000"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"/aBxsL65NbDMWJ0W0M/nRmTalV/DxCPFy6ZnvKpfMe55myWsSWocp/Ki6xpro3rFKBfK3HUHuIaefymoG1UyhQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1vgk30wd82hgu0ngr2ezq97056dhlsgsx0wm76c","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"VM8Z42A2RdPjOIRZwvaS2jLK3J99okjkh+4YUNg480ZeCCpSZZmOTapwMHsqP4hu5RO09OMsRH+CkAL+y1ejtA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g100dh8p0t24ha6k4s9l7xktjwx47dv5r5gfraex","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"LB43Esp+JsoBj1RsklIpL3YUx5ra7VY/jjBDsx81NSwX5mxf4MY4dYYb++TVW1llfCuDIfiPwE8xvjBvMANEOw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArADVPfUBrZVmlqmZWPWucRTe9gkJ9wJFyTszJoU5Ebi"},"signature":"3E8NE3adUmj39hb2hNf/c5258OZHiSkyQE79IhyS5zZ0WrXO7tWkaNVzoi0Y3/1CmOiFKyMLllyv/6Z5nDZC8w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g17ec6vfn5w5lzs9s5cxqjuy3xd9kqpkhg6zd4an","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"8nb0vEmfVnXpJabYHIwIe5EAWOoG3HKXQiBtArLARxwI3ovt6gvzIdqTNe/SW/V4fqhRV5eg/s00nOMTF8qvYw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g17ec6vfn5w5lzs9s5cxqjuy3xd9kqpkhg6zd4an","to_address":"g17ec6vfn5w5lzs9s5cxqjuy3xd9kqpkhg6zd4an","amount":"111000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsUL/t706SoKrZcCOQLfo+LH20e1Y+mUcsrORgc118XG"},"signature":"gJG8cQHv9CJ6o/y6wS5y3FMR9HTcFBw+K3L1VPaz1E0TVADNFGmPZDRik03xXzqDMF8jjYai+RCI8XIB4WezEg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1r8r79suzvajkh047qss09ce3akegaqars3j6uy","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"cYTvGh7nvlfSYIlGBEMcfgcaCdnJ4JdXwkFQY5ExmPFQU1DJCgm+lWOSnj7tlMYlPIbWruzQIlLoFjHqVDaYHQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1660d8lg4keycr757h3lyys8segtmzgwnrmhk7v","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"vzJeKYqu+mRDDj0S+nADLMrirxNXtwAtpLQQMOTYOT1egTdzH1FhxmFGz3oB5jCBIK13g6LAlSphxYFuO9wm2w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ckg5ntr6nshnq8y4xyw588prn48kdcdzcheyyl","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"xoVQjyi4qUOMERQJiGNx5ivWtNoQHD/nxeIxUrEXlZ5bnX/mcvqRubGnwIXK1wrsy9LBElgYexi9vBos39iicA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ckg5ntr6nshnq8y4xyw588prn48kdcdzcheyyl","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","ryphpant",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AteibZgGr4sz6S+Q/raYBD4D349612BmE/EAADn/eqGh"},"signature":"m21E0YfLk37QM6BoMIc/sWYzKyJL7Lp0C1beuJHz5bsgbyc56s6d8WlTXWizxTzd070duX5j2XqBfKZIVuD8Vw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ckg5ntr6nshnq8y4xyw588prn48kdcdzcheyyl","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["ryphpant"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AteibZgGr4sz6S+Q/raYBD4D349612BmE/EAADn/eqGh"},"signature":"tEn6mTvUeLd1P1PdOQD53H+95K0DELdB4lvQqfz0GRt429UnnlfDICnPsyAw2UyVkFUeXOxNZqzBQQ0FBZDUBA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1dgql3j9das5tth7f9lrqksrhtzdq3ws6yr5rz9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"5ICe3KTkD9xS91e6vwM5kzA7drRHTEoJbR7oCYX1bbNEoKM/miswhxT2MimNMKF380MqfNNG+CihMSaVri21+g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dgql3j9das5tth7f9lrqksrhtzdq3ws6yr5rz9","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","turbtres",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8FWfBlHjC7U2WyJYkVB8ba2vEBTdTSzJuPad2e64CB1"},"signature":"iVIRiCyVE5kqSDT++I8FNXVdNtGZSs6OOqDsGAruPsBbUsI3+5Ct1MJqTK8hDtHD3H7184ssOuDcP4VnhbWqAw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dgql3j9das5tth7f9lrqksrhtzdq3ws6yr5rz9","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["turbtres"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8FWfBlHjC7U2WyJYkVB8ba2vEBTdTSzJuPad2e64CB1"},"signature":"Ti3Ct5snywdWpM2b96IEYXJLKOP/+ju9IWgQpbETXRNBrHVBJXulx/6OQTHd8Dw9mBIrlhbz0WA6mo8mXR0Zaw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1629j0qu8ahwl4hhdl8tkgszj7arksf5mrkzndr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"3cxbYLctMkBREBAxzB28URtb8l/iU5XmHwC1NCxnsApe2o6VYcta65bmuBhry52dffN+E+Btizl74+knVkbuMw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1629j0qu8ahwl4hhdl8tkgszj7arksf5mrkzndr","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","eyedtooth",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Apv5FH+YoA6L3fNOBf1fnQKEjulzdSLuE2esrdB3fRSJ"},"signature":"31pmg+8ravZYAzufY2S5jWZQo/cf4kpedOyomDNEcklChrt0C7YQZ8bXMBEj0a6SnPz7bNrFbabwNMm0/RaO3g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1629j0qu8ahwl4hhdl8tkgszj7arksf5mrkzndr","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["eyedtooth"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Apv5FH+YoA6L3fNOBf1fnQKEjulzdSLuE2esrdB3fRSJ"},"signature":"ilj+sjan9G60gkv7nc70L9MxnJnJSthU4RZWFOicjZopqiHOwBkkqQQAgzNvdLC8OR+bPgXp0cJ5sZhO4tIqHg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g17vxa4jxl9wa4dw6mz47g9zrx0vt73z89sqjwlu","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"9lOp7hQoshiAhSkHI2sU4fXo1rAYlctpHbCv8Qd8wfRK25JdzsMC/CW4nnmKeS/+Oa/oTmgpXuKXtCmpdKlAJA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17vxa4jxl9wa4dw6mz47g9zrx0vt73z89sqjwlu","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","dokplance",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al5+vpe6KkI1zraM7mmlp6nOGuBDisXyXMWjvQezXdF0"},"signature":"mu2xfvmPo2aUzyM740Ji+LZFRIoN26eRnnmdr6P1JJx4SlGf5blXxz3arAuFuLQ/bsL3LGyHzm+FQ6LG1VLK/A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17vxa4jxl9wa4dw6mz47g9zrx0vt73z89sqjwlu","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["dokplance"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al5+vpe6KkI1zraM7mmlp6nOGuBDisXyXMWjvQezXdF0"},"signature":"KJEYdEHjUVXYNEMOnLwm0bnQRrdf1j8U+sWQSN4m8QJN6YuCdLPVRguOPxIYx68djImBi/ZCNFwcmQUpaoWSpw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1v78z55ft733za6fg6rugs52k82aynyslrxdelc","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"3vwCRaDHm/SxxDxfFE+fXyf6efq9LEUrjB4FE2pUYDV3Z4TTBmkwbc6RT1lIEPp/yZ2N1vxIVAglgXRVrWuS5Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1v78z55ft733za6fg6rugs52k82aynyslrxdelc","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","sitecest",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ahg/NbDtwAbQ673/EbuwxKi0+xoMR11TJWgzURJci+Nb"},"signature":"qbFveDEj9GlrYTAMblmfPRD1ws4SISH69WrwOzobLJdJhTZo2EuKih+q11BC19m9GJPKekWWZwT0eA47BBh3hg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1v78z55ft733za6fg6rugs52k82aynyslrxdelc","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["sitecest"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ahg/NbDtwAbQ673/EbuwxKi0+xoMR11TJWgzURJci+Nb"},"signature":"QqtCrwnE5MlNXQbe/0IiwJhDfYcKBVqhpQQpeoLfQO5RTG8saF6InozAwNrLgGUD4Vez96w7N3DnEWCqknL/Uw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g17ll97ckgzj0sklty8aqqnr8mcqvvg6ysvyhw4p","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"DFAuAx6CnAkSrqtfpYQotOqPR/rNaX9K3w1LuX7RjPtOaJWpGdqcJsP3yjYwI0YPxkmD+JtCTWgs1CyrLtR58w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17ll97ckgzj0sklty8aqqnr8mcqvvg6ysvyhw4p","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","VadymU",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnCQwa5XhoBMKYKZrZuZKje9Rs9HM5Wh07L6wYPjMDye"},"signature":"RVDw1gJf9Ws9OrUPR7xkgMPDFVLd5If87cmPsKy5b1hcFwhDl+rfT5QRJzcCGj+6N6CHLf9pTN0gU+dk0h8dIg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17ll97ckgzj0sklty8aqqnr8mcqvvg6ysvyhw4p","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","VadymU",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnCQwa5XhoBMKYKZrZuZKje9Rs9HM5Wh07L6wYPjMDye"},"signature":"4zNX/tJESVDj6PXtBaPRtry33LJ5ElfO987+ea2Vs1E90Uf8/53viBN0V4WZMz/qWPK2kWH5nt5UWzv0yTYUJg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17ll97ckgzj0sklty8aqqnr8mcqvvg6ysvyhw4p","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","vadymu",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnCQwa5XhoBMKYKZrZuZKje9Rs9HM5Wh07L6wYPjMDye"},"signature":"aXeWtuJhHk5oRnx3zF6xz9yQhLZdUR4a+Br7w/1U8PZ8xB37fs+KTmTFPXI93dXOTHjvhnqRxUNrjdTnIGmdJA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dgql3j9das5tth7f9lrqksrhtzdq3ws6yr5rz9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1280","Gno info","https://teletype.in/@kuuuk/kFrCqXP6B5N"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8FWfBlHjC7U2WyJYkVB8ba2vEBTdTSzJuPad2e64CB1"},"signature":"C9HNmvuWHbmZBRcppCoSzm4c1TfDzG53Glkhmw52MWgZ6tHd619w/WTaNQht/ZGdpI7uClfelZmGOXnkZf5mGA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17vxa4jxl9wa4dw6mz47g9zrx0vt73z89sqjwlu","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1282","GnoLand art","https://teletype.in/@sannn/3m5sxCONKNT"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al5+vpe6KkI1zraM7mmlp6nOGuBDisXyXMWjvQezXdF0"},"signature":"6EeatD80ZBuh5I/XmRRkeDgsm9Wgrxn6S11TPRQFXqkjJtpjnrU6c4289c9HaNPPZ8Fzmu7hIzavaEEUbUmaSA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1hqguyyr8thgy0jjacptvtm6vvzmsukjuhut83r","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"2zjeWJAOT6u7HMElwbM5fVn9j7J791r751RdD46iVtUPbIzPBG7CyFLJhmfvv+6jAqIKjDwPEjIHg/mRERGQDg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ckg5ntr6nshnq8y4xyw588prn48kdcdzcheyyl","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1279","Gnoland info|project","https://teletype.in/@koktevrank/parElhAOUIs"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AteibZgGr4sz6S+Q/raYBD4D349612BmE/EAADn/eqGh"},"signature":"ACCHMfQtLSRS15Sy2N/FT/bq6nj1/h33yUPfLt9osFN0F0dtmX8hNkkljxH0Gx/tuewQ4ATghQg0WGuSbNJIdw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1v78z55ft733za6fg6rugs52k82aynyslrxdelc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1283","Platform GnoLand","https://teletype.in/@tooot/_KhxLEL3DUH"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ahg/NbDtwAbQ673/EbuwxKi0+xoMR11TJWgzURJci+Nb"},"signature":"os3Emn/lZjrVboD/64VZ74C2XQJvrSLJK6/7rBjK0a0hTtno7k6Sn1oBqi8C0///IG+45FC3Yn2IG9dPzrI9nA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1629j0qu8ahwl4hhdl8tkgszj7arksf5mrkzndr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1281","GnoLAnd","https://medium.com/@dvkhomenko.ij20/gnoland-74687586ca6"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Apv5FH+YoA6L3fNOBf1fnQKEjulzdSLuE2esrdB3fRSJ"},"signature":"EtsEGDQQbPe3C7QerjP9WRIYndbljZqnxBrXWR00fsY9QhdiOCLGnk0X9qL5XQzKvbt2mB3NPXgpC+QfmHEIEQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1fzjcyrhv7rtrpwhsd0mhl9n7ahxm0v34p9w5kn","to_address":"g1kxa74mz8hul5tge3rvyep6epzhkf99x29zac7g","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7BGCHnC+0EaBkHciQ6D+fFVnlumBrn4QABY4FhxNlab"},"signature":"gf7OPJVYs3CWQ9YDNcvtok3+YYAMRsJs33OwpUB6snIKWsqC39lpvXmuhRVlXBlVvE62ve3sHD5cscACwNLRqA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1tqy8vkgm4s8a8jq54au20tfju03axu0k5jeqq7","to_address":"g15jmey7xajfcuw4090z9psl6q6pdz2gt9s98v24","amount":"1430000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7t3YoK5MTW4Ycz8m8RQPXQfLwc/2/JFqVj1gpZY4h1m"},"signature":"FZT3yIgub6BO0jqRLqrLSK8yTFlKOf5UrzJNAYih1XRpbWemebQj+8UDWhquuHFlJCe2o7Bccl3GfYeDf/QY4A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g13rt7q8klfcdlxvqxmaevk6zrspg033tczaujun","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"uXGZgDCCSl9JtTimwRJhGIXIxIJaSuMc7nz5TrF/m9l2jhevZHr9PYehh5U2UEBznBAFCa30+2AHa3kvjDTeyg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","123"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"er/XGDpIqaIXc8A7o92jit6X6Uz/T2pOrwI0qJ4XAbdcbzyvsFFTyqzrEa5kPwY+WmYXE5NeG0qPCwf24OU2Vw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","to_address":"g1qv3dqyw46fut94z9t90jka58saw2e7l99nzqtr","amount":"121000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"awtC5jsi4ZbW6H9lAAl9iYWWcO8s749PG2wTIjVjVo4CnDRbZl3llRxCEkDGBZy3+Hh78hLI5SXhEZSKUo6E1w=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","to_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","amount":"22000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"PbpulkgpokPaROnNu3lyfNM0nwdzd9o7GxdFfazUYyUrokv2g2V2mSzw9Skv8t1cE5pCZiSYVgDPZ42+vnspLQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"100000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"5aOj4PKUSnTSCCHlX6Sk7hqguboSNxxgHkCUJfAJXTZN9mgHJL2VEele5zPIP5bKwQQAiRCj7amGSWIwVuF55Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","100"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"MPEssN5dMYjIEk7lMyywamnmM57xesScc8YcmbJMTy5YbfjgAa2WvNTIFoH42O2jLBVjv//GKcme7s/91TmpbQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1l47x640c4petu4chfjge3qg2uplakx78hkxqxd","amount":"123123456ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"zXw6Jc1Cxr9spV2RItY9IPzCxLcQXlPdL+VgAm8e9NIFwaXryZqXCmtLHUaB9kXfzVwAdKkjwlPK9OZtr+iqBg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1l47x640c4petu4chfjge3qg2uplakx78hkxqxd","1234.1234"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"ssEbbP/urfkuWArtq9BELo90Cq6DPmCHYSxaCHkN7m53vDzuYxC7RsPd34vylATno6hp3KZQDTjAeZSqM6GsHg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1l47x640c4petu4chfjge3qg2uplakx78hkxqxd","123"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"oHIJvlRC4vfpFjyuob58MBD3lAEfnYXlDajNuijVlHNeW3lAz3KT5VqiOkegLT0/A1HIw16GZ5Zb2/gmRtAZCA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","to_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","amount":"1231000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"FtLahJqMpAiYzYcltGD6KrehNQJsBSoaza3shOxkYTlcdLCy0H59RRzGDDYw1f+acOfxWmQJdgcvVyTtJ053uQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1zl8pfle4w0jw2yln6pz8hy66y9t3eamrxlgzqu","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"CHTqXN2pOD/c77aQ6OYysGIF06SdERG/gX2ZffkzdGUUeDZqE1qCSRVR1DuMTNw9d7i3BzpZMJ0ajZRYkdtSgg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1e84jpp73v9g7pqh9t55q9c2j22fdlv5txslzjr","amount":"1000000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"LkZjb19SPX6sBBSJ17+vtuOm1spRP2LQrKgwHbDAPUcfUtUTsBVf/BeioKQPrc6D7wFcPPtEm3TPmSznE14UNQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"24000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"eIxPi7+dfHzWBCk8dKZ1xmVXri53RYVob69RMPwqG21FAZ7Z3vU2IWb7P9Uaqhz1UMpf01VK+mFXYYsPV2rWQg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1vjzmsefs0uznnpgfj2aw5fa5nz98287n3vtcjp","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"TZ8MpBArA/w8QOF2vH6LYfVvaHF+C47Bdm+puYzFZzM3oUHWA2gDTRhLnmcWlgNrqMvPZ5l4U5G5p4vamLaA6g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1djjstdz23mk5mysanxarua77hvqdhh3g4z3s4x","amount":"123000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"VLRadYCn8IhL5rUL94pbUzLORJqYNV/QL5ZZ4uVTozATroaZscSxLNpPTBZfr6LK2LYTai2d996/+0mswAOaqQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1djjstdz23mk5mysanxarua77hvqdhh3g4z3s4x","123"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"bkPPC/vuhFKute2YFSvLhLFInacOORrVq/BEKDumkHJ5nrCoDo7/dtHLUvakMq0n/OztEZTQb1dbyzUCP9+Dig=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1djjstdz23mk5mysanxarua77hvqdhh3g4z3s4x","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"119000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzPHW5mkFNopo0z+MgYbIgDpAh3CuABM8E0/pUeLveDb"},"signature":"AlWGOu/Cz0GT0dXucY6CGIubIe84XocU4eOpT1zK0Q0Z01l7Hh0x9UWaXr2CztEWyqMAhSPZRGMbUvYZX6fN7Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"t+OaD1n7KRaT8r5+hbA5dUgHARlOo8oF96dYbeIW/tkwKAfDY1F3fiVFHhUhoY/gP9Z46ALNMlcfr16/nrCNWQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1t4du52tfdfcnsrhlkfxhulr3r2a8a965zs07tx","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoWl1n0gPDWHmsIdghOux9H5dKTvm5LHh/7c9EXMTS0y"},"signature":"d2ZmSYm50OxZEqCJHRsHOBOxojfXmchCQ0/ymnLAoNtOFmy0UK2+Xr51U8cMN22EXJQmuoXlhHEMibOEXsHeTg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","to_address":"g1a9uhkp358r2d6up79k5h9mfvjwqu3c9rx5eahk","amount":"11000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"pQSsFvVAPJYgHo3y4KtPMU4N4oIiU84QhYqsZvaR8qkppSBXYXN2eO4ZOUNm/oO6H2f9IcLo914x468FqlLWeQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1a9uhkp358r2d6up79k5h9mfvjwqu3c9rx5eahk","to_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aqtbwy8mBWNNAfuR1Rjg0xgGLOly/H/zVw7SBh6bdacE"},"signature":"wMzbvknPnrftWKvWUgNntTV4ZyjZsCnB3xr/4L4BP5s6xPIdGBYSRDKR9JjrgJoNItdyJKNA2eo+dJc/8JRLHw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1t4du52tfdfcnsrhlkfxhulr3r2a8a965zs07tx","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoWl1n0gPDWHmsIdghOux9H5dKTvm5LHh/7c9EXMTS0y"},"signature":"OzrLOMOrfosSM9tkvDxopMyQHUdUuVkcQdVA0etzPf86CdXjciFoPN96a62dTA/fUF9g5ykmcQ3Ti+/YEKGFtw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t4du52tfdfcnsrhlkfxhulr3r2a8a965zs07tx","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","12"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoWl1n0gPDWHmsIdghOux9H5dKTvm5LHh/7c9EXMTS0y"},"signature":"mJ/7/BGkRgXrAAPcayD15UvjMjtTJU+yIR4a/7gWa/gmshx/UIaHu/bE6FfMZKPPvKJySbh1LkjrMUndNpDlgA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1vjzmsefs0uznnpgfj2aw5fa5nz98287n3vtcjp","to_address":"g1l47x640c4petu4chfjge3qg2uplakx78hkxqxd","amount":"10000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5rio4cXlt1a6zGynsJ2F7iOp/vD3fB4kZujJlIARmUk"},"signature":"9HHQwy76GshkjZqglWiG/xPkoOIVGBTcyxzz7sYisFpPMe5zGBmEHZSrd4Tb4ZPFYIRnMHmNla2WFwer5X0+dQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g1vjzmsefs0uznnpgfj2aw5fa5nz98287n3vtcjp","amount":"1500000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"Kd1RiPq/h+vP0jGfTt5zgRiGskd8ZJBOYa+EN/amTVhZU/dzxfrbQRYfFLgNFOB1XrB76J+u7+Ba/cKKO5hKIg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1vjzmsefs0uznnpgfj2aw5fa5nz98287n3vtcjp","to_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","amount":"15000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5rio4cXlt1a6zGynsJ2F7iOp/vD3fB4kZujJlIARmUk"},"signature":"ggtid1ED5D9bnsBLCRG76MFO6r5m2p2yLzXHSrV3/74Qa2KfLYLkWZiMKkvQDXJ3WNVjggDJb4d4pSzBObh3GA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g10k0fckdt6r4guzd57dm2gdzaqe6n999fstezur","amount":"123000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"kljG12xwTQHSz05+nSo/hA8c4P8BcLtJpBBkTlIn0NAA1BNEflUK1rEJZGj6aoLfLdPgjud9SNSaBgJlQv6u7g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g10k0fckdt6r4guzd57dm2gdzaqe6n999fstezur","to_address":"g1ckddn039khwxzu4v5mc8n34vd9ksaks2l6c3kg","amount":"888753ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/CMIicAVfrqPiGflXjRr73LE48VtlyCPtntvPUcFNvW"},"signature":"iae39tQJWqteqqtQ1XnDZ914pCPNcmzB0jDtoIRt3KAMx3HGWpTU43EAVDd/E6HIIgsidLBy1P6EVJVXNkFwKg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1vjzmsefs0uznnpgfj2aw5fa5nz98287n3vtcjp","1234"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"CcI5dclC565Zb5CsMniLztTQ9mJi9J6AVMAxdpfcl5ZY5gg6icqoGbQZEBmB3K4KTJ5fe4y2sdVHUsk9CAIisg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vjzmsefs0uznnpgfj2aw5fa5nz98287n3vtcjp","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","123"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5rio4cXlt1a6zGynsJ2F7iOp/vD3fB4kZujJlIARmUk"},"signature":"C6+Xl7iuqlkWabSwNTuOHPBKu3uhih91tSC5DRH5RwoAhpAi6Aeer+OwSRpbFuZVxOYP/rR8EDfp9FHBSV1WVg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1t4du52tfdfcnsrhlkfxhulr3r2a8a965zs07tx","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoWl1n0gPDWHmsIdghOux9H5dKTvm5LHh/7c9EXMTS0y"},"signature":"b9IlBT/88F/eKF8g92BPks8ifRwQKaIistnG8D5rl2FCz4b8ZUrZ9ktRlI4OGvpl1ov9Q++IBSdzrftMG0ODVw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1231"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"hAIrGfTF6io0BLFkN/UjU2N9XunupIAL5WxOt7g4k8lOEt+eGHFoLqIDrIg5DPCdjRabyeDcGsy01mXCMwQP/w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"/r/demo/endgame","func":"hi","args":["1"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"2Npb66GW7vEEbgc1Sw2QR+NdjooHonV6VuqubNAYlORMx+3qA0toS45flVLGuGiiiwE+ri63kgWldf1o1MM1FA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"/r/demo/endgame","func":"hi","args":["1"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"1ncfVGrqJylYeJ4tHI/oCqoJDxclxoGHZ6k6IztixAonZZ/yQLNWyg0A1/rQy94trRIhrxbQ0ZldVSHowhlqqw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"/r/demo/endgame","func":"hi","args":["1"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"yv62bTTf+BeADoPC26tjBtKffviiChNdd1rvqS7V9x8Mbhq2fMlMKZnPAJo0T//hq8QQW1gBUeAKM/nTEmjiGg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1xkp4ervu83fl978rplemq990n5fvk4n3xq8d30","to_address":"g1k8f0jnzkq05zxeaugll8srsr8t2dyfj62958cy","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvJaVh8yh+reix0EEt+v0igy/fu8n3JwyI1keN3TY0II"},"signature":"1hxmfsScbOd5kx6VFF/YtW8Zjg1iIeCKZm5CgYFnWE8aPtjME3OIkSRrjClqFFtxQitn+6V9zxUloW7FcAdE4g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"tong","Path":"gno.land/r/demo/tong","Files":[{"Name":"tong.gno","Body":"package tong\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\ttong   *grc20.AdminToken\n\tadmin std.Address = \"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae\"\n)\n\nfunc init() {\n\ttong = grc20.NewAdminToken(\"Tong\", \"TONG\", 4)\n\ttong.Mint(admin, 1000000 * 10000)                                    \n}\n\n// method proxies as public functions.\n//\n\n// getters.\nfunc GetGRC20() *grc20.AdminToken {\n\treturn tong\n}\n\nfunc TotalSupply() uint64 {\n\treturn tong.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := tong.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := tong.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tprintln(tong.Transfer(caller, to.Resolve(), amount))\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\ttong.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tprintln(tong.TransferFrom(caller, from.Resolve(), to.Resolve(), amount))\n}\n\n\nfunc Faucet() {\n\tcaller := std.GetOrigCaller()\n\ttong.Mint(caller, 1000 * 10000)\n}\n\n\n\n// administration.\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\ttong.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\ttong.Burn(address.Resolve(), amount)\n}\n\n// render.\n//\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn tong.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := tong.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"fKdwh3ZXDzKMMtwIl6PaSp5Cdtq7D5Mb+vBnUB4scZ0NxsUeZcjaN7EtZ0JqvsmkWAhaYiy/0vihh2AsOKbeRw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18cwpdpsqd8mywj8skpsqsg9tn9hudkkpa6ycpe","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"VE8HKgcrt+UEpsoHUl0YwhH3UrfsWYOIwUSIU84OAI5Wu3VIIQ+rbLcBXHq8UzP0rmZi2a/rGdvI68QQRo7zbg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g10nayupw4dxmmue4j45m8unyy28y5t7h9j9vqfc","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"BaTCNfEFOmz6AewxopBmFUU8nVT21g4rPJYVhRyeXM0tSdVWORtxDPeFNRi1OEh2axoxUkX3PoDDD907iK2XDw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"tong","func":"abcdefg","args":["tongtong2"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"qygZC4RSIYCkpfJATwuUGyGrhV6W6pA8uygLWVG3Pnss6ugW8vvYOsvTqUTiivlZyv9IMWDI+ZdpeVLbwtAfxg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g17mcw908lp5y006avp4fjr082wrzryzqh2qgr8k","1234"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"CartCiWYcDzKDMBLz3PuP03P1FDYkMR5oS9ckaAVQj5seWavPLqyNonPT6OlD3EaEDPmrxCynOy2JTgecvu1cA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g17mcw908lp5y006avp4fjr082wrzryzqh2qgr8k","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"v3jVQizDGqCVzREwocJbGRr6JtTuoErb1q/H+SoxafUOArX8wL1rf39JfLjtgNPyZTUHpesj1cp00vY3hRF5VQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17mcw908lp5y006avp4fjr082wrzryzqh2qgr8k","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","1234"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1Ie2uJQVGI4K/6kwsKQkZK48YDrk3Ic4DKiVS1Ee2yL"},"signature":"2yWTb7rlUq+g9s+i/niDAqMZD0uK24CY0ejBOJ+Eu7cVk1QE7oi4sn5J7Kf8ZXsLy2wYrmYJdRF+mfycOcFXEg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17mcw908lp5y006avp4fjr082wrzryzqh2qgr8k","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","1234"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1Ie2uJQVGI4K/6kwsKQkZK48YDrk3Ic4DKiVS1Ee2yL"},"signature":"tC+M1gVK88O2CYhKeo2prq6Moe/XJCgz53d2LjpzOh4mD0LNiAByyL0PkvTyX5ZPLiwnCzJ39/sA6BsD7G1+Zg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g17mcw908lp5y006avp4fjr082wrzryzqh2qgr8k","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"2K1JjkdIXQoh23gFCe3zHjb8cz7xMkNlH5k6mrM8qixzdGj0tbFsgD3nfm8CJwV2ig9Iw+pPxPZZ8kXO/u8NNg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17mcw908lp5y006avp4fjr082wrzryzqh2qgr8k","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","1234"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1Ie2uJQVGI4K/6kwsKQkZK48YDrk3Ic4DKiVS1Ee2yL"},"signature":"tH2oQxdIjMTd5DxShw5Bxg6IqbYCsGuGW7HKtOfOV+gvNJ+ktA40DH/fBxeBWlFMGQWr9C1HBiL0T7nT24rMfg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vjzmsefs0uznnpgfj2aw5fa5nz98287n3vtcjp","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","123"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5rio4cXlt1a6zGynsJ2F7iOp/vD3fB4kZujJlIARmUk"},"signature":"Ic0vZ4pGynyD9dKx6d8uiPJW8AJjxhrQpZUcWhr9B1opmmZKBdqY3B4fI4WLOmYpjuLN0Ha0FnQ3LiF9zPsVkA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17mcw908lp5y006avp4fjr082wrzryzqh2qgr8k","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1e84jpp73v9g7pqh9t55q9c2j22fdlv5txslzjr","1234"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1Ie2uJQVGI4K/6kwsKQkZK48YDrk3Ic4DKiVS1Ee2yL"},"signature":"lzkw/ShEb6PzqWe35cvd1SDHDgKcp6z0JPQfTDnu4ARBn0DQieaoM+qTT3gaBndTsCjISHZ3m/Hxr/2pA/amFQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17mcw908lp5y006avp4fjr082wrzryzqh2qgr8k","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","1235"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1Ie2uJQVGI4K/6kwsKQkZK48YDrk3Ic4DKiVS1Ee2yL"},"signature":"BIzjhcf8Zomtmr1te3KWqPHZ0v3CNCUUINRtpaRBXTxWwCNxFl+qpOy+/ECDMJO4LhKRjO8nVuV1O1UIdPLd7Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ycyclyqnc3msyfdjl94xrlqtjy6fp9fzep0ukn","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"GG88jNduguFFwpvChgHgVTjcYfUemysh2qkfq45dyvtkZeALq0/EA2zgESXVErZvuB0RMFRKiOPE1C+4ITRtXg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1ycyclyqnc3msyfdjl94xrlqtjy6fp9fzep0ukn","1234"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"vljrt8tJ0zw0RGzWkq3lwUA7DmWEfzvE6/xzOae9rbNV7+wrA7csmyjrWInQH5eufsYUSMJuq8yGRBTfFVCRsg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ycyclyqnc3msyfdjl94xrlqtjy6fp9fzep0ukn","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","1234"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApIMC2lUdC0DYUYQdGv3fi/O/93XEI9jZqPtN+Th4O2B"},"signature":"LCSgiqJm66RlNSaPde3pV8DtmoEKdThzZf5D8gGD2xsoBOy+i6FKzmAzr1a8iJnMWkgTpLmB07ExRC5MG9CF3Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1l47x640c4petu4chfjge3qg2uplakx78hkxqxd","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","1234"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3+XBwhRNxB98UM5CE/sbFKQFUNrwd3wclkoRFngQHN4"},"signature":"x7/pdOBW28Ywz6EODrYS1o8S/o4TGpq2XWvKYvDC72EgeYvybmvfU57UQFKFvfWaqxx0hFxIPugXMvea4im9/w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ycyclyqnc3msyfdjl94xrlqtjy6fp9fzep0ukn","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","1234"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApIMC2lUdC0DYUYQdGv3fi/O/93XEI9jZqPtN+Th4O2B"},"signature":"RtCsrJCaP1p4QwPgX6BIz9rhx2O3MO+64aGhrfsMoxZF+gkCwGG8vEsZJJX+YEccOOQAoqmZrFDDKEdYd3IGiA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ycyclyqnc3msyfdjl94xrlqtjy6fp9fzep0ukn","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"155000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApIMC2lUdC0DYUYQdGv3fi/O/93XEI9jZqPtN+Th4O2B"},"signature":"Vcrw3rD464dNaCHof2waYDU5aFDMNSwP6lRimlsKlscsHdr/5UcAEKigXyBnFf/SmlOJN3xfJQgCjdhGt8Yonw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ycyclyqnc3msyfdjl94xrlqtjy6fp9fzep0ukn","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","1234"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApIMC2lUdC0DYUYQdGv3fi/O/93XEI9jZqPtN+Th4O2B"},"signature":"ymM8F/BlZ+JG/93ap2Ah/3ZastFporXlVLt42YcPmCAgHgTDkbo6emFTh+y/d88HTy2y05LR1RXMgiFLpn8ZzQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g18t9pg3r7yy6cpkzmqpe5n55ua38lhpcazqejtx","123"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"f5CP9lJkHv1eXLGr1nXPApY5zm1TfYPxIcRcHQAIv0cIbkrGkqDzPjsN1aW674iIl608aIU5KOJXmFwBc5F5Xg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g18t9pg3r7yy6cpkzmqpe5n55ua38lhpcazqejtx","amount":"123000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"zHtd4pkM78spDKny7Up7LVzm3Ai7ZD7pkuBtRk0QuEQddsXOm9YuRoO9BDQcNtkgbQCCHV77TmkLWs41C0uueQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18t9pg3r7yy6cpkzmqpe5n55ua38lhpcazqejtx","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","123"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Agqw2ifxy8PgpPGWCJWiLhGlxy7pavaUmVHy+SgFhuvl"},"signature":"PJLsdYqAhsfaJuewRgYYFHcJtsKziG6LXzXganBco4k8HweelWldPsGx2TrqloD/U0cH8VNmKaeKnwXVrUG7Ug=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1cx2fnl0uyndrxp9ymn55a609ngd5v34jut7je3","123"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"RZo9eu/AEUQYBpofw+JVfAEe2He5xYuQVW6vNulzlAtIjbHVlNA6lW5utAmL6cX03Tgfq4l/o4jU0soIbRAEbw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1cx2fnl0uyndrxp9ymn55a609ngd5v34jut7je3","amount":"123000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"tqBNtjfUjCXNFVVkZZUZ4/b09aBYe8VajStvPTw2lxV1kbaIZiK2TkjX0Bn1xzCkTZFSWy9uA/fbepFkeNAsag=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cx2fnl0uyndrxp9ymn55a609ngd5v34jut7je3","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","123"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ai3QQ5IypJ3I8nDGopu65ryI+4HCaUAVp2RNkAtPCvVD"},"signature":"HaSULu1dnQmQCqI+Fflh+kKah/3xFv+vhCtmX25xWf4XfOwlFb6WkS4YvHveV/eDu3rx3BXjQAJr3z1BcpXaTw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","123"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"QJwqNyuVDc3oYfISI6pQvaVJY+sY++dLhljJB0vYXjgZv6noj/Db0v7j3ZjlE+tQR/n0IKMIBUXGLVDAY8irSQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["2"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"AJfiNoyVj3VgO4HXpnYaYEMIgh5K1vb9YIg/5lMVOHtKSMtT3s89sUzRWUvwekcWXOxbkkHxzEBOf96yMoz6VQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["abcd"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"2KrwrCrwbSUdPbQkjCbczhHRMhJVCJ6leYizosU07r4wwXdrl+RneIG2s7xXZnD7PYek32QdeRFr4R35Feb/uA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"2000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"BIDoyHx9baHKQHhOx1yona0s0uvLFD9Sf0iOGeyX0ZM5a2QPi+Fzy3KEygDQOAGQV1xIwsQeksO+HTPH4CRayQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["abcddd"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"GhnVL6tJ3I/fUFZYSQPS2BFJuMA3iPfmXewBPdFh+CdjhZgRRVu/Ci8C+PJDhW/6PRlLOZ+p0nnqgZJ3RlRr6g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["abcddd"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"5+6v+D+E9cPdedpuVlW+N6xks8J3FOTC4iW6rUSdO5EGPYLZetLTpR59yr78lzzC4LwUajK3wZfBQd0vSPDAJg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1cx2fnl0uyndrxp9ymn55a609ngd5v34jut7je3","123"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"P+xLrmmP2DsFqN/gg4sLGdHUlxrncDkevTn5kbLKqP5njDJY2GtHnI7xExYYr0a/NLuLQsYMH8O75vVFaD4A/w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1cx2fnl0uyndrxp9ymn55a609ngd5v34jut7je3","12"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"hSlbLWf552xfzKdK7q8QdJrEZY1GUA4nkuYPR32GfdI1t/0mIFEbTSN9pO4M+FFGTWUnTKaxfSfaT8i+nvesog=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"10000ugnot"}],"fee":{"gas_wanted":"6000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"2Y2SYGALxp64MI4DkLBoZnfKwMLJetazlsxYjhsZyksd/lAfmiHocj5/c+yAfEUvn+MPP7J40YsAMklH08ewxQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","123"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"f2vaQJjmHCP8F5dvMR5Zy2LSGB/icLC4PT2kn4DkJ/J05XSCwtb6pwfWiFZ4sBlvM1TvpA4Q5VQUkgeZ4whpnw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1v0v7nsc46errsdhynmhu8e7e2g7l76n2e3kz64","123"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"e+WKF1Bv6JmoMwO+ytANOJ304mqUl1WRaFHPiA5fO/RPDY/jCub3esAcuvKbzMKKFudsXH/nnqnaICKm/tVrLA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","3053"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"KbrMDvsdmXoUJtaaHpUtluqGuLzpPHnFmtYrq65/d7oWZ07VaOQ6YgPV696xdqx9brpTgi68zsnUTNC73J+U+A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ycyclyqnc3msyfdjl94xrlqtjy6fp9fzep0ukn","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","1234"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApIMC2lUdC0DYUYQdGv3fi/O/93XEI9jZqPtN+Th4O2B"},"signature":"shG3b3zBhKHNyyvvLrQoH0Yv0iZdW/aOo3J0F5g3r0sXYpSs2Wm76rnx58WFlHUk24fiwKZWCFCEg9wQDXMVIA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","gggg","HI"]},{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","baybe","Hello"]},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"5000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"xiC/+ujCOVZtnV5JPbNoeg5q4R89DIvxy1k5kiIAMPx0Sj9r+gRXzEFNgApddXSvphwX2amE0jNi+d4O8jVm9A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","gggg","HI"]},{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","baybe","Hello"]},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"5000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"SglzfQPBssF1TLdAYfF/H6nXVX76qrJehfSoxN+JwtFOUfp6rHDZ+JubLIwV9RJtq48yfk510Wx/Gm2qAJcK9w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1l47x640c4petu4chfjge3qg2uplakx78hkxqxd","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","123"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3+XBwhRNxB98UM5CE/sbFKQFUNrwd3wclkoRFngQHN4"},"signature":"yHe2pCFYYRGfaX6SDXLR6VEO69IUtrb6uKZLjz9cLNY7zC51J3vtNx2p22FruPqssuje2hp28QARLwc3VCm6wQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17mcw908lp5y006avp4fjr082wrzryzqh2qgr8k","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","123"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1Ie2uJQVGI4K/6kwsKQkZK48YDrk3Ic4DKiVS1Ee2yL"},"signature":"/HsI0MSYY7RlU4iX6O9Snw26AvthV7yLtwaEJ5xLR3k5C0qq2t+NfKEM07HUqWb4KgP6z9WpJ5DYtzNAIvXpsQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/tong","func":"Mint","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","1234567890"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"/VpyYhnUvznfzUM1NN29wZAc/YzV0+vRPRBuuGSjkCEiqGNpDolsd0lsQ7AGPpTi0Tv0hwKx9kS/SAfVoHIwcg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g17mcw908lp5y006avp4fjr082wrzryzqh2qgr8k","123"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"EboxmT2d/96wAx1taOYXybQT4Xqy6c17yu4IH5Cuk6RMroenafkJv11EhONECAJZbA/0tAAiQIqJRSiasbYMFw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17mcw908lp5y006avp4fjr082wrzryzqh2qgr8k","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","123"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1Ie2uJQVGI4K/6kwsKQkZK48YDrk3Ic4DKiVS1Ee2yL"},"signature":"tiENnnIZN3W8Y0keqUc+1xZJyBOLyFnabF6hqaMqGooX6qDIEshflIizQrAEnxAfC4maDdgwlQ1Enmc/ANCEEA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g17mcw908lp5y006avp4fjr082wrzryzqh2qgr8k","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"100000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1Ie2uJQVGI4K/6kwsKQkZK48YDrk3Ic4DKiVS1Ee2yL"},"signature":"4vdmB0QlY4nHWXgep+W9MM67ljgJow5peTBGb3Io7b4+Z/EnxEQixTYF81igpwWI3v26SYUDAWkz8tpuylMsVQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17mcw908lp5y006avp4fjr082wrzryzqh2qgr8k","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1Ie2uJQVGI4K/6kwsKQkZK48YDrk3Ic4DKiVS1Ee2yL"},"signature":"4bSmuRFolTX8s6MGBw9pKwtoADxmHQbPVEYCGXUNqkBXammuJP16nyEElETMtoyZmI71wN+aIYQUomcW6cQyXg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/tong","func":"Mint","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","12345"]}],"fee":{"gas_wanted":"9000000","gas_fee":"3ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"omSzo3L8sxiyLr5nPjHB7iGxdNrw3Utoq7OCfPadw5oDIq92VdE0xkUgvR1xqnfuFUHqqIOxR40pQSpJSZChMQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1l47x640c4petu4chfjge3qg2uplakx78hkxqxd","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","123"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3+XBwhRNxB98UM5CE/sbFKQFUNrwd3wclkoRFngQHN4"},"signature":"S1dijHxYrdfF7HhgCTO7+4j+dIqT+imkQkdWPPFrZYR5q4q1ng3xPtkUf3XdwrJOQqeAf66TSUoBQCu6xkofXQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1l47x640c4petu4chfjge3qg2uplakx78hkxqxd","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"12000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3+XBwhRNxB98UM5CE/sbFKQFUNrwd3wclkoRFngQHN4"},"signature":"rTVMFFAmOQOCluyQJ1lnLJJiu9chEILN7zjdRpchm+o2wMMmlSyxWEVozEmeguMe4ZMJOUEnllEz9nD/Gtmzzw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","1234"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"pBUjsgl95J/ceB5GohJ3U5xGrlljHUe21z1CGa3XCTN1CixYDVdIN7B4Ou6FDn1apbTUp7UkvEZVFKky2vMNVg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1441"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"40kzPp/y+RwGynfI3hhpkt6eQIozCSFYuxNlqiAWg1kBYwETU5QFs24k9vvg2Z6CrNmh2rHV1/xZV9krh+PwgA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","4885"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"y0Fhhub3DcwNub+31L0HBvALygVFhAcq9k2oKq+QDwFQF4OglqamP5ZyKZYYvWiEBlvqE8nO1o31AYmodjaOPQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1l47x640c4petu4chfjge3qg2uplakx78hkxqxd","11"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"1yB7TQr6NA4a5qvZmHOrSQBLw0rMEorKFaSd3QBkEe8cQW+3bnsUl2P5CAcFpPpHwxQHFKWcTtNMmOowmHtHtw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"PQAXIEnfvWG+xLnfw2tbZ1EVoCGOj26wXjei449awdgsV33ye3sAhEfxNIkujn804SvyJ3e+mVdfNyzLem5vQA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","to_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","amount":"100000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"FuyfOnBrqW2dTwkTwfbEfBgHsfG93TBbNcNrn77ybUF0woTj8gU6NOS9n/5x4HrbrOnnm5zKLYhlN6sI51vcJA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cx2fnl0uyndrxp9ymn55a609ngd5v34jut7je3","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g12sgp6xgtyxm53tt2ed004q5f5hjuv4m4mx72f0","12"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ai3QQ5IypJ3I8nDGopu65ryI+4HCaUAVp2RNkAtPCvVD"},"signature":"ElZ5mbL35Akm1ZMxKDmrKNN/5MDSwPFH+m+yamEDMd1XGD5AGpMUNCbmK5a9FOqb7nSWi1VdP2iWU8xktciUDw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1cx2fnl0uyndrxp9ymn55a609ngd5v34jut7je3","to_address":"g12sgp6xgtyxm53tt2ed004q5f5hjuv4m4mx72f0","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ai3QQ5IypJ3I8nDGopu65ryI+4HCaUAVp2RNkAtPCvVD"},"signature":"UZHv2ZN06NDs8WHoo72vaS6Z83z6NpmIrLixcwRfuyZoYtXFG9FLtebLKJwrCk5zOP9ff0VHn0X0/xlP+b4mCg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12sgp6xgtyxm53tt2ed004q5f5hjuv4m4mx72f0","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1kfr596aga445glhznku0l7lm83x9lwffgphu4d","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9EQO8BQhB5KPCD3dY61yPCmM8fuJGbj9Ixh+RasPaE5"},"signature":"dUQbrKcBVdpMan/653txtV63jVvwZS2wc8NgJmminAFPCChAhkwETc8fE8JM7bggMOVFf6kByHvhuQlZwmgoGg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1nwlyszkdcm4fn38v4gdr9476ds5896ny2t84fj","amount":"12000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"ialK/A3WIqvm2lqZBNWTr/7F1wLTYFAFiANqvTbIzAdRsNJteLpSvv1sYQb+Rk7d7W0UUNlxAoRKKpOMvVeiFA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1nwlyszkdcm4fn38v4gdr9476ds5896ny2t84fj","12"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"yUkawCdEkO9t6W+HfGIHCCop+IRr8HYyt49QFRWb3MVJjkwgSSAr7yhUSLXEiEz6F9tmbnsrzPzWh0bASbReFw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nwlyszkdcm4fn38v4gdr9476ds5896ny2t84fj","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1lc4etxqxunutfa2rkfyd0fyn72ers93dj7f54k","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlEGF5eCcqQpBQ3pdZg6GCh5NTNcKII91kqD4VZk3QUq"},"signature":"c+IQ3RtMC4F+yGw+U9mICTT6MhWEKuYzi52ptw75S/8FhTuaBqmLABgupVS2MLBiLbbsudscKhb9bto1C4V/HQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1nwlyszkdcm4fn38v4gdr9476ds5896ny2t84fj","to_address":"g1lc4etxqxunutfa2rkfyd0fyn72ers93dj7f54k","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlEGF5eCcqQpBQ3pdZg6GCh5NTNcKII91kqD4VZk3QUq"},"signature":"MrFhB38BKxMyv7nQx1YrkBeqMD19UUTsw8chCOZWTWo+LyN7WFEf749iyjCyDEiGBKRBoYKRpOJXO6eFEaFZRA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lc4etxqxunutfa2rkfyd0fyn72ers93dj7f54k","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1nwlyszkdcm4fn38v4gdr9476ds5896ny2t84fj","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgCUpi0IIL79VObxUbID03WOPaRO9DWI+47VmR0L9Ofh"},"signature":"dZO7vSY+IFCUDD+6KjBo1QovbJQu/jhEB4JBj6XPbsEBST3oVvwh2S8aBvOwUXoOJZONUrZn/PxHGPIZG2a9ow=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1rz93546e2sx8g0dap0t66gx70sqk5r2d33jtfu","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Ij/GVrswi3eNFTG1Bmxu0nRXd08Vc60TRTFhO8anGtpFOcpxNhER9VwQ5sAj3XBMF6z++zu2GI74wSRPyDSO6A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nwlyszkdcm4fn38v4gdr9476ds5896ny2t84fj","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","3"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlEGF5eCcqQpBQ3pdZg6GCh5NTNcKII91kqD4VZk3QUq"},"signature":"eYRf4iIIi4ZLA2hEw96NRkhgxq04mQy6o3cbuCGE33dHfo3qWVidY1RtKMWyiAbBvK7NQYpjWdE1Zlga/qrOgA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1nwlyszkdcm4fn38v4gdr9476ds5896ny2t84fj","to_address":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","amount":"3000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlEGF5eCcqQpBQ3pdZg6GCh5NTNcKII91kqD4VZk3QUq"},"signature":"gjlmgUH2iZ33hZP/sfohcuA4Oo3rW5VZx+0Ur94Ec2Z57CFMxOs3/x4VYQ3msc3AXpgY3VgX6+NxfYvBn34cNA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1rduap2ftq0ga9ty2kkryl3hve53wxlamcq2u3f","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"YLkip1CdosCKEdvJGVSFURfRv5eUTScO9sFCK4B/dRAqTfeQ6rt+fAhtesXGuRnqg914QZlR7MCCotJlte3ueA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","to_address":"g1nwlyszkdcm4fn38v4gdr9476ds5896ny2t84fj","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"Zd3b+avCbZSnn+B9N6ojsMHCT1EnC5eHUncLtlbs5TRlIoa5WGHH7vLavW3qqy0W1+2BzRpgRIux8C7v7KEXrg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1nwlyszkdcm4fn38v4gdr9476ds5896ny2t84fj","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"BPUlnGbhNepue+Ngmn5wM6r8f0chAO6wRFTq2UUZA+khRNUOq64aVuWAAX6Kg8JGhhnQjm+TfNHPpD+2r+u+Uw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1laqjhsfh90znsugsyqpjawl0kj9dcwhv2ee88m","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"UmbNf0WD5vKjlif4NXedNwX6vjkryenB6L6PhInbA1IbARQlD64jY5+AABz2kRR/m/pP2dvzk4zOO5dz06JoNg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1hvg072r05r9rycuerejxuvn32pfqc6vzdymsp7","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"Rtzx3OtpZd1RLJlqxUy+o8dr4SaiRircpx6jxzBmtYt4kbYqCN6VUnN24xfmYd4uIuhVWM1/mOHGJKgPt4zI2A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","to_address":"g1hvg072r05r9rycuerejxuvn32pfqc6vzdymsp7","amount":"160000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"GEktCqlUo6EjztAsDBlhJbk9xrbXxCkUh26+EfEmu2NPyDbQaYPniIRDTiTyHJV7RIfpPpjcZuQBAdpmZlsOuA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1hvg072r05r9rycuerejxuvn32pfqc6vzdymsp7","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"5IQmMBhS9Jnnlt/0edlOKmbFq4i2j4LJkDma5YNuDroRk/2+OZaOZmQ/WWlZHac4PU5O5Kc1tGCZI2tXVvVPjA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1nwlyszkdcm4fn38v4gdr9476ds5896ny2t84fj","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"/tTC7L7Tcly+nHST668VIyGzYweX3Gn1ag6MBNbabPV0uh6oLnMir3hv2jhqqdeCq7M/PoQsAdxkLVv68ejMJA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1nwlyszkdcm4fn38v4gdr9476ds5896ny2t84fj","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"3wTXR8EAv35Sg4lZxhKiHCODrfqGdPUrSE37GU3ey7hRyO+aLNWrRSG4+pjfCd8kkNeW9AaVNI8esfVt6BF13g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15x4h2asdgnh7vagpy3hgmg97upghyd2hsjpxcy","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"dXV9wHQL+0Y7uBn+QXe5PaAHgtEfYrjXd6YfmnDK3s84acvc9UC0ETk7S2j/iQlCZpV5UWTW1alkOZU5gjT9Tg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","to_address":"g1hvg072r05r9rycuerejxuvn32pfqc6vzdymsp7","amount":"100000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"HPQh5rqU+Hx77tDFbHuUWpuOrYYZJ2JEZkWh4yO1Oz03zfPkIesJhq8qHY1FGDMsJZhlF8tyz3X+Ib5jqI6MIA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1nwlyszkdcm4fn38v4gdr9476ds5896ny2t84fj","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"2DhEoJFtUSNfDzIs3ULuMdP64R28mU/tDcS8Ps0EMRwuwFm0pyazg5fhdKUt4YrYLMS9UNtBQgTV2VKiS2lxKA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","to_address":"g1nwlyszkdcm4fn38v4gdr9476ds5896ny2t84fj","amount":"50000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"xFUPFOORwXHORaaswYjBRDBysR0jaJ4Z+XKtHTj5wdAXZgBnBV5GjwgIaE4eXQ1h4aKEEWGJFzpqef+DRDOdAQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1nwlyszkdcm4fn38v4gdr9476ds5896ny2t84fj","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"6Ocv8CnPYy6bxveMf6I0qFmpB67gym7HsLP2Pq3R8fY1z22cW3laNHnlvVg7wGTOPmc+2PayGIwHdI+CXOpiSw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1d2mf6nlfqgswhwwu4k2pzhqr4z4z9yr63hgs38","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"11X5m/Yv6d84FvYvxji2PUF4hF0zXZeKk4GD+J7tRgUEAM0TitFWNMjfq71opo8n2+vJAeLN1p96pfLFRYEewA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","to_address":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","amount":"20000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"8pix/yE+Atw3r4fD63tF4vDCblFZo9aJEDjsB30lID5o97T8oj3oewyxWJFjbjYJ6w3SDREjehzIRdAvLMBkjA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nwlyszkdcm4fn38v4gdr9476ds5896ny2t84fj","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1d2mf6nlfqgswhwwu4k2pzhqr4z4z9yr63hgs38","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlEGF5eCcqQpBQ3pdZg6GCh5NTNcKII91kqD4VZk3QUq"},"signature":"0bDVVsBBejmywjQZ/tsLgRkN0o3j2f+doklA1nsFT3NoERqNKXyNEzxTJcUQwX2pDxoFW9/8A1+kBZPT1I11rA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1nwlyszkdcm4fn38v4gdr9476ds5896ny2t84fj","to_address":"g1d2mf6nlfqgswhwwu4k2pzhqr4z4z9yr63hgs38","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlEGF5eCcqQpBQ3pdZg6GCh5NTNcKII91kqD4VZk3QUq"},"signature":"9wKLypO2HkrDiLZ7HfMy2MLf1gXTyQGBUU4ngzlMhp5OeL4z2jOHLXEd+X8ad+DwmQoeddTc1zzsjpoUtA/YIA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ckn395mpttp0vupgtratyufdaakgh8jgkmr3ym","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ezR4CDaTmK9Q31LH1n9YzCS0JbjyIPRFgCGAiGz7rypDB7M4lBRfthQga1XPRtULmCViAW7TMjNZ7rgAIrTIKA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1l47x640c4petu4chfjge3qg2uplakx78hkxqxd","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g17mcw908lp5y006avp4fjr082wrzryzqh2qgr8k","123"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3+XBwhRNxB98UM5CE/sbFKQFUNrwd3wclkoRFngQHN4"},"signature":"2rfEYKcb+DHiNNWNkvZFgUALI1lBtrkADoW8NnfUlZ0ELiv2mxpZDO7lJLM93C/k+jMiEL93PFtgV/xqOksm3w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17mcw908lp5y006avp4fjr082wrzryzqh2qgr8k","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1l47x640c4petu4chfjge3qg2uplakx78hkxqxd","123"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1Ie2uJQVGI4K/6kwsKQkZK48YDrk3Ic4DKiVS1Ee2yL"},"signature":"Mg6KH6i+QXU9gef1OaepgJNnXnZ5wrdtKmZ6Knz1VJtgc18P9Brb/bE58ZLKE9pCuU6Ql5sJcwwsQWJjtC/VOg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17mcw908lp5y006avp4fjr082wrzryzqh2qgr8k","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","12"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1Ie2uJQVGI4K/6kwsKQkZK48YDrk3Ic4DKiVS1Ee2yL"},"signature":"XsBiqg1NBICM9k4O5NW7d4y4bwyvZ5Ov53CflqoDL+xcwoCcVo9iiH/2gU9oWpoKaw56tRd9VSaHnm7h0t0ahw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1nwlyszkdcm4fn38v4gdr9476ds5896ny2t84fj","to_address":"g1r7gpdsww3tf7py8lmafhukvth94q76cxrd3qxs","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlEGF5eCcqQpBQ3pdZg6GCh5NTNcKII91kqD4VZk3QUq"},"signature":"V5scDmEjsCAmRbJv0oHmaFxmZSUF1Uo0ywJ1kE4leUgPe6XdpNb6g+lbJVvnHG0ZkZS1VNgDR2wUJEE+jtBN7w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nwlyszkdcm4fn38v4gdr9476ds5896ny2t84fj","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1r7gpdsww3tf7py8lmafhukvth94q76cxrd3qxs","4"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlEGF5eCcqQpBQ3pdZg6GCh5NTNcKII91kqD4VZk3QUq"},"signature":"3lrdIw9ebla0tipBSX6XjFn9jAmVR2At8XgAZ6jIOR4v9idSUD9G8XdB+tmpUTyJvERLGLIuxIQ+Tx9DpUrpAw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1r7gpdsww3tf7py8lmafhukvth94q76cxrd3qxs","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1nwlyszkdcm4fn38v4gdr9476ds5896ny2t84fj","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ahw8dmaVJjkzlipA5faujIWfAatrwLvvfF5QChED4FhT"},"signature":"PnqKA7et8oEPUb5EbaKCca7C3FHR1P5IKERJyIRKUF9IqWI61L+YZpDo8SnYOyIKCUUWxx8rnwp/iEi7Nj9eRQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1r7gpdsww3tf7py8lmafhukvth94q76cxrd3qxs","to_address":"g1nwlyszkdcm4fn38v4gdr9476ds5896ny2t84fj","amount":"10000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ahw8dmaVJjkzlipA5faujIWfAatrwLvvfF5QChED4FhT"},"signature":"PJKwn1+9OFUL5lMtxYzgcA8ymo6bxq7sVvvvyIRt0zY/mFc37TZM/zKA7SsS7k/113XH2NA+hwK6XfKj/fjEAQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1r7gpdsww3tf7py8lmafhukvth94q76cxrd3qxs","to_address":"g1vhuj96kkxmr7fxu2vm6nnaxxskr767m6cehgcl","amount":"10000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ahw8dmaVJjkzlipA5faujIWfAatrwLvvfF5QChED4FhT"},"signature":"1URH+EH1UK+yT/K3gGpmPJMSLlrjpyLk+uypfdOGhktStN7llG4El41dw2c3Gtb+A+aumKXlWEn2WZhXGPG8Hg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1r7gpdsww3tf7py8lmafhukvth94q76cxrd3qxs","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1vhuj96kkxmr7fxu2vm6nnaxxskr767m6cehgcl","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ahw8dmaVJjkzlipA5faujIWfAatrwLvvfF5QChED4FhT"},"signature":"yYluZDdN1gwgrSGfAHll4VM7DYB3bPzyisRQZyYzpF0XdQJnaVR3aH9UbRUG4kYoPgXVWLYejfYhPMi4/GRIOA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1nwlyszkdcm4fn38v4gdr9476ds5896ny2t84fj","to_address":"g1xn0f2klma36k9cxyjg4kqxeky6y8s2rakz0csj","amount":"100000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlEGF5eCcqQpBQ3pdZg6GCh5NTNcKII91kqD4VZk3QUq"},"signature":"TN5wH4WJwI0iNJxpRxAB69J78TK3b3+B1/KrHE+55XdPRb+x9XvIUjq9We/IvJfERU430o9q0cJobEtmVOYNLQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nwlyszkdcm4fn38v4gdr9476ds5896ny2t84fj","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1xn0f2klma36k9cxyjg4kqxeky6y8s2rakz0csj","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlEGF5eCcqQpBQ3pdZg6GCh5NTNcKII91kqD4VZk3QUq"},"signature":"R0H9YNnyll/Z5Ll3cQ/ZEtaswRLC6/Fsdj+kEige/VxLJyI4KsaneMlIj0/AlTYM5TrYDNrKzi9sizncAHQgAA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xn0f2klma36k9cxyjg4kqxeky6y8s2rakz0csj","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1yywc43qjgvcj8rj5xufxp2apr9wfe45ce47huc","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1uFd+XIjPtKSCNwaSB8R3N9c0NzoTUw6n3s3ilqh+/5"},"signature":"rTV9spFdEmLw4gBDuo0jqr1O2W46GaIKXEynZKaZk30K+KF6KPcFuDbK64rr5Xoayz9aCEaMxeg/0V+tk8Lm8A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1xn0f2klma36k9cxyjg4kqxeky6y8s2rakz0csj","to_address":"g1yywc43qjgvcj8rj5xufxp2apr9wfe45ce47huc","amount":"40000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1uFd+XIjPtKSCNwaSB8R3N9c0NzoTUw6n3s3ilqh+/5"},"signature":"LFT1VCmgQYyBpw6F9i+Y37O9yST8yzixXKciP8IuCwtBnTb98xRrYjNQQoOgoJ5qinJoC48Cu+evhCxRaUuemA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1xn0f2klma36k9cxyjg4kqxeky6y8s2rakz0csj","123"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"8JqZhC4Ekk4TeS5rBzSdc/pznVAaxLPUFU+6nDLEPzlOlwV2G5REW1P9h/yn3Vv0bcBPwoBTxlra1vucnQrI2Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xn0f2klma36k9cxyjg4kqxeky6y8s2rakz0csj","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1uFd+XIjPtKSCNwaSB8R3N9c0NzoTUw6n3s3ilqh+/5"},"signature":"ncvf9DIbFigBcZw0AYeAtIeBdCH7u3hWGmJIjDNO2oV7F7OFTM9HOxDzqwiwTsEGdnEscqQDqUwknOKgIMWv7w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1xn0f2klma36k9cxyjg4kqxeky6y8s2rakz0csj","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"pSq3kTOQZzRUwTmgfI9wkekhsWbNaHGnMZekt2CrCnpr9L8Zqveqc5nuhQ5tMln0rnmzTXQVK1CQjrM9aRH0JQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1xn0f2klma36k9cxyjg4kqxeky6y8s2rakz0csj","to_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","amount":"10000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1uFd+XIjPtKSCNwaSB8R3N9c0NzoTUw6n3s3ilqh+/5"},"signature":"c7Gpu0QB5ZexPVJz5z9DbifYHF0Ebe80C6rKkALfXldXn+2WWntK/U+ACQ77rVmbGNxTkj5BVSbuEcJKBMMuQw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nwlyszkdcm4fn38v4gdr9476ds5896ny2t84fj","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1lemr6nuun5md3kw22agcvnyatvt6zgea5hgzz0","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlEGF5eCcqQpBQ3pdZg6GCh5NTNcKII91kqD4VZk3QUq"},"signature":"rYF9f/jLMgyKyzooquBs3C/VTAykY+D8DiYFZgmk2SZRgDjJdbOSKee5cHqJCaCmxedouwsvkc9CcaYUrJO67Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1nwlyszkdcm4fn38v4gdr9476ds5896ny2t84fj","to_address":"g1lemr6nuun5md3kw22agcvnyatvt6zgea5hgzz0","amount":"500000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlEGF5eCcqQpBQ3pdZg6GCh5NTNcKII91kqD4VZk3QUq"},"signature":"4v2Nup5qN19/qFOgZGq5OJvmu9SvhnT+nNnw0Xt3mDk5Gox1ffZodB8D0DimMHp847vHBmEzH1CVSntPFLVNgA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lemr6nuun5md3kw22agcvnyatvt6zgea5hgzz0","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1nwlyszkdcm4fn38v4gdr9476ds5896ny2t84fj","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuCFC7MyxnIDIffBfG3DMCyxMwSVj801wzfqT4EfH7Ah"},"signature":"rAH5rGIkK2KNVDgTZ1tgcVgfgyi8WNM3reUZvDCWK+lrUaN5+SYYI9kFi8DE74bp/yEAfhYMuLSFK2/dv/YWVQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nwlyszkdcm4fn38v4gdr9476ds5896ny2t84fj","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g16jmhfp0ha7l4j9fm3nf3gu95yrrvng3swumtv3","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlEGF5eCcqQpBQ3pdZg6GCh5NTNcKII91kqD4VZk3QUq"},"signature":"CTSLKdOC57TPVEIwKacEgyYr1VSkgO0dz93DC12aispD2FsQ0zGB6Tm8HyB+PKd32+66P0Nzgf8FHm7gDOaDcw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1nwlyszkdcm4fn38v4gdr9476ds5896ny2t84fj","to_address":"g16jmhfp0ha7l4j9fm3nf3gu95yrrvng3swumtv3","amount":"100000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlEGF5eCcqQpBQ3pdZg6GCh5NTNcKII91kqD4VZk3QUq"},"signature":"YzJWVobpiwZEpeG4kdVdeVi4CFD3nNCWEbGwM21shQYDLijqkXm0libeK9Vb1lXEVx/hH+6Tgx8SbM/zNXmYhQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nwlyszkdcm4fn38v4gdr9476ds5896ny2t84fj","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1lemr6nuun5md3kw22agcvnyatvt6zgea5hgzz0","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlEGF5eCcqQpBQ3pdZg6GCh5NTNcKII91kqD4VZk3QUq"},"signature":"Zaz9JUk6wRnlqJzyA+ihqDYVPHxD3pxJtQhyETpe8tE9MO3hcjv+aKglDjubvLVVewvxLrgynVjbHvuh57zn0A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nwlyszkdcm4fn38v4gdr9476ds5896ny2t84fj","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1lemr6nuun5md3kw22agcvnyatvt6zgea5hgzz0","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlEGF5eCcqQpBQ3pdZg6GCh5NTNcKII91kqD4VZk3QUq"},"signature":"8DLp5UVSOaQXTzD5OTtIdlUh0PW3ffDLSYXeIyK1PvdATH06u2LAkWbOimDx6Se75oUwimy1hrXCeis+R8bayQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nwlyszkdcm4fn38v4gdr9476ds5896ny2t84fj","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlEGF5eCcqQpBQ3pdZg6GCh5NTNcKII91kqD4VZk3QUq"},"signature":"UKtG4hZczTi4oJnpW1im4BetN2Kk50ZTf94LXVP8cboHFFJuQ5Sv03L9DLf8mQq0tDXk4i39qBDRJXNQ4Bbcdg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1nwlyszkdcm4fn38v4gdr9476ds5896ny2t84fj","to_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","amount":"10000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlEGF5eCcqQpBQ3pdZg6GCh5NTNcKII91kqD4VZk3QUq"},"signature":"bwUWnauVW+5Fe7phZ88WkP/nzta+kWstdUqgYyuzl49Fdt9MdyQg3xs22FYynqwvDLCkH7e2xDgIJuUt3LChjg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1nwlyszkdcm4fn38v4gdr9476ds5896ny2t84fj","to_address":"g1e3ux3pgw36cev4u4nzfm6f0wwa03kuczkykzfx","amount":"200000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlEGF5eCcqQpBQ3pdZg6GCh5NTNcKII91kqD4VZk3QUq"},"signature":"nn0uiGf9Vu6DKcG14S58XvYdnEaJsUEx2+08biJReXtbPHqldoVXE95IRd26vG4ZlT6FoEZSCaoyFxXXAVAT1Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nwlyszkdcm4fn38v4gdr9476ds5896ny2t84fj","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1e3ux3pgw36cev4u4nzfm6f0wwa03kuczkykzfx","2"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlEGF5eCcqQpBQ3pdZg6GCh5NTNcKII91kqD4VZk3QUq"},"signature":"sWQH+cyByCji+2Jc153amLqIjwirmHmpZV9pE6tW+UNMMFDe99Ggd+zTif0/dxNpskKUEP9ANf3vYR4pUxD3wg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nwlyszkdcm4fn38v4gdr9476ds5896ny2t84fj","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1e3ux3pgw36cev4u4nzfm6f0wwa03kuczkykzfx","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlEGF5eCcqQpBQ3pdZg6GCh5NTNcKII91kqD4VZk3QUq"},"signature":"Ps34E2XVroVjDmqxkz0Wa2EuEJRp/DTSxt1TCveZMUcNssALG4O1rLUi4m7XISr/PBmbOAOcE8gROlOk7MHC6A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nwlyszkdcm4fn38v4gdr9476ds5896ny2t84fj","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlEGF5eCcqQpBQ3pdZg6GCh5NTNcKII91kqD4VZk3QUq"},"signature":"78gBvaiOwFxZFuDZRQhKu0DX8V2+HPL4lxPEuBGdL04mXLVQfrIiIdT0ldrp5Q2QEyi/P93ZkAft5+ihc2rr1Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1nwlyszkdcm4fn38v4gdr9476ds5896ny2t84fj","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"50000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlEGF5eCcqQpBQ3pdZg6GCh5NTNcKII91kqD4VZk3QUq"},"signature":"0LLM2Vq8grM1M8bfWoX1bVwSZWP6Jeo+boJmmUMP+egPzj3d6QQSH3W0Zo9nc0BiFpynuSJ3i9RLkuTPmJvcEA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1v7u984nkczgrsqmnxtjhck0q65alajy2ts73tp","123"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"ggatLOK088ORiWzW2h5pLe9hjLwSSlSmVCC7FK5yl8ga/xQdHbgsg17b7Jozm/vpqfndyVXX8ZKYZnsOa6k2Uw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1v7u984nkczgrsqmnxtjhck0q65alajy2ts73tp","amount":"123000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"P3TwbNvlnOs3qOtLWKfNOQPWU+QeDqNvuJqOQOeEMzZnotqt4fSnVs23Defx0t+KxZh5ndTX1VjaNNlLIo+zIw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1nwlyszkdcm4fn38v4gdr9476ds5896ny2t84fj","to_address":"g1v7u984nkczgrsqmnxtjhck0q65alajy2ts73tp","amount":"20000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlEGF5eCcqQpBQ3pdZg6GCh5NTNcKII91kqD4VZk3QUq"},"signature":"d6k/Tp/qOumQWH+0caFB6jBUoOzcC89mIH4kdTgge8ss7P2dqG48dEHKJChNaq3vqoHL+retsKsgypkin6bkqg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g120t05xj740qk0z0908efezewn4f5veh34udj3r","amount":"12000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"/lfNGWSEVJ+OSFM4XB7ut80fqEwMudtQ2BIYlfjzyCpvZUtjnFbQTskSVrAS4ihflKjS1Dc4X6KHoxUZFtMDAg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g120t05xj740qk0z0908efezewn4f5veh34udj3r","123"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"YQp7fju7pYHcxC8QSpuoBGtxzYTLXLgEhVIJtuAdnwoM6hXuij83YnfDdqoZqVob1OzMKQqmVixbdzwKIR691w=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g120t05xj740qk0z0908efezewn4f5veh34udj3r","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjJ7KByoUCRUZkfWy4RxVEGZriuyHnvs/ZBEUPxM2BXA"},"signature":"lqNvtAj1MjWIVyMyzMj3Pwm8t97LiN9eo8NtpAXp+WATtbSy9Ae6ePtL4WNZSr/PDijdMWvVVvYBQlsz8RHFug=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g120t05xj740qk0z0908efezewn4f5veh34udj3r","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjJ7KByoUCRUZkfWy4RxVEGZriuyHnvs/ZBEUPxM2BXA"},"signature":"ScqhYbsZLKVUrJtMRmqLDa5p0nG/MVinaVWAwjMoy1JARSGCiM4B57jw6c8RHIT94RsK/qcCxuxmRYR8LBQqig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g120t05xj740qk0z0908efezewn4f5veh34udj3r","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjJ7KByoUCRUZkfWy4RxVEGZriuyHnvs/ZBEUPxM2BXA"},"signature":"Ib73DnVASQaJCmmozgjN7wwYFq1juGjqxacVxOebzbgcVULBXq0sJrDXr4IrNdcTLgd7L4zk9OaeMhJe7lLKUA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"YZ9n5YYyD1C6Ug+SRvbwhS2xchMIrB1tWvFTJ+mVaiANGnRvZX8QjDdNjOXHItfBkByitt6U/L+i7e58hMXMWw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1t70h0zpalufwjufjcxnaa79qe5qjazj7m62qq6","12"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"Bg83OO7c8xQryODrOAWLw7VOoZi8IWDR8WD7rrxAvyAeKEkljKvY3VFsiIC94guT8L+uBQB1xIteOl4oo7ekyA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","to_address":"g1t70h0zpalufwjufjcxnaa79qe5qjazj7m62qq6","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"xjtVIKaG5ixZSB0ifKVIpbcvKsDQ+v0NkBpK0K7kW1kjCbf+JdIX3DGLzi8Gs4SqJX11S9GhOFT+JsvjnLysxQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t70h0zpalufwjufjcxnaa79qe5qjazj7m62qq6","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhC4k3A4JOgzAr6U9RtEdNFYcu9Kkoxli9+/MSHt4W5R"},"signature":"TXjCMU5KEHDDN5ZiMDYCnxs0qlPi8BbDKsPf5ylr25QATiKFn3Gj/jQ4cPdGZuVy/S2CwLobYkdyusFREJV2ew=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1t70h0zpalufwjufjcxnaa79qe5qjazj7m62qq6","amount":"3000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"E8lYcvsvajffx1oQDR3E/Bkm/bWnvDu75J7xWX3EkHMmrS3Izo17y7Rib35R7RfgI11GBhjYOuPOHkObp52kZA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g149x46al7zw07p0tgzqrkvpwvdaqak5dvgrw7f8","amount":"12000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"zbp9BACCsETumN++9p8v6fZbis0M5mdqh9HdMjyGRCVqDJgoZUXh1FvLJG5yIYtILcQH3T3LX1ox6H1sjT57Qg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g149x46al7zw07p0tgzqrkvpwvdaqak5dvgrw7f8","10"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"vvUMcbhXac6pTj+13IV9NPK3jOEWdvW2ZLYEJAqhEh02t+zk4tVyU3ioIrw+PKKR1gqhDQ91WrrXbJ+kRb0pMQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g149x46al7zw07p0tgzqrkvpwvdaqak5dvgrw7f8","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1ycyclyqnc3msyfdjl94xrlqtjy6fp9fzep0ukn","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5C9X3diVgW2lERpHuvwPmP/xoevSH2B8LbWZi7AiSXn"},"signature":"SNDCmyDkncBDCkpoNnwF3Bl018V9fpLu27vVfUfnk/huuxG5wDjZkCL8vXQXfxAZn1X0RGu/l85fO1vqmAYC8Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ycyclyqnc3msyfdjl94xrlqtjy6fp9fzep0ukn","amount":"5000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"agTh/OLun1fNFIAnqc2lXUsCXXn0fy7Tn09/H4+GdIFniOkkfqyPYLvRB7ywd+PKidM/6RJDynCZKktyDuPkZw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ycyclyqnc3msyfdjl94xrlqtjy6fp9fzep0ukn","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g149x46al7zw07p0tgzqrkvpwvdaqak5dvgrw7f8","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApIMC2lUdC0DYUYQdGv3fi/O/93XEI9jZqPtN+Th4O2B"},"signature":"+LUoa3yZuIoYgHBW3qB7NfBh0FvaZ1FBUx5GCyZx8t4X52LqAqhx+ZK673al7RLqBSSIv7/2IfuqWm+4iRIxWg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g12sgp6xgtyxm53tt2ed004q5f5hjuv4m4mx72f0","amount":"15000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"PT4VTk4PlMUR007d91Lbr+Q1BmmfrYM2uQ0VtSnu+lYOeNb0KrCOKr++wVvP4LxmxsjLzEY+L8OXn7LMGcKulA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cx2fnl0uyndrxp9ymn55a609ngd5v34jut7je3","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1kfr596aga445glhznku0l7lm83x9lwffgphu4d","5"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ai3QQ5IypJ3I8nDGopu65ryI+4HCaUAVp2RNkAtPCvVD"},"signature":"kmP4NB0MbKUzguQK0MW5+luVor2ijv4sVOepjlI33VclEV5mFeI/GK8B99TNIkt61qAO74O1lDKPqMF41/Gy7g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1cx2fnl0uyndrxp9ymn55a609ngd5v34jut7je3","to_address":"g1kfr596aga445glhznku0l7lm83x9lwffgphu4d","amount":"5000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ai3QQ5IypJ3I8nDGopu65ryI+4HCaUAVp2RNkAtPCvVD"},"signature":"xLsbi9DW7MSx5a3GoXn1I3uk7jdSgdUdxuulNPKJGdNcd6v6EwMbtFeJViSOYr07/SlnvHmPMlWxllIavufsBA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1kfr596aga445glhznku0l7lm83x9lwffgphu4d","to_address":"g1eeese3l4gpeegzth2w3j8g70kq3n7v9rme2n72","amount":"2000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ay/prbjqAZw22o+0kJMQbcWdr8KWK5BXxiHywZ9Hjkfa"},"signature":"eZ9rGffuoajRawQdMkJZG+FkqBgcJyJN3OM6aFgOEKohVQ7X5FNrKrZUfZeoWMTwGq3h9y7/Ah55Jq+gaJg6EQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kfr596aga445glhznku0l7lm83x9lwffgphu4d","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1eeese3l4gpeegzth2w3j8g70kq3n7v9rme2n72","2"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ay/prbjqAZw22o+0kJMQbcWdr8KWK5BXxiHywZ9Hjkfa"},"signature":"c2C6EbeDBKvqr7E9s17NJzz4m18jLSVZHYOoUlLyBDBQQEmuXfgiXFvFIJGzfyAL8C38a/OSO/5BPlw/MKMYJA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1eeese3l4gpeegzth2w3j8g70kq3n7v9rme2n72","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g12xjl43g92e4qp275h7szjqfp8e37r9yf0c6mvh","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtU3sjfonXUzK/7j7HnZqMlfBJyffNABH3vGN8Ou34Bq"},"signature":"/9HYFNtxiFBqCt4TvBWuZ4Zt/MECNWNwgsaVG+oARwIHmJQb5O4G4ELkZNsf3hZeDeg2vcyg3V1FRutdc53WKQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1cx2fnl0uyndrxp9ymn55a609ngd5v34jut7je3","to_address":"g1eeese3l4gpeegzth2w3j8g70kq3n7v9rme2n72","amount":"2000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ai3QQ5IypJ3I8nDGopu65ryI+4HCaUAVp2RNkAtPCvVD"},"signature":"cgHGR7qq55dADIbYLONI2ko9EMiHg6IsPEAdMIhvSjcIp8JGjdzXGUThyUv80SEN2C4R1arccEBksQNotV1FjA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1cx2fnl0uyndrxp9ymn55a609ngd5v34jut7je3","to_address":"g12xjl43g92e4qp275h7szjqfp8e37r9yf0c6mvh","amount":"2000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ai3QQ5IypJ3I8nDGopu65ryI+4HCaUAVp2RNkAtPCvVD"},"signature":"2zKmEJP6B22SxQBtAjN9ZDRgGs7G3abf0xa9NMAhWaoXCX83OocPS2dxw/neEN6fg65yYkIaLCNptcvo67xFMg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1eeese3l4gpeegzth2w3j8g70kq3n7v9rme2n72","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g12xjl43g92e4qp275h7szjqfp8e37r9yf0c6mvh","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtU3sjfonXUzK/7j7HnZqMlfBJyffNABH3vGN8Ou34Bq"},"signature":"b5jSK3lIXVM4V4NWc3EBMO0EklGDv/T9loG/y8gJzoYuIRKfPln9xGX3UoJpI1Y3fhuQTVDyGrqZS/Sn6UHysQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12xjl43g92e4qp275h7szjqfp8e37r9yf0c6mvh","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1eeese3l4gpeegzth2w3j8g70kq3n7v9rme2n72","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AncN7D6eupI5+/u4XzuU8rQND/PQssZg/uwS3PMZ/O9n"},"signature":"nNkqQ5tZve9YPZB7YjWW0uWn9fuUT5E9Q5CugtoAYfhcq1mGSbyeKdfz8XAo3znXDiExND5GELBzxkYGgkihcQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1eeese3l4gpeegzth2w3j8g70kq3n7v9rme2n72","to_address":"g1cx2fnl0uyndrxp9ymn55a609ngd5v34jut7je3","amount":"10000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtU3sjfonXUzK/7j7HnZqMlfBJyffNABH3vGN8Ou34Bq"},"signature":"u63ON9nwFPm2UyYOrH08jsONFt8zW6kBaSKp5KFpKUsaNvcl9PMgB+PQ4m+gWoif8ayWQDphyN9U48SCqLv5zg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1eeese3l4gpeegzth2w3j8g70kq3n7v9rme2n72","to_address":"g1cx2fnl0uyndrxp9ymn55a609ngd5v34jut7je3","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtU3sjfonXUzK/7j7HnZqMlfBJyffNABH3vGN8Ou34Bq"},"signature":"48XLjEcO3kfsV3pRSEkqbxqey5Rh7s3lqe4XEzJSnNIrkSIac4ubjYJZKLfoRf1UxpMuFZm+RiWZbgbXJ+5OIQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ks4ev53j4al8uqhhlahvrfadmz3tlqdguqhxy3","amount":"5000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"leor+UDthDzYa4Nqrn3Y2bO31YIJeVOfdB/aTE1dpvIBWSQl6aKvZHtvS5bxZAIT12uxYq2MAImEPMW8xYkftg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1ks4ev53j4al8uqhhlahvrfadmz3tlqdguqhxy3","5"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"aVlndob+k3cn+eb07VyTioe5V1pk2ApK1YIbI4Hfc+liM6FeKseYttyrHONHpOA8FvTroCTB+a8KSzUmvCZjZw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ks4ev53j4al8uqhhlahvrfadmz3tlqdguqhxy3","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1drg7fj2jmp6jtqhrvrcwy7ch23upn52y0q8ch6","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ashfbcvj3Pclpe7lYCn0AAi2SwuDJ/GVjKX7vsczLLio"},"signature":"xi2HZ7GfzOZJzwR8Hv3EY9+heC6o9tW139NN1yIWnSYUpD2fNbaLbBnmZlD76TfeQQ1SHdoY3UY2aJOOlTAX0Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1cx2fnl0uyndrxp9ymn55a609ngd5v34jut7je3","to_address":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","amount":"12000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ai3QQ5IypJ3I8nDGopu65ryI+4HCaUAVp2RNkAtPCvVD"},"signature":"IUd5GorgIqT7Tdvrr11cA/Dg2rmB8Enk1iOBwV+KjopdEyL++j0GSOUFtIQ9+KhXH4em79ovky+KBrEeVN+Jrw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","to_address":"g10aydspealplch902m5zaapx2qtrxzsllavmtc3","amount":"4000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"ihNHuUJOwN+EV38Q5zZ1gBe6pFVfOwYHpfHMuuL5XFsc2x+b6mHsaTidE257Ku8tp8IMHEVW6ViVUMrOjHl2aA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g10aydspealplch902m5zaapx2qtrxzsllavmtc3","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"CA3o+CboKEOHRC80fcFsNUU5WBO/I5Q2upiDgSb++/8FAl4Q66Z+vmhGwJzUH4xWo4iYLJCojfrbkotwmoZ+2A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","to_address":"g1ckxjw7tw2wtwtpz3wyetv2tzck6k6ejv2xs58z","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"S+URFFD/lVLzdaJ1TP/Q9jK3/mwhdbgJAo/xVFze+T1nX8vtLIKYN+lrVr/MCv/Rj0pA9wKy4biZt19+MirOaA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1ckxjw7tw2wtwtpz3wyetv2tzck6k6ejv2xs58z","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"pHZ+gjkQ0uSXHe2x660W3RQJezbp5edDC2rrqkdDRiAhobjxXjOfdG1Y8+Hb2r6rFa0eMnHgjSCoutREpdGcaw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ckxjw7tw2wtwtpz3wyetv2tzck6k6ejv2xs58z","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1tqhttujjjrcrql0zqz27gg9xuygdkfanng0sh5","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/SQ8Ut0TnSFqj2blvzgizxMs5ES1gp3A8GXl9PDKhH3"},"signature":"tRJ41Dwhnw3Gm5kz3sMr3b2HHxONlgWhgkGtvIgkwYBngTKM+HsHszy0Hh4yR7x/aJiTYZdo0fzkVAFJE9Y9cA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10aydspealplch902m5zaapx2qtrxzsllavmtc3","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1tqhttujjjrcrql0zqz27gg9xuygdkfanng0sh5","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Am39Kjbp+CSVsxdxOXHL0+t58kSUam0rQcN0cLvm3lW8"},"signature":"P8nT1D58zT8D94mDiSfo0m+dYjoiQoTKmgQqQ33YAgJVJGUfMdnE4kwaFkk74l3yOh25jLHPD9VXyX5iKlFDeQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["board_msg_1"]},{"@type":"/bank.MsgSend","from_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","to_address":"g1mjzyk7r49ta4h6ppgv2fedgz5ek6hgyttge9pv","amount":"2ugnot"}],"fee":{"gas_wanted":"123456","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"OHHYjFIOMvo7fO8TlTGT6MrpUtYK226zEPPQX2T+2Roa2YEFFSt5Bo2p4mphLy4czghRZ0l+jDqcjlZWFfDxFQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1mjzyk7r49ta4h6ppgv2fedgz5ek6hgyttge9pv","amount":"2ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"pafZTnDCwSukOcVfoWifrlj+2p9s5C5GAp9U/7k6PcFQoWAMZZE9ZHzJwMKZw5+OxIZQ0R5dJDPEFAenxBzwFw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","to_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"Albi/aNpiKJywE9s1sakCACbrk1eel1jGA/bq7PgS8RUx7TO0g3sVIs9N8BTtVAcmOJlfPJBErjMI7VfYr0MQg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["board_web_1"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"6go2MT7XqfsosCZHSBHEakJwb0LIN2NcdwlU/rZnZn9395PN5vPi3Nw9iSjVkrfWKEQ6A9bGB0P6o1DVpXoFGg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["board_msg_2"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"RPJ8viaGK2VjuhNbjGekyWZzVx2AWeKiN5VUHpN7qDRA8yP2X7HpiyRgivOS19S4Ljea95YGXoLHS0D9RqcWyw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["msg_board_1"]},{"@type":"/bank.MsgSend","from_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","to_address":"g1mjzyk7r49ta4h6ppgv2fedgz5ek6hgyttge9pv","amount":"2ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"iLxvAwiGSG+ecX9Hd/O51rxYKI0+iHCsZEdBU+flf5ZJiQo4V2dbyEejoKgZcDReYPn2JQ/1uDpIMZ5xck0A9w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["msg_board_3"]},{"@type":"/bank.MsgSend","from_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","to_address":"g1mjzyk7r49ta4h6ppgv2fedgz5ek6hgyttge9pv","amount":"3ugnot"},{"@type":"/vm.m_addpkg","creator":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","package":{"Name":"it5","Path":"gno.land/r/deme/it5","Files":[{"Name":"it.gno","Body":"package main\n\nimport (\n\t\"std\"\n)\n\nfunc main() {\n\tprintln(\"done\")\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"jHFREiHCgH9FqC4nv0TB+boRBi7FAYBN4GCXj1g3ZBVaI8VEk559L9OFw1TJ2K+VxygJffh+RD/ZaU/zc7dVHQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["msg_board_3"]},{"@type":"/bank.MsgSend","from_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","to_address":"g1mjzyk7r49ta4h6ppgv2fedgz5ek6hgyttge9pv","amount":"3ugnot"},{"@type":"/vm.m_addpkg","creator":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","package":{"Name":"it5","Path":"gno.land/r/deme/it5","Files":[{"Name":"it5.gno","Body":"package it5\n\nimport (\n\t\"std\"\n)\n\nfunc main() {\n\tprintln(\"done\")\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"DqIzBTWcVDxwHSpS09heyCf4H9r1Qk52oav3yhM3Fb5XILuzfh69WaRgpvTxddw+lZm/efC4hrMGq0cN9ZPozw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/foo20","func":"BalanceOf","args":["g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5"]},{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/foo20","func":"BalanceOf","args":["g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"183/SHY0d93xLUKmGhxUmez1nxtTlosikn8wXE61vOM/wc7ni0hd2NBYjtkmIbwl6a98Oh2G+byQP9ny8HWA/A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["msg_board_6"]},{"@type":"/vm.m_addpkg","creator":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","package":{"Name":"it61","Path":"gno.land/r/deme/it61","Files":[{"Name":"it61.gno","Body":"package it61\n\nimport (\n\t\"std\"\n)\n\nfunc main() {\n\tprintln(\"done\")\n}"},{"Name":"it61_test.gno","Body":"package it61\n\nimport (\n\t\"std\"\n)\n\nfunc test() {\n\tprintln(\"done\")\n}"}]},"deposit":"1ugnot"},{"@type":"/bank.MsgSend","from_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","to_address":"g1mjzyk7r49ta4h6ppgv2fedgz5ek6hgyttge9pv","amount":"3ugnot"},{"@type":"/vm.m_addpkg","creator":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","package":{"Name":"it62","Path":"gno.land/r/deme/it62","Files":[{"Name":"it62.gno","Body":"package it5\n\nimport (\n\t\"std\"\n)\n\nfunc main() {\n\tprintln(\"done\")\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"WNqyHTdC43RAaCG22rcbkuS9Xqfidb4gywbte4MEH80ltj1wT1FXJYOB3y6kZ9U0yny3u+/M8HhDGz1qEblaIQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["msg_board_6"]},{"@type":"/vm.m_addpkg","creator":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","package":{"Name":"it61","Path":"gno.land/r/deme/it61","Files":[{"Name":"it61.gno","Body":"package it61\n\nimport (\n\t\"std\"\n)\n\nfunc main() {\n\tprintln(\"done\")\n}"},{"Name":"it61_test.gno","Body":"package it61\n\nimport (\n\t\"std\"\n)\n\nfunc test() {\n\tprintln(\"done\")\n}"}]},"deposit":"1ugnot"},{"@type":"/bank.MsgSend","from_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","to_address":"g1mjzyk7r49ta4h6ppgv2fedgz5ek6hgyttge9pv","amount":"3ugnot"},{"@type":"/vm.m_addpkg","creator":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","package":{"Name":"it62","Path":"gno.land/r/deme/it62","Files":[{"Name":"it62.gno","Body":"package it62\n\nimport (\n\t\"std\"\n)\n\nfunc main() {\n\tprintln(\"done\")\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"7PwiqQ0HArMtmQ0mZb6IKdVTxkAiY/I3NpPcXtBOIiklpwNRR93BkxDLqIL6MpT4FT2L8biw3LTy9Y9YA6W3/w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1mw9r7kghwghdea6nhe52av5uw0gnfdr4yvwe8c","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"2jH8ZtMlJfchgFirKeMFW6rpMChhXpz5Sn2rjNNecV8ZWdlUqhSbmyu7lV2cvs4MhuA663wcYDukd0JaRhqv3A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1mw9r7kghwghdea6nhe52av5uw0gnfdr4yvwe8c","to_address":"g18syxa0vh0vmne90mwhtynjet0zgeqf6prh3ryy","amount":"42000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoD5XtwERf3WfB7B+FqeuXmQnUotS2EMUATisnYTbcSa"},"signature":"Vb9m2IG76A63O1ThmlSn4ZXza/mrdbEJr7bjloS0Nih4zE7QmJWMs/Zm2fAXRWOKI0auvrF6iU28+GYwXcTL5g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g18syxa0vh0vmne90mwhtynjet0zgeqf6prh3ryy","to_address":"g1mw9r7kghwghdea6nhe52av5uw0gnfdr4yvwe8c","amount":"1000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3GjOAi0K77aU30Hh65nUVsJfBA+IcMA1m6CZ4arVQBU"},"signature":"983flOfcY4G8zEY/wL3MGRKV04YMTWR+L6/Eb49zI/UpakzinKB0/oQqTptCVOjuYCb1haydiW5QY5WiQo/i1Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g18syxa0vh0vmne90mwhtynjet0zgeqf6prh3ryy","to_address":"g1mw9r7kghwghdea6nhe52av5uw0gnfdr4yvwe8c","amount":"1000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3GjOAi0K77aU30Hh65nUVsJfBA+IcMA1m6CZ4arVQBU"},"signature":"NQhp5V7w2wXvmVAZoBqe3RpwXExlPuQ70pQ7JDFhKfAHNEZt6+jwo7Po+bDtiuzgJg1bNUg3vW6RP4lWtRD4IQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g18syxa0vh0vmne90mwhtynjet0zgeqf6prh3ryy","to_address":"g1mw9r7kghwghdea6nhe52av5uw0gnfdr4yvwe8c","amount":"1000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3GjOAi0K77aU30Hh65nUVsJfBA+IcMA1m6CZ4arVQBU"},"signature":"z9N+yn97LR7QMabD929H+UvwEs7LtornB2d4uRQNF8xACYsQWqzS0T3OA3Bey9deiKP5freVe/D5ZXj3fwzkdw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/boards","func":"GetBoardIDFromName","args":["1"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"DadPUK3rrHdGX57t85bHNjJ7YEFf7QkSVXrEF1Ydm8Vd1yA/31HIkfrifoENmXZ3+IMcw4UvoavrQJXcKFZQAA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["2"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"o2qDFhVx9kuZrBhdpxElJw+mhPp0ItZnAAmNhfLy6LhmWSl3ryspb6fZL0Foh9CHKOCCTjqeQwZ9QxY74I6/Ew=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["3","4","5"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"1fYKjegGlbXZypg5uOPX5lmk+FyyMOptK/pPPcmcXlBagKancVfLyAl1PwXIJgSWJ8GFywYjh4wwHOnecPB5og=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["6","7","8","9"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"yoGGwj8l6clOOB4cBxHBje73lNxvvMziduNmluBFWCMknx4xwb25cRvjukEVo+01IU7x8f495NS8Jf+sIexOAg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateRepost","args":["10","11","12","13","14"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"dMaLJKeJZfzWJ5ogeGJ85+yyhWjL24SalI3c0fm3OcZZs8ekd0JePw/RvmqNeGmfZXmv/6NzrLuPL8+hfc8jvw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/boards","func":"DeletePost","args":["15","16","17","18"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"knPf693ntBYb+ndyKIFKf8Laj+Og2WdYSsbNjPBMeFV5aS8ampkFtw3I+kIumCAyZoiP7Ezmtte5Z867tHVP+Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/boards","func":"EditPost","args":["19","20","21","22","23"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"lQHgroAUV+y4B6g4u7C9o8Sbd0PmBesfQZ13lSHgjIhdzbePQJQsmL7DaERJOelyuSEoFRCBlQXzGgvS2k5pbQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/boards","func":"RenderBoard","args":["24"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"mg29JgdK+fZW6btanEyvkXVwyxpZ6j4OG756Sva05AQALAAk+tlxcVJr/klUPjkKZqbAeXmzWmFdf9RPx6vSFw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/boards","func":"Render","args":["25"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"6nFLjIWrGOWrGM9cbxxVMzEzEh/m9vwXuDI2I6kCIV1Mj6IRyrrbZVHvKS6QxnHlWujTpGQupZuSEkgVo4JcxA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1a0k5h0lck8szfhkul54x7d5476vmu53d3u8zpf","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"RGPAhd32z3kkqKxpRcAyRkbuNjug/1OeND3u6Fs2C3k0xeiH9xB3RZKv9m5q1Hdlnftl43xCmNGr+JRr1swCTg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1a0k5h0lck8szfhkul54x7d5476vmu53d3u8zpf","package":{"Name":"coin","Path":"gno.land/coin/ugnot","Files":[{"Name":"coin.gno","Body":"package coin\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tcoin   *grc20.AdminToken\n\tadmin std.Address = \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"\t\t\t// TODO: helper to change admin\n)\n\nfunc init() {\n\tcoin = grc20.NewAdminToken(\"u_gno_land\", \"ugnot\", 4)\n\tcoin.Mint(admin, 1000000*10000)                                    // @administrator (1M)\n}\n\n// method proxies as public functions.\n//\n\n// getters.\nfunc GetGRC20() *grc20.AdminToken {\n\treturn coin\n}\n\nfunc TotalSupply() uint64 {\n\treturn coin.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := coin.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := coin.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tprintln(coin.Transfer(caller, to.Resolve(), amount))\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tcoin.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tcoin.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// faucet.\nfunc Faucet() {\n\tcaller := std.GetOrigCaller()\n\tcoin.Mint(caller, 1000*10000) // 1k\n}\n\n\n// administration.\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tcoin.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tcoin.Burn(address.Resolve(), amount)\n}\n\n// render.\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn coin.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := coin.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArKYqaZX8A+nCXhiBT7KOwlWaZ72+27/2ET6dldoJ7Ic"},"signature":"jt8eCi+RAf3a9UYV9WlesSyI15+NofQJeMeper/f6c8OXwTty9LkOIEEQLEJ85qGc350xnFIymjuQLVQvERALg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1a0k5h0lck8szfhkul54x7d5476vmu53d3u8zpf","package":{"Name":"coin","Path":"gno.land/r/coin/ugnot","Files":[{"Name":"coin.gno","Body":"package coin\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tcoin   *grc20.AdminToken\n\tadmin std.Address = \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"\t\t\t// TODO: helper to change admin\n)\n\nfunc init() {\n\tcoin = grc20.NewAdminToken(\"u_gno_land\", \"ugnot\", 4)\n\tcoin.Mint(admin, 1000000*10000)                                    // @administrator (1M)\n}\n\n// method proxies as public functions.\n//\n\n// getters.\nfunc GetGRC20() *grc20.AdminToken {\n\treturn coin\n}\n\nfunc TotalSupply() uint64 {\n\treturn coin.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := coin.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := coin.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tprintln(coin.Transfer(caller, to.Resolve(), amount))\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tcoin.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tcoin.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// faucet.\nfunc Faucet() {\n\tcaller := std.GetOrigCaller()\n\tcoin.Mint(caller, 1000*10000) // 1k\n}\n\n\n// administration.\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tcoin.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tcoin.Burn(address.Resolve(), amount)\n}\n\n// render.\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn coin.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := coin.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArKYqaZX8A+nCXhiBT7KOwlWaZ72+27/2ET6dldoJ7Ic"},"signature":"LVM2SyOAwjqHw0ox+qTn23Xenl4Z+3AVcfxRGBKecgA0Esw6FLJwFKb7tn/T6KAMEdWXmfoj0MIo4ma5StgRfw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1747t5m2f08plqjlrjk2q0qld7465hxz8gkx59c","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Or+XzXWCjdfDFmAneZJTRuw1Di/h0F3KKvgew2ZkLOJFk6wde/wjHUC5Mtt5w5GeViKLfunjygk2nOVb9IP96g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1747t5m2f08plqjlrjk2q0qld7465hxz8gkx59c","to_address":"g18syxa0vh0vmne90mwhtynjet0zgeqf6prh3ryy","amount":"1123450ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyDlf14q7C2aBqar/Qryh6dVR9VACxVZV6fOaM3X5YEA"},"signature":"tgTYQX6Wuz5W8OEq2sVKlxW5kD9hyUhCh/AE/VyRH4IzyHc775ZawzsuvrKoc6VNjr5ow2XUnGSMKIDVbdGF8A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1utz70z0avvjts2muh24r9lppkr8v6a46ny8vdg","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"BEFPmAc62nE2Bqzx+XwdHUGfSeErq5AY9kD+8Qu7THda3cad21SSIbDquR3KyAmlHhaXqYBqTOPl/fYRwa6lCw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModEditPost","args":["monthly-dev-2","The More You Gno: Gno.land Monthly Updates #2","\n**The More You Gno 2: Gno.land Developer Updates**\n\nOver the past few weeks, our core devs and ecosystem contributors have been making massive strides on Gno.land. There’s a lot to cover in the second edition of *The More You Gno*, from updates on Tendermint2 and GnoVM to stack/frames management, Gno IDE, and plenty more. We’ll also see what some of the external teams contributing to the platform have been up to, including Gno.land’s first decentralized exchange, GnoSwap, and Adena compatibility with GRC20 tokens. Check it out.\n\n**Tendermint2**\n\nWe’re making steady development progress on Tendermint2, which focuses on simplicity of design, minimal code, minimal dependencies, modular dependencies, and completeness. For the time being, Tendermint2 will stay in the main repo in a top-level folder named Tendermint2. This is the official location to develop and improve the consensus protocol until it is stable enough to be extracted from the Gno repo and become a standalone project. Currently, Tendermint2 depends on GnoVM, however, we are working to unlink this dependency and build a basic demo Tendermint2 chain and Client.\n\nTendermint2 JS/TS Client is a JavaScript/TypeScript client implementation for Tendermint2-based chains. The client will make it easier for developers to interact with Tendermint2 chains, with a simplified API for account and transaction management, removing a ton of manual work and allowing developers to focus on building their dApps. You can [read more about the client here](https://www.npmjs.com/package/@gnolang/tm2-js-client). In addition to the Tendermint2 JS/TS client, we also created a Gno JS/TS client that just extends the TM2 one to provide Gno-specific functionality. You can read more about this here.\n\n**Game of Realms**\n\nThe incentivized competition to find the best contributors to Gno.land continues in phase one, with slow but steady progress being made. Nir1218 initiated an Evaluation DAO Kickoff discussion in [issue 792](https://github.com/gnolang/gno/pull/792) to initiate testing code for the key smart contract infrastructure that will power the Gno.land platform. We are also interviewing architects for the core team with experience in governance modules and creating new economies on-chain, and a new DevRel team member will be joining us soon to create awesome tutorials and documentation to advance Game of Realms further. Gno.land must be built by the community and we will not rush to push Game of Realms to the second phase until we have found quality contributors to complete the challenge tasks and become the platform’s first founding members.\n\n**Gno IDE**\n\nOur core development team is working on a web-based IDE for Gno.land that will greatly improve the developer experience, allowing builders to quickly spin up Gno realms and packages right on their browsers just by visiting a web app. Currently named Gno IDE but with a rebranding on the horizon, this intuitive product focuses on ease of use and improved UX, and will include all the features you’d expect from an IDE, such as auto compilation in the editor, debugging, extensive testing capability, and powerful APIs like IntelliJ to supercharge your programming.\n\nGno IDE currently has multiple modes to support different use cases, including a normal mode for everyday programming, similar to a standard code editor, a presentation mode for video calls or screen sharing, and an embedded mode to extend functionality, allowing you to embed the IDE directly into websites and blogs. You can also choose to edit your code in Emacs or Vim and easily switch between steps, from previous to next, making creating your tutorials and blog posts more intuitive. Watch out for more to come on Gno IDE soon, and if you want to contribute by creating a plugin for your favorite editor, open a PR to win contribution points.\n\n**Stack/Frames Management**\n\nThe stack/frames is an integral part of the virtual machine (VM) and the language. Stack/frames provide context for smart contract developers, enabling them to access useful information, such as the original caller, or to determine if a contract is being called through another one. The current implementation is limited in scope and relies on fixed positions in the stack which can lead to inconsistencies.\n\nThere is an ongoing [issue 683 open here](https://github.com/gnolang/gno/issues/683) and we have continued to work on enhancing stack/frames development over the last month. We’re adding a new function in the standard library std.PrevRealm (previously GetRealmCaller). Currently, we only have GetOrigCaller, which returns the user calling the first realm. This is not secure and we need a way to call the previous caller. This will allow a realm to handle GRC20 treasuries. See [issue 667](https://github.com/gnolang/gno/pull/667) and [issue 634](https://github.com/gnolang/gno/issues/634) for further details.\n\n**Dealing with Panics in Native Functions**\n\nWe have devised a solution for dealing with panics in native functions, [see pull request 732](https://github.com/gnolang/gno/pull/732). Previously, when there was a panic in a native function, we could not recover it in Gno code. An example of this was the assert origin call, which panicked if the call was not a direct call from a transaction. Based on discussions with contributors, we’ve agreed that native functions should never panic, but if they panic, they panic with machined Gno panic. This gives us the choice in a native function to code a Gno panic, or, if it's a very bad panic, use Go panic so that we know the Gno code is unable to recover it.\n\n**Logic Upgrading**\n\nMaking it possible to upgrade your logic is definitely out of scope for the first version of Gno.land, however, it’s an important issue that we have begun to discuss so that we can place certain restrictions on it, such as allowing upgrades when we consider them safe enough to be compatible with imports. Another idea is to work on creating workflows where migrations become something official. This way, we could define ways to migrate a contract completely in a single transaction at the chain level. Once everything is working and approved as the previous contract is parsed or archived, the new one gets the data. We will revisit this topic after the first version of Gno.land reaches the mainnet.\n\n**Garbage Collection**\n\nIn terms of garbage collection, we don’t have memory leaks as such but we do have defacto memory leaks. By the VM having references to all objects, they won’t be released by Go’s underlying GC. We have some form of reference counting but it is only done at the end of a transaction. We have implemented a mark-and-sweep garbage collector and are working on the VM runtime to manage the objects and signal to the garbage collector to release them when they are no longer needed. This is done by adding the notion of a heap, which is managed by the garbage collector.\n\n**GnoVM**\n\nDeveloping GnoVM is an ongoing task and we will likely need to fork the GnoVM to create different competing versions. GnoVM will be complete, limited in features, and serve as the only interpreter, an enduring reference point over time. Future versions of GnoVM will be designed to incorporate CosmWasm so that all Cosmos chains can have CosmWasm enabled and the VM can run directly on the browser and execute tasks on the browser without requiring to make an API call, making it faster. To do this, we can make a Gno compiler in WebAssembly without changing the code because Go supports WASM cross-compilation.\n\nWe plan on making a competing version of the original minimalist GnoVM, such as a Rust version with a JIT compiler using LLVM as a backend.\n\n**Ecosystem Updates**\n\nSince our last update, the Gno.land community continues to expand with awesome teams and contributors building cool infrastructure and projects on the platform. Below, we take a look at the largest developments of the past few weeks and extend a special thanks to everyone helping us build Gno.land.\n\n**Teritori**\n\nTeritori blockchain and multi-chain hub launched in November 2022, allowing IBC and non-IBC communities to connect, create groups, exchange tokens and NFTs, and launch new projects. Teritori’s idea for building on Gno.land is to create a multi-chain experience for users with a web portal, NFT marketplace, and social feed that will grow the community, and gradually integrate smart contracts and realms. This will promote Gno.land to more developers and showcase all the dApps being built through an easy-to-navigate dApp store. In the coming weeks, Teritori will work with the Onbloc team to integrate the Athena wallet into their portal as well as discuss ideas for promoting Game of Realms to new developers.\n\n**Onbloc**\n\nOnbloc is one of the Gno.land ecosystem’s most active contributors, responsible for building the Adena wallet and the block explorer Gnoscan. The team has also been working on creating an official Gno SDK that will allow developers to interact with Gno.land more easily, and remove some of the current friction. Onbloc opened [issue 701](https://github.com/gnolang/gno/issues/701) on GitHub primarily for developers who either have their own web app or are building a JavaScript app and want to work with Gno in some way. Currently, developers need to do a lot of manual work, which Gno SDK will abstract away, improving the workflow and developer experience. If you have any ideas or feedback, please contribute to the aforementioned issue.\n\nIn another cool development, Onbloc has rolled out a new feature in Adena and Gnoscan to provide support for GRC20 tokens. To store and send tokens, you can open your Adena wallet, click on \"Manage Tokens”, navigate to the Custom Token page, and see which GRC20 tokens are available on Gno Testnet 3, searching by the symbol or path. To research on or discover tokens, head over to the Tokens page on Gnoscan for a full list of GRC20 tokens. You can click on any token on the list for detailed information, such as the total supply, owner, or other available functions built into the token. The Account Details page has also been updated to display all tokens owned by each address. You can help by checking out [issue 764](https://github.com/gnolang/gno/pull/764), which discusses adding bigint to support a wide range of numbers and encoding binary, and [issue 816](https://github.com/gnolang/gno/pull/816), which highlights a small bug the team runs into when coding.\n\nOnbloc has also created a new [token resource page on GitHub](http://github/onbloc/gnotokenresources) for anyone to share or upload resources associated with their Gno.land project. This will serve as a shared knowledge pool about any dApp on the platform. If you wanted to create a decentralized exchange, for example, you would need all the information about the tokens available on Gno.land, such as their images, symbols, descriptions, links to websites, etc. Now you can find this in one handy GitHub repository. If you’re a developer or builder who wants your logo or any other static data posted, be sure to submit a PR.\n\nAnd speaking of decentralized exchanges, Onbloc is also building Gnoswap, the first DEX to be powered by Gno.land, designed to simplify the concentrated liquidity experience and increase capital efficiency for traders. Its interface is built using TypeScript to be user-friendly, secure, and accessible for streamlining complex mechanisms such as price range configurations and staking as part of its core service. Contribute to its interface [here](https://github.com/gnoswap-labs/gnoswap-interface).\n\nAs for the contract side, Onbloc is actively working on its development with help from the core members of Gno.land. The code will be open-sourced for full transparency once the basic functions are ready.\n\n**New Core Contributors**\n\nWe’re excited to welcome two new core team members, Antonio and Zack. Antonio joined us in April in the core team, bringing with him vast experience in IPFS, and writing Git servers in Go. Zack is our first “tinkerer in residence” and will try to bootstrap the ecosystem of small contracts and small libraries. He will also be writing apps and helping us design a system to better share and showcase our work with a super UX for team builders and open-source addicts.\n\nAntonio is already hard at work researching a benchmarking dashboard that will show performance improvements or regressions when we change the code. He’s assessing whether to use GiHub to track actions or run our own machine to execute GitHub actions. Take a peek at his research so far on [issue 783 here](https://github.com/gnolang/gno/pull/783).\n\nZack is working on a microblog project. As an experienced web2 Go programmer, Zack is transitioning to web3. Since he’s interested in incentivized social networks, the microblog project will be his first realm, as a Twitter-style blog without titles, where each user has their own page based on their address. Check out [issue 391](https://github.com/gnolang/gno/pull/391) for more details.\n\n**Developer Events**\n\nOver the past few weeks, our core devs have been mainly focused on building but they’re preparing to speak at some exciting events in the coming months. Catch up with Manfred at BUIDL Asia, in Seoul, South Korea, from June 5 - 9. We’re co-hosting a side event with Onbloc, Code States, and Cosmostation on June 5, so be sure to register if you’re in town! We’ll also be at EthBelgrade in Serbia from June 2 - 4, and GopherCon in Berlin from June 26 - 29, so stop by and say hello.\n\n*Do you want to contribute to Gno.land’s monthly updates? If you’re building on Gno.land and want to highlight your development, project, event, or idea, let us know and we’ll include your contribution.*\n","gnoland,gnovm,tm2"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"Mvfm+hCWv30885OEK7/az2kV6meqQksb9IO/2ZM1ScpTTtnwKvz+ZsMNqrzUmk7QrPGKlLzalmEBsls/POPUOA=="}],"memo":"from gnoblog-cli"}
{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModEditPost","args":["monthly-dev-2","The More You Gno: Gno.land Monthly Updates #2","\n**The More You Gno 2: Gno.land Developer Updates**\n\nOver the past few weeks, our core devs and ecosystem contributors have been making massive strides on Gno.land. There’s a lot to cover in the second edition of *The More You Gno*, from updates on Tendermint2 and GnoVM to stack/frames management, Gno IDE, and plenty more. We’ll also see what some of the external teams contributing to the platform have been up to, including Gno.land’s first decentralized exchange, GnoSwap, and Adena compatibility with GRC20 tokens. Check it out.\n\n**Tendermint2**\n\nWe’re making steady development progress on Tendermint2, which focuses on simplicity of design, minimal code, minimal dependencies, modular dependencies, and completeness. For the time being, Tendermint2 will stay in the main repo in a top-level folder named Tendermint2. This is the official location to develop and improve the consensus protocol until it is stable enough to be extracted from the Gno repo and become a standalone project. Currently, Tendermint2 depends on GnoVM, however, we are working to unlink this dependency and build a basic demo Tendermint2 chain and Client.\n\nTendermint2 JS/TS Client is a JavaScript/TypeScript client implementation for Tendermint2-based chains. The client will make it easier for developers to interact with Tendermint2 chains, with a simplified API for account and transaction management, removing a ton of manual work and allowing developers to focus on building their dApps. You can [read more about the client here](https://www.npmjs.com/package/@gnolang/tm2-js-client). In addition to the Tendermint2 JS/TS client, we also created a Gno JS/TS client that just extends the TM2 one to provide Gno-specific functionality. You can read more about this here.\n\n**Game of Realms**\n\nThe incentivized competition to find the best contributors to Gno.land continues in phase one, with slow but steady progress being made. Nir1218 initiated an Evaluation DAO Kickoff discussion in [issue 792](https://github.com/gnolang/gno/pull/792) to initiate testing code for the key smart contract infrastructure that will power the Gno.land platform. We are also interviewing architects for the core team with experience in governance modules and creating new economies on-chain, and a new DevRel team member will be joining us soon to create awesome tutorials and documentation to advance Game of Realms further. Gno.land must be built by the community and we will not rush to push Game of Realms to the second phase until we have found quality contributors to complete the challenge tasks and become the platform’s first founding members.\n\n**Gno IDE**\n\nOur core development team is working on a web-based IDE for Gno.land that will greatly improve the developer experience, allowing builders to quickly spin up Gno realms and packages right on their browsers just by visiting a web app. Currently named Gno IDE but with a rebranding on the horizon, this intuitive product focuses on ease of use and improved UX, and will include all the features you’d expect from an IDE, such as auto compilation in the editor, debugging, extensive testing capability, and powerful APIs like IntelliJ to supercharge your programming.\n\nGno IDE currently has multiple modes to support different use cases, including a normal mode for everyday programming, similar to a standard code editor, a presentation mode for video calls or screen sharing, and an embedded mode to extend functionality, allowing you to embed the IDE directly into websites and blogs. You can also choose to edit your code in Emacs or Vim and easily switch between steps, from previous to next, making creating your tutorials and blog posts more intuitive. Watch out for more to come on Gno IDE soon, and if you want to contribute by creating a plugin for your favorite editor, open a PR to win contribution points.\n\n**Stack/Frames Management**\n\nThe stack/frames is an integral part of the virtual machine (VM) and the language. Stack/frames provide context for smart contract developers, enabling them to access useful information, such as the original caller, or to determine if a contract is being called through another one. The current implementation is limited in scope and relies on fixed positions in the stack which can lead to inconsistencies.\n\nThere is an ongoing [issue 683 open here](https://github.com/gnolang/gno/issues/683) and we have continued to work on enhancing stack/frames development over the last month. We’re adding a new function in the standard library std.PrevRealm (previously GetRealmCaller). Currently, we only have GetOrigCaller, which returns the user calling the first realm. This is not secure and we need a way to call the previous caller. This will allow a realm to handle GRC20 treasuries. See [issue 667](https://github.com/gnolang/gno/pull/667) and [issue 634](https://github.com/gnolang/gno/issues/634) for further details.\n\n**Dealing with Panics in Native Functions**\n\nWe have devised a solution for dealing with panics in native functions, [see pull request 732](https://github.com/gnolang/gno/pull/732). Previously, when there was a panic in a native function, we could not recover it in Gno code. An example of this was the assert origin call, which panicked if the call was not a direct call from a transaction. Based on discussions with contributors, we’ve agreed that native functions should never panic, but if they panic, they panic with machined Gno panic. This gives us the choice in a native function to code a Gno panic, or, if it's a very bad panic, use Go panic so that we know the Gno code is unable to recover it.\n\n**Logic Upgrading**\n\nMaking it possible to upgrade your logic is definitely out of scope for the first version of Gno.land, however, it’s an important issue that we have begun to discuss so that we can place certain restrictions on it, such as allowing upgrades when we consider them safe enough to be compatible with imports. Another idea is to work on creating workflows where migrations become something official. This way, we could define ways to migrate a contract completely in a single transaction at the chain level. Once everything is working and approved as the previous contract is parsed or archived, the new one gets the data. We will revisit this topic after the first version of Gno.land reaches the mainnet.\n\n**Garbage Collection**\n\nIn terms of garbage collection, we don’t have memory leaks as such but we do have defacto memory leaks. By the VM having references to all objects, they won’t be released by Go’s underlying GC. We have some form of reference counting but it is only done at the end of a transaction. We have implemented a mark-and-sweep garbage collector and are working on the VM runtime to manage the objects and signal to the garbage collector to release them when they are no longer needed. This is done by adding the notion of a heap, which is managed by the garbage collector.\n\n**GnoVM**\n\nDeveloping GnoVM is an ongoing task and we will likely need to fork the GnoVM to create different competing versions. GnoVM will be complete, limited in features, and serve as the only interpreter, an enduring reference point over time. Future versions of GnoVM will be designed to incorporate CosmWasm so that all Cosmos chains can have CosmWasm enabled and the VM can run directly on the browser and execute tasks on the browser without requiring to make an API call, making it faster. To do this, we can make a Gno compiler in WebAssembly without changing the code because Go supports WASM cross-compilation.\n\nWe plan on making a competing version of the original minimalist GnoVM, such as a Rust version with a JIT compiler using LLVM as a backend.\n\n**Ecosystem Updates**\n\nSince our last update, the Gno.land community continues to expand with awesome teams and contributors building cool infrastructure and projects on the platform. Below, we take a look at the largest developments of the past few weeks and extend a special thanks to everyone helping us build Gno.land.\n\n**Teritori**\n\nTeritori blockchain and multi-chain hub launched in November 2022, allowing IBC and non-IBC communities to connect, create groups, exchange tokens and NFTs, and launch new projects. Teritori’s idea for building on Gno.land is to create a multi-chain experience for users with a web portal, NFT marketplace, and social feed that will grow the community, and gradually integrate smart contracts and realms. This will promote Gno.land to more developers and showcase all the dApps being built through an easy-to-navigate dApp store. In the coming weeks, Teritori will work with the Onbloc team to integrate the Athena wallet into their portal as well as discuss ideas for promoting Game of Realms to new developers.\n\n**Onbloc**\n\nOnbloc is one of the Gno.land ecosystem’s most active contributors, responsible for building the Adena wallet and the block explorer Gnoscan. The team has also been working on creating an official Gno SDK that will allow developers to interact with Gno.land more easily, and remove some of the current friction. Onbloc opened [issue 701](https://github.com/gnolang/gno/issues/701) on GitHub primarily for developers who either have their own web app or are building a JavaScript app and want to work with Gno in some way. Currently, developers need to do a lot of manual work, which Gno SDK will abstract away, improving the workflow and developer experience. If you have any ideas or feedback, please contribute to the aforementioned issue.\n\nIn another cool development, Onbloc has rolled out a new feature in Adena and Gnoscan to provide support for GRC20 tokens. To store and send tokens, you can open your Adena wallet, click on \"Manage Tokens”, navigate to the Custom Token page, and see which GRC20 tokens are available on Gno Testnet 3, searching by the symbol or path. To research on or discover tokens, head over to the Tokens page on Gnoscan for a full list of GRC20 tokens. You can click on any token on the list for detailed information, such as the total supply, owner, or other available functions built into the token. The Account Details page has also been updated to display all tokens owned by each address. You can help by checking out [issue 764](https://github.com/gnolang/gno/pull/764), which discusses adding bigint to support a wide range of numbers and encoding binary, and [issue 816](https://github.com/gnolang/gno/pull/816), which highlights a small bug the team runs into when coding.\n\nOnbloc has also created a new [token resource page on GitHub](http://github/onbloc/gnotokenresources) for anyone to share or upload resources associated with their Gno.land project. This will serve as a shared knowledge pool about any dApp on the platform. If you wanted to create a decentralized exchange, for example, you would need all the information about the tokens available on Gno.land, such as their images, symbols, descriptions, links to websites, etc. Now you can find this in one handy GitHub repository. If you’re a developer or builder who wants your logo or any other static data posted, be sure to submit a PR.\n\nAnd speaking of decentralized exchanges, Onbloc is also building Gnoswap, the first DEX to be powered by Gno.land, designed to simplify the concentrated liquidity experience and increase capital efficiency for traders. Its interface is built using TypeScript to be user-friendly, secure, and accessible for streamlining complex mechanisms such as price range configurations and staking as part of its core service. Contribute to its interface [here](https://github.com/gnoswap-labs/gnoswap-interface).\n\nAs for the contract side, Onbloc is actively working on its development with help from the core members of Gno.land. The code will be open-sourced for full transparency once the basic functions are ready.\n\n**New Core Contributors**\n\nWe’re excited to welcome two new core team members, Antonio and Zack. Antonio joined us in April in the core team, bringing with him vast experience in IPFS, and writing Git servers in Go. Zack is our first “tinkerer in residence” and will try to bootstrap the ecosystem of small contracts and small libraries. He will also be writing apps and helping us design a system to better share and showcase our work with a super UX for team builders and open-source addicts.\n\nAntonio is already hard at work researching a benchmarking dashboard that will show performance improvements or regressions when we change the code. He’s assessing whether to use GiHub to track actions or run our own machine to execute GitHub actions. Take a peek at his research so far on [issue 783 here](https://github.com/gnolang/gno/pull/783).\n\nZack is working on a microblog project. As an experienced web2 Go programmer, Zack is transitioning to web3. Since he’s interested in incentivized social networks, the microblog project will be his first realm, as a Twitter-style blog without titles, where each user has their own page based on their address. Check out [issue 391](https://github.com/gnolang/gno/pull/391) for more details.\n\n**Developer Events**\n\nOver the past few weeks, our core devs have been mainly focused on building but they’re preparing to speak at some exciting events in the coming months. Catch up with Manfred at BUIDL Asia, in Seoul, South Korea, from June 5 - 9. We’re co-hosting a side event with Onbloc, Code States, and Cosmostation on June 5, so be sure to register if you’re in town! We’ll also be at EthBelgrade in Serbia from June 2 - 4, and GopherCon in Berlin from June 26 - 29, so stop by and say hello.\n\n*Do you want to contribute to Gno.land’s monthly updates? If you’re building on Gno.land and want to highlight your development, project, event, or idea, let us know and we’ll include your contribution.*\n","gnoland,gnovm,tm2"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"xDAGmAwzVg9E31jeOcgPVV5HW+NF2psYH5bXGoBOkeQE/MCt/tWDWTHA/Lvm26Z+doH4UIhkgkl16e0RzzDjbw=="}],"memo":"from gnoblog-cli"}
{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModEditPost","args":["monthly-dev-2","The More You Gno: Gno.land Monthly Updates #2","\n**The More You Gno 2: Gno.land Developer Updates**\n\nOver the past few weeks, our core devs and ecosystem contributors have been making massive strides on Gno.land. There’s a lot to cover in the second edition of *The More You Gno*, from updates on Tendermint2 and GnoVM to stack/frames management, Gno IDE, and plenty more. We’ll also see what some of the external teams contributing to the platform have been up to, including Gno.land’s first decentralized exchange, GnoSwap, and Adena compatibility with GRC20 tokens. Check it out.\n\n**Tendermint2**\n\nWe’re making steady development progress on Tendermint2, which focuses on simplicity of design, minimal code, minimal dependencies, modular dependencies, and completeness. For the time being, Tendermint2 will stay in the main repo in a top-level folder named Tendermint2. This is the official location to develop and improve the consensus protocol until it is stable enough to be extracted from the Gno repo and become a standalone project. Currently, Tendermint2 depends on GnoVM, however, we are working to unlink this dependency and build a basic demo Tendermint2 chain and Client.\n\nTendermint2 JS/TS Client is a JavaScript/TypeScript client implementation for Tendermint2-based chains. The client will make it easier for developers to interact with Tendermint2 chains, with a simplified API for account and transaction management, removing a ton of manual work and allowing developers to focus on building their dApps. You can [read more about the client here](https://www.npmjs.com/package/@gnolang/tm2-js-client). In addition to the Tendermint2 JS/TS client, we also created a Gno JS/TS client that just extends the TM2 one to provide Gno-specific functionality. You can read more about this here.\n\n**Game of Realms**\n\nThe incentivized competition to find the best contributors to Gno.land continues in phase one, with slow but steady progress being made. Nir1218 initiated an Evaluation DAO Kickoff discussion in [issue 792](https://github.com/gnolang/gno/pull/792) to initiate testing code for the key smart contract infrastructure that will power the Gno.land platform. We are also interviewing architects for the core team with experience in governance modules and creating new economies on-chain, and a new DevRel team member will be joining us soon to create awesome tutorials and documentation to advance Game of Realms further. Gno.land must be built by the community and we will not rush to push Game of Realms to the second phase until we have found quality contributors to complete the challenge tasks and become the platform’s first founding members.\n\n**Gno IDE**\n\nOur core development team is working on a web-based IDE for Gno.land that will greatly improve the developer experience, allowing builders to quickly spin up Gno realms and packages right on their browsers just by visiting a web app. Currently named Gno IDE but with a rebranding on the horizon, this intuitive product focuses on ease of use and improved UX, and will include all the features you’d expect from an IDE, such as auto compilation in the editor, debugging, extensive testing capability, and powerful APIs like IntelliJ to supercharge your programming.\n\nGno IDE currently has multiple modes to support different use cases, including a normal mode for everyday programming, similar to a standard code editor, a presentation mode for video calls or screen sharing, and an embedded mode to extend functionality, allowing you to embed the IDE directly into websites and blogs. You can also choose to edit your code in Emacs or Vim and easily switch between steps, from previous to next, making creating your tutorials and blog posts more intuitive. Watch out for more to come on Gno IDE soon, and if you want to contribute by creating a plugin for your favorite editor, open a PR to win contribution points.\n\n**Stack/Frames Management**\n\nThe stack/frames is an integral part of the virtual machine (VM) and the language. Stack/frames provide context for smart contract developers, enabling them to access useful information, such as the original caller, or to determine if a contract is being called through another one. The current implementation is limited in scope and relies on fixed positions in the stack which can lead to inconsistencies.\n\nThere is an ongoing [issue 683 open here](https://github.com/gnolang/gno/issues/683) and we have continued to work on enhancing stack/frames development over the last month. We’re adding a new function in the standard library std.PrevRealm (previously GetRealmCaller). Currently, we only have GetOrigCaller, which returns the user calling the first realm. This is not secure and we need a way to call the previous caller. This will allow a realm to handle GRC20 treasuries. See [issue 667](https://github.com/gnolang/gno/pull/667) and [issue 634](https://github.com/gnolang/gno/issues/634) for further details.\n\n**Dealing with Panics in Native Functions**\n\nWe have devised a solution for dealing with panics in native functions, [see pull request 732](https://github.com/gnolang/gno/pull/732). Previously, when there was a panic in a native function, we could not recover it in Gno code. An example of this was the assert origin call, which panicked if the call was not a direct call from a transaction. Based on discussions with contributors, we’ve agreed that native functions should never panic, but if they panic, they panic with machined Gno panic. This gives us the choice in a native function to code a Gno panic, or, if it's a very bad panic, use Go panic so that we know the Gno code is unable to recover it.\n\n**Logic Upgrading**\n\nMaking it possible to upgrade your logic is definitely out of scope for the first version of Gno.land, however, it’s an important issue that we have begun to discuss so that we can place certain restrictions on it, such as allowing upgrades when we consider them safe enough to be compatible with imports. Another idea is to work on creating workflows where migrations become something official. This way, we could define ways to migrate a contract completely in a single transaction at the chain level. Once everything is working and approved as the previous contract is parsed or archived, the new one gets the data. We will revisit this topic after the first version of Gno.land reaches the mainnet.\n\n**Garbage Collection**\n\nIn terms of garbage collection, we don’t have memory leaks as such but we do have defacto memory leaks. By the VM having references to all objects, they won’t be released by Go’s underlying GC. We have some form of reference counting but it is only done at the end of a transaction. We have implemented a mark-and-sweep garbage collector and are working on the VM runtime to manage the objects and signal to the garbage collector to release them when they are no longer needed. This is done by adding the notion of a heap, which is managed by the garbage collector.\n\n**GnoVM**\n\nDeveloping GnoVM is an ongoing task and we will likely need to fork the GnoVM to create different competing versions. GnoVM will be complete, limited in features, and serve as the only interpreter, an enduring reference point over time. Future versions of GnoVM will be designed to incorporate CosmWasm so that all Cosmos chains can have CosmWasm enabled and the VM can run directly on the browser and execute tasks on the browser without requiring to make an API call, making it faster. To do this, we can make a Gno compiler in WebAssembly without changing the code because Go supports WASM cross-compilation.\n\nWe plan on making a competing version of the original minimalist GnoVM, such as a Rust version with a JIT compiler using LLVM as a backend.\n\n**Ecosystem Updates**\n\nSince our last update, the Gno.land community continues to expand with awesome teams and contributors building cool infrastructure and projects on the platform. Below, we take a look at the largest developments of the past few weeks and extend a special thanks to everyone helping us build Gno.land.\n\n**Teritori**\n\nTeritori blockchain and multi-chain hub launched in November 2022, allowing IBC and non-IBC communities to connect, create groups, exchange tokens and NFTs, and launch new projects. Teritori’s idea for building on Gno.land is to create a multi-chain experience for users with a web portal, NFT marketplace, and social feed that will grow the community, and gradually integrate smart contracts and realms. This will promote Gno.land to more developers and showcase all the dApps being built through an easy-to-navigate dApp store. In the coming weeks, Teritori will work with the Onbloc team to integrate the Athena wallet into their portal as well as discuss ideas for promoting Game of Realms to new developers.\n\n**Onbloc**\n\nOnbloc is one of the Gno.land ecosystem’s most active contributors, responsible for building the Adena wallet and the block explorer Gnoscan. The team has also been working on creating an official Gno SDK that will allow developers to interact with Gno.land more easily, and remove some of the current friction. Onbloc opened [issue 701](https://github.com/gnolang/gno/issues/701) on GitHub primarily for developers who either have their own web app or are building a JavaScript app and want to work with Gno in some way. Currently, developers need to do a lot of manual work, which Gno SDK will abstract away, improving the workflow and developer experience. If you have any ideas or feedback, please contribute to the aforementioned issue.\n\nIn another cool development, Onbloc has rolled out a new feature in Adena and Gnoscan to provide support for GRC20 tokens. To store and send tokens, you can open your Adena wallet, click on \"Manage Tokens”, navigate to the Custom Token page, and see which GRC20 tokens are available on Gno Testnet 3, searching by the symbol or path. To research on or discover tokens, head over to the Tokens page on Gnoscan for a full list of GRC20 tokens. You can click on any token on the list for detailed information, such as the total supply, owner, or other available functions built into the token. The Account Details page has also been updated to display all tokens owned by each address. You can help by checking out [issue 764](https://github.com/gnolang/gno/pull/764), which discusses adding bigint to support a wide range of numbers and encoding binary, and [issue 816](https://github.com/gnolang/gno/pull/816), which highlights a small bug the team runs into when coding.\n\nOnbloc has also created a new [token resource page on GitHub](http://github/onbloc/gnotokenresources) for anyone to share or upload resources associated with their Gno.land project. This will serve as a shared knowledge pool about any dApp on the platform. If you wanted to create a decentralized exchange, for example, you would need all the information about the tokens available on Gno.land, such as their images, symbols, descriptions, links to websites, etc. Now you can find this in one handy GitHub repository. If you’re a developer or builder who wants your logo or any other static data posted, be sure to submit a PR.\n\nAnd speaking of decentralized exchanges, Onbloc is also building Gnoswap, the first DEX to be powered by Gno.land, designed to simplify the concentrated liquidity experience and increase capital efficiency for traders. Its interface is built using TypeScript to be user-friendly, secure, and accessible for streamlining complex mechanisms such as price range configurations and staking as part of its core service. Contribute to its interface [here](https://github.com/gnoswap-labs/gnoswap-interface).\n\nAs for the contract side, Onbloc is actively working on its development with help from the core members of Gno.land. The code will be open-sourced for full transparency once the basic functions are ready.\n\n**New Core Contributors**\n\nWe’re excited to welcome two new core team members, Antonio and Zack. Antonio joined us in April in the core team, bringing with him vast experience in IPFS, and writing Git servers in Go. Zack is our first “tinkerer in residence” and will try to bootstrap the ecosystem of small contracts and small libraries. He will also be writing apps and helping us design a system to better share and showcase our work with a super UX for team builders and open-source addicts.\n\nAntonio is already hard at work researching a benchmarking dashboard that will show performance improvements or regressions when we change the code. He’s assessing whether to use GiHub to track actions or run our own machine to execute GitHub actions. Take a peek at his research so far on [issue 783 here](https://github.com/gnolang/gno/pull/783).\n\nZack is working on a microblog project. As an experienced web2 Go programmer, Zack is transitioning to web3. Since he’s interested in incentivized social networks, the microblog project will be his first realm, as a Twitter-style blog without titles, where each user has their own page based on their address. Check out [issue 391](https://github.com/gnolang/gno/pull/391) for more details.\n\n**Developer Events**\n\nOver the past few weeks, our core devs have been mainly focused on building but they’re preparing to speak at some exciting events in the coming months. Catch up with Manfred at BUIDL Asia, in Seoul, South Korea, from June 5 - 9. We’re co-hosting a side event with Onbloc, Code States, and Cosmostation on June 5, so be sure to register if you’re in town! We’ll also be at EthBelgrade in Serbia from June 2 - 4, and GopherCon in Berlin from June 26 - 29, so stop by and say hello.\n\n*Do you want to contribute to Gno.land’s monthly updates? If you’re building on Gno.land and want to highlight your development, project, event, or idea, let us know and we’ll include your contribution.*\n","gnoland,gnovm,tm2"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"ETUtUBZp+BSHyKo7SahxcCTJN7B5p5Itpzez5/V4mKcLmnm/qOKvyW7flNXA0QItdwp4663ZTDOiT9zZCe+f/g=="}],"memo":"from gnoblog-cli"}
{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModEditPost","args":["monthly-dev-1","The More You Gno: Gno.land Monthly Updates","\nWe made progress across the board at Gno.land last month, from onboarding more devs to receiving an influx of contributions to the Game of Realms contest. To encourage development and discourse, we set up a biweekly public developer call in addition to our biweekly Office Hours sessions. Anyone can join, ask questions, and give their suggestions on how to shape the Gno.land platform and become a contributor. Last month, we covered several pressing topics from Gno IDE and Gno.land website language, to GnoVM, IBC, and ICS. Jae also came back to the circuit in March with two IRL workshops for devs at side events during EthDenver and Game Developer Conference (GDC) in San Francisco.\n\n## Developer Updates\n\nYou can find the live streams of the new biweekly public developer calls on [Gno.land YouTube](https://www.youtube.com/@_gnoland/videos) as well as access the agendas on [GitHub](https://github.com/gnolang/meetings/blob/main/notes/2023_03_15_dev_call_notes.md). The main talking points this month were Gno IDE, Gno.land website language and UX, garbage collection, bug fixes, and how to bring IBC and ICS to the platform. We are working on all these issues concurrently but the order of release will be Gno.land mainnet, IBC, and then ICS (this is reflected in the DAG below).\n\n\n\n[![Gno.land mini DAG](https://gnolang.github.io/blog/2023-04-15_myg-march/thumbs/mini-dag.png)](https://gnolang.github.io/blog/2023-04-15_myg-march/mini-dag.png)\n\n## Gno.land Website Language\n\nWe want to add more features for developers, such as libraries to make writing interfaces better and more consistent. There is an open topic for frontend developers with typography skills and library developers to create a UI framework for markdown or a custom rendering system.\n\nInternally, our core team is working on improvements to Gno.land’s website, making it easier to navigate with shorter columns while ensuring the text is markdown centric and readable in plain text and the GitHub rendering machine. We hope to achieve this using CSS and having classes for vertical columns, without having to make an extension to the markdown parser.\n\n## Gno IDE\n\nGno.land developer experience team is working on a web-based Gno IDE for quickly building Gno realms and packages right on your browser by just visiting a web app. Gno IDE will provide much improved UX for everything around building a realm (including making the testing easier), and additional features like autocompletion in the editor. Gno IDE will contain all the features you would expect from an IDE as well as valuable APIs for devs building tools around Gno.land with the public Gno Infrastructure.\n\n[![Gno IDE](https://gnolang.github.io/blog/2023-04-15_myg-march/thumbs/gno-ide.png)](https://gnolang.github.io/blog/2023-04-15_myg-march/gno-ide.png)\n\nGno IDE will have multiple modes to support different use cases. The normal mode will be used during everyday developments (as you’re familiar with from other code editors). The presentation mode is for high accessibility and readability. You can use it during video calls or physical workshops while projecting your screen to an audience. The third and perhaps most interesting mode is the embedded mode. Use this mode to embed the IDE into websites and blogs. This feature is especially useful for tutorials to test out sample code, run it on the real testnets, and play with it.\n\n## IBC and ICS\n\nAs depicted in the DAG above, Gno.land mainnet will launch first, followed by IBC and then ICS. We will focus on implementing IBC1, as we strongly believe in the ICS model and want to be a consumer of an existing Cosmos chain. We want a common ICS implementation that works across many hubs because Gno.land is a type of hub that will need its own ICS to scale while providing GnoVM on consumer chains on the Cosmos Hub. Our next step now is to find the best way to configure ICS for Gno.land and make GnoVM available as a consumer chain in the Cosmos Hub system.\n\nRegarding IBC, we will use the current implementation that was written for the Cosmos SDK and port that over to Tendermint2. We anticipate some issues along the way including security patches that need to be applied to our code base. There are multiple ongoing directions and discussions about how to bridge Gno.land’s smart contracts to IBC, which are essentially Interchain smart contract interactions.\n\nOne possibility is to have an API that submits events to a queue of outgoing events, and another queue to receive and consume events asynchronously. This mechanism could work for IBC2 to have rich inter-contract Interchain features, and the same API could work for Interchain plus smart contract interactions that require advanced options. We discussed a proposal to create a standard for Interchain contracts so that IBC2 could eventually be standardized eliminating limitations by applying it with an EVM, other languages, and CosmWasm.\n\nThis protocol could be based on Protobuf or a similar well-known syntax definition protocol so that we can push the Interchain to the next level. IBC2 will be safe and fast and replace vulnerable atomic bridges between multiple technologies. This is a major update that we are committed to developing and we need help identifying all the challenges involved. Working on IBC integration, separate from the Gno.land mainnet launch, will require significant time to understand how the light client system works. If you’re interested in taking on this task, let us know and we’ll set up a group. IBC will likely be the most important challenge of Game of Realms phase 2.\n\n## Garbage Collection\n\nCurrently, our work on garbage collection does not address the problem in the traditional Golang sense of dealing with memory efficiency. Instead, we are progressively optimizing and improving the main state tree by automating the clean-up of orphan nodes. The next phase will be targeting the official garbage collector component to begin work on memory management as we have some common Golang garbage collection challenges, but are identifying some uncommon ones too.\n\nWe need to consider elements like where to hold our objects because this is tied to releasing them in a concurrent lock-free way. We also need a good data structure. This is ongoing research as of now to implement a dedicated routine to synchronously clean stuff in a non-blocking way.\n\n## Game of Realms\n\nThis month, we have seen a massive uptick in contributions to Game of Realms phase one with a tidal wave of issues, general discussions, and PRs. One of the biggest things we worked on was adding support for MOD, which is a version of Go mod with an easier interface to manage your dependencies and version your dependencies. You can track the ongoing issue on GitHub [here](https://github.com/gnolang/gno/issues/390).\n\nThere have been some really strong contributions to the Evaluation DAO and governance module, as well as a big CLI refactor that went into our code base. We've also seen people contribute contracts like GRC 1155 or general improvements to existing realms, with many suggestions for fixing bugs. Finding bugs and reporting what people want is a good indication that the Gno.land platform is being picked up and gaining adoption.\n\nYou can find the Office Hours recordings that cover Game of Realms on YouTube [here](https://www.youtube.com/watch?v=JTmNg-b6Lcs).\n\n## Developer Events Stateside\n\nGno.land hosted a lively meetup during EthDenver last month where Gno.land founder and core dev Jae Kwon gave a talk for Solidity developers called “Gno.land, the Inevitable Next Generation Smart Contract Platform.\" He compared and contrasted Gno.land and Gnolang to Solidity, and showed Ethereum developers how the GnoVM shifts the smart contract paradigm. You can watch the [recording here](https://www.youtube.com/watch?v=IJ0xel8lr4c).\n\nAlso in March, Jae hosted a gaming workshop at a side event during the infamous Gaming Developer Conference (GDC) in San Francisco. “Gno.land for Game Developers, Building Your App in Web3,\" showed participants a sample gaming app built on the Gno.land platform and offered them the chance to try their hand at writing a smart contract for their app with Gno.\n\n## Virtual Events - How to Build a Forum\n\nCore tech lead at Gno.land Miloš Živković held a virtual workshop for Go devs called “How to Build a Forum.” He showed how Gnolang is a fast and simple way to build and launch smart contracts using the Gnolang interpreter virtual machine that interprets Gno and eliminates the need for any servers or ORNs.\n\nThe VM allows for the memory state of your Gno.land application to persist automatically after every transactional function call, which is a completely new way to handle transaction volume and memory recall. You can watch the [full tutorial here](https://github.com/gnolang/workshops).\n\n*We’d like the community to get involved in Gno.land’s monthly updates, so if you’re building on Gno.land and want to highlight your development, project, event, or idea, let us know and we’ll include your contribution.*\n","gnoland,gnovm,tm2"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"WiG7vNZslSreQl7SzbLJfhZ2cS4r4LqLCpqo71bvHKcWgz6tKMQt5fYK4Nyey70jHY2LbsZb8Nh/sUS5r14hQA=="}],"memo":"from gnoblog-cli"}
{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModEditPost","args":["monthly-dev-2","The More You Gno: Gno.land Monthly Updates - 2","\n**The More You Gno 2: Gno.land Developer Updates**\n\nOver the past few weeks, our core devs and ecosystem contributors have been making massive strides on Gno.land. There’s a lot to cover in the second edition of *The More You Gno*, from updates on Tendermint2 and GnoVM to stack/frames management, Gno IDE, and plenty more. We’ll also see what some of the external teams contributing to the platform have been up to, including Gno.land’s first decentralized exchange, GnoSwap, and Adena compatibility with GRC20 tokens. Check it out.\n\n**Tendermint2**\n\nWe’re making steady development progress on Tendermint2, which focuses on simplicity of design, minimal code, minimal dependencies, modular dependencies, and completeness. For the time being, Tendermint2 will stay in the main repo in a top-level folder named Tendermint2. This is the official location to develop and improve the consensus protocol until it is stable enough to be extracted from the Gno repo and become a standalone project. Currently, Tendermint2 depends on GnoVM, however, we are working to unlink this dependency and build a basic demo Tendermint2 chain and Client.\n\nTendermint2 JS/TS Client is a JavaScript/TypeScript client implementation for Tendermint2-based chains. The client will make it easier for developers to interact with Tendermint2 chains, with a simplified API for account and transaction management, removing a ton of manual work and allowing developers to focus on building their dApps. You can [read more about the client here](https://www.npmjs.com/package/@gnolang/tm2-js-client). In addition to the Tendermint2 JS/TS client, we also created a Gno JS/TS client that just extends the TM2 one to provide Gno-specific functionality. You can read more about this here.\n\n**Game of Realms**\n\nThe incentivized competition to find the best contributors to Gno.land continues in phase one, with slow but steady progress being made. Nir1218 initiated an Evaluation DAO Kickoff discussion in [issue 792](https://github.com/gnolang/gno/pull/792) to initiate testing code for the key smart contract infrastructure that will power the Gno.land platform. We are also interviewing architects for the core team with experience in governance modules and creating new economies on-chain, and a new DevRel team member will be joining us soon to create awesome tutorials and documentation to advance Game of Realms further. Gno.land must be built by the community and we will not rush to push Game of Realms to the second phase until we have found quality contributors to complete the challenge tasks and become the platform’s first founding members.\n\n**Gno IDE**\n\nOur core development team is working on a web-based IDE for Gno.land that will greatly improve the developer experience, allowing builders to quickly spin up Gno realms and packages right on their browsers just by visiting a web app. Currently named Gno IDE but with a rebranding on the horizon, this intuitive product focuses on ease of use and improved UX, and will include all the features you’d expect from an IDE, such as auto compilation in the editor, debugging, extensive testing capability, and powerful APIs like IntelliJ to supercharge your programming.\n\nGno IDE currently has multiple modes to support different use cases, including a normal mode for everyday programming, similar to a standard code editor, a presentation mode for video calls or screen sharing, and an embedded mode to extend functionality, allowing you to embed the IDE directly into websites and blogs. You can also choose to edit your code in Emacs or Vim and easily switch between steps, from previous to next, making creating your tutorials and blog posts more intuitive. Watch out for more to come on Gno IDE soon, and if you want to contribute by creating a plugin for your favorite editor, open a PR to win contribution points.\n\n**Stack/Frames Management**\n\nThe stack/frames is an integral part of the virtual machine (VM) and the language. Stack/frames provide context for smart contract developers, enabling them to access useful information, such as the original caller, or to determine if a contract is being called through another one. The current implementation is limited in scope and relies on fixed positions in the stack which can lead to inconsistencies.\n\nThere is an ongoing [issue 683 open here](https://github.com/gnolang/gno/issues/683) and we have continued to work on enhancing stack/frames development over the last month. We’re adding a new function in the standard library std.PrevRealm (previously GetRealmCaller). Currently, we only have GetOrigCaller, which returns the user calling the first realm. This is not secure and we need a way to call the previous caller. This will allow a realm to handle GRC20 treasuries. See [issue 667](https://github.com/gnolang/gno/pull/667) and [issue 634](https://github.com/gnolang/gno/issues/634) for further details.\n\n**Dealing with Panics in Native Functions**\n\nWe have devised a solution for dealing with panics in native functions, [see pull request 732](https://github.com/gnolang/gno/pull/732). Previously, when there was a panic in a native function, we could not recover it in Gno code. An example of this was the assert origin call, which panicked if the call was not a direct call from a transaction. Based on discussions with contributors, we’ve agreed that native functions should never panic, but if they panic, they panic with machined Gno panic. This gives us the choice in a native function to code a Gno panic, or, if it's a very bad panic, use Go panic so that we know the Gno code is unable to recover it.\n\n**Logic Upgrading**\n\nMaking it possible to upgrade your logic is definitely out of scope for the first version of Gno.land, however, it’s an important issue that we have begun to discuss so that we can place certain restrictions on it, such as allowing upgrades when we consider them safe enough to be compatible with imports. Another idea is to work on creating workflows where migrations become something official. This way, we could define ways to migrate a contract completely in a single transaction at the chain level. Once everything is working and approved as the previous contract is parsed or archived, the new one gets the data. We will revisit this topic after the first version of Gno.land reaches the mainnet.\n\n**Garbage Collection**\n\nIn terms of garbage collection, we don’t have memory leaks as such but we do have defacto memory leaks. By the VM having references to all objects, they won’t be released by Go’s underlying GC. We have some form of reference counting but it is only done at the end of a transaction. We have implemented a mark-and-sweep garbage collector and are working on the VM runtime to manage the objects and signal to the garbage collector to release them when they are no longer needed. This is done by adding the notion of a heap, which is managed by the garbage collector.\n\n**GnoVM**\n\nDeveloping GnoVM is an ongoing task and we will likely need to fork the GnoVM to create different competing versions. GnoVM will be complete, limited in features, and serve as the only interpreter, an enduring reference point over time. Future versions of GnoVM will be designed to incorporate CosmWasm so that all Cosmos chains can have CosmWasm enabled and the VM can run directly on the browser and execute tasks on the browser without requiring to make an API call, making it faster. To do this, we can make a Gno compiler in WebAssembly without changing the code because Go supports WASM cross-compilation.\n\nWe plan on making a competing version of the original minimalist GnoVM, such as a Rust version with a JIT compiler using LLVM as a backend.\n\n**Ecosystem Updates**\n\nSince our last update, the Gno.land community continues to expand with awesome teams and contributors building cool infrastructure and projects on the platform. Below, we take a look at the largest developments of the past few weeks and extend a special thanks to everyone helping us build Gno.land.\n\n**Teritori**\n\nTeritori blockchain and multi-chain hub launched in November 2022, allowing IBC and non-IBC communities to connect, create groups, exchange tokens and NFTs, and launch new projects. Teritori’s idea for building on Gno.land is to create a multi-chain experience for users with a web portal, NFT marketplace, and social feed that will grow the community, and gradually integrate smart contracts and realms. This will promote Gno.land to more developers and showcase all the dApps being built through an easy-to-navigate dApp store. In the coming weeks, Teritori will work with the Onbloc team to integrate the Athena wallet into their portal as well as discuss ideas for promoting Game of Realms to new developers.\n\n**Onbloc**\n\nOnbloc is one of the Gno.land ecosystem’s most active contributors, responsible for building the Adena wallet and the block explorer Gnoscan. The team has also been working on creating an official Gno SDK that will allow developers to interact with Gno.land more easily, and remove some of the current friction. Onbloc opened [issue 701](https://github.com/gnolang/gno/issues/701) on GitHub primarily for developers who either have their own web app or are building a JavaScript app and want to work with Gno in some way. Currently, developers need to do a lot of manual work, which Gno SDK will abstract away, improving the workflow and developer experience. If you have any ideas or feedback, please contribute to the aforementioned issue.\n\nIn another cool development, Onbloc has rolled out a new feature in Adena and Gnoscan to provide support for GRC20 tokens. To store and send tokens, you can open your Adena wallet, click on \"Manage Tokens”, navigate to the Custom Token page, and see which GRC20 tokens are available on Gno Testnet 3, searching by the symbol or path. To research on or discover tokens, head over to the Tokens page on Gnoscan for a full list of GRC20 tokens. You can click on any token on the list for detailed information, such as the total supply, owner, or other available functions built into the token. The Account Details page has also been updated to display all tokens owned by each address. You can help by checking out [issue 764](https://github.com/gnolang/gno/pull/764), which discusses adding bigint to support a wide range of numbers and encoding binary, and [issue 816](https://github.com/gnolang/gno/pull/816), which highlights a small bug the team runs into when coding.\n\nOnbloc has also created a new [token resource page on GitHub](http://github/onbloc/gnotokenresources) for anyone to share or upload resources associated with their Gno.land project. This will serve as a shared knowledge pool about any dApp on the platform. If you wanted to create a decentralized exchange, for example, you would need all the information about the tokens available on Gno.land, such as their images, symbols, descriptions, links to websites, etc. Now you can find this in one handy GitHub repository. If you’re a developer or builder who wants your logo or any other static data posted, be sure to submit a PR.\n\nAnd speaking of decentralized exchanges, Onbloc is also building Gnoswap, the first DEX to be powered by Gno.land, designed to simplify the concentrated liquidity experience and increase capital efficiency for traders. Its interface is built using TypeScript to be user-friendly, secure, and accessible for streamlining complex mechanisms such as price range configurations and staking as part of its core service. Contribute to its interface [here](https://github.com/gnoswap-labs/gnoswap-interface).\n\nAs for the contract side, Onbloc is actively working on its development with help from the core members of Gno.land. The code will be open-sourced for full transparency once the basic functions are ready.\n\n**New Core Contributors**\n\nWe’re excited to welcome two new core team members, Antonio and Zack. Antonio joined us in April in the core team, bringing with him vast experience in IPFS, and writing Git servers in Go. Zack is our first “tinkerer in residence” and will try to bootstrap the ecosystem of small contracts and small libraries. He will also be writing apps and helping us design a system to better share and showcase our work with a super UX for team builders and open-source addicts.\n\nAntonio is already hard at work researching a benchmarking dashboard that will show performance improvements or regressions when we change the code. He’s assessing whether to use GiHub to track actions or run our own machine to execute GitHub actions. Take a peek at his research so far on [issue 783 here](https://github.com/gnolang/gno/pull/783).\n\nZack is working on a microblog project. As an experienced web2 Go programmer, Zack is transitioning to web3. Since he’s interested in incentivized social networks, the microblog project will be his first realm, as a Twitter-style blog without titles, where each user has their own page based on their address. Check out [issue 391](https://github.com/gnolang/gno/pull/391) for more details.\n\n**Developer Events**\n\nOver the past few weeks, our core devs have been mainly focused on building but they’re preparing to speak at some exciting events in the coming months. Catch up with Manfred at BUIDL Asia, in Seoul, South Korea, from June 5 - 9. We’re co-hosting a side event with Onbloc, Code States, and Cosmostation on June 5, so be sure to register if you’re in town! We’ll also be at EthBelgrade in Serbia from June 2 - 4, and GopherCon in Berlin from June 26 - 29, so stop by and say hello.\n\n*Do you want to contribute to Gno.land’s monthly updates? If you’re building on Gno.land and want to highlight your development, project, event, or idea, let us know and we’ll include your contribution.*\n","gnoland,gnovm,tm2"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"O2PhqvO/shLk5rUH2YhTk2gStOXOnk7zxwM2Q61Rrk0oJURGxkSCcBbjKAPafFZWVoKK+RsmD1oep75oP4fA3w=="}],"memo":"from gnoblog-cli"}
{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModAddPost","args":["monthly-dev-2","The More You Gno: Gno.land Monthly Updates - 2","\n**The More You Gno 2: Gno.land Developer Updates**\n\nOver the past few weeks, our core devs and ecosystem contributors have been making massive strides on Gno.land. There’s a lot to cover in the second edition of *The More You Gno*, from updates on Tendermint2 and GnoVM to stack/frames management, Gno IDE, and plenty more. We’ll also see what some of the external teams contributing to the platform have been up to, including Gno.land’s first decentralized exchange, GnoSwap, and Adena compatibility with GRC20 tokens. Check it out.\n\n**Tendermint2**\n\nWe’re making steady development progress on Tendermint2, which focuses on simplicity of design, minimal code, minimal dependencies, modular dependencies, and completeness. For the time being, Tendermint2 will stay in the main repo in a top-level folder named Tendermint2. This is the official location to develop and improve the consensus protocol until it is stable enough to be extracted from the Gno repo and become a standalone project. Currently, Tendermint2 depends on GnoVM, however, we are working to unlink this dependency and build a basic demo Tendermint2 chain and Client.\n\nTendermint2 JS/TS Client is a JavaScript/TypeScript client implementation for Tendermint2-based chains. The client will make it easier for developers to interact with Tendermint2 chains, with a simplified API for account and transaction management, removing a ton of manual work and allowing developers to focus on building their dApps. You can [read more about the client here](https://www.npmjs.com/package/@gnolang/tm2-js-client). In addition to the Tendermint2 JS/TS client, we also created a Gno JS/TS client that just extends the TM2 one to provide Gno-specific functionality. You can read more about this here.\n\n**Game of Realms**\n\nThe incentivized competition to find the best contributors to Gno.land continues in phase one, with slow but steady progress being made. Nir1218 initiated an Evaluation DAO Kickoff discussion in [issue 792](https://github.com/gnolang/gno/pull/792) to initiate testing code for the key smart contract infrastructure that will power the Gno.land platform. We are also interviewing architects for the core team with experience in governance modules and creating new economies on-chain, and a new DevRel team member will be joining us soon to create awesome tutorials and documentation to advance Game of Realms further. Gno.land must be built by the community and we will not rush to push Game of Realms to the second phase until we have found quality contributors to complete the challenge tasks and become the platform’s first founding members.\n\n**Gno IDE**\n\nOur core development team is working on a web-based IDE for Gno.land that will greatly improve the developer experience, allowing builders to quickly spin up Gno realms and packages right on their browsers just by visiting a web app. Currently named Gno IDE but with a rebranding on the horizon, this intuitive product focuses on ease of use and improved UX, and will include all the features you’d expect from an IDE, such as auto compilation in the editor, debugging, extensive testing capability, and powerful APIs like IntelliJ to supercharge your programming.\n\nGno IDE currently has multiple modes to support different use cases, including a normal mode for everyday programming, similar to a standard code editor, a presentation mode for video calls or screen sharing, and an embedded mode to extend functionality, allowing you to embed the IDE directly into websites and blogs. You can also choose to edit your code in Emacs or Vim and easily switch between steps, from previous to next, making creating your tutorials and blog posts more intuitive. Watch out for more to come on Gno IDE soon, and if you want to contribute by creating a plugin for your favorite editor, open a PR to win contribution points.\n\n**Stack/Frames Management**\n\nThe stack/frames is an integral part of the virtual machine (VM) and the language. Stack/frames provide context for smart contract developers, enabling them to access useful information, such as the original caller, or to determine if a contract is being called through another one. The current implementation is limited in scope and relies on fixed positions in the stack which can lead to inconsistencies.\n\nThere is an ongoing [issue 683 open here](https://github.com/gnolang/gno/issues/683) and we have continued to work on enhancing stack/frames development over the last month. We’re adding a new function in the standard library std.PrevRealm (previously GetRealmCaller). Currently, we only have GetOrigCaller, which returns the user calling the first realm. This is not secure and we need a way to call the previous caller. This will allow a realm to handle GRC20 treasuries. See [issue 667](https://github.com/gnolang/gno/pull/667) and [issue 634](https://github.com/gnolang/gno/issues/634) for further details.\n\n**Dealing with Panics in Native Functions**\n\nWe have devised a solution for dealing with panics in native functions, [see pull request 732](https://github.com/gnolang/gno/pull/732). Previously, when there was a panic in a native function, we could not recover it in Gno code. An example of this was the assert origin call, which panicked if the call was not a direct call from a transaction. Based on discussions with contributors, we’ve agreed that native functions should never panic, but if they panic, they panic with machined Gno panic. This gives us the choice in a native function to code a Gno panic, or, if it's a very bad panic, use Go panic so that we know the Gno code is unable to recover it.\n\n**Logic Upgrading**\n\nMaking it possible to upgrade your logic is definitely out of scope for the first version of Gno.land, however, it’s an important issue that we have begun to discuss so that we can place certain restrictions on it, such as allowing upgrades when we consider them safe enough to be compatible with imports. Another idea is to work on creating workflows where migrations become something official. This way, we could define ways to migrate a contract completely in a single transaction at the chain level. Once everything is working and approved as the previous contract is parsed or archived, the new one gets the data. We will revisit this topic after the first version of Gno.land reaches the mainnet.\n\n**Garbage Collection**\n\nIn terms of garbage collection, we don’t have memory leaks as such but we do have defacto memory leaks. By the VM having references to all objects, they won’t be released by Go’s underlying GC. We have some form of reference counting but it is only done at the end of a transaction. We have implemented a mark-and-sweep garbage collector and are working on the VM runtime to manage the objects and signal to the garbage collector to release them when they are no longer needed. This is done by adding the notion of a heap, which is managed by the garbage collector.\n\n**GnoVM**\n\nDeveloping GnoVM is an ongoing task and we will likely need to fork the GnoVM to create different competing versions. GnoVM will be complete, limited in features, and serve as the only interpreter, an enduring reference point over time. Future versions of GnoVM will be designed to incorporate CosmWasm so that all Cosmos chains can have CosmWasm enabled and the VM can run directly on the browser and execute tasks on the browser without requiring to make an API call, making it faster. To do this, we can make a Gno compiler in WebAssembly without changing the code because Go supports WASM cross-compilation.\n\nWe plan on making a competing version of the original minimalist GnoVM, such as a Rust version with a JIT compiler using LLVM as a backend.\n\n**Ecosystem Updates**\n\nSince our last update, the Gno.land community continues to expand with awesome teams and contributors building cool infrastructure and projects on the platform. Below, we take a look at the largest developments of the past few weeks and extend a special thanks to everyone helping us build Gno.land.\n\n**Teritori**\n\nTeritori blockchain and multi-chain hub launched in November 2022, allowing IBC and non-IBC communities to connect, create groups, exchange tokens and NFTs, and launch new projects. Teritori’s idea for building on Gno.land is to create a multi-chain experience for users with a web portal, NFT marketplace, and social feed that will grow the community, and gradually integrate smart contracts and realms. This will promote Gno.land to more developers and showcase all the dApps being built through an easy-to-navigate dApp store. In the coming weeks, Teritori will work with the Onbloc team to integrate the Athena wallet into their portal as well as discuss ideas for promoting Game of Realms to new developers.\n\n**Onbloc**\n\nOnbloc is one of the Gno.land ecosystem’s most active contributors, responsible for building the Adena wallet and the block explorer Gnoscan. The team has also been working on creating an official Gno SDK that will allow developers to interact with Gno.land more easily, and remove some of the current friction. Onbloc opened [issue 701](https://github.com/gnolang/gno/issues/701) on GitHub primarily for developers who either have their own web app or are building a JavaScript app and want to work with Gno in some way. Currently, developers need to do a lot of manual work, which Gno SDK will abstract away, improving the workflow and developer experience. If you have any ideas or feedback, please contribute to the aforementioned issue.\n\nIn another cool development, Onbloc has rolled out a new feature in Adena and Gnoscan to provide support for GRC20 tokens. To store and send tokens, you can open your Adena wallet, click on \"Manage Tokens”, navigate to the Custom Token page, and see which GRC20 tokens are available on Gno Testnet 3, searching by the symbol or path. To research on or discover tokens, head over to the Tokens page on Gnoscan for a full list of GRC20 tokens. You can click on any token on the list for detailed information, such as the total supply, owner, or other available functions built into the token. The Account Details page has also been updated to display all tokens owned by each address. You can help by checking out [issue 764](https://github.com/gnolang/gno/pull/764), which discusses adding bigint to support a wide range of numbers and encoding binary, and [issue 816](https://github.com/gnolang/gno/pull/816), which highlights a small bug the team runs into when coding.\n\nOnbloc has also created a new [token resource page on GitHub](http://github/onbloc/gnotokenresources) for anyone to share or upload resources associated with their Gno.land project. This will serve as a shared knowledge pool about any dApp on the platform. If you wanted to create a decentralized exchange, for example, you would need all the information about the tokens available on Gno.land, such as their images, symbols, descriptions, links to websites, etc. Now you can find this in one handy GitHub repository. If you’re a developer or builder who wants your logo or any other static data posted, be sure to submit a PR.\n\nAnd speaking of decentralized exchanges, Onbloc is also building Gnoswap, the first DEX to be powered by Gno.land, designed to simplify the concentrated liquidity experience and increase capital efficiency for traders. Its interface is built using TypeScript to be user-friendly, secure, and accessible for streamlining complex mechanisms such as price range configurations and staking as part of its core service. Contribute to its interface [here](https://github.com/gnoswap-labs/gnoswap-interface).\n\nAs for the contract side, Onbloc is actively working on its development with help from the core members of Gno.land. The code will be open-sourced for full transparency once the basic functions are ready.\n\n**New Core Contributors**\n\nWe’re excited to welcome two new core team members, Antonio and Zack. Antonio joined us in April in the core team, bringing with him vast experience in IPFS, and writing Git servers in Go. Zack is our first “tinkerer in residence” and will try to bootstrap the ecosystem of small contracts and small libraries. He will also be writing apps and helping us design a system to better share and showcase our work with a super UX for team builders and open-source addicts.\n\nAntonio is already hard at work researching a benchmarking dashboard that will show performance improvements or regressions when we change the code. He’s assessing whether to use GiHub to track actions or run our own machine to execute GitHub actions. Take a peek at his research so far on [issue 783 here](https://github.com/gnolang/gno/pull/783).\n\nZack is working on a microblog project. As an experienced web2 Go programmer, Zack is transitioning to web3. Since he’s interested in incentivized social networks, the microblog project will be his first realm, as a Twitter-style blog without titles, where each user has their own page based on their address. Check out [issue 391](https://github.com/gnolang/gno/pull/391) for more details.\n\n**Developer Events**\n\nOver the past few weeks, our core devs have been mainly focused on building but they’re preparing to speak at some exciting events in the coming months. Catch up with Manfred at BUIDL Asia, in Seoul, South Korea, from June 5 - 9. We’re co-hosting a side event with Onbloc, Code States, and Cosmostation on June 5, so be sure to register if you’re in town! We’ll also be at EthBelgrade in Serbia from June 2 - 4, and GopherCon in Berlin from June 26 - 29, so stop by and say hello.\n\n*Do you want to contribute to Gno.land’s monthly updates? If you’re building on Gno.land and want to highlight your development, project, event, or idea, let us know and we’ll include your contribution.*\n","gnoland,gnovm,tm2"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"koeSsUqbY47n7ynsfDSo+4JbnyJLOERybOkX5FpGZYY0ioZdH3c6FLhyWOlsnPlb6URfarURVwzzfQZTUuNfWg=="}],"memo":"from gnoblog-cli"}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1kxa74mz8hul5tge3rvyep6epzhkf99x29zac7g","to_address":"g1fzjcyrhv7rtrpwhsd0mhl9n7ahxm0v34p9w5kn","amount":"999999ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/rLJAbJ6FDKQm3GA5RLimerzN2dJSqFzOpUECkD7J3O"},"signature":"XJeNNa00WSGkAiM+nvDlzLUShsFWkvJOvwhjG7n9PzEvGdgF26MXrBdzxCdNq/O0DfGX5ApWMOZIkDaFLYk30Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1fzjcyrhv7rtrpwhsd0mhl9n7ahxm0v34p9w5kn","to_address":"g1kxa74mz8hul5tge3rvyep6epzhkf99x29zac7g","amount":"100999997ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7BGCHnC+0EaBkHciQ6D+fFVnlumBrn4QABY4FhxNlab"},"signature":"ybJ/RhRdko6UPL72Uied9SLt2NNFmveS33UDT7/oTj4mkW6DYzY2OY65p2a1GO+KFtAzX7sv9ybVt2Y5WgVw+g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","to_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","amount":"20000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"LLQnB/Y57oud9G7dpE/GOpZBpsQV0e6xckGpGijB24xXbR4C0q8n2R2aIo8LEdbiNvtx4ufGXrY8rOfUNrxMKw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","to_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","amount":"20000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"UGr08L7dTjmK5mYBntmt5tYday+UX3sUoW65WfPfINo8Zs/wWvlPkWiJkPbv5IdhE3hXJh2k4PQmyQQ7SljfbQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","to_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","amount":"10000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"WSqf2ASpmJrUcMNhOXT3y+8M+7arSrW4VSgO29DbNAxxXYEkvHjRWK+EskWhjp4qxA4FRB0V04qirQs6WE/hhA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","to_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","amount":"10000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"9A+AuW7kPftGJ9TsoRnpMpl9OIZaaefYmcxVsmPeQetNiPuL0QOBybDh+hnAhlFZOc/yg8vgIFez6g5iAnOjnA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","to_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","amount":"20000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"U3F8u5tB/0cf3oDpwi0r6R/sKbm7kV2eYtVfy4qNW/d2TvIz5AQVyTd4WT6SfX7P16++uuIY2NvywyZNrEhHcA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","to_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","amount":"40000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"hVGoH/UBVJAk4PK1CvbT5lrKuBAob2uMLVI95rEcRSdOJU4IBq1Hax6hK/KnxunAK41nCvSJHb9LGJebgBnK6A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","to_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","amount":"10000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"x8mW+bFpAkgzl26pKHfxG3+A0J9yStaQHHLQN7kFAaskWGt4MoMsXnqb07trEMmK9hosaVd9VSvmCUfm25yHDA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g17j9y7xmxsjz57xxvxd4crpnfmsjnut0aqwedx9","to_address":"g1yex6j29msk64cave03ahxzvlf5jeqqp442sfcc","amount":"10000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwVrtwdi1lJ6bXwz9+XjAAtoJVMpy1MG6OtAZiuZhcI1"},"signature":"mjeA0UjWO3NwzEi2Q9Ztnwnc5XqGwLAmSNDvUPAe+sp5pwkugkTzX7ioHz+yRCiY4qA+1bZ63ZHgICvSBRt1jw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1l7nmtmzptycmt36lrju4ypum2yr5zx244c52r3","to_address":"g1g099amdxjh0wypda4klsk9lmvmsxhqmwjgz34s","amount":"13000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A98IFyM+yKsk0qIx5E0oc4bZxYWQ9WnMDU1kiclZmnpK"},"signature":"Dlntf5KSq+zPwA0gyMQ0RIQYgs1psXowbAxMtHcBlxJbouu2GNgyMN51W7FE7HksC2eCY9ggkYZ61EA84WJXmg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14guhyq2r7sjquj6v0l03a4t99hrvxxpl5lf0tx","to_address":"g13eqyhz6trg6xq5axe2kacztv28uuk4ayvkat9c","amount":"20000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al2BCCwOh52xkx1tn9J8xJe7ifmNOrna6i6/hcV4/MCa"},"signature":"F8rj3NHSQpxzkEdxA2X52qeEfBzJtQyruwkyIKBi+KkBbu3wvq0xjTJEnpRyzLxYkvnLgbwwt6oxQr1F+5MAtQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1z6ups0smz4sw6flu0d8zwtlc8cumaskgxsduqz","to_address":"g14qqtnhguhg6ll0z68nhy3h60rnd30knrpd3qxj","amount":"3000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"An/W0Tg468dxODpBDYxefgQBJLiKkAPBV8RBu0Wij7dA"},"signature":"x4rqQ5A65b5tvwMaKn/3uN4xj9K5T8kXoT2NoJcGd2FVLdU3N8YiVWrzb2IWWfkSCI90oHrLwEV8+AaP7qYdjA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17mcw908lp5y006avp4fjr082wrzryzqh2qgr8k","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g17u9rshemksrfpgr4qcp47q6uh98ns00f8hmdx8","123"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1Ie2uJQVGI4K/6kwsKQkZK48YDrk3Ic4DKiVS1Ee2yL"},"signature":"MBzwGKGgMPNo94gmM/5uWL4+3cRvCiXLYBN3HVqbPDhvlfcxJUd3V4Wm1u7eRukX9JfFbp1zCj+zj3pOo3WgeA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1flk9z2qmkgqeyrl654r3639rzgz7xczdfwwqw7","5"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"uqLlGGfJXJC477HRkcZf2wZqsN9UbXIoG6CadhdqJfo6LXPkC2GhQS0T1Om1QNi8S4xWTL8iuZ7aEJ7WEgT1xQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1y00a6w0t893yldq6e2karpwqwzh29cz3e0tkah","to_address":"g183qc644n8fqzuqapy6q0tkcc9qhwqarg3uflnh","amount":"12000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aus4efhyOq6IQOIxHPOJrATpDwNGdPQnWN2fM290X4C/"},"signature":"uW9PILMCcWq3EwungDMuBQ316PAJ3ee/u1RTwQ7070VKqFCHLnlpR+NKhSvvpIEpaOMParv7Uxcqj2x5GcSyqQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1hxecqgcv4f0p7s7ap6t20vaeeuvqgvl9qtchr6","1234"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"iYrA1kCO7HhvUEITzcdZsq/a3vvGcWN1AtvlzxyhwGcr1lPU63xOwMn8X+7Oa7ZSPqjQrmDVKg6zHqvKtc/8cA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hxecqgcv4f0p7s7ap6t20vaeeuvqgvl9qtchr6","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g183qc644n8fqzuqapy6q0tkcc9qhwqarg3uflnh","3"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuJxl7LShR2+FGthhNED94mz+IowgGHOGEXtOnrBkqq5"},"signature":"plCm6+VTlXXIU8SaWUZ0TMtt2Wb5DJJ4DRDnuCxnVV9/zcz9hx74cX5+lPguf/5VRU2DPGO/b5KEcUF0DLnhQg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hxecqgcv4f0p7s7ap6t20vaeeuvqgvl9qtchr6","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g183qc644n8fqzuqapy6q0tkcc9qhwqarg3uflnh","3456789"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuJxl7LShR2+FGthhNED94mz+IowgGHOGEXtOnrBkqq5"},"signature":"yodT2JNZRzWVBFR8OfAW03Vlq+kmWEN8CjXMLiTWy4tbRIAph3RXaDzz65iPi0xKfpOiuCscSkEMiXNhQ0K0/Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hxecqgcv4f0p7s7ap6t20vaeeuvqgvl9qtchr6","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1mjzyk7r49ta4h6ppgv2fedgz5ek6hgyttge9pv","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuJxl7LShR2+FGthhNED94mz+IowgGHOGEXtOnrBkqq5"},"signature":"O5fC7dSqYKWWRG1oEtuArHivKcKOPjOvuSO7iqkGTWAQVQSgI490x89V9aOoZdSnRCnci0gPwySUQz/Tdido1Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hxecqgcv4f0p7s7ap6t20vaeeuvqgvl9qtchr6","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1mjzyk7r49ta4h6ppgv2fedgz5ek6hgyttge9pv","1228"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuJxl7LShR2+FGthhNED94mz+IowgGHOGEXtOnrBkqq5"},"signature":"xRyr4+dlfQMM0XSgBEBHCyU8YzRVaRK0Eiq58QnCKisCbDF10HsMKJCxnHJWnNYTujEKG9ADcUF2BJRLQmVbkA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hxecqgcv4f0p7s7ap6t20vaeeuvqgvl9qtchr6","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g183qc644n8fqzuqapy6q0tkcc9qhwqarg3uflnh","1234567890"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuJxl7LShR2+FGthhNED94mz+IowgGHOGEXtOnrBkqq5"},"signature":"OsrpbydJkFpq229cW2d6O51Fl4WRQaRzqKe7kbz/3gFWGg+1VwXqgpqxqm5UWJm33WkmdwgjT0dhiN0EUQFMvQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g183qc644n8fqzuqapy6q0tkcc9qhwqarg3uflnh","to_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","amount":"11000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5XQ9SBS7WBA44IZGpu5wntarn9DHeqGY+nU5efQLT6f"},"signature":"MnDkNAEnbnfNvG60E4aYdYuts8mZBJozD+Yu2/W0Hr4Y1rSDWP8Y1G+drIGg9zSrikRP4T5ihoE6DPCrnoeI7g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g183qc644n8fqzuqapy6q0tkcc9qhwqarg3uflnh","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5XQ9SBS7WBA44IZGpu5wntarn9DHeqGY+nU5efQLT6f"},"signature":"E+9lPPyoSE6O45+GTYREDq4CLLQmnYn70FX+tf+aSXxlxdTWY+pNU3a7SrBpdNwhnOYi9uUqpRxmsiP+1xEBSw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1flk9z2qmkgqeyrl654r3639rzgz7xczdfwwqw7","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1flk9z2qmkgqeyrl654r3639rzgz7xczdfwwqw7","1"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0cN2jM5SaG0tbXUEYYhgUmFIGjdIxzlDeBxpetbIQsa"},"signature":"r4qMGMki+hwK36gFS6qX/d37KnrAVSozwHOEdUKVGWVO6r9OgsohkJ4wL/uVlZ8Lj2HdA87qvwq4Y0K8Coo6VQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","to_address":"g14qqtnhguhg6ll0z68nhy3h60rnd30knrpd3qxj","amount":"35000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"9pnS8OuLoajkjSQt7nvbVOkqRlFqkcGLjq4KeNhqn1F3ZxCzr7ufHZQ4NAsTlMfuP5WeBu40tRBXSsUw6qiYtQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g183qc644n8fqzuqapy6q0tkcc9qhwqarg3uflnh","1"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"SxursxeDjN16n5ZAduiY912hf7/a0/BwX+TTvZQUpmBruiUg09/xBDV43K9G44WYMvE6cYJaJeAeJLppB/bf/w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g183qc644n8fqzuqapy6q0tkcc9qhwqarg3uflnh","2"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"NK80w2YbenRxNC4JZoOTIiKlbj4yPJQD+7l4rUYR3dMSGeRP9u8OZVvJhsadiieuS4THVPE/5EsiOr/RSzRrxg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g183qc644n8fqzuqapy6q0tkcc9qhwqarg3uflnh","3"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"UqqP2Yjqdn9dtK6f4RDH2skCkk8GI8NFqDOw94zR5wkHi9z+AE4IVadI5ug6+FgUQFF3CzCPJz/llFMPwqG1dg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g183qc644n8fqzuqapy6q0tkcc9qhwqarg3uflnh","4"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"a5q1F9eIDiPhGOyqYn4iThP+Rf18h7dIa3Ov9f2bs+ANCwHaUEm5ZqBMUhWJUtEKK3wnE9Au4LcivHWy0hgjOw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g183qc644n8fqzuqapy6q0tkcc9qhwqarg3uflnh","5"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"lMhufm+1CtpoXjggdklYQ0AemOUPhHtL/q5cMc/leqkFrrWE3SDPoU69r2BK0KJR4dE8xuLwGXyZg5RvudTMJw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g183qc644n8fqzuqapy6q0tkcc9qhwqarg3uflnh","6"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"8qhwX1tbbxnUAK5HiWO7chlhIefrT6Hhh5OgtMVQBz98D3XSO7o7tBexjYL4fKQhCkG7XMOk+l+FAUJjevjvJg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g183qc644n8fqzuqapy6q0tkcc9qhwqarg3uflnh","7"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"rS9QqIyH4akwACz7K64p8Z1gggm8kDrABqq2nFF0S8hREwlddU99Cw5mV0g6PjtqppMHM0htdNZuAUH9SC87Uw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g183qc644n8fqzuqapy6q0tkcc9qhwqarg3uflnh","8"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"dQl+P/eBIqfTi6nR0zpIoX2Z/wTF++KZaQH4aSSfR0Y7htGI+RatffNvim/Ubsw5EhRQnOQ0nWek6TrmitpkRw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g183qc644n8fqzuqapy6q0tkcc9qhwqarg3uflnh","9"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"pTJnmfi8U7RF0/PxuyutHlczpHEQH1le5b9au+bFyKJaGsSpq0louizqU4+eACwRlO9v7B33apKJ7LQobXC00g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g183qc644n8fqzuqapy6q0tkcc9qhwqarg3uflnh","10"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"uy+5te6b06jqP1CQCvMmxRwITMEqlM+39EimW04mtJRNBZhrP3UjD3F1sZVmuCBFwBk6SuCU0nJWxQC6yDLInA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/tong","func":"Faucet","args":null}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"sLxyEqCDJ+wxlt7CR9SX2m9Ct4LGugmk78xhsZ1Zc+gkm8LquAKp6r8G8bBOlHI2hKcO9DRy1kCrOab5LTBFUQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g183qc644n8fqzuqapy6q0tkcc9qhwqarg3uflnh","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"AuiIBuLPVRgkoQuCoU7N28ngegt5ePcZUivKJmw4RaA8rRNTvyWq5ZyG86NtZ26HNzXvva7LokN9keWvWFdUUg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1eddgf83tjx33h0k6xc6r0ah6z350xaq0ckr5nh","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"CYc+OBtOMZRGjoS8kuXaIIx8bzJb3h3MVs4yqQv57u1QsrPfggYONcrlggJXZ/lTsJuKCe7O5Dy1tzGxMDwhGA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1eddgf83tjx33h0k6xc6r0ah6z350xaq0ckr5nh","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","cusppalm",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2Adx0ZbD0dxIra69RUzaeZRF90YbEsjltTKfk02UqbE"},"signature":"ccdUEpJG/F+oExYvD/xyyCBIropZCbS3jC+ua4/RcIwCeMb9oSLJ7/3TfH3+MiQBZGYVcA7/wFbYD5oKQY11UQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1eddgf83tjx33h0k6xc6r0ah6z350xaq0ckr5nh","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["cusppalm"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2Adx0ZbD0dxIra69RUzaeZRF90YbEsjltTKfk02UqbE"},"signature":"daRsCAGySdtAdIKj+3uhNOlryTTpdh4CEq4krCpkrgZ4mOSbpQ63FxY8vAa5J0t9piaZgUNPbVDQF+XT4d7BvA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1z9gs3xen0cf4uweq6z9z2m3vm5wnqyr4mmy8tk","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"OguL8qsG+i/3HWSPP+JJspTmmVEQdbC6LaGTlrRoDvZS/AOd+cuaIUZhrBwc706KuvAYScMS1FDco7YP8SdsuA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1z9gs3xen0cf4uweq6z9z2m3vm5wnqyr4mmy8tk","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","plicecube",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmcZUCKV6AIpuc9pEPoaMM9WLNaIR+RZ8h0+G1YCkJ2S"},"signature":"wujJ4vi5pzKz+nSqu6pPeaacpxgUe8zl+tVHYMeLraZh1dRdcPBpviEVqgJcK1K0F+P5jZrJZL85mYgDXNlx1A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1z9gs3xen0cf4uweq6z9z2m3vm5wnqyr4mmy8tk","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["plicecube"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmcZUCKV6AIpuc9pEPoaMM9WLNaIR+RZ8h0+G1YCkJ2S"},"signature":"dlxkGrwaH0D1Ky+4pjMU43h38gefJguFjgb66QJ6VCtxsNYklH6i23tls0bv24m5yhyMBGSIMXpxB+/HtAEaUw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1wwqy2qt5f0ua0p8lc2hg9z4vz5xx874wx6aqsl","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"wJjuZjSxGck+xQe8QWxSFI+G9iFESIEdFpIKc7CSF204X3QqJJjOYlCUFQIJihvXuFboEYMW4pka6qYBCsZ3yA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wwqy2qt5f0ua0p8lc2hg9z4vz5xx874wx6aqsl","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","cootvent",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9Z6CoCJ3kO/gDC35nB9RgQqEKY7C46IT0aE9lec+gMO"},"signature":"BrOVegZjadAPtEkJHYa2PvBB5w73IeYs+T5gnAH0ad1yvXHnSXO6Z8WDmRxwLH0xAQm1zmXcyqiA1/uIhgeXkQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wwqy2qt5f0ua0p8lc2hg9z4vz5xx874wx6aqsl","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["cootvent"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9Z6CoCJ3kO/gDC35nB9RgQqEKY7C46IT0aE9lec+gMO"},"signature":"pWyCIHSjR2WMJqanpizGrzw9RNNXnxPEqIngpnrjwRBwMI/vtRl0rJ7+Dd28oeEYuhingb/BBRXB6A3zN+gPIw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1eddgf83tjx33h0k6xc6r0ah6z350xaq0ckr5nh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1288","Gno-land-serves-as-a-sophisticated-and-groundbreaking-platform","https://medium.com/@markrozenko10/gno-land-serves-as-a-sophisticated-and-groundbreaking-platform-that-revolutionizes-the-landscape-f686cf3e65d8"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2Adx0ZbD0dxIra69RUzaeZRF90YbEsjltTKfk02UqbE"},"signature":"1tnzDdxlqCSgIlezXU1UZrh78AW/oZEN2RYZTRPZRPgLEh3ZWUTpqozRyYBawcpe+6Grq1T95Cu5ACn29tJq+Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1z9gs3xen0cf4uweq6z9z2m3vm5wnqyr4mmy8tk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1289","Platform -- GnoLand","https://teletype.in/@elisasas/MMCg7ZV8plW"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmcZUCKV6AIpuc9pEPoaMM9WLNaIR+RZ8h0+G1YCkJ2S"},"signature":"wBx2zrKdClMQW4zQI14vkWWtS/FclPNY+ZsrPRJI2oVKGutyBlYrGZowmANjyWaRMe9TiCac1Zq7VJMJv9jNqg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wwqy2qt5f0ua0p8lc2hg9z4vz5xx874wx6aqsl","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1290","Gno.land serves","https://teletype.in/@markoszs/Gflvfe94cLy"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9Z6CoCJ3kO/gDC35nB9RgQqEKY7C46IT0aE9lec+gMO"},"signature":"lEYGD0/Z+vFuXv24MOyYSn7+ieeiSR87Hta9d0ljT6dqdxjPCcHHfOaw56kX+KZ4EeXOkmmqdS9df2riFsESrA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1kvzfu3lmrv6et2mgm34np7s388ew2526p89f2v","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"+VsVodFvaWByO2m5oqTvKPazkH/+17AA+oGjNuT2SNA9MZ2oMDFttekSvHU3KK65rhwcMTDAgfvZuaRBR6CWPQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1qtr5uhenx3tzhllqaej32evd76t3rhzeh7ynml","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Sbebrocghu6V280nxmeTqacIsOMqRJxH+H8YYZcY/D86PP2F3nxh3pvolbZWN0qhjH2GhS3vMYy7pbX9zinVAg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1vt3d2qld503h9ma0a6mktylsajrefxqvynw3jg","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"/3PWFEqaHEt0PXMBm8DLeXF/uG4WNLfhE/u+shOXdsI5bjuZYayUOjVl0OIaTXCz2kjEQsgGsA9mjT2D80KNCA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vt3d2qld503h9ma0a6mktylsajrefxqvynw3jg","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","testgnoblem",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsxEr9rB1sL3CYhOo/u4X/rVkLlhmMvwdK3wfzBeJXq+"},"signature":"SN+RcOpBAmV6nFp8s4MZDOEa3PoNrCk/WyiVT9UxQdBEKgvQGEYA2ntr876VJxLQD848A07CbtI+WQhzZxEyvg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vt3d2qld503h9ma0a6mktylsajrefxqvynw3jg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["testgnoblem"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsxEr9rB1sL3CYhOo/u4X/rVkLlhmMvwdK3wfzBeJXq+"},"signature":"s1ar6v0qhQO0PPYPw2exWpGRbe58/3Q/ybbOF96fyr4UVLRf5MATWuD5GmEIvBUg95P0lbYuVf2EV+PYZFjJXQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12p5m8camffwl34djt9wdsls4gq3vextj2an6rz","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"3K45QAz4nGc5/bUIOVrZSXdLE41BCJUC8umAN2Ui8qtqFWJ0Ym+J5RBjJhkkzend+lqKbSfzREuF/u+InHag7w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12p5m8camffwl34djt9wdsls4gq3vextj2an6rz","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","gnobull",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiNCYyEvN1NhoZ2Gz5Xtax3/SAG6SqDQ7CO8rp4StAs3"},"signature":"FPEqzyfozxVMO12npfBn7XwdYXB9PeRkTLDzK3p/YPMI/rNtI66mgqOIdx+WMTa+oDmWqIdtOHuGyTTcx8Q5vQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12p5m8camffwl34djt9wdsls4gq3vextj2an6rz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["gnobull"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiNCYyEvN1NhoZ2Gz5Xtax3/SAG6SqDQ7CO8rp4StAs3"},"signature":"7CSLTpSkSbxGMUZJm0aii0fohQls6qoPTBzvJW8Je0F7ys74XZ4wFtGqIjVoTh6kvVRBBMEaXNqiHk3iu8puCw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g16k4sc4etvlfkfg9lz9m459hu4tddujy4ar9ljq","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"XcU2exY7+ewTbDFrNNTy3HQiosw9xpdjVQkVI84mIgdHR7xGF8wLoY7E4yFUUSMrG4U24XvNNvExby/d4nvpIw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1l6d04rwxzr5dmha7h44tmx4mdct5q8swj3eyr3","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Q9dm12l/kaEvKhMVIT63WdD2x1aptGDPIzq2Xki07EA6LH1qLId8WuSEVmp0S3ohFebBQnTvODosAONGw3NI9A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g10hsucta0rsvw8258ytnua9m5sv5uw0evm7fug7","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"D7Q/QKW0IoBIxZL40yfmaIcSUjSX2JzGpXy6V/t0Nx1BYfKlyL7k+PiujmsCwoPsCc8Mo56ja4O8JPCoL3dLFg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10hsucta0rsvw8258ytnua9m5sv5uw0evm7fug7","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","balabum",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5bxD+yqcjSQwQHBRL1Gwk9OMQxyp9HX8Nw1XFbBpiM5"},"signature":"nxo1rOkfWiNIMNSE1MvkaN/gzMGr6yV+KndnMfq/vmt3Saq27KuraeA0ah67RR75YR8IaIneSVjSSjaQGeF0ZQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10hsucta0rsvw8258ytnua9m5sv5uw0evm7fug7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["balabum"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5bxD+yqcjSQwQHBRL1Gwk9OMQxyp9HX8Nw1XFbBpiM5"},"signature":"bq4+uc8Y7X421BpngNMlibah5keixZqzR5akPLiJZcoFlXzDsvOlRmo/8eeLAIHV/tX9pQDTK7MZ6lFBkAwIiQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10hsucta0rsvw8258ytnua9m5sv5uw0evm7fug7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1293","1","1","g10hsucta0rsvw8258ytnua9m5sv5uw0evm7fug7"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5bxD+yqcjSQwQHBRL1Gwk9OMQxyp9HX8Nw1XFbBpiM5"},"signature":"+GsdB6kdtEzM4LkY5L+My1VgJsqgq281GKOirtakHSpTB59/kyX0Z8vak0a13cAs7Gbws+vQBOCCdS6lMdRMBg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g10z262mg69wa9x5dlv27rz8mqrdu2z03zs86r3a","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"4RIdRL9AMbrmgelvLGkUImSsSV3SfD/A6O7t4gucgccUgz1/W41kb46nlVzkZ9y5DJMHadFnYQnoXZCcmiSX0w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10z262mg69wa9x5dlv27rz8mqrdu2z03zs86r3a","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","balabum",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al8mz04siPoFRmDTZK/I4eVlU65aGQL2YLVGo6uAr9GT"},"signature":"bbM/w0mDDLEr9dBqphlUriNQPHMD7lfESJiAnqwpV1dd/yqmq/Gsdbuwqo5glOprsyPmpzcP6SntDipUj9Idwg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g10gemvkez2ep4gga2jycccmzpkn04lc7xp3luny","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"D9jc7hZfSimF48PhYW7MCIqqi2H0Xu1Kazhl0nbo0jUWHkUaoURNODGaqp8DGIOwaBvu8+NIAlvaYPagHWVNug=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10gemvkez2ep4gga2jycccmzpkn04lc7xp3luny","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","khovkl123",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7nHglzdWTYzzcqPC9Z6S2OWmjhfAb9RsOXrr7gOX5Ua"},"signature":"FLmcSv6nm4U1bshvSf9JEdoxC4UdYffG/ZkxFXhepSYxtUKMeYaXk3rzbMrsKGMtOJ94IIu4qY4jYzUF+On2uQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10gemvkez2ep4gga2jycccmzpkn04lc7xp3luny","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["khovkl123"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7nHglzdWTYzzcqPC9Z6S2OWmjhfAb9RsOXrr7gOX5Ua"},"signature":"GXxzKiA9FMKhbk2Z6mgvxlAnYdEhYMxEHHAqE+VHdNwg4JBv8BJ4KbaoTxpVgvsm+D3pVUIMQC5QEYdNp+fYhw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10gemvkez2ep4gga2jycccmzpkn04lc7xp3luny","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1294","khovkl123"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7nHglzdWTYzzcqPC9Z6S2OWmjhfAb9RsOXrr7gOX5Ua"},"signature":"EilUmXsccmugnoCKYgUcHHB4CCPJS52KL32qPhhR6+piYK3/Q+SY9go7N+UYM+btwtFlMuTxZfacp0YTm3wa4Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10gemvkez2ep4gga2jycccmzpkn04lc7xp3luny","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1294","1","1","g10gemvkez2ep4gga2jycccmzpkn04lc7xp3luny"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7nHglzdWTYzzcqPC9Z6S2OWmjhfAb9RsOXrr7gOX5Ua"},"signature":"tPED0xwnNhuPSq3w/UFWaZ/ZEjjCp0I2Qfe+6VRFxvpMggxKvYa/QFhMOT/hI9yZ60ydvCRAzrBKWnv4OxXChQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ma4pek5wkke947u2kqjh820rst2wsgp6hlrllw","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"MDdEy6TXIFtdY3P84WwYfDImatkJJD2jiQ/24IvqilkmfMCaLKJMcyPuBqykLfQjec7JoKG940+nRHZHbGV/iA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ma4pek5wkke947u2kqjh820rst2wsgp6hlrllw","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","balabum",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0et0gWxXa7uSi5PMpOWbR2xiPuyacZIifjfKUYD5Ux8"},"signature":"cZRX7ZUHwHkcT2anbA7l2M6jYNJC9kPMSGmesjnkX1Q2q4izr5AvughzuqBOumU3pk0fJf7FTeIFd/Srsf8G1g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1uykqz65rs6dx88geymta8au0p94hyvuzxmj26u","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"vj5/Kv2+I+HwBZxxRses3UXoCaPFq43xuqPl0ls8jUk+OqJPkAYjuEOhuU2lwSIcdcetbzIeIsji0jd/W7F3ig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uykqz65rs6dx88geymta8au0p94hyvuzxmj26u","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","xitex1234",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Am6F8LM/QjIMOxK2RFTWOtv6UL8D4z+tHwFAB3oYve7/"},"signature":"c+CFynpm4PZ9D1Vk7EN5K6GN8DoPTUdxkrmcyKrFPwg4eseqrNgeYtKNqPRoVqWMxpNRmeJFZ/N/l1dw9bhE3Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uykqz65rs6dx88geymta8au0p94hyvuzxmj26u","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["xitex1234"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Am6F8LM/QjIMOxK2RFTWOtv6UL8D4z+tHwFAB3oYve7/"},"signature":"C8ekXBczU9bvgWTnbknouY+zDchP78qHbPf4vvcYbaRNY4UZfSixYMJRlE8JXWqzFjTX9Dg3RnWDxNn2x4MMrw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uykqz65rs6dx88geymta8au0p94hyvuzxmj26u","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["0","xitex1234","./gno/examples/gno.land/r/demo/boards/README.md"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Am6F8LM/QjIMOxK2RFTWOtv6UL8D4z+tHwFAB3oYve7/"},"signature":"4uRWnoVmKW1yG+UcYHRf9eTGoQQR4m/pB+BQ/giIXepYW19ZYr8yLsuRUgu95AFHVThkO5tQ7cpnIGEspE4rgg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uykqz65rs6dx88geymta8au0p94hyvuzxmj26u","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["0","1","1","g1uykqz65rs6dx88geymta8au0p94hyvuzxmj26u"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Am6F8LM/QjIMOxK2RFTWOtv6UL8D4z+tHwFAB3oYve7/"},"signature":"E1KrzQFiuBWUPmg4Eg/Hgrp9ILkrc7hPti4I9ZzKOJAjNoW/hnwIq57M17CZX3FsKHrm8kuDfaf+LnSxfHiq9g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g185qhe42nfgxzww8aa6ec4jp9e60r75k8q5503x","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"C1qmGLZsIB0e79uIp1sbqCocE2WNmYczo/CNdYzM/9NNmDVm4lDtsJSIsu7teLu1TPNItpGAh7iP3fjohlPGhw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g185qhe42nfgxzww8aa6ec4jp9e60r75k8q5503x","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","deohieuclgi",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuZH9MpLj1zjL0XSRBBTyjej/W6zQOP7Uww0z6+ECZQE"},"signature":"sZKE0jnXSgPq/B/xLmHPN7Z122n1vOa4hACs8yfDNTktx5qU7+zKUcYLSuknOtDo14LN1caHSVabq5NErWtqjw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1l3t037ste025etff2pt4y2k09jcejfxvwelrjr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"xd0fiAJxAQ9tYyqgxtsDmRfZgrAEwyJ8N3KMFdgefchrUIDoIAJUoKauk0bp1tve2Qb7N4ZbJKx6mFGByghCAQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g19y58rk5aknnm73u7dsjtk0crq9hqdx5340da59","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"PHPlC+VMvl5CDBbRM9pGZPQLH/L51jniDjteG1eIPwUNRBIcqa3HiWxESjBJ6twL6tI+zOw/hMk1XfaTu1MthQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19y58rk5aknnm73u7dsjtk0crq9hqdx5340da59","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","deohieuclgi",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqosY0+Raia3ZHn5Ec/TXbaDU7Hyc3PCXgjOpeuNtNwA"},"signature":"6TXidQeXiR1IGfTmaz71YuzJZlfUQ4lAVreFv9qa3QwUpWQ77wXzn8rlhSt7BCX4TVdE3ufZHbaYT7/qPgU64w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19y58rk5aknnm73u7dsjtk0crq9hqdx5340da59","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["deohieuclgi"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqosY0+Raia3ZHn5Ec/TXbaDU7Hyc3PCXgjOpeuNtNwA"},"signature":"74sDCTbmo/ec9rHq6VJUu+GtkFbFhTAW/cpokQfHXgUpihNffzenmnVneqflgQB8UgII3EEVNiJtoe4Jlfr1gg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19y58rk5aknnm73u7dsjtk0crq9hqdx5340da59","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1295","deohieuclgi","./gno/examples/gno.land/r/demo/boards/README.md"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqosY0+Raia3ZHn5Ec/TXbaDU7Hyc3PCXgjOpeuNtNwA"},"signature":"3k+5b+AyERyKxXhg8VsJKhwlogC6sWm85tS/vSnHlEwrDYtO3/IEWq2H0eeK7Iy1aFSQwBrhjUjDSLd1LoQ4NQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19y58rk5aknnm73u7dsjtk0crq9hqdx5340da59","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1295","1","1","g19y58rk5aknnm73u7dsjtk0crq9hqdx5340da59"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqosY0+Raia3ZHn5Ec/TXbaDU7Hyc3PCXgjOpeuNtNwA"},"signature":"n1WvcXEQ3iYgaF3aWwdJEUvrz4XPigpDK5F7gDixPzkt1qnrO5BJkqJaYW5IpShvWTFX7MYMRNEfe2pn9y6aAg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1035p5f6ez87kg9fupnmehm7xyldy9wrgpr2zj2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"dLFU5VzpBQ0kPEwA7FS1XzlO3cbjfyowSTGK9d0L/mI7q0q77nmfajKBGhTh6tssiGGIJFOUYzrvrHM4Nm5RFA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1035p5f6ez87kg9fupnmehm7xyldy9wrgpr2zj2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","finalversion",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7UCycmot9jeImSycO/Qv1D1MHXeUtjy9D2oMw3/ZbyA"},"signature":"QIHlzCGabPLXchUQc/5vEND2wUAQPU2McA2EuPej6P0PeSYT95tKWgE41BE/21BBv/9qu2EMn4xbqqWw+o5Pzw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1035p5f6ez87kg9fupnmehm7xyldy9wrgpr2zj2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["finalversion"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7UCycmot9jeImSycO/Qv1D1MHXeUtjy9D2oMw3/ZbyA"},"signature":"Qz+Td2tSxHgTm60la+s9iNxLcjl/ZJhegUXZuH5kCKxP3Y8ImP8jGaryTwsHIaCfK1M9TW71x/bX9XdJckYhYg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1035p5f6ez87kg9fupnmehm7xyldy9wrgpr2zj2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1296","finalversion","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7UCycmot9jeImSycO/Qv1D1MHXeUtjy9D2oMw3/ZbyA"},"signature":"YV+zjSIuqb37MpABnJbP96IKZK7iWojtvz/I6Z2GMcUKXzBPqsC2pvEQfie64sbq7MsMFNI1HdV42/KxMp08eA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1035p5f6ez87kg9fupnmehm7xyldy9wrgpr2zj2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1296","1","1","g1035p5f6ez87kg9fupnmehm7xyldy9wrgpr2zj2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7UCycmot9jeImSycO/Qv1D1MHXeUtjy9D2oMw3/ZbyA"},"signature":"lzniJHbwqKibn2p6x5Cnq5GdiwcsHINYBb7/Vg+uXBE1wM/iuF0DSWnMv92AWa/twbullcfRId/nXBiThcTkuA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1qmaexkys30au8necca30d92u2yxslcc7m04v6q","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"3chOXMneIgKOCeNHOIksdm9DSp6PdQzY01cHgYLn5UNkFI38NL0SwXGERDhsi9LAv/XXWwu8MDkDPlvUTe3Xcw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qmaexkys30au8necca30d92u2yxslcc7m04v6q","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","tunnel30au8nec",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A58qtS1rIAOzKjOhPt0MxcmesrDol+XhUYx1ozVaTn4Q"},"signature":"JdbUGj1fDC32vChXunQ8vrjPmVTVWu2oGmaK3xQgGVgx7zCUdfY+EwiscL0QiEYO2x1g+9Er1A7R2APwHj4DVg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qmaexkys30au8necca30d92u2yxslcc7m04v6q","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["tunnel30au8nec"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A58qtS1rIAOzKjOhPt0MxcmesrDol+XhUYx1ozVaTn4Q"},"signature":"0FESufopt58Zoo8mwpceDLdoxq15syWsB5gbgdbZro5QBFU+b13W/CXzoNQRwTBM1ZWdhlq2TptNf5EiW9qXFw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qmaexkys30au8necca30d92u2yxslcc7m04v6q","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1297","tunnel30au8nec","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A58qtS1rIAOzKjOhPt0MxcmesrDol+XhUYx1ozVaTn4Q"},"signature":"+cMec9+7MDlkreuJbcwV5Bt1w3Hgw0PgScPdkb1435wSeK+KTWgsOKrfjYZcNsAi1e5hobWYpeBBsV2+nQjwmg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qmaexkys30au8necca30d92u2yxslcc7m04v6q","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1297","1","1","g1qmaexkys30au8necca30d92u2yxslcc7m04v6q"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A58qtS1rIAOzKjOhPt0MxcmesrDol+XhUYx1ozVaTn4Q"},"signature":"Jy66XVdTgIO1QZoVu1AhPknIpcQEdg46HMRwet6roQxBOU1plbN912aDx8+pwjjS15HVBLirX62O+i4ZsV3yXQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g185gek0kv7t3ejtq4twzmd0tlwcva8z8vew2wlx","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Of7SKPl4kOtvKmpr9BTsXY528TCj0pldpeb7VoYezKkQEB4NYhV3zxBkMlXH7KiMPuq3q1y/+c9x+MhVcSJdRg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g185gek0kv7t3ejtq4twzmd0tlwcva8z8vew2wlx","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","lawntq4twzmd",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4lBI7a9lEwctULoISOUBKSROulzg+3gOqgvMlxL+8u+"},"signature":"OuEWrU5YPgdtkU/3XN1s4ViDibi3oyS1oOprhuvns9xnCigo9bbixFVlyTPcZXeotnw0SFFx2pIKxl+FfQt3Jw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g185gek0kv7t3ejtq4twzmd0tlwcva8z8vew2wlx","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["lawntq4twzmd"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4lBI7a9lEwctULoISOUBKSROulzg+3gOqgvMlxL+8u+"},"signature":"7EFZ3WGsvEBLLwMfZrZumwAMwRmT4ZVRWWVSZZKrmTppyxTbQ1sgqdkQLDH4M1B8dJIPsEIGoIzdFeIVY6iHvw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g185gek0kv7t3ejtq4twzmd0tlwcva8z8vew2wlx","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1298","lawntq4twzmd","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4lBI7a9lEwctULoISOUBKSROulzg+3gOqgvMlxL+8u+"},"signature":"nf3b7mozHfhzlB/YWD842u1ExBFvrFj7hGuQTKW0gscCr0jpDsI2L186Eb42/tunaVElL418rolC1NzTx47/1w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g185gek0kv7t3ejtq4twzmd0tlwcva8z8vew2wlx","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1298","1","1","g185gek0kv7t3ejtq4twzmd0tlwcva8z8vew2wlx"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4lBI7a9lEwctULoISOUBKSROulzg+3gOqgvMlxL+8u+"},"signature":"FelcHe3f3pI5tiu4BCaDvgcfz7tx4vl5vo67xARFFX9N0Ggp0MWFV0QvKWrxQ7tOlnlHLbrWn4iV6MY86sSamQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1x2zj6yqff8ssrqgajtlg2crg886w26jdqstska","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"yNqwP9SHfAasnyccphcDj5Xp0ERMEuOhhPAGhnVPQgUoXMTzDNubq1i2LN+J28ZNATQJfhkIJAgykk59rYK6MQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2zj6yqff8ssrqgajtlg2crg886w26jdqstska","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","siblingqgajtlg2",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3Gdl+r5C0QzIMfl7AgC70yPC3Waetbx6W8A/pqXOp6O"},"signature":"2r+Qc3YA+NC4ypLEwad47ZeCRkf3QwmuwihE1zlrN7pBLWRU3Y25X3i35SzAWYlYA8aHWrTDWZhTjNsIYXII2A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2zj6yqff8ssrqgajtlg2crg886w26jdqstska","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["siblingqgajtlg2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3Gdl+r5C0QzIMfl7AgC70yPC3Waetbx6W8A/pqXOp6O"},"signature":"Utjn2uqm4h5pezAWIbrKTgmfQNIwBRIo1upqZbIEehI+Swpgh/Ui/ZgE4jJuyP+B0Pzd8Iy/oT+AZfOsYoRF7A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2zj6yqff8ssrqgajtlg2crg886w26jdqstska","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1299","siblingqgajtlg2","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3Gdl+r5C0QzIMfl7AgC70yPC3Waetbx6W8A/pqXOp6O"},"signature":"MVI+1DdU2Y9rqjSoidjJav2uo8j2tEqh0b8H07uv2EQbOvHPTignwihht6NRGzlUIeeEfbxQPptjwmRwwf+56w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2zj6yqff8ssrqgajtlg2crg886w26jdqstska","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1299","1","1","g1x2zj6yqff8ssrqgajtlg2crg886w26jdqstska"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3Gdl+r5C0QzIMfl7AgC70yPC3Waetbx6W8A/pqXOp6O"},"signature":"HKiNXOxFyA+SGFs6HBgIExwCVx1ZQPzD7a6hoTSTSJIPTFdxLMzzYsvadPNB9P4IstTo5ziyrMheTMypsJj3qg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1g4jdp0s0uf8h9guxm4j9n3n8pl8gcefsk0lyyx","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"2dPmoNNC5ptqIVcWssObrNT7DBDZyvriqnkHPi/DwntyhxOS/FSQEmK3glkqZHlo0h72qapiYJoZhKrB3zvLcQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g4jdp0s0uf8h9guxm4j9n3n8pl8gcefsk0lyyx","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","dishguxm4j9n",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Av4Qq+WnA6SpfiLRMzahcyKVeVKKubhH4+8SaCVrnV89"},"signature":"WALosurp3yTuMii7dxppjXS8koOoPrKrTZ0eKYnjIbUXoRsmjUScjqYCBXSJmaa4SvvGD90cDlIrX7oO9OAq1Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g4jdp0s0uf8h9guxm4j9n3n8pl8gcefsk0lyyx","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["dishguxm4j9n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Av4Qq+WnA6SpfiLRMzahcyKVeVKKubhH4+8SaCVrnV89"},"signature":"1mCl2TXmCnrwrtrUId/ODVwgWtEyn8B0JoPDcCPyr1AWuRSwKeEliuJc1iQx6etC3JECHbAG2M6N4uRZ2/LuTg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g4jdp0s0uf8h9guxm4j9n3n8pl8gcefsk0lyyx","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1300","dishguxm4j9n","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Av4Qq+WnA6SpfiLRMzahcyKVeVKKubhH4+8SaCVrnV89"},"signature":"T0CVjWXX11Ef65Q2mkhNEKAI8AV4iG7XEXR+dcAMW9UGUgs0/lOMvhI5Ex5WxlqDUGuPlmsrcm5x3O5s7RiJ4A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g4jdp0s0uf8h9guxm4j9n3n8pl8gcefsk0lyyx","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1300","1","1","g1g4jdp0s0uf8h9guxm4j9n3n8pl8gcefsk0lyyx"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Av4Qq+WnA6SpfiLRMzahcyKVeVKKubhH4+8SaCVrnV89"},"signature":"+fZsDwU9W+0p1PEJAvsfFpQgeOA9j6ZFEiL4YMDk9W1mxzUaojCkhdAB8yVxlDwwbTlsIzWuPj+nBjA2dYiplg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12mpkd6qrgrlfm04l7zvd655e5gy5zg52j9xwth","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"fJWbYR7kHXbC0uFvLDnPR7YR0UICaWK982Mtxcb0otEvuTK/AXEM7L7GF2UKQw0i/mItR5d8jUzbVlPFphvL8w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12mpkd6qrgrlfm04l7zvd655e5gy5zg52j9xwth","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","goat04l7zvd6",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/v3vpCEisVzm2eR/I2qSrlmekGKVQZTCfaPXhizIAf5"},"signature":"hbyDSevXDIbn/fYjk7P395PezhrdCsxKIDJD3Ee57bwuSSGB+1oyFsEL9VO2ONoqzZr33HCfcy42hpretMougQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12mpkd6qrgrlfm04l7zvd655e5gy5zg52j9xwth","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["goat04l7zvd6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/v3vpCEisVzm2eR/I2qSrlmekGKVQZTCfaPXhizIAf5"},"signature":"tTCUGpsIXvRozqK13VRidK2TPKFStlH/XTL+NA5zpLdtvAIBILe3MgI0cI9ckQ/ktUZKnhWe9knfXjNyI3iGtA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12mpkd6qrgrlfm04l7zvd655e5gy5zg52j9xwth","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1301","goat04l7zvd6","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/v3vpCEisVzm2eR/I2qSrlmekGKVQZTCfaPXhizIAf5"},"signature":"dX5ltBekpjIt73dpaRUIgTOjtsGoJqr1zpIU+TYeVr84qe+Rv9xLy3Dh/0QpXIBYvMv+3XvVsXSvAZqJceWmwA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12mpkd6qrgrlfm04l7zvd655e5gy5zg52j9xwth","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1301","1","1","g12mpkd6qrgrlfm04l7zvd655e5gy5zg52j9xwth"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/v3vpCEisVzm2eR/I2qSrlmekGKVQZTCfaPXhizIAf5"},"signature":"LJ/zhIrdHfgltTjnhtIUH5sHiQtpDV0v19A9JywUPZclmgxkdZGuszPgWqfXofAFlftigW7xLY2N7zJZ+ly9sA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1jh29rlwdzf3t3zqvrfl9jnct5s42ts46s5plsr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"oNxobhukhRfgGAkAGJHuSwvJ1yo0ySxkdJ/x2sMWLhJs+CI3476gJiX6DDSLNrtVeluVVRcBFr2XWzkoX3fKEQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jh29rlwdzf3t3zqvrfl9jnct5s42ts46s5plsr","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","stairszqvrfl9j",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqdSXEOEZ9y7uEC2oDtpbKhE59Sl7CdF+xFxhANxwkrK"},"signature":"yPp88EJHpUrtBzhljKMqn9w6+lbdUHETYSveOVTacI8S+WyEQHfAxhx2bJYXQPZUR4PZIdvXbNyT4DZC5U0vaQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jh29rlwdzf3t3zqvrfl9jnct5s42ts46s5plsr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["stairszqvrfl9j"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqdSXEOEZ9y7uEC2oDtpbKhE59Sl7CdF+xFxhANxwkrK"},"signature":"NvERcc5lOglgyR74D6HnEkKfZPHwwOkQji0LCwTM1oEHHY/TLQI8MFGry/4cFDhAlh/J8MBYdtwqrtapHTi0TA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jh29rlwdzf3t3zqvrfl9jnct5s42ts46s5plsr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1302","stairszqvrfl9j","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqdSXEOEZ9y7uEC2oDtpbKhE59Sl7CdF+xFxhANxwkrK"},"signature":"Q3CBCt9BA+0/05Gq1oPL44DGj9x8fQLbOsMS/IlF5vtcDKVRbNNWsINRzgU8+gxy7qeKFfFRUfnUgKa/VSZkQQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jh29rlwdzf3t3zqvrfl9jnct5s42ts46s5plsr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1302","1","1","g1jh29rlwdzf3t3zqvrfl9jnct5s42ts46s5plsr"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqdSXEOEZ9y7uEC2oDtpbKhE59Sl7CdF+xFxhANxwkrK"},"signature":"yRhSQpoIsxPUsHAVL/ub13H/Oksh+FT6iVWZu3RKg0F1PYNUbthB/FuSCsRumuTsBcqM5+4/I1O0E+r2xTuOVA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1fvmdxasvds8demk8njk2epduze550rys2cv054","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"VgsWBEyghuhlTDO6bZE1SJbGLIG/XYtnKjM05sPaWMtB7y+XwDwdGsNdOTwkPzyR2YZ0WPri+lfxo7khu61omg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fvmdxasvds8demk8njk2epduze550rys2cv054","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","shiftmk8njk2e",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuCYcFeG2Y85MBByUQMmvJ/1xWcenSyaZSz1dCN4TAXJ"},"signature":"iIxORh0dTy6DvOXZDOghAUwGqmBRyeLqVTs0lfEc8XRhLHpnWLzNkwig4keKe0huaZIomTUVPqHnRFfx5lLs2g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fvmdxasvds8demk8njk2epduze550rys2cv054","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["shiftmk8njk2e"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuCYcFeG2Y85MBByUQMmvJ/1xWcenSyaZSz1dCN4TAXJ"},"signature":"dwAQZvjp7Rwsm51rOg7MKboD+gQ7F1qgbZI2dcHne7cQUy97LswjiZLOZ1tVtiCLG/CV9lZirH95FDz8zfahUw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fvmdxasvds8demk8njk2epduze550rys2cv054","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1303","shiftmk8njk2e","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuCYcFeG2Y85MBByUQMmvJ/1xWcenSyaZSz1dCN4TAXJ"},"signature":"FbcuTwGpGPl9pbKSUyo1kt+f8qyw+AS073JzqsbC49txbmsEk7BPpbzMSn+BH21DVFdMe3NqP59gmaCCn4RmZg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fvmdxasvds8demk8njk2epduze550rys2cv054","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1303","1","1","g1fvmdxasvds8demk8njk2epduze550rys2cv054"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuCYcFeG2Y85MBByUQMmvJ/1xWcenSyaZSz1dCN4TAXJ"},"signature":"Ic7ZjebaBoVDZ/9e2QkGf37tXiDi6jpOwCY2GlGcav0Eejo598h4R+GihigOw5QGLrpnWmCdW3FR0NW2cXOL4A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g15mxnsrd72mxpemqm5w3jusv635vdq6swu5856f","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"NNVA+EFdbLMllbQnVfv3J+fNtOWIys9oXXH+BQvGtGcFp4h/tWcfYuptKdUJze9pmvVEqmaUU0rSwMtdaeC5gA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15mxnsrd72mxpemqm5w3jusv635vdq6swu5856f","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","creditmqm5w3ju",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A67zSXnvvuF4UGGv/PZ3r1G6llnxk7VPtlEBjovGkr5d"},"signature":"/2LY88tR5564Dh2HvN1rV6SjYxU/PARXXpM45XtHuKcrihRwmFYf7c4KMKmo0dD9Br3AeYqhBDpRpjmRTd3pQw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15mxnsrd72mxpemqm5w3jusv635vdq6swu5856f","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["creditmqm5w3ju"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A67zSXnvvuF4UGGv/PZ3r1G6llnxk7VPtlEBjovGkr5d"},"signature":"6fBxG6/FQA1AsakeM0TvaK8QuOZTFRm3Ch9e+3Pjuc9gVMPV3OUhFAjvku7/GsvdRbH2Og94UjuUoh4Mg2ca/g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15mxnsrd72mxpemqm5w3jusv635vdq6swu5856f","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1304","creditmqm5w3ju","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A67zSXnvvuF4UGGv/PZ3r1G6llnxk7VPtlEBjovGkr5d"},"signature":"/Ann+03OJ68c6OZVUe7WGB8di78gefuL17y6aOThMAFwCA0TuEg33n10Da7TJL6G/Jr0+hFLImbNNpPJFUagTA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15mxnsrd72mxpemqm5w3jusv635vdq6swu5856f","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1304","1","1","g15mxnsrd72mxpemqm5w3jusv635vdq6swu5856f"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A67zSXnvvuF4UGGv/PZ3r1G6llnxk7VPtlEBjovGkr5d"},"signature":"lFSzd/VOrUNZHeyFU9u1w8/+N+QvyMH0yB5YewryGCU9ovj2SoY7/9y+GuT7ruW23uuiSHESjgRnOE+cQpRLdg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1rudcffnkhahkf5wdujg5sm827sfs3h7jut25ap","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"QfxbaMViNsjM7WdFaRMiyO2cUlWsU4Jj/aAxavy2Bd0900AOEQ15aMjBaEMBIwK46UmaAPGyxWxBn2V0hqFFfA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rudcffnkhahkf5wdujg5sm827sfs3h7jut25ap","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","leopard5wdujg5s",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArIQSWzHTstJ+xKYhK6umXnxINM3XKOj5rsUOqHv+W/T"},"signature":"DMbZ400eh14klhZqJ7ytA6AT83q0Hud7wdioi1GecZY0XFZENaHg4uFHgU6YycFhARPqnrXS6I1lQKfK8DDs+g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rudcffnkhahkf5wdujg5sm827sfs3h7jut25ap","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["leopard5wdujg5s"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArIQSWzHTstJ+xKYhK6umXnxINM3XKOj5rsUOqHv+W/T"},"signature":"GpG2GurpnG9wivQzM7UZFlvf3bE385zfGmPndcreGmJSNQt/fvSD+2t0I7IsNPm8lLxBkx3qs1V0rgC1Z19OvA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rudcffnkhahkf5wdujg5sm827sfs3h7jut25ap","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1305","leopard5wdujg5s","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArIQSWzHTstJ+xKYhK6umXnxINM3XKOj5rsUOqHv+W/T"},"signature":"wLnWgp1gT1XrNvILvb3SsB22oQCyuhYPjWk+JPNCZlIE4RhgZPe7RTepG0isCRusmqekr+hcFX42cf6rM0gtUQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rudcffnkhahkf5wdujg5sm827sfs3h7jut25ap","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1305","1","1","g1rudcffnkhahkf5wdujg5sm827sfs3h7jut25ap"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArIQSWzHTstJ+xKYhK6umXnxINM3XKOj5rsUOqHv+W/T"},"signature":"wZ3oueSKk+8Q4zGQgXIaQK2HHwelSCpDYiLGHIavuF8pe5tj+bwW3tk1QpX4DzxcWL35HNc3rUACef9h1mifgQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1r0ad96at3u0gq3kew827sxja3xar5gcykh5vm2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"dRSk/YYjUwexaiaVGeCTW9LJm9wrc0EaEaJ51s+ncSdmpNTd08/tScJ3lCjh3cqDXgvUl0m5eZZbejm+mw1H6A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1r0ad96at3u0gq3kew827sxja3xar5gcykh5vm2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","practice3kew827s",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ai27TIFrgQ6VRoOtsO0HG+rfsJWx+FgSh6x57v/1N/+0"},"signature":"+Q16x4H7wxEO2GFICzatyz/2XA+MG89tYB85zjTdiN9ArCnrASnMOaEqjzj06CZyTXMZShvqjPQNPhWllRfXSg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1r0ad96at3u0gq3kew827sxja3xar5gcykh5vm2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["practice3kew827s"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ai27TIFrgQ6VRoOtsO0HG+rfsJWx+FgSh6x57v/1N/+0"},"signature":"uNk1KlpCP6JyB9z9vK3F6P1u1AetXObUPJaJtQCoa01tDypDSCfeSNpffYwE9nv3z9VVoTXx10cytkK8GpTX/Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1r0ad96at3u0gq3kew827sxja3xar5gcykh5vm2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1306","practice3kew827s","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ai27TIFrgQ6VRoOtsO0HG+rfsJWx+FgSh6x57v/1N/+0"},"signature":"QHeHv5CmQyDC7owTixbzyQAKLQ5TqG7HEZaUoTmPdpIbiyrFMIErGsEIfsi77cq+7FwWtkUcHQem3iE34JTWfA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1r0ad96at3u0gq3kew827sxja3xar5gcykh5vm2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1306","1","1","g1r0ad96at3u0gq3kew827sxja3xar5gcykh5vm2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ai27TIFrgQ6VRoOtsO0HG+rfsJWx+FgSh6x57v/1N/+0"},"signature":"15QdAOJVH82Dqo4X6P1DsP7WOFzQ1NADMOpC6Ar4xwY7V0dGT0xGVgKibM5GPRV2mndPmPjasXAdB6yHSafSkw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1y6yjrvhj2p3ql6e4mdaqutptmnc93wn2c0lr4z","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"V5Ao75br6w1o3dabzgB80lfWI9s9CyI8f7qT4vafDpBCCSCyVcoxRzgeqlB4q89qaLEt1gTu7rTfRzEvEEotTg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1y6yjrvhj2p3ql6e4mdaqutptmnc93wn2c0lr4z","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","sun6e4mdaqu",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkulOrv0XqeoI1kcMYfT9OI9jVTcqzvd8unYUme1wOaJ"},"signature":"UESIDi6qIZkCKIiwMMacpzc8wVPQKFKOWy/w0KlvcYZkaD2Fhjbn9usv44HcIGnYMhQUznbqUBT2hs8BH/JwwQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1y6yjrvhj2p3ql6e4mdaqutptmnc93wn2c0lr4z","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["sun6e4mdaqu"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkulOrv0XqeoI1kcMYfT9OI9jVTcqzvd8unYUme1wOaJ"},"signature":"WUgnyexKWAPOuEoSxu3452RZwwhTEp9uqOp362bKjZJsD1Z8II8YRunC7jkQ5H3xs6+l+2Xblp+maJzRT+gnfg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1y6yjrvhj2p3ql6e4mdaqutptmnc93wn2c0lr4z","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1307","sun6e4mdaqu","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkulOrv0XqeoI1kcMYfT9OI9jVTcqzvd8unYUme1wOaJ"},"signature":"+Sj7y7HP1+0Iv3UvKeOtp5Pgz0+h/317CrzhTsV+M69yZL1dzmYGkh4zEY+3XSWXFHD9imUNQ2BKLh2wyU6xMg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1y6yjrvhj2p3ql6e4mdaqutptmnc93wn2c0lr4z","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1307","1","1","g1y6yjrvhj2p3ql6e4mdaqutptmnc93wn2c0lr4z"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkulOrv0XqeoI1kcMYfT9OI9jVTcqzvd8unYUme1wOaJ"},"signature":"UzesT2IgJcb8M5A/t/M26oMIcB4uo2az+bM47yXdXu0l8TeIHufRb90KrqTOQ7zE7/Upm3vG4O0qJdpcFtxygQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g153h07rpqhh0ypa642yrx5uhap83fsp3ktsewck","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"j+kDqmDY1PtCur+30BsLaDeQa2MdrXBaNuCpRQ6gQ08g9Go6KYDUj+ow3e05Ms+3gIT5ZpPu3QzsKv8T55wNMg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g153h07rpqhh0ypa642yrx5uhap83fsp3ktsewck","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","prospera642yrx5",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5PemTSoGI60fbA052tTX/KKbOwKlDrQhpEnHzA6wbIW"},"signature":"cJCQN9PnVnOJs3jLzeasmjXZKv4o+vtNhh++foz3igEz4pObYhBID11dohNIfjTVnZWkTlwKpSlOexlymHuohg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g153h07rpqhh0ypa642yrx5uhap83fsp3ktsewck","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["prospera642yrx5"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5PemTSoGI60fbA052tTX/KKbOwKlDrQhpEnHzA6wbIW"},"signature":"ZHeDeSFipBRrXGUvU5Hx7BesmT1C4Xr1m/uwLPvoUHQ5lEVO2GuvVIvrKy4o12kuQJjY+KPQKVZ5tOmgexC6+w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g153h07rpqhh0ypa642yrx5uhap83fsp3ktsewck","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1308","prospera642yrx5","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5PemTSoGI60fbA052tTX/KKbOwKlDrQhpEnHzA6wbIW"},"signature":"SdXgnxadGHvvJS2rkCcWoiHIRQE9Xa9cX2W7t9cBiVFhyUz2qno8IAzhNpEhYHM4AbwP6cfjW7p2wkHHHsuxow=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g153h07rpqhh0ypa642yrx5uhap83fsp3ktsewck","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1308","1","1","g153h07rpqhh0ypa642yrx5uhap83fsp3ktsewck"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5PemTSoGI60fbA052tTX/KKbOwKlDrQhpEnHzA6wbIW"},"signature":"vXqbP8DNYxUP4kl7n5Bpmr+9GKjDGowz58tWe+K/mRwxn72i6od383bILWBfSbySQnECcQ+wA8kJMt9wfJf3ow=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g156h9preh33zfec67pvqpu4egetcrrrd9wc253y","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"1mqICmzsEvnnfj3N6ZCZnz/fx9wnpoCarVSoxAek+V1i59iyrIisqQqPakccVZ0YtGqWpBPvrMQ0PFQq8xyFsw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g156h9preh33zfec67pvqpu4egetcrrrd9wc253y","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","otherc67pvqpu",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1/xG8C+hVsVW4bBSDbTTRZk7TDT4X6IhWXQS2rXviGA"},"signature":"774yv24cr/O3YyqZBjAyD4i1f6FDShoQ3ygSdmRDDyB6EP7kSA8MuF2yALbmmzCi1pkCSDLPVjVzdNyYBJylOg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g156h9preh33zfec67pvqpu4egetcrrrd9wc253y","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["otherc67pvqpu"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1/xG8C+hVsVW4bBSDbTTRZk7TDT4X6IhWXQS2rXviGA"},"signature":"EM1HnbjfBWLP28bWclFWJ7GBt5Nt0PUz/ji+O59ap7M1SVVI5B1KC+89Je0IG3p946EkdKv0qQdiSR2xfVMqTg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g156h9preh33zfec67pvqpu4egetcrrrd9wc253y","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1309","otherc67pvqpu","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1/xG8C+hVsVW4bBSDbTTRZk7TDT4X6IhWXQS2rXviGA"},"signature":"51nNdRIvSKupMkokvOj0UcklonDpc6ZRjUaoCe19v7UXDX3m9FD7P67+TulUpzDawK5QyJV7Gwu4jxNl7y5ClA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g156h9preh33zfec67pvqpu4egetcrrrd9wc253y","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1309","1","1","g156h9preh33zfec67pvqpu4egetcrrrd9wc253y"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1/xG8C+hVsVW4bBSDbTTRZk7TDT4X6IhWXQS2rXviGA"},"signature":"4FMrC6qb/V+sxODetCrCOei+8W/eU5/PSk7iYb1MtZwUgzepIJxst6EqQileQEqweyUpM2UXpWvwqgfCxBgq1g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1s8ejppmfljttlwvdstydwna2h2qtzv897wv86x","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"2qhZDblsFQ1NB5tVf3tO6ZigkxVqI97m/wTzfFO6ugVa2DM92CqERnZJJm3iLW4/5nFXItecNm72stv44WVkCA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s8ejppmfljttlwvdstydwna2h2qtzv897wv86x","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","glarewvdstydw",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiDrzRCKUkGc8kLuKkEye0Qx8IwD2J5MGgXdjZaw/To6"},"signature":"fxZX7oPEqgQR9TBcjvgupNvJB7rvp+HKmayowLBDJDZOqxOmYCTn9pbdb1WH5oQ/dCwYKaIG7xAAaKOcA2xWOw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s8ejppmfljttlwvdstydwna2h2qtzv897wv86x","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["glarewvdstydw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiDrzRCKUkGc8kLuKkEye0Qx8IwD2J5MGgXdjZaw/To6"},"signature":"D3DoO1J9g9wDX29oDVy45qNfIICxSMPpK8q/1Km1AC9U4QXvmBBl/XwLg/sP89gyxx2bN9fDzMIcxM093SZrZQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s8ejppmfljttlwvdstydwna2h2qtzv897wv86x","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1310","glarewvdstydw","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiDrzRCKUkGc8kLuKkEye0Qx8IwD2J5MGgXdjZaw/To6"},"signature":"NFWBsj4ZVO5HnKCqB+CuFH3OLFnxVzjIR1eMQcSgOcVUp5vlUnSi+lPhmuX85MUE9a0dJWTjn4KULXZQtoF4zg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s8ejppmfljttlwvdstydwna2h2qtzv897wv86x","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1310","1","1","g1s8ejppmfljttlwvdstydwna2h2qtzv897wv86x"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiDrzRCKUkGc8kLuKkEye0Qx8IwD2J5MGgXdjZaw/To6"},"signature":"krtGrQsjL32xSoAKwTx52MJs0qGjF3L8DCoz7D9a/SYhpWd/Oq7Kfbnef1qHyZupmn3qb6FaePpYeWy3WxPegw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1nc554yq34mclr8map7pyf55ahjlqffagwrdmha","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"WwjDyzhnysnGgAv1aiFPFAQ9C98mKYLvoC9zQmGJj6goX87iT2y5n4GkTqG5FNLA9YmOjdpzQFUJdLckBiuhIQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nc554yq34mclr8map7pyf55ahjlqffagwrdmha","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","drama8map7pyf",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+VUUfl5rkOhcWKJIHK2JiHTxuKNzxf0GWHxkgFfnoG5"},"signature":"Sms1sAXiY0AvRcV3Y0rY3bwXgxL/YC5Am7OnfRmxKrwC0PI28u19J+Cb4xYHy/oSOXI45/mhY0BCyrJZovbfag=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nc554yq34mclr8map7pyf55ahjlqffagwrdmha","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["drama8map7pyf"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+VUUfl5rkOhcWKJIHK2JiHTxuKNzxf0GWHxkgFfnoG5"},"signature":"4rMAObTKxzW9zoIdkqhQ2KpyF7u6UT88G1g+5/5yHqo8nbwbbO+s6ysSTKhI2FAHTros4sqnk7O1wQc2dMgL6Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nc554yq34mclr8map7pyf55ahjlqffagwrdmha","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1311","drama8map7pyf","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+VUUfl5rkOhcWKJIHK2JiHTxuKNzxf0GWHxkgFfnoG5"},"signature":"Oz+WhMhziE1lKJKEQGpz3WxLOGwvIEUVKFPMQjExf80plcEXf6AW7Fu9WTdopfL+cWD9MYh5Frqcv6tpUVV7Ag=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nc554yq34mclr8map7pyf55ahjlqffagwrdmha","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1311","1","1","g1nc554yq34mclr8map7pyf55ahjlqffagwrdmha"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+VUUfl5rkOhcWKJIHK2JiHTxuKNzxf0GWHxkgFfnoG5"},"signature":"vA+8puSHzoKjwzLXM1b9OvaDF71tHsKHFZia6Xfsm5hN0A7f0OUCpquKF/3PI4C6prppzOsUKz8y8J7v1RWTPg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g15v90amd7sdnm65ds8x5tvtk45nt52y82qq6vgr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"POyOyg3DlIhaKuQJ0zVPHY3/FOLo0b6nWE7jPRVSXrAR8NDkWs7V4Z43oi764EMgKexWh0zsV4LMsZ2OaxtQ2A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15v90amd7sdnm65ds8x5tvtk45nt52y82qq6vgr","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","popular5ds8x5tv",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhtLKakkQU4eA5pssNwYtV04yZ9VAUvWSEKf5m8RQAld"},"signature":"CtaK1Q0Nd4F8G8lsumnFbrhlHh0sVquNVVOjujR69wExa24XNMZx4uh9jEmhvGS22r9HKy5d/WhKOnti7GNdeQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15v90amd7sdnm65ds8x5tvtk45nt52y82qq6vgr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["popular5ds8x5tv"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhtLKakkQU4eA5pssNwYtV04yZ9VAUvWSEKf5m8RQAld"},"signature":"8ME9pV1+ulEysG8vEDGX9qZBlnnnzyfY2tPJ6PvDlKVi9EuFbvFP72UO53tSLbTshbvwlausQ0yqzQUs8Hjlkw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15v90amd7sdnm65ds8x5tvtk45nt52y82qq6vgr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1312","popular5ds8x5tv","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhtLKakkQU4eA5pssNwYtV04yZ9VAUvWSEKf5m8RQAld"},"signature":"iUdc6qioegZzE61IcyEervMo8yaztPhFXL55tF72+NpnYRQuIDNV2mB8MX8YZOgERXqh7TmFlEh5VSixYg4+tQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15v90amd7sdnm65ds8x5tvtk45nt52y82qq6vgr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1312","1","1","g15v90amd7sdnm65ds8x5tvtk45nt52y82qq6vgr"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhtLKakkQU4eA5pssNwYtV04yZ9VAUvWSEKf5m8RQAld"},"signature":"W8oHxozfSSuP3eqK5QikjKWHLF7NdPBawSXzkoviUsViKBaJpkflv00V3UnHL+0bFdKIEKUOTWNd9/FgLnN6ag=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1zvnz0jay8vtep476uh8dg028f0lnshnmvt2mdx","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"te9SaVY58DzoKC8pAwBXMN4Uo0XNx+9nFcDGQXdpQXMOLPLqb3/XIMEpHua6MwJTn6PSOB9HaG94bYZbz2/A8w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zvnz0jay8vtep476uh8dg028f0lnshnmvt2mdx","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","wave476uh8dg",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A53YdNof+H0pERy0MBZyB70dGZPpB++ajk7KRwwiEsED"},"signature":"fEGN3t+/POjRJaYJYdKqmvyq8m9NODihT/dnCBakj1dnkF8A2dB/Nkgo7hrf9jGJtuEyJ2Sirpkq53z1u6p+jw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zvnz0jay8vtep476uh8dg028f0lnshnmvt2mdx","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["wave476uh8dg"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A53YdNof+H0pERy0MBZyB70dGZPpB++ajk7KRwwiEsED"},"signature":"2mvDILt1EDFa1BQOsvIXtgEn0TKyDCDnJa5idHVhxX5isjpa3WRgmYGvEOc450NW+9OCaUqAsooDHDHQE5ptiA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zvnz0jay8vtep476uh8dg028f0lnshnmvt2mdx","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1313","wave476uh8dg","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A53YdNof+H0pERy0MBZyB70dGZPpB++ajk7KRwwiEsED"},"signature":"5REOEMsd9vtNqK61U47tCIGhui9QVO1u45cFxetl881ZaRvRs+iHXPfJU+c+6uxOq7jOx6Zf6bRiTv58o0N15A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zvnz0jay8vtep476uh8dg028f0lnshnmvt2mdx","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1313","1","1","g1zvnz0jay8vtep476uh8dg028f0lnshnmvt2mdx"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A53YdNof+H0pERy0MBZyB70dGZPpB++ajk7KRwwiEsED"},"signature":"fzP7gBtcWM5yhUevEdo0oC7wCtgxFBn3WFMYAuv7kMJHyXrhVNt+WJdSJwIbC9P3GBhEPseW9eT4wsjuWY486w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1g0xkcxkez7yfeh8njm0qu38yf46rkt4g7w4la3","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"EFIdpVehZOkHOQr2SpZDzTuTpMRRjJ/S8CjpGcWbYrAd2lYh+IQz2P1Rz0bUY62h00EnW95MCCjRZOoMciKzmw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g0xkcxkez7yfeh8njm0qu38yf46rkt4g7w4la3","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","roasth8njm0qu",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AigMfmYIfqciW66vux/eNjSUCuVhJMddsuJhSKFIL34N"},"signature":"le9KL+SmNfGe5a1fLQOgmf+1hPM+6SGn51VWHv02bDIGVFlU+XB5rYv5OemmEc5QSjgwM06Ce2laR2UlI/vsmw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g0xkcxkez7yfeh8njm0qu38yf46rkt4g7w4la3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["roasth8njm0qu"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AigMfmYIfqciW66vux/eNjSUCuVhJMddsuJhSKFIL34N"},"signature":"X1F/FocPitBU3C/WYdBjy802GCkwnDJae6zwqWTsSEIeUdl7GzXpzjJX4KHQfuZKUItCAIFt9jVNpvSviob8pw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g0xkcxkez7yfeh8njm0qu38yf46rkt4g7w4la3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1314","roasth8njm0qu","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AigMfmYIfqciW66vux/eNjSUCuVhJMddsuJhSKFIL34N"},"signature":"i3LcOxw78ej2vJvUXw0OFnuJmyLx2t80EPAeiu/BUDtel6e8uyL4j7EQuIGtISwrZYMtNjDh2mYWdWe58n1pQg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g0xkcxkez7yfeh8njm0qu38yf46rkt4g7w4la3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1314","1","1","g1g0xkcxkez7yfeh8njm0qu38yf46rkt4g7w4la3"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AigMfmYIfqciW66vux/eNjSUCuVhJMddsuJhSKFIL34N"},"signature":"V9dgFO7n47G1rVp5Y5j1mnUYA9nQj5H5rUqkGZzWG4d+L5CwYCIaWxPh/hTDFORQxX0iBLJKjfapUVBr+O7zjw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1xr4zwnzhlwxqy3un2z54qcmql2e5g23mdsvljt","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ozQCkJ4MPrap0UC+KTNWOeI7bFG4q0Yymn7i+tv3mv9cN6UnQY3xHEOiP8OF8H3ZwoROTJaXuP8JRjPKFVubFQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xr4zwnzhlwxqy3un2z54qcmql2e5g23mdsvljt","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","tumble3un2z54q",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjGyUrRN2508KAY4adj4rRm8VPcJcKdxVuJoNwt/loAo"},"signature":"j7jAOLzechsAkBduCTaiR+KYdIRkQ/bAkEMtyIurOQg9ICsfysyrnQ9QfEnVyu/QLfs05ovA6Zeas0ml8erm1g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xr4zwnzhlwxqy3un2z54qcmql2e5g23mdsvljt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["tumble3un2z54q"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjGyUrRN2508KAY4adj4rRm8VPcJcKdxVuJoNwt/loAo"},"signature":"sHusC8o1pBjPqLy/gU1styYcMRZuZG1Px7maMcON7sBU2Oj4iaDpABIUSYKD2KRSvXhlxWOAaivkImxkyvFm7A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xr4zwnzhlwxqy3un2z54qcmql2e5g23mdsvljt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1315","tumble3un2z54q","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjGyUrRN2508KAY4adj4rRm8VPcJcKdxVuJoNwt/loAo"},"signature":"We1NyuT1CIWL+pu6KWmQREmkcu0mNh0HUTLQ1uTt7GBpi60Aw9DA8yoF6ryGFXFY6/Ozwe4kvYIUnhth4uCcpQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xr4zwnzhlwxqy3un2z54qcmql2e5g23mdsvljt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1315","1","1","g1xr4zwnzhlwxqy3un2z54qcmql2e5g23mdsvljt"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjGyUrRN2508KAY4adj4rRm8VPcJcKdxVuJoNwt/loAo"},"signature":"BOpCIUfwXT6gomi23w6YHpV1a8n3jO/PJpZJDV0peApFcou5qyWsksPR7IMsid3ODVSjakXNDwUFwE1ayc6h4g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1qck9k4cvfqr48nutvfsemea5w6yn80uvdyxjyy","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ck3psWWhfcRajCHXFMcXEbgFIGpn98bz2tMRb0CkKUZHc0ivy3w78yD3c2fM/8VTooLP1zWjuxT8CFDpTgt/ng=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qck9k4cvfqr48nutvfsemea5w6yn80uvdyxjyy","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","meadownutvfsem",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax/tuS8U7Vf+MxRnb3TClUahmuiM7hL9jw2OjNZ4VSSG"},"signature":"KV0J/eVfr/WP2DGXAvOZ1Fn/Ubh5yNZozsgxXDdwZZw5O3hC+WHlTJBWZkFHT0KtHJj31aaamke0Wz2zPSjJKg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qck9k4cvfqr48nutvfsemea5w6yn80uvdyxjyy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["meadownutvfsem"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax/tuS8U7Vf+MxRnb3TClUahmuiM7hL9jw2OjNZ4VSSG"},"signature":"nXY2LetPof42XZBtS2HL3buEBPD4VTH0e2i+0LqVq2tT0iM3gXGpfbVSF8upMFjXFpQCVdLaaoIg2JEhB9lQYQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qck9k4cvfqr48nutvfsemea5w6yn80uvdyxjyy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1316","meadownutvfsem","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax/tuS8U7Vf+MxRnb3TClUahmuiM7hL9jw2OjNZ4VSSG"},"signature":"9B7TLtk8MKWD9X57nuwNk0O9JY0Ue1YxXRtbBDP1mhZWXriAUBDGLGohy2vjkn95odouDMRvhv/+83v163OHjg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qck9k4cvfqr48nutvfsemea5w6yn80uvdyxjyy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1316","1","1","g1qck9k4cvfqr48nutvfsemea5w6yn80uvdyxjyy"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax/tuS8U7Vf+MxRnb3TClUahmuiM7hL9jw2OjNZ4VSSG"},"signature":"T3TQDIKJ1bsZRCGlhUnuoxcKZ//qpVolVaBfSg0yS+5JEKOn/jSDYfbmR5+PMMEmyuncyMCEnSg7YlotH+krCg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12l5ucws52gekrvavjacjlpjmjss0drzlqqapsz","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"rk419BpPwjP4sj76FhlMcrX3yw/BUXWxsV/M4PdVm4o4WN073rt1R4AFVAEo+mtsqt79tCieRgt4BVFQqzlXdw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12l5ucws52gekrvavjacjlpjmjss0drzlqqapsz","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","verbvavjacjl",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6b9kuni8HPw8vALqYeOfgaGL+2buUEgcnaZPnU7l+XT"},"signature":"iaT7697LXzRPmDYuy6BA7hXFvWqzeIVnbqGQlNOBgSAKYuq4Fa/WM1DNWHd4Rwy/Qm7N5jXdFGWDAGZB5rUl6Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12l5ucws52gekrvavjacjlpjmjss0drzlqqapsz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["verbvavjacjl"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6b9kuni8HPw8vALqYeOfgaGL+2buUEgcnaZPnU7l+XT"},"signature":"r9gNALMse45OYeCP8MN4e8PKmONVzuCn8EfffY8tHSQ4xscHrx8jxYC4w7CIKb4sNsVCPwYeNIEbAkmSbTlouA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12l5ucws52gekrvavjacjlpjmjss0drzlqqapsz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1317","verbvavjacjl","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6b9kuni8HPw8vALqYeOfgaGL+2buUEgcnaZPnU7l+XT"},"signature":"WVfxJ7AbaYTpCq1QBgvRT7N643/jhhkswd6jt4LLWE4BDer+X+0yRF8uKk2Y5n8UJeMhCu2yUsXNlk4ZkcOrzQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12l5ucws52gekrvavjacjlpjmjss0drzlqqapsz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1317","1","1","g12l5ucws52gekrvavjacjlpjmjss0drzlqqapsz"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6b9kuni8HPw8vALqYeOfgaGL+2buUEgcnaZPnU7l+XT"},"signature":"XjdWLF8xfrfK0Fnmn8wL+jsOVs2aMca3C34uu6m8rEQSgSOJlaEKgeBtT/VHzOqcBmro8X2d4s2xPGloQxThUQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1cn2mq3kfqkskmegmtjctse07f0jsz24tq3ntrh","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"mmdenKXzLHAv9rnftC2WSztnJ4He3Nq5ihciKj7yBQhQmhIjJarBcSAzxf3msSAwm5oqHOPPWqogeSCLwkOYhw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cn2mq3kfqkskmegmtjctse07f0jsz24tq3ntrh","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","intactegmtjcts",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"An+Vc1aF/UP2O3xPFtWYD2BQqtKIub1DKt18AcF+O6f1"},"signature":"peraDhVBP+bwQSxvWC6OS2UItErDVbFHmnliLCwuVhYccL3jkaGtduoi/pe1rVdO2k0FtVttNgq86CIwN1df2Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cn2mq3kfqkskmegmtjctse07f0jsz24tq3ntrh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["intactegmtjcts"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"An+Vc1aF/UP2O3xPFtWYD2BQqtKIub1DKt18AcF+O6f1"},"signature":"8i4lInJOsD/poeOutz9vZa78cEt2m0NIWhoEX8E1ksJTLOlgakyg1hQRgjHrLadlwiCX5PiupBam8PO1T6cKvg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cn2mq3kfqkskmegmtjctse07f0jsz24tq3ntrh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1318","intactegmtjcts","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"An+Vc1aF/UP2O3xPFtWYD2BQqtKIub1DKt18AcF+O6f1"},"signature":"fD39m/kcCRccC4hCloEx4YA2oHI7/v5vTkAtBUT5vOgc8cXW5AB/jlcPBX3dRAZrCKIb88f+h6NlowTkBNwmDg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cn2mq3kfqkskmegmtjctse07f0jsz24tq3ntrh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1318","1","1","g1cn2mq3kfqkskmegmtjctse07f0jsz24tq3ntrh"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"An+Vc1aF/UP2O3xPFtWYD2BQqtKIub1DKt18AcF+O6f1"},"signature":"CkIeVxH8bS1hso9khn9tCAr0kpSNptG529o7St5DawRVaXyemXg3URchWpkaLO97jr4Bns4Q9HYL6Zeuv+uqFg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g198w5e7v92vgapdspnr9uc7p3khudyzmtyya5ej","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"j+9kB1aGkkzgydzIjzvZRmA0OzI+N7rCtrMvdYboBBYteZpMolIZ/KbmVB8/MF6n6if6FeX/gVZJBf9O7DoGGw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g198w5e7v92vgapdspnr9uc7p3khudyzmtyya5ej","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","unfairdspnr9uc",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5kwx+QUlFZd/jvENC7HJYSuZQ37ExoC5hl53GM8qhyo"},"signature":"Oypx8WGODNSansLLMO4TrSf+xj+kZImMqdIGaxkJURsbLbo0xb9Ih92AiqzNbqxQKzYTdvblyoaI0K/qD3kQTw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g198w5e7v92vgapdspnr9uc7p3khudyzmtyya5ej","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["unfairdspnr9uc"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5kwx+QUlFZd/jvENC7HJYSuZQ37ExoC5hl53GM8qhyo"},"signature":"O/k/FKYlzGQ+e3ybVVrtPUYILpdWavuPq0e0wpB6OVoqfBGOxmmpzUqPJXWeNDwEZ1TfhLRm7jF1w/u7LUrNGw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g198w5e7v92vgapdspnr9uc7p3khudyzmtyya5ej","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1319","unfairdspnr9uc","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5kwx+QUlFZd/jvENC7HJYSuZQ37ExoC5hl53GM8qhyo"},"signature":"t4vn1MwsWhaSN54rZ5SyCMNz/eTNf5w8gU2cBBbe3MknE4mpGdTVppG8Mic1kNArFdwEIYdsEDlLHefi/U0PrA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g198w5e7v92vgapdspnr9uc7p3khudyzmtyya5ej","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1319","1","1","g198w5e7v92vgapdspnr9uc7p3khudyzmtyya5ej"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5kwx+QUlFZd/jvENC7HJYSuZQ37ExoC5hl53GM8qhyo"},"signature":"VLCfrl69vx9z1jubAsrfXD89oOXcazDjVB0jzgG5zIgUvV8SND/6/dRmovzKOe4yIG6Vyfv8PbCFSawbF5Nh7w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g15lpcjaqm6yjh7u8t6d236caj2l62qspqdyjhs2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"fsl4iEhn5cgQ6gNugKCx1IqrqCEM4ImwuLlQtNNO5jxWCMTGvMq7ju3J/05au4w5UqKU3XO12Xblkqo4Tc2gCA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15lpcjaqm6yjh7u8t6d236caj2l62qspqdyjhs2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","multiplyu8t6d236",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8rWkeiXMY5RN+aJd6MjyV+265vF1zVP8fqGUc3i0yXP"},"signature":"FaZ3MuM+r5lmRyOwAV/y6md0pnjCMrxSc5IzJWJmBgx0ISZ6Q3v3+gQ52moxD3f/fpnQgmxnfLRdU+DRIqW7kw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15lpcjaqm6yjh7u8t6d236caj2l62qspqdyjhs2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["multiplyu8t6d236"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8rWkeiXMY5RN+aJd6MjyV+265vF1zVP8fqGUc3i0yXP"},"signature":"KQzjBdKrn35+LWjzfK1ycstfvAfXElV35Sj26LLCoqYgbDCLby91CDacltD2z2iztGdcNt9Li4TXEMQ37HSF6Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15lpcjaqm6yjh7u8t6d236caj2l62qspqdyjhs2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1320","multiplyu8t6d236","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8rWkeiXMY5RN+aJd6MjyV+265vF1zVP8fqGUc3i0yXP"},"signature":"vlFbI7tpjkRGnvYvvrU7JjunW+Plu4ouxdl7jA3TTNZ65cXY+SanDf9wBuBXyLgHegrL3r5N7Fhnt5HTFyq7RA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15lpcjaqm6yjh7u8t6d236caj2l62qspqdyjhs2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1320","1","1","g15lpcjaqm6yjh7u8t6d236caj2l62qspqdyjhs2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8rWkeiXMY5RN+aJd6MjyV+265vF1zVP8fqGUc3i0yXP"},"signature":"R5I+WreyJFwm2U9wfQqBfFjrLznttQ1qpK49ifQml+Ycy6/WxTggfGjVkJCQU/Z33XuCpZLk9vnn8XyEOiD+Vg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1s7zsl8gannxqccjn8adkn37s8qp2agzvz02qmm","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"3IAsK75Gs+ErglD6RSfkVT54spdvtfjE0ak/iI9VSK08hHYwTZlD6v0JDD4xrJEICiIdGU66P77TfAvqhsyO0g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s7zsl8gannxqccjn8adkn37s8qp2agzvz02qmm","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","disagreecjn8adkn",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhECPp+HVEkwT+5HXHbsp+cq+YTLHk8LReN2tmGeXeHU"},"signature":"lm2X+PLpbas4tcooo4hVLUe4uFs1L5SUUo3PQ5OM8jk8zfOoBpDVqWGNn/b77B+uFjOay0EMSI+Y+UNy2Uy/mg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s7zsl8gannxqccjn8adkn37s8qp2agzvz02qmm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["disagreecjn8adkn"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhECPp+HVEkwT+5HXHbsp+cq+YTLHk8LReN2tmGeXeHU"},"signature":"KnMDwtQKgwWSQBqnW/twBLhhlnp8KnrVLHMY3D5rQU4OIflwyuy/YKfzzrVu4E3X2KPPBBlZcQSxmtId4FU3Vg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s7zsl8gannxqccjn8adkn37s8qp2agzvz02qmm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1321","disagreecjn8adkn","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhECPp+HVEkwT+5HXHbsp+cq+YTLHk8LReN2tmGeXeHU"},"signature":"d+BbDQMZa7C5okkiceWLXR4Emrc4GH/eTJb54SlvHjk+Hf1m/WVQFT0i7R8yBIsAVBM4+TUVgNIhc5+t8EPhmQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s7zsl8gannxqccjn8adkn37s8qp2agzvz02qmm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1321","1","1","g1s7zsl8gannxqccjn8adkn37s8qp2agzvz02qmm"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhECPp+HVEkwT+5HXHbsp+cq+YTLHk8LReN2tmGeXeHU"},"signature":"vLVBBVt/FBp25996Sa4NqY6Re2o3cXkdnJvb8kC6M5tnbho54gXP1IxoNLaj7piEDrWnHuW9U7xuqenXQABr0w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1hz09wepn2ygnyg57anzt9m2zkx493e3w7q2mc8","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"duaFoNU7ctn1F2dTBmJKCl6Kk7s4dec21L4nwh3+DwJGxzveNxk37hp0RDbNcdzGkaGoWu161q3gCM24JkDrbw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hz09wepn2ygnyg57anzt9m2zkx493e3w7q2mc8","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","dumbg57anzt9",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4cTjeA5KjNuzV95rjxBWaMPVgVLPGWJN4mFYGEXtnBP"},"signature":"m8+8oj9qxZigc+Ldqt0V9KzNdE94Prujdlf51ghih+tkDau2FsAIvaLcK7Ul1Sw+OXN/VJII53QQKVXyWoDrNQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hz09wepn2ygnyg57anzt9m2zkx493e3w7q2mc8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["dumbg57anzt9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4cTjeA5KjNuzV95rjxBWaMPVgVLPGWJN4mFYGEXtnBP"},"signature":"3uQwNKTFdrrrGe02vWru5YUPau9u73G0rCebIkhmBk8eR7nZk+0oUOQtOiK2B7chT9ceF2GhpSAdjnKxZOI1FA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hz09wepn2ygnyg57anzt9m2zkx493e3w7q2mc8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1322","dumbg57anzt9","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4cTjeA5KjNuzV95rjxBWaMPVgVLPGWJN4mFYGEXtnBP"},"signature":"NhIKzo91bEU9xuFhFdMbEqDqROoN3BDsRB2raw0m8GBCdw5w+pHMzi+MLrrAD0MuLR2FlRArMV9qykYXoAlodQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hz09wepn2ygnyg57anzt9m2zkx493e3w7q2mc8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1322","1","1","g1hz09wepn2ygnyg57anzt9m2zkx493e3w7q2mc8"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4cTjeA5KjNuzV95rjxBWaMPVgVLPGWJN4mFYGEXtnBP"},"signature":"UDxuPIp/2zLXrZou6XGSBzpCaEKTYP9YxDHFYgAthVMqWix6L+soCBW9iUMmPlkbq69dJdr0JxD0jUPgT7MPig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1lvy59kaguxt5dqtwyvae7vxx53v2yx0fpdupmm","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"3x9qePzsWICmOCGCeNJVyKSqj1FlhNyyw2Z7CFCx8ZkwbaeQUR82Fvjt0S8m1ZzZBM7bNbfZzOYecHugsXe6VA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lvy59kaguxt5dqtwyvae7vxx53v2yx0fpdupmm","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","dangerqtwyvae7",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Atupsu3o3iw1PnLyK5otdDJgt0ifx/SkOwGlpTRBvWUB"},"signature":"EFwstcDweqy1/rGyZm4vXwCDE9DhmyC/sthbYGMbccpYGfHuqmpOV+5d/JqXsidUOIKYH22EfTX8l4arbcfeGw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lvy59kaguxt5dqtwyvae7vxx53v2yx0fpdupmm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["dangerqtwyvae7"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Atupsu3o3iw1PnLyK5otdDJgt0ifx/SkOwGlpTRBvWUB"},"signature":"v2P3n5MBc4hTNDt1vpx7jO1ZIfna8J7nTGAjYbBufIMMfgw/d0zxooj9OiA4yu4HzRi0pkOFTVnM7BSVKERiuQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lvy59kaguxt5dqtwyvae7vxx53v2yx0fpdupmm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1323","dangerqtwyvae7","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Atupsu3o3iw1PnLyK5otdDJgt0ifx/SkOwGlpTRBvWUB"},"signature":"JfY1O5fS77ji84YYaOQyTrs8TBbxW01CUEgeIbBAUfE+fWiOISooz2HPUYtNqbebLcFR39Uan7Z5WdlXM0l1cw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lvy59kaguxt5dqtwyvae7vxx53v2yx0fpdupmm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1323","1","1","g1lvy59kaguxt5dqtwyvae7vxx53v2yx0fpdupmm"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Atupsu3o3iw1PnLyK5otdDJgt0ifx/SkOwGlpTRBvWUB"},"signature":"+2OJT0rgbq5FchVTavhkh4VEsiy1UGHsTKqvolkeQblXu8KOQ1FW/Mv8mKezVYfCt88u7jrc9GqJXdAk4nUrzQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g163pe8q7qyk70cg8ymu0skx49e3w90mdgqtcz9n","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"i73qBgD6Ab+11+1kYlcn5Ss8kxEGeasC9O15fBTXH8g1RPGlr2xMacYDfij9w1aG6j7GA6EmSt6qSU6MHgEgzA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g163pe8q7qyk70cg8ymu0skx49e3w90mdgqtcz9n","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","singg8ymu0sk",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AivO8zJ9rL3wqwJb3oRGxO3mdgsi/up+tlSALH0Tbm9b"},"signature":"1i+wqRxXTZ3la1DrYNm4wqLtqGbIQaZasDp2qIiaJURhOSdHK/emSmu1XBi7sUqb5ScJLPXhO59r2EL7Z1TN8w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g163pe8q7qyk70cg8ymu0skx49e3w90mdgqtcz9n","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["singg8ymu0sk"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AivO8zJ9rL3wqwJb3oRGxO3mdgsi/up+tlSALH0Tbm9b"},"signature":"MMN9ljwAVoeQfbFmtiK5th8RMZd3oFXslMVVDD+zKAkup+10FRA3ox0qaK0urhNgf/4aRoTdJKXNA1+keUsuGg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g163pe8q7qyk70cg8ymu0skx49e3w90mdgqtcz9n","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1324","singg8ymu0sk","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AivO8zJ9rL3wqwJb3oRGxO3mdgsi/up+tlSALH0Tbm9b"},"signature":"IivKqxrQxoNviIC5e9yDTsgw39K8gU+f2cRJaxd5iGwhdq1zPGfPFHq3u4A9wOqnnnWR2kHumz2f5CaOPbKxmQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g163pe8q7qyk70cg8ymu0skx49e3w90mdgqtcz9n","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1324","1","1","g163pe8q7qyk70cg8ymu0skx49e3w90mdgqtcz9n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AivO8zJ9rL3wqwJb3oRGxO3mdgsi/up+tlSALH0Tbm9b"},"signature":"uNh5ptpFwDHvZwZ1iJvqeC0zzeJxNLddc8t2/ej791gOaZMt0U4ZQF0EIHjkuYRFl7qdSdEA6ToH7jhPlZPHsA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g120cadfxmc8qrdvw4dfz3m8afn4neccva4xq3vq","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"hkDXN9zQNRU0Up71w8r52X0Lw/ZSmH2hkyQrUhiKKVlqmO+emL9j8lG7V8xXR6D2A4zmYLBJwL4Thjfu7mgbGA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g120cadfxmc8qrdvw4dfz3m8afn4neccva4xq3vq","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","spacevw4dfz3m",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+IS+2IGF7WVfCzajqW7DoMv01dpok5UGGHwhzEyt67F"},"signature":"dQKpSb0rUM5X4IfBn1KdfxmhvYQ0owA7ei9LBwNIXQ5JhY8mKe3/fmw1l/yXOuds9o+5LDjt6gt179f5Ni6C8A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g120cadfxmc8qrdvw4dfz3m8afn4neccva4xq3vq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["spacevw4dfz3m"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+IS+2IGF7WVfCzajqW7DoMv01dpok5UGGHwhzEyt67F"},"signature":"TYJFTnPmpaSAq1F1y0B3kScq9V99pwdDKZNGmWNERI5q1stralLGkIfW2W2Lnxz+3360B7J8IXO0Kajm0S6/Uw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g120cadfxmc8qrdvw4dfz3m8afn4neccva4xq3vq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1325","spacevw4dfz3m","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+IS+2IGF7WVfCzajqW7DoMv01dpok5UGGHwhzEyt67F"},"signature":"zTT8d6GCbWyvLC/Oce2/1TstvmNVBpZoZ9UaP/hKo4IYsIL+mTXSlK97n/xHl2DetkQSx9lMh8/QkXmWuS6Blg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g120cadfxmc8qrdvw4dfz3m8afn4neccva4xq3vq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1325","1","1","g120cadfxmc8qrdvw4dfz3m8afn4neccva4xq3vq"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+IS+2IGF7WVfCzajqW7DoMv01dpok5UGGHwhzEyt67F"},"signature":"6SPuBxUUJTa9zFAzfXkuch4o0Y+HH9ugo9D/w5hWU3Ea0ER20opOLUj0Fso43Jp0VB6KRWb9Z28P83hZPGokgQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ll9xchz9gyum2ddjte8rptx6qa2cujuws6294l","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ke0vpWIAbLEZh/kwxLqCFRt6/+fSJdZ+E45/dLRfbywgnijmcGkzaCEWNFDu+iVVIC+xhMGjmBehJrG45fwzoQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ll9xchz9gyum2ddjte8rptx6qa2cujuws6294l","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","earnddjte8rp",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/1wFpIli+bBsx5LH1WQEOryFmFEqtyG9Dese4nRoCon"},"signature":"1eQdJAx8Vh2QKF5O3euJBAFUz4GsAKjgvde3tHHVslV/5uleSHwCveC8pusJwn0d1ShyjZT0dB83WynGlDKXew=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ll9xchz9gyum2ddjte8rptx6qa2cujuws6294l","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["earnddjte8rp"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/1wFpIli+bBsx5LH1WQEOryFmFEqtyG9Dese4nRoCon"},"signature":"M3eIGtaoTdCmMv4QPlPHzwZGzI86oexrVnzK/ZrKy7BYHoNsdOvmXRuCHeOGogntLujqpi2oIyB2oo7yMlKaZw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ll9xchz9gyum2ddjte8rptx6qa2cujuws6294l","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1326","earnddjte8rp","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/1wFpIli+bBsx5LH1WQEOryFmFEqtyG9Dese4nRoCon"},"signature":"ELI6l7GrN1Evxy/4gRv5PUeOiauXSOtoC3K6WE3yUKUJbVt9dIxmfEVRZ2YJXjLNY1eRcX9CMaEwB5LrkQzAEQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ll9xchz9gyum2ddjte8rptx6qa2cujuws6294l","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1326","1","1","g1ll9xchz9gyum2ddjte8rptx6qa2cujuws6294l"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/1wFpIli+bBsx5LH1WQEOryFmFEqtyG9Dese4nRoCon"},"signature":"4vjHr/PWnLtL/ghIJ9M6IkCrqDq5/qlAX0LbVpyYOZwa76gs+nOaInSmkfm834mbxrNWXjihDp5HLVlIQW3D8Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ltfw77y24hs44fd5627xajmcgpk2mc688550yx","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"+3ywHVLCPNtZ+JudqMfUDgnic/S1gMVNYOrLXtj/ewwL+DmK3sa8+nh6Y6s9fPAv7K0vprAHLglU9pRm0MbXVQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ltfw77y24hs44fd5627xajmcgpk2mc688550yx","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","flockfd5627xa",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4uLh2vdWRJbBlLPYRisyIPnif/lJygJhuApIp6IxIW1"},"signature":"4KEl/YQOvgWf3fM7InfNl2TQvMgyC29vteVN+5gKGEcH60540X1wSr8bSzQCnfovxqurFoPUtO4lpNSVBeqTAg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ltfw77y24hs44fd5627xajmcgpk2mc688550yx","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["flockfd5627xa"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4uLh2vdWRJbBlLPYRisyIPnif/lJygJhuApIp6IxIW1"},"signature":"q9lTx2sWT0Og4QfrxgQgf3yjsBb62uN9DwOPLHan6FQ7Pk4m09sZs5DfGzNKb97/QXvoRNEItYiICHIt3cfMUA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ltfw77y24hs44fd5627xajmcgpk2mc688550yx","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1327","flockfd5627xa","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4uLh2vdWRJbBlLPYRisyIPnif/lJygJhuApIp6IxIW1"},"signature":"Kz6aUxAvVqko6hm9GC9OzAom8RxMWg2SxyU2KpI7x4dYRcoKSM5gEHGP7Mdu7E65OYRPfDfEJ0sOZbIOriiQPw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ltfw77y24hs44fd5627xajmcgpk2mc688550yx","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1327","1","1","g1ltfw77y24hs44fd5627xajmcgpk2mc688550yx"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4uLh2vdWRJbBlLPYRisyIPnif/lJygJhuApIp6IxIW1"},"signature":"/T/wvfgJZrbcpL8g2b7zgsE1OY+GD5wEFrzcwcvZDfgY+PG4lmP40QW9aZXEO/CrVTOtSlNgobamIOQCmAOnWw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g170uzc794dglv0cye2prht6q43zs5w99sl4wjgt","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"V3ctQoNoaNSjKcxstk68x8F20iPLTqxdwU9uKvvH46Y7t1yBQTm7jX2iN0T5xZpSb07e6B7yrDhf5Fhe24aewg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g170uzc794dglv0cye2prht6q43zs5w99sl4wjgt","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","uppercye2prht",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5r0+JyFc/uTBgHnyUJ4ZUmDQ7FWKeMz0StwDVrT1YcI"},"signature":"VsSN0k2MVv8fxLqYudMDmYeFLBxa13c7mtsAVoJCjyUkRImkLxqmd2wdyOaJQTOxEJgRWTLf4/YBOBFbSRGeYA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g170uzc794dglv0cye2prht6q43zs5w99sl4wjgt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["uppercye2prht"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5r0+JyFc/uTBgHnyUJ4ZUmDQ7FWKeMz0StwDVrT1YcI"},"signature":"sAKfXgabkL3yGFH4IjSU4xQU8l1WjgctBSm/4DRB5zNRBi3ZDnQxyBPW6YDQdOBMPv8+YvP75WGj0gdfKRwzRw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g170uzc794dglv0cye2prht6q43zs5w99sl4wjgt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1328","uppercye2prht","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5r0+JyFc/uTBgHnyUJ4ZUmDQ7FWKeMz0StwDVrT1YcI"},"signature":"dMNoIeeXo6aza3KFbftOo2O1KgWlDqUzTm8fJc5LQKggTUtlHIs6ncVVl8H/ZMcMOflM3SvQ0W5mfpdAHv+img=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g170uzc794dglv0cye2prht6q43zs5w99sl4wjgt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1328","1","1","g170uzc794dglv0cye2prht6q43zs5w99sl4wjgt"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5r0+JyFc/uTBgHnyUJ4ZUmDQ7FWKeMz0StwDVrT1YcI"},"signature":"97evb+801sFe2UKayN4BKmrbnNvem/Ijjii5hnncltopAxOjlO3cmUBZLVL3Gyd33BuZvDt9WEWq1FjPMhJcwA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g189ygc5d5twf2lk3tajkvtkd30zaqnmu5tus6fd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Q9Vv4hf7SQoQNF/idxlg//8AI4clc4c9ozR4klzgTcBrcYerH+5LZ4/vAaGR9gLkRMW+5RoBH3RA8ESi5YQDwA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g189ygc5d5twf2lk3tajkvtkd30zaqnmu5tus6fd","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","horsek3tajkvt",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A60KHxI+TimegwR5dXI7x1kBNF7GLKNjYTf6BKQqBFK+"},"signature":"4Su2VtKoiFesxz7wBEIOdawV7xCJVB0iF/XMW2iSzDN8jvs5B1lk87inr2aTtsqAsxHaXfH68OGkLhUMzpaGeg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g189ygc5d5twf2lk3tajkvtkd30zaqnmu5tus6fd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["horsek3tajkvt"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A60KHxI+TimegwR5dXI7x1kBNF7GLKNjYTf6BKQqBFK+"},"signature":"Yn+9mQkg+MgbHKru4gFiuUPt7hWKWoVjMHHrPou15qof4z01WcZE9dT4+k1qA6ayZ+hHawzUzOIQv3uj/JO+mw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g189ygc5d5twf2lk3tajkvtkd30zaqnmu5tus6fd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1329","horsek3tajkvt","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A60KHxI+TimegwR5dXI7x1kBNF7GLKNjYTf6BKQqBFK+"},"signature":"KTnW9LI4pl7Me5uti1lwTluVS9Dk6/fgmjDW/ZimABUvPH6vF59El5wa6ybzTqtWK4sqLMz98gHOkHYFrL5OUw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g189ygc5d5twf2lk3tajkvtkd30zaqnmu5tus6fd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1329","1","1","g189ygc5d5twf2lk3tajkvtkd30zaqnmu5tus6fd"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A60KHxI+TimegwR5dXI7x1kBNF7GLKNjYTf6BKQqBFK+"},"signature":"3knd0ZlnjulzFzq54XJq8DgPowKgUEsuJEMX7qJe2lJhkyOErn8TnSoRRr7sHPq1WQ/kQ9gl0TFbhD/ayHPpNQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1qxk4zm2066wr5nud7jwxey7j2fh4jhmsvwh56j","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"5XaDFlHqavxwya9SdzhrWQTBZhW+Qy6QqXec2bBUWEEVicoBoGKuwLSwsHng0AEwetwrbswfOpG5CeVa/I1YBg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qxk4zm2066wr5nud7jwxey7j2fh4jhmsvwh56j","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","largenud7jwxe",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7VVzVkCWoMvEJw25i/O/fDzeBnSmW+MrvHewkMzEznV"},"signature":"8Vfx//i1RoK2rfgce9gFGEELgnSa9mAqcKK/1WzJw9ZtkYRscpwUTxWcWNlHd8ZHTG18Budiox/Z5jfJYkXWNw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qxk4zm2066wr5nud7jwxey7j2fh4jhmsvwh56j","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["largenud7jwxe"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7VVzVkCWoMvEJw25i/O/fDzeBnSmW+MrvHewkMzEznV"},"signature":"YNm2cAS+WHffNaam+8PmMP4+olX94gx+FgKaU1L+3FByd6jtNBCcoWQAj8NYfgjWRnJQpqXQQiwI/scQ1QBVaQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qxk4zm2066wr5nud7jwxey7j2fh4jhmsvwh56j","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1330","largenud7jwxe","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7VVzVkCWoMvEJw25i/O/fDzeBnSmW+MrvHewkMzEznV"},"signature":"+UABZy1gdSw7lnO8RxjgQhhVBQ2YmJp5pfjdPCDFJYNhltkuiqfUvpgHd8Z5idsBpm5LwTjPZwgRxhzHlzCEFg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qxk4zm2066wr5nud7jwxey7j2fh4jhmsvwh56j","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1330","1","1","g1qxk4zm2066wr5nud7jwxey7j2fh4jhmsvwh56j"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7VVzVkCWoMvEJw25i/O/fDzeBnSmW+MrvHewkMzEznV"},"signature":"KVfzgiepIX5sfywt3m9VvxjUNJIEep6cE/lkici9DAofdW5ldII4My3iO5HmYX525f9GFd4xKOhBFOOxJU8/Rw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1s0uc0safdfkffuyqnsc2lkmjhexvn7ax4flr0n","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"8zwPgNhz92MsENaanjbwYPfRnsUs+u6QBGuB96gmRjMCcQRB0wT3v3n5pgwNnQlFEow7at5Eudy5X0HIYurxew=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s0uc0safdfkffuyqnsc2lkmjhexvn7ax4flr0n","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","boiluyqnsc2l",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqIHzA2T/m1mq5SLAQqDiLQLHUKzmRMwN4386f7pEWHj"},"signature":"ZLCgeZeBMiOPBowXT1EQuYDEB4WN6sN5MzG4Sz8LwBMwaQ1bbok9GtukNJAZj7zEYK/Inxt/Ny8atOGl5gp+pQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s0uc0safdfkffuyqnsc2lkmjhexvn7ax4flr0n","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["boiluyqnsc2l"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqIHzA2T/m1mq5SLAQqDiLQLHUKzmRMwN4386f7pEWHj"},"signature":"FNyvwJ3kCCGRqX8WBk2pjl69gYnJJIk1MhHGjJ/q9poaxqVfs/gnM+HxvmQl3pL/01FMrTcu9NSx8fBvtzcUHw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s0uc0safdfkffuyqnsc2lkmjhexvn7ax4flr0n","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1331","boiluyqnsc2l","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqIHzA2T/m1mq5SLAQqDiLQLHUKzmRMwN4386f7pEWHj"},"signature":"RCY3EmnpiXLgQsytifUW2G1fh0Ls6rLNpejkGD6OApA/EVFQcub5mvxcT85fnOfK9iwuqfc/c8BV3T/wiuFy9Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s0uc0safdfkffuyqnsc2lkmjhexvn7ax4flr0n","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1331","1","1","g1s0uc0safdfkffuyqnsc2lkmjhexvn7ax4flr0n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqIHzA2T/m1mq5SLAQqDiLQLHUKzmRMwN4386f7pEWHj"},"signature":"e9t/RSN7Sddisb8P4vX8NQFn0uOxDIaSTEG6YF9WPJEaW2HMCRHRWtzZ95hQOh/jxq63K0MaX5XhzQn3UjiVIw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1qrx6mzejdv4cqj983ee94httl884cklmly0kuf","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"3KQsKTulbH1jyDtyIzWtFt9FB8F7foFtOeoGkGiYfhl9soQl5Z7M177nmvV4Zd7CbNqAEjOQjVHU6UkehEM6qA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qrx6mzejdv4cqj983ee94httl884cklmly0kuf","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","weirdj983ee94",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsppaPwt3PBxmaMx4ka4jcpZFUd0uZBPYK53DsiBg7pq"},"signature":"fEKVKqQweCrC48TYa9BJbFc16+FqQ+niriNpk3GwqDNtu9yFTAZU0Dz1GIvSf+CK9xZ9a0Z7/ciGol6GWR85Aw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qrx6mzejdv4cqj983ee94httl884cklmly0kuf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["weirdj983ee94"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsppaPwt3PBxmaMx4ka4jcpZFUd0uZBPYK53DsiBg7pq"},"signature":"xO1BU72TM36Ooy5InF/cEJLZ1MCqfcQCEbaSZaaxRiVk7S4RixrDFQV+VIQJYNpHWZdQCiqgbltMLEa9EO9djw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qrx6mzejdv4cqj983ee94httl884cklmly0kuf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1332","weirdj983ee94","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsppaPwt3PBxmaMx4ka4jcpZFUd0uZBPYK53DsiBg7pq"},"signature":"sny+E/MbDww7N4DBTWYkPxAWaJ3LKsDanwlLiWPU0yExMzl1Ru5II4kd3wBwpf7Cy+AmrLYfvopZOYEdAfmnLw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qrx6mzejdv4cqj983ee94httl884cklmly0kuf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1332","1","1","g1qrx6mzejdv4cqj983ee94httl884cklmly0kuf"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsppaPwt3PBxmaMx4ka4jcpZFUd0uZBPYK53DsiBg7pq"},"signature":"pw4g8+cy8wETm7nypzBIC1IDMq3JwYUm23OUuCQoiKMwhb8ESw6PS2moQFxGPrdz9mqiAyScpOkYwWtHHI/B1Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1mg8fluzwzpectu7q6742tjv65atj7s0cr22yn2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"zoEzWmvKPGTsI1P4WG5587umeShaZSD+dnshT4MgpDpL0LQIHNd9rTHTj2gOszMKWFbQJqyZStQ8Fxnpv0kHDQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mg8fluzwzpectu7q6742tjv65atj7s0cr22yn2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","thumbu7q6742t",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aql0eG2U1sGriaJ7Dur34/JxCC9h0Zt6JRxuvh4x8hL+"},"signature":"nR2IyXL8ym+OH3ATp3Yx/8p7FjUTTlHkGw33QiDH1as5PB7vT6Gd8QtIIeW+nfMRGRIC5iL1cPtCydFA4ckqBQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mg8fluzwzpectu7q6742tjv65atj7s0cr22yn2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["thumbu7q6742t"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aql0eG2U1sGriaJ7Dur34/JxCC9h0Zt6JRxuvh4x8hL+"},"signature":"7GxMVl0YY8SiSjzdhQfgDmmOR6nCG/fjt7Y3yitSV3By9BrMLKVvz4ISlp+caaPH8NrwZXGmThxPbs71/oBf5Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mg8fluzwzpectu7q6742tjv65atj7s0cr22yn2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1333","thumbu7q6742t","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aql0eG2U1sGriaJ7Dur34/JxCC9h0Zt6JRxuvh4x8hL+"},"signature":"U+CyLyO4kUn30283tq6ZkqjHvyNsk9P2kx5zK7ebCBscpmZDZYjA+5giaIBaDMzQD6O7U4NwkXjQkilIAmrXnQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mg8fluzwzpectu7q6742tjv65atj7s0cr22yn2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1333","1","1","g1mg8fluzwzpectu7q6742tjv65atj7s0cr22yn2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aql0eG2U1sGriaJ7Dur34/JxCC9h0Zt6JRxuvh4x8hL+"},"signature":"ZMCHlQ5IHc5Y0oWtBOej5eYe6lmiURsrZn8ffVkOOXxppal5+g5zHf5wDMuD+RdSZt0b0ZsNva0O6C9f+Hpdkw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1s5ql8d2jdzs9teakd42jpzv724mmcrcjlmf2a2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"HN+5ats4bDe5osjQoKV4KZlSyWcXme5N/Ms7hl7SGnYVaUn8Ki/+6Ac4Q4TXFArUQXjJ1XysnfJgs/VVXYpfqA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s5ql8d2jdzs9teakd42jpzv724mmcrcjlmf2a2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","treeeakd42jp",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+YsRNH1huZPtMOuBjapPRZcEuZ4azy8yg5vVnANBcSO"},"signature":"i90n0K8rzemoDvu1YxXhp/3q7zqf0QBbxlX7VzJkDuc7abqRnWSy9MZbqK8zqCGm6OfhsIBoDEJLkUGE5lrpoA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s5ql8d2jdzs9teakd42jpzv724mmcrcjlmf2a2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["treeeakd42jp"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+YsRNH1huZPtMOuBjapPRZcEuZ4azy8yg5vVnANBcSO"},"signature":"1FGdd+lc1HGet7SupmYiosUq82kzTQrdSmaC8Jg2/BZfYIqdLsUV4671HqBZyrc7ZJu1OzlgcUdhz0ts+7CNIg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s5ql8d2jdzs9teakd42jpzv724mmcrcjlmf2a2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1334","treeeakd42jp","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+YsRNH1huZPtMOuBjapPRZcEuZ4azy8yg5vVnANBcSO"},"signature":"wgMzmyL1Sb7zlfuvp3O0KJAN/BpEWmQ6WWzsJoVfCL9fGrbzBSmmkxgdc3ULXxOsTXLPM+zdYkoXOidKRNju3g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s5ql8d2jdzs9teakd42jpzv724mmcrcjlmf2a2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1334","1","1","g1s5ql8d2jdzs9teakd42jpzv724mmcrcjlmf2a2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+YsRNH1huZPtMOuBjapPRZcEuZ4azy8yg5vVnANBcSO"},"signature":"NaMv8zOPlYwoHWYeJjP1zmyWdzkaZBmSV6C7MfFQOpcPeyNJQ+RmdZR16l7T+9zI7rOkwoIUmHqdOQQqEvzo4g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g19e0msfnd3rgewllp8gjjpqnefcf62kcd7xzuqe","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"7aY5VVGp2esbpQcT/yRUcv8wdbNLyCFifbCjdwxoBV4VNJS4K0XH/RdDAtjSYmDu7WjsCWMr/eioaraC24whbg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19e0msfnd3rgewllp8gjjpqnefcf62kcd7xzuqe","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","bravellp8gjjp",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqbPH/0uLF5Hs0tvc6VavLf4kKOy98atla5cb5qEFrZN"},"signature":"EY3vPh07vWC0BkFdFeHPStqpCprMONGF6JSaaFj/PCs2uZS+HCUAGfBlbH95jFrsypDcK0ZmDj+Fl/MHgQs23A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19e0msfnd3rgewllp8gjjpqnefcf62kcd7xzuqe","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["bravellp8gjjp"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqbPH/0uLF5Hs0tvc6VavLf4kKOy98atla5cb5qEFrZN"},"signature":"rbRMZ4lq1oCqzMeMkHErIs48EuhNBIxFZlWxSqJFv8lnh8UG2y6m6kihsbkBdlG9HWNyB/lvZapduP7NcivlSw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19e0msfnd3rgewllp8gjjpqnefcf62kcd7xzuqe","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1335","bravellp8gjjp","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqbPH/0uLF5Hs0tvc6VavLf4kKOy98atla5cb5qEFrZN"},"signature":"JDK+POXCkO0L2SqppqAhRSlWxd3hLADWWofQBgD3PO87gYt5RGTqylMYuA+tW0+F2uVxd0BghIx6NIra6GpHdQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19e0msfnd3rgewllp8gjjpqnefcf62kcd7xzuqe","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1335","1","1","g19e0msfnd3rgewllp8gjjpqnefcf62kcd7xzuqe"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqbPH/0uLF5Hs0tvc6VavLf4kKOy98atla5cb5qEFrZN"},"signature":"NjSOZm0TR68oYoraWn/8X2ShbzCrYuY7NC5AW6j2mo4eHRjzz4+tRK1xyOV0TS0lNWGcB2NQsTGXkWbmX1mnhA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g146nnh4pvdkmmsnj0rlswk6fqh5c5glg568f328","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"v9UG1i/dVXJ7Kh9Bjc4MgKsXY4BQpEBVI41wjHevC6Er2OwzCyr3aoJJtKhJk2/CdSJYKmCY16OkvA/jpqqGtw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g146nnh4pvdkmmsnj0rlswk6fqh5c5glg568f328","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","forknj0rlswk",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4sI+U8dLphRvDsRnjMVAybcmmpqCPNrDvuAP+EfluOU"},"signature":"g8LDPkPo3X6DjEasINzAJG/Fn9eHGpSZnn/kKmgYfvgyhMWQBYmq9GF5jwNMt3pZpDTckCS5t3J5PI5S64AJ9Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g146nnh4pvdkmmsnj0rlswk6fqh5c5glg568f328","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["forknj0rlswk"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4sI+U8dLphRvDsRnjMVAybcmmpqCPNrDvuAP+EfluOU"},"signature":"acyYLsFX2M7AYw3qxKiMI6PJnotz9HcQRjbmcbZdCj1TyXheu9GGs8qUEPxmOFqBU5NZuGbR2RN7NOkv/shWcA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g146nnh4pvdkmmsnj0rlswk6fqh5c5glg568f328","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1336","forknj0rlswk","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4sI+U8dLphRvDsRnjMVAybcmmpqCPNrDvuAP+EfluOU"},"signature":"IxZ1TvRXe6Zkjj6EAiEqSqNbi1TGXjt7QRoNzftnRjhX3QnU89eWvSbTwXIa5sEyUW1GtkB0BnTgJ+QdhyylpA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g146nnh4pvdkmmsnj0rlswk6fqh5c5glg568f328","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1336","1","1","g146nnh4pvdkmmsnj0rlswk6fqh5c5glg568f328"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4sI+U8dLphRvDsRnjMVAybcmmpqCPNrDvuAP+EfluOU"},"signature":"gpFIxjIcg2/0UjioyLzJhbGSVuIr5TtguJh8oubdPBcpvLQWHcg5qgx7gK+J+kAbzAAdHTu8GXOaqw+b7M0giw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1mxtwy0m58kkyan6v9rkulezrwhtnnmkv0j28kt","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"YCy3RHCl/6d8ZNzxaEHcRAg/RyVejsFS7I6l+e/aE8U97QP2O5yeZ8VDEoiaPSuznrLTY3FwHtXLsszxvTNa7A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mxtwy0m58kkyan6v9rkulezrwhtnnmkv0j28kt","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","exoticn6v9rkul",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ao1ahhz5ji08uVZ7vyTRcduxC1Sl8XBKdgheA5lBWmaI"},"signature":"FrW/cbF3fUFfORTNhy5Kektsdxp/gvbuwTuwCDfjv+BsYcnqErjBpa/TJ0sD6xAlsxmp/OaHG79K9hBPnzhoIA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mxtwy0m58kkyan6v9rkulezrwhtnnmkv0j28kt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["exoticn6v9rkul"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ao1ahhz5ji08uVZ7vyTRcduxC1Sl8XBKdgheA5lBWmaI"},"signature":"NoCn8bGFdXCEbxsO/CcKuHbgQMLhHc7M2vzwaQ5qT/0bwK5Y6TvuJCGVYiwtr728Nfv3OhyMhfFMzHKIaAoIeg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mxtwy0m58kkyan6v9rkulezrwhtnnmkv0j28kt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1337","exoticn6v9rkul","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ao1ahhz5ji08uVZ7vyTRcduxC1Sl8XBKdgheA5lBWmaI"},"signature":"sBkrhZxy5llBWVO1dg/0Ggy0ZX1obNp8yv9/pxR0poEO8ceeUnsmUaChq6nkv143EOacGADSvft9VMUFMNMZ4g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mxtwy0m58kkyan6v9rkulezrwhtnnmkv0j28kt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1337","1","1","g1mxtwy0m58kkyan6v9rkulezrwhtnnmkv0j28kt"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ao1ahhz5ji08uVZ7vyTRcduxC1Sl8XBKdgheA5lBWmaI"},"signature":"yPzwoBsSRLBOxZ1b6iKUukttAZhEb+9qZRMlunFNkalpuP5gKes+q2cWjVT9APOxIeVvUCEZFOWOnfKAj3e8Og=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g19h59zgdm6w4taflqgh86jjphunr7lkxqjn7vdm","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"pUd0H8RvOyEaEbIg0Euhj3fbnTH5jxj1UB2IqgxGuvQ9VPvZosl8OKtINyuWm4Ew0TC8V6vNRHWLqlBOkeVR+A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19h59zgdm6w4taflqgh86jjphunr7lkxqjn7vdm","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","potteryflqgh86j",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4aUf0uRjKfwNO13nrvwJZxyMiEttFP2GUg+4KP6fV5R"},"signature":"qAaHwcpXs46rpLfQbPyWYcWCc54NJQlVNIYhVEpMaFEIqkhhFVjpZsLSf6l3kB+sLaIQDLVtvahcZfk1VkEEkw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19h59zgdm6w4taflqgh86jjphunr7lkxqjn7vdm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["potteryflqgh86j"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4aUf0uRjKfwNO13nrvwJZxyMiEttFP2GUg+4KP6fV5R"},"signature":"GUk4A0kMHp4WCJWZTOakbb57M0vqByROTiuO+vxdTNsQbC0U3e7SjenOhUL8J/Y0OharQwk/oEeXEh06ufuShg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19h59zgdm6w4taflqgh86jjphunr7lkxqjn7vdm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1338","potteryflqgh86j","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4aUf0uRjKfwNO13nrvwJZxyMiEttFP2GUg+4KP6fV5R"},"signature":"9Tx8/fCRgLfZwVdoa7zzlyCcwac/I5cENPvof9C7G3hXtfABklB/oBTUzFNmB07Oat9sPa/nNpdiIPltZNRypg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19h59zgdm6w4taflqgh86jjphunr7lkxqjn7vdm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1338","1","1","g19h59zgdm6w4taflqgh86jjphunr7lkxqjn7vdm"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4aUf0uRjKfwNO13nrvwJZxyMiEttFP2GUg+4KP6fV5R"},"signature":"OADsOSM0X6bEkaMDGpD8c0tgUxZH+/PApnRV7Ui8SX4TaNbCFYDmEGdVX7/QyNkhmn364TnM1e70VHHi1iuGcg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1u4gn3mlyh8p3acv4cnj7gd0tzm44zwpu5j9psp","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Q03t4NSQUIsUOFNQUjkKSoEebTk3UbluALeDFVWf0xxjG/R6lg5f47KE0NzrFJWcJ877bDFKFX7Z1h2S6CawOg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u4gn3mlyh8p3acv4cnj7gd0tzm44zwpu5j9psp","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","corncv4cnj7g",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtVqcUVAGQkiNwNcp0zvcwC+OaG0gyrdBFAvcba9NwsG"},"signature":"TsO7tGF/AIBhm4S213srE8FA5YGwGZQ9vnfYigXo2jFkKMlJw7MSUg782vcxc9nHolvWqvKu2NpTnO1SEYgg6w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u4gn3mlyh8p3acv4cnj7gd0tzm44zwpu5j9psp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["corncv4cnj7g"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtVqcUVAGQkiNwNcp0zvcwC+OaG0gyrdBFAvcba9NwsG"},"signature":"TE6Md3TT2+PyjmjdLIEh0S2Z3g5QlXVrkYaTP0kuOl5UkAMY1jCSBy3QWfcYBsc3CJuoSVsujylCCxvted78bg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u4gn3mlyh8p3acv4cnj7gd0tzm44zwpu5j9psp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1339","corncv4cnj7g","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtVqcUVAGQkiNwNcp0zvcwC+OaG0gyrdBFAvcba9NwsG"},"signature":"GYQSYDs+6P8bzExd/vqZuF68F5EM39UPzLUQZMi3XiExDE6or4nsCCqCGLugLhvbiDHFoS5uvSkZf+2sf8Bpng=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u4gn3mlyh8p3acv4cnj7gd0tzm44zwpu5j9psp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1339","1","1","g1u4gn3mlyh8p3acv4cnj7gd0tzm44zwpu5j9psp"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtVqcUVAGQkiNwNcp0zvcwC+OaG0gyrdBFAvcba9NwsG"},"signature":"NR/2G/E+qfiGTAT4MjSsq9xwH7au5gY2dViYoJqXJdYuhPv/XRmY3kn2OyaILhrDglDRd+S/0FZDSLQ+4LPhFA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g17gmnlrs9wt8zlyxp6rgr32a4lz2yntm5j5yp6x","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"v90EIc4TulFJ/aH50LWgm4HTLmYCXADQxskdesCUE+8NYxeepZrhMrHO2tkw8YulMyZ2cTk0Tg9NcVVpvDcxQA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17gmnlrs9wt8zlyxp6rgr32a4lz2yntm5j5yp6x","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","ecologyyxp6rgr3",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxRIxbpYhQg+3mPXx8dA7XeUdY2McDL4xcp6Lo5yQ2Qx"},"signature":"DzjOlK5r3XEl2s3Pk2HVnWIMow2Oqlw4rP/zJxqoY5wDBXbwSstpD4SRFuG1VAER9xF3PyYiwmlKAgyhKUuv7g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17gmnlrs9wt8zlyxp6rgr32a4lz2yntm5j5yp6x","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["ecologyyxp6rgr3"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxRIxbpYhQg+3mPXx8dA7XeUdY2McDL4xcp6Lo5yQ2Qx"},"signature":"Ntp1WQmYLbjWZPa9G7QNYJ8ruzF5hoAbsjIp5SHYv+pzjUpgkL2oKfjld3hR4b3/ma54Was/YBzxNQz8wQDKaw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17gmnlrs9wt8zlyxp6rgr32a4lz2yntm5j5yp6x","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1340","ecologyyxp6rgr3","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxRIxbpYhQg+3mPXx8dA7XeUdY2McDL4xcp6Lo5yQ2Qx"},"signature":"IIW+MpXHRXlJH4kxFBmYPjyhMgjPYhccrxpDtg4FaEM2rezpxv9/fQ6qdR5+/Gz151FmhQ0UjjTw0/ii4qFEQQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17gmnlrs9wt8zlyxp6rgr32a4lz2yntm5j5yp6x","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1340","1","1","g17gmnlrs9wt8zlyxp6rgr32a4lz2yntm5j5yp6x"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxRIxbpYhQg+3mPXx8dA7XeUdY2McDL4xcp6Lo5yQ2Qx"},"signature":"Ar+Uz2hiI23y78LIuP5M6OPvvsWqNB8C4Wkz3lQJMV1k1EjKKPMuQ/FjOhfztJm0tbB/QWRxfynK6cTUIc0v0A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1xrldqsljlet6cym9c9dzsh8rd448y4g450r52d","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"wl/qSF3cjfLodJOMXCfLRwWqpDAxQh4rS9bvi2l3j5IKVCt1jg4to3NnwEBLa+SD5s8cLMukv3n5figL8e1j/w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xrldqsljlet6cym9c9dzsh8rd448y4g450r52d","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","capableym9c9dzs",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Awxat6O7qas1eDpCX/gzjYiaLgfSzhSkUGjo+VSEd4+w"},"signature":"+/dRJhCj2RbTF9bs3nIHrlVneFBuwhnoi1R3EWoiPNVnwNYaHzOZV/LHeXi4K/Xq1uMqod+TAp40PYiaEfhvKw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xrldqsljlet6cym9c9dzsh8rd448y4g450r52d","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["capableym9c9dzs"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Awxat6O7qas1eDpCX/gzjYiaLgfSzhSkUGjo+VSEd4+w"},"signature":"4cJ4uAC8Cd85xHjKTOYX9v7a7qKWy8Szd2ag0iSrVfp+pa0GB2crNW/uEu0+bxNgnnSMUYd/8d+lunmXiDgHdg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xrldqsljlet6cym9c9dzsh8rd448y4g450r52d","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1341","capableym9c9dzs","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Awxat6O7qas1eDpCX/gzjYiaLgfSzhSkUGjo+VSEd4+w"},"signature":"hxE4gtSWa7oNyl0tbJDKD5Vl2KiJoDrH+6dIwadW+gA9qs5kgZSyh5mIEBra/wEWPip1a3OoihW9VZ2iQ1E8aA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xrldqsljlet6cym9c9dzsh8rd448y4g450r52d","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1341","1","1","g1xrldqsljlet6cym9c9dzsh8rd448y4g450r52d"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Awxat6O7qas1eDpCX/gzjYiaLgfSzhSkUGjo+VSEd4+w"},"signature":"TQKvI1okn6CvXs43ohF7xuYHs8NKYJLb78kcV9ykYvkbKkoZk3WCvYoJH7Y9zHHaMkuRI+ppfWSxCiMU+kx47A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1j2ea4l3qrwsu6enk2e72hhfe3eat6t7kw2d5ur","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"e+MadDzGuuWczBnwvAU8TTPM8MVuchnvFvOHKQfp3rcujgr7qYskZe1p2XpU6S/yXDUXhEruxPVKAkOlESIR8g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j2ea4l3qrwsu6enk2e72hhfe3eat6t7kw2d5ur","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","exileenk2e72h",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au73skimILlWEeQODiYyoqiIqrJzcYrI5g3kW+XtDlzV"},"signature":"B3UltfTZSejIj0EPneC5en9zGHheyMh7NAzXbSSrJz1KNPTOdJvzSWYJCU6f1FO/7MqV4VrA0oa1xjnHlkogOg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j2ea4l3qrwsu6enk2e72hhfe3eat6t7kw2d5ur","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["exileenk2e72h"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au73skimILlWEeQODiYyoqiIqrJzcYrI5g3kW+XtDlzV"},"signature":"kuo8LSEcgOqZOYp4FZcu50PWK8q6o1X3K2Q0mdLjLZ98yhBoUEwFD1ADqWlCTxb8GwRgBRlcba5Qj3ojJkilcA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j2ea4l3qrwsu6enk2e72hhfe3eat6t7kw2d5ur","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1342","exileenk2e72h","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au73skimILlWEeQODiYyoqiIqrJzcYrI5g3kW+XtDlzV"},"signature":"/LjyAJKOmPEuZ9LKz4shfUphz8ZPkEZDHS4IbJWk+E87viIIbVDoyIknoe9qSB/5rN4dceXm8wx/Tg4gVTQdIA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j2ea4l3qrwsu6enk2e72hhfe3eat6t7kw2d5ur","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1342","1","1","g1j2ea4l3qrwsu6enk2e72hhfe3eat6t7kw2d5ur"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au73skimILlWEeQODiYyoqiIqrJzcYrI5g3kW+XtDlzV"},"signature":"RDC4cJ/4VJ2OTChD2uwgv1pV3AvV1Ixu3U2b1KJrNcNINiAbhk2CUvnf89FpJ6yqqjUuhwRBJMu5NyXabrjYQg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1a080ldpncjwffvl93swdxjj620v6deppe9jhq4","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Rw2a78g0Jd5CtXuty+nhtK1X2UqJiC/AK2vGS1ghAewbjGzRguHSM+sl77eiIxTxR/nPx/2b9obPJHND1Io+Jw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a080ldpncjwffvl93swdxjj620v6deppe9jhq4","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","poemvl93swdx",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnpisnvP+s1TQmQEr7AkUjFWx/sEZpfUvvwu5Z2zG4Sh"},"signature":"IS72ArqKmSudDXOgSnoHrUQYzIh5ZeN7sa+AHigWvRBggFgLowRbYQdfqNj2DikoN8tYyXAtc7H7rs/meYhCDw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a080ldpncjwffvl93swdxjj620v6deppe9jhq4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["poemvl93swdx"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnpisnvP+s1TQmQEr7AkUjFWx/sEZpfUvvwu5Z2zG4Sh"},"signature":"3cucxXI6Z5I/fgPhRgY7ec5hSRGriG/CJBwrQSdinAki3WtrwgzP+2orfBEeWG6Sfq4a9lN2MrGAv9YNsZZBbw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a080ldpncjwffvl93swdxjj620v6deppe9jhq4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1343","poemvl93swdx","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnpisnvP+s1TQmQEr7AkUjFWx/sEZpfUvvwu5Z2zG4Sh"},"signature":"hZR+CqujaD+TOMjj6bKtcWSlelZbTW3n18J0NNIcYAcr3FbTnd/viLDKSKMjlaZtbapmax/ML6l4IQmervQv2A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a080ldpncjwffvl93swdxjj620v6deppe9jhq4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1343","1","1","g1a080ldpncjwffvl93swdxjj620v6deppe9jhq4"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnpisnvP+s1TQmQEr7AkUjFWx/sEZpfUvvwu5Z2zG4Sh"},"signature":"VeweL2hwFdNHL3xxItK49bSuuWZS/1KWXzpa9q4a+URSAKvsnOvpcIA6qiQwsK22h6rR+93hLbF5/xvcRNnLMA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g155xf4k953dpzwmkjyh6pmgu9qc07mjgygezgnz","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"AO0q8gOC+o9ZDdkTA8JkygKaDgfmaggjxD9Ou/nTggkMVJNGhs6TvltttTavfJAu8/qyHGj/Lniu9608jWJvGA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g155xf4k953dpzwmkjyh6pmgu9qc07mjgygezgnz","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","justmkjyh6pm",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al+Pu3y8POaLBh+bRaMAZ/z8AXKKRcOJvQQ+ibKMRhlM"},"signature":"YAG32w6ZK0CQ68aZGs3/E2xbfxWMEdIhMAOrPCkQ674awXf27alIMp+BHSYkSOM8yg8smwUR5jicrEMaYtbvWA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g155xf4k953dpzwmkjyh6pmgu9qc07mjgygezgnz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["justmkjyh6pm"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al+Pu3y8POaLBh+bRaMAZ/z8AXKKRcOJvQQ+ibKMRhlM"},"signature":"oF1GbWWcWKSkfA0t1DHPGm5COn7h0Z6ZAZpz6HLtoZAp6Dc1DB4tHkwWLuRsYY/cp6K8lFMNC/F1vSgkBFPgtA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g155xf4k953dpzwmkjyh6pmgu9qc07mjgygezgnz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1344","justmkjyh6pm","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al+Pu3y8POaLBh+bRaMAZ/z8AXKKRcOJvQQ+ibKMRhlM"},"signature":"LFrn8rp8ce74ouX91rOM2abritvGKZIG6PHQdDbQNS5hKsgyZa1pL/oimY7t7qHFQZDuaYl+YumqaWlWfa04rw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g155xf4k953dpzwmkjyh6pmgu9qc07mjgygezgnz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1344","1","1","g155xf4k953dpzwmkjyh6pmgu9qc07mjgygezgnz"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al+Pu3y8POaLBh+bRaMAZ/z8AXKKRcOJvQQ+ibKMRhlM"},"signature":"Q42UteIN5DJ863bRkV/nPr9XWGdJnfKFgZfTi6deJt4Mf+tJnrUoS+96DP6bD75V2FSCa/uPxHr2EmQRnV0C+Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1suxlzw3p8lkqf3zqtan9p396rtjuzeqpw5w9la","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Ujf6+WTm+KtpfrCruSZa7emeNeAHHpU+rrAR8mBQjCA2z7JLzsQjWhtwy6C54wJtFo3MXmrfvRmhvzTJd0Cd/Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1suxlzw3p8lkqf3zqtan9p396rtjuzeqpw5w9la","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","spot3zqtan9p",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyYBvWNp+un5DlFhfhXUbxMenibev7fM/wDm/igqvTQ4"},"signature":"ZxKHhxPKm8X1tFCcYTNQ3NG4Y3Asevd+D/r31KXwSftoL3HkqVz9JRfkag/UPNU31AdMojQ4OomVBBVDiQNuqg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1suxlzw3p8lkqf3zqtan9p396rtjuzeqpw5w9la","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["spot3zqtan9p"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyYBvWNp+un5DlFhfhXUbxMenibev7fM/wDm/igqvTQ4"},"signature":"t1ypWgUw0qo/PuFvlHAXh61HivaH2rNDkKWatePC9MZnIjZ55WmIIELV+J9FA69BQr3G7ZGEKXgKLL7Nzt3t/A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1suxlzw3p8lkqf3zqtan9p396rtjuzeqpw5w9la","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1345","spot3zqtan9p","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyYBvWNp+un5DlFhfhXUbxMenibev7fM/wDm/igqvTQ4"},"signature":"5qZ9OaGvxK1ZemXwB1XmuErhKt4UQcY7Jur5p41uoHpDeC7735oqDUzo/4ocbDyqyZo9JuTVYZoV7HLph2YMcg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1suxlzw3p8lkqf3zqtan9p396rtjuzeqpw5w9la","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1345","1","1","g1suxlzw3p8lkqf3zqtan9p396rtjuzeqpw5w9la"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyYBvWNp+un5DlFhfhXUbxMenibev7fM/wDm/igqvTQ4"},"signature":"7kkNjMkSA3wLbFgkNhpxMg0/TfwUNsErLqrNP1784q1b92kYquJNoI2sezY3ybBDgAHFu4RrWvzlR/8ZQlrLPg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18rylnts40q4g5jpexy062606g9vtac4zdfr4h9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"kQqE9bx1khx4LPz2oneZWLI9dbh+FWNZUzBqCurxrbgKpYM4puWaLQ+fIT1UyXoqcvpfJAODr1JKCnmn4uv1jg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18rylnts40q4g5jpexy062606g9vtac4zdfr4h9","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","traveljpexy062",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4za3FuGZxXXrZgvOmkBRS5Oi9w4SKH9Y0OqVqmP8SOA"},"signature":"nL0vvtCnD0sEwJO1JvPQ8eoD3wHN44xT9lrALDGxQtxSjdekVwmE6OtdxvZ6AjtDvafBkC6W/GmHUcGvz9EwRg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18rylnts40q4g5jpexy062606g9vtac4zdfr4h9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["traveljpexy062"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4za3FuGZxXXrZgvOmkBRS5Oi9w4SKH9Y0OqVqmP8SOA"},"signature":"9CCuuI5qT6TmNZ82VKD9e77a3ZUgZ63dp8sTtLony91o5VEzYwIIIT6WvEA0k53InQ6twNULlzhWEv2EUf1bAA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18rylnts40q4g5jpexy062606g9vtac4zdfr4h9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1346","traveljpexy062","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4za3FuGZxXXrZgvOmkBRS5Oi9w4SKH9Y0OqVqmP8SOA"},"signature":"etwKsdJybBtXFTJefV06ZPdPbyVRljQbGoMwcqCCjc42L0Gi0HToTiid0l1YLLn4LQxhy3L1ECoNQbuRaU1YIw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18rylnts40q4g5jpexy062606g9vtac4zdfr4h9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1346","1","1","g18rylnts40q4g5jpexy062606g9vtac4zdfr4h9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4za3FuGZxXXrZgvOmkBRS5Oi9w4SKH9Y0OqVqmP8SOA"},"signature":"OUf2ZBO/heT8DLSU/OESAYhaa/QjwEfgf8TMEHF2Rf1iQHqccHrMafChUGurXm/1WxeyDu/xC7n+BlL0IILt1g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1cf9cezlnrjlc0dc4e7jcr2va97jhgzkgx0t6wd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"F8tSI4KL2rn1OBa9jB0zW70rgEl8fiI4cjSsOgCqf0IUYSAY3U4KFYFFaGJ2FJY/tM0/vgW48zRcXesxok11+w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cf9cezlnrjlc0dc4e7jcr2va97jhgzkgx0t6wd","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","zerodc4e7jcr",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0Pm2agMv9WzHOGqahsw25m3shyPfE/Yzd25JyW1aDhp"},"signature":"Y7LHaOTlP/Dspw7PyemOYs3RjQrgikwxNzExrb/qQYMmKjb3QCXecAfqgzxjEvMdx6E1KZoytaB+6p1qh4ziJg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cf9cezlnrjlc0dc4e7jcr2va97jhgzkgx0t6wd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["zerodc4e7jcr"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0Pm2agMv9WzHOGqahsw25m3shyPfE/Yzd25JyW1aDhp"},"signature":"1H8BM8O4+5p2NXJjTwRPkLyk3Qt88BXrRcpAmtIDvKpiP5WgjRWCQZEZpiTv7VolDa3Dsi+IoRKHG2ysHeMl9A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cf9cezlnrjlc0dc4e7jcr2va97jhgzkgx0t6wd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1347","zerodc4e7jcr","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0Pm2agMv9WzHOGqahsw25m3shyPfE/Yzd25JyW1aDhp"},"signature":"rxda99/c4BU6PuXyNd9YbR2LPC+ph+eAhxAXyTWOtE9d2YKXH/fN6Qghb/4eqexc0DMp9pQoEv6GYyZMG1bWlw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cf9cezlnrjlc0dc4e7jcr2va97jhgzkgx0t6wd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1347","1","1","g1cf9cezlnrjlc0dc4e7jcr2va97jhgzkgx0t6wd"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0Pm2agMv9WzHOGqahsw25m3shyPfE/Yzd25JyW1aDhp"},"signature":"wpnMyiL/ZWxTF8jpNt36Y/RAFW9w4arFt1mjKeSD0FQw4Jpedo6BWj6jhlm+sEvE1LaTn1Jtm48I+Ll51yJdXA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1l4ny6yv0gjklfnw5gkzwffsylzu0gt23w56htn","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"QtY8KtuoAOEjqGynB1w3F2NqFYk1OfZCwN/3M2XBSKIE2z1pr3lQVXlGNoKO3qoEs2uYTlx/hSz6q4eDAobSIw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1l4ny6yv0gjklfnw5gkzwffsylzu0gt23w56htn","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","scoutnw5gkzwf",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8CniCsjlP9VAKcmelB+3QtYKFojiqWa+nnMzIkhP3LU"},"signature":"yWDsp/WKd4tH87LWmP0WjVcg8GU1aRDwdaf0OCutk0JzQ+x7ITIDOrhWeJOGOrsfccO0FETlTLXm4+wORocY4Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1l4ny6yv0gjklfnw5gkzwffsylzu0gt23w56htn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["scoutnw5gkzwf"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8CniCsjlP9VAKcmelB+3QtYKFojiqWa+nnMzIkhP3LU"},"signature":"SOA2CC8M3Novj1BI9qQED9KgqiEYF6eL1z4l+7KlxHF+J/8hFL9Bg5mdDBs3YBGo/aEuBd+8h7tfnRO3gLOzXA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1l4ny6yv0gjklfnw5gkzwffsylzu0gt23w56htn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1348","scoutnw5gkzwf","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8CniCsjlP9VAKcmelB+3QtYKFojiqWa+nnMzIkhP3LU"},"signature":"JD47xgDKkWXXeEXfgKPgGlguaubkn2UmS9uNmQr6EZ8C1IF7b7DZDNTvYy1xxWJn24T5OXNClSgLZpos4zFQBg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1l4ny6yv0gjklfnw5gkzwffsylzu0gt23w56htn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1348","1","1","g1l4ny6yv0gjklfnw5gkzwffsylzu0gt23w56htn"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8CniCsjlP9VAKcmelB+3QtYKFojiqWa+nnMzIkhP3LU"},"signature":"NZZlj0G3MAdjfK++dWYBheRiHYokVrTndXnX2kfbqt5i2L6qQcS9AvIe4SykKfKxiNxoTc+4u99JZLMJFY3wGA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g159jd42tn9hqqj095s6mykt4cc5nqrlg4d7uyjx","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ASJ7llriQkVTZbGcJXInF2m7uIilvyrUfIyywKOioEcX81G8Dwchd3+6vXkp4bj35HPFgLOuCZ5yOkp8GQq39w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g159jd42tn9hqqj095s6mykt4cc5nqrlg4d7uyjx","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","museum095s6myk",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A455EA654ipEc4mVIdIF5DwAAbZA4zcvMfbzTUEsVzjr"},"signature":"FSnQTiqSF69RURvd9n/zoUY2epcVZhSnZ0XgvUiCXfRqvALS6gdBabtRv2dNY34TSWaGsslVnf/K3gCy3bKiig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g159jd42tn9hqqj095s6mykt4cc5nqrlg4d7uyjx","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["museum095s6myk"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A455EA654ipEc4mVIdIF5DwAAbZA4zcvMfbzTUEsVzjr"},"signature":"Mr3bm9ZXFN30lL9Eri9RzYxpSjFbj0wstjcTT+c6ggcZmipQHUqcmliqBMeO6ONy2hnkAUeO/Vj5EyQc5nEWEQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g159jd42tn9hqqj095s6mykt4cc5nqrlg4d7uyjx","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1349","museum095s6myk","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A455EA654ipEc4mVIdIF5DwAAbZA4zcvMfbzTUEsVzjr"},"signature":"lWEiT3DQvW+nRpCfHa58X0Xo323CkQeOHKjF0U9uotcZEEMFiyJTveO/jp13H352TGmOO9GukdpPwr8SdBojcg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g159jd42tn9hqqj095s6mykt4cc5nqrlg4d7uyjx","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1349","1","1","g159jd42tn9hqqj095s6mykt4cc5nqrlg4d7uyjx"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A455EA654ipEc4mVIdIF5DwAAbZA4zcvMfbzTUEsVzjr"},"signature":"mjwC3jQCTpi50LFe+hKpC8OBRI6+HQS2p46Nft3tyatkxSzCxbK0Px9Y0rdxuX9BtV34V2+NowwBBGxhDvYDKA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g149e2qyr3gpd56f75sgxa52235ywjfwpqu396pm","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"LZ6Bbr6lkjJg0SvIkmSm1j80IVv+JuY+Ojfe+dUPz3cTKJpoSkqXawutVdvHAkRECPwU55k3l42PnjNbFBujZw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g149e2qyr3gpd56f75sgxa52235ywjfwpqu396pm","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","cricketf75sgxa5",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5G/mymF70wEOXTjKvZnuxZZNAFaZ1F8yU+OP++hXnJI"},"signature":"3p70UXqV2PpY5Nnxl+SYo6AEvGwbOPOKuqY5RDI5WdkKAyzXltGSEzwYNbprfrm+6hfpw0gQ5/U7GvWym0OYIA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g149e2qyr3gpd56f75sgxa52235ywjfwpqu396pm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["cricketf75sgxa5"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5G/mymF70wEOXTjKvZnuxZZNAFaZ1F8yU+OP++hXnJI"},"signature":"b+dggJYhXVBL+gogL7+BfTQmwl1yi+SqL47/Tmpe43dgFMB7OB2wgwJl0u44PU2lQEpwQy/Hs+qFAf2888tV8g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g149e2qyr3gpd56f75sgxa52235ywjfwpqu396pm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1350","cricketf75sgxa5","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5G/mymF70wEOXTjKvZnuxZZNAFaZ1F8yU+OP++hXnJI"},"signature":"EoiVAYKbTcYE0DDct4vv7CFlHYJgTIpfjG8ObW/mJmxHfKR87uF5e/RivBpHlG+EtshSxZn5AmI1nZD07yJQgQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g149e2qyr3gpd56f75sgxa52235ywjfwpqu396pm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1350","1","1","g149e2qyr3gpd56f75sgxa52235ywjfwpqu396pm"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5G/mymF70wEOXTjKvZnuxZZNAFaZ1F8yU+OP++hXnJI"},"signature":"BjRWvYoRBtewTvmGcKoKaGGDKvb3AK7zQjSbjlyDqlhTdgge1i1wT4DNqvifGWM/7+PQsVeu3wcT3EQm4VjdUA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1my6lskes77maq0qnvaczg3da5sas2qn9eg0rre","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"TqRPmtADskRppiqRoDMXOWRLMPycB5Sp6e2jkNsH2OYRRf+uyQOrshmhuzQf0Hp7wG84k2QpZEcgEDV/bQfB8Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1my6lskes77maq0qnvaczg3da5sas2qn9eg0rre","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","caution0qnvaczg",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuC7yKnAyiWDF6PY4qX+d4/6XYxAwGjKuOmQfiLbzhNq"},"signature":"1qOVsVxHXm/Iigv3b/Sw5JZ3xzDlSTjyksl9pMsHnG1htcrMdgCNMiHiV77ZMORqn3B5Yq0buxW6IEuQItvTag=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1my6lskes77maq0qnvaczg3da5sas2qn9eg0rre","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["caution0qnvaczg"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuC7yKnAyiWDF6PY4qX+d4/6XYxAwGjKuOmQfiLbzhNq"},"signature":"m/4AmpfAplH1tm4AXoQEzr1Nw/NL0dkB1kxR3ZCyK0YaP85eQYMTcrx9C4q73bxCCE6lMxJavKTCtFxhWEjtOA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1my6lskes77maq0qnvaczg3da5sas2qn9eg0rre","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1351","caution0qnvaczg","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuC7yKnAyiWDF6PY4qX+d4/6XYxAwGjKuOmQfiLbzhNq"},"signature":"GqAc3kFDhnKdgH2Y+Hm6XOnCD+ya5vXbRUYYEZJlazYldmLDaA8/wf3U6K8PC3etDGM8nGgPzya2lmRh8O319w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1my6lskes77maq0qnvaczg3da5sas2qn9eg0rre","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1351","1","1","g1my6lskes77maq0qnvaczg3da5sas2qn9eg0rre"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuC7yKnAyiWDF6PY4qX+d4/6XYxAwGjKuOmQfiLbzhNq"},"signature":"Ik/Y0FKsoQXBCmPubqzUhjGFhyrC8XhMbaQVoATYiHJA4EBea2soUePjVN1IhPZHHfOxp4qP0+GZ5inKhXYBSw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g103kmgm67t840tjmqhe2pm0qu47rs8emj83ch7c","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"PZuORkTfUAwdg5hAAtyqvdm4GPXm2KKEut10qque/XEgpHuBvf1OIp4GasHSqdwAH2SLgVsny3MEn1vJPCa5KQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g103kmgm67t840tjmqhe2pm0qu47rs8emj83ch7c","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","offjmqhe2pm",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwD97wgPgL2DNvNBk/In2pmslCyJx/a5CTsG5pcQBkVI"},"signature":"UDtqkYH60ARNKNEcTkkmcLi/osq5RE2meAkXr1tJCGAt038SYE8RvLVRW2o49950yhU6fvOeQTafoaQGHghHYw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g103kmgm67t840tjmqhe2pm0qu47rs8emj83ch7c","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["offjmqhe2pm"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwD97wgPgL2DNvNBk/In2pmslCyJx/a5CTsG5pcQBkVI"},"signature":"zX9qIS5C61wde5nfqmdu8XoZSxwh9CU6VWHTQYPId/ATMmhPb2eoI1hvrI5+c9cFn2tY5u0D/Q79PyQYqz4ciQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g103kmgm67t840tjmqhe2pm0qu47rs8emj83ch7c","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1352","offjmqhe2pm","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwD97wgPgL2DNvNBk/In2pmslCyJx/a5CTsG5pcQBkVI"},"signature":"62Kg2iy3N7oAnBxrr3TkR4pPyjlmZ00Abp3O0IvLyPkqypHSvQ2Ze7lHz87zIrPkLcGf5/898DhdbOkcRvx2tw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g103kmgm67t840tjmqhe2pm0qu47rs8emj83ch7c","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1352","1","1","g103kmgm67t840tjmqhe2pm0qu47rs8emj83ch7c"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwD97wgPgL2DNvNBk/In2pmslCyJx/a5CTsG5pcQBkVI"},"signature":"0Y8nJBkDKVzaI5+pvtxY4iiKcI4+lPz+l3TlTGATpvV4gQjwoUTIoJfDgKyibTkLKlJJVtAx10vlB/elFqlTqg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1vv4azkx5qcdndzqu9tmyu678vac9xkujc2zsxd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"i3bl9S/bSx26Vz2lhZAmfa2unn47sJHFvHg/Viegws8bYCm1/uu+/iWBUQu1xq3mmRGfeh+oGKwpjQHMdE9pGw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vv4azkx5qcdndzqu9tmyu678vac9xkujc2zsxd","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","skinzqu9tmyu",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlaAAW9pfGiCul4UuegHF0ojyPGmYVHZjXzpQZWqhGB/"},"signature":"MGvvewdvGYWNdQIHNKY7ebmf1tO7Gv3cgwpgJ6kzIy9M3ibfwVMy01PSBeyJP3WAEidM2j54qimmLnS3rDTwXA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vv4azkx5qcdndzqu9tmyu678vac9xkujc2zsxd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["skinzqu9tmyu"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlaAAW9pfGiCul4UuegHF0ojyPGmYVHZjXzpQZWqhGB/"},"signature":"4ItS1bjHcft41Za5Z1LUIWOwkuCyN77uenNRyS3tu28JrMeM0MTGjwV8eBCEymVSF3BYn2yXMz/fedQO1vagqQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vv4azkx5qcdndzqu9tmyu678vac9xkujc2zsxd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1353","skinzqu9tmyu","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlaAAW9pfGiCul4UuegHF0ojyPGmYVHZjXzpQZWqhGB/"},"signature":"F6frcKxo+VO9J15sJ3u2YTaqrYYdN5zGzjrCYIyp/vBnjDZd6MKaGLHD3FQXtDfGaFw7uKI9cPp5sQkDcT7rNg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vv4azkx5qcdndzqu9tmyu678vac9xkujc2zsxd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1353","1","1","g1vv4azkx5qcdndzqu9tmyu678vac9xkujc2zsxd"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlaAAW9pfGiCul4UuegHF0ojyPGmYVHZjXzpQZWqhGB/"},"signature":"W7n6R9OHMNxr/IcW3zcmPEV69tAkenua7W4j66eykVA2hbKjZK6fL/o+iywKsFrDiA6TLBZdlx9u4CoiBBQYAQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1xu7xaet7arlfwyrzs8wxv3u63hkamj56c50vjw","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"A1JRejNYs/0N9tYPzZjdNq4DRN2zdZccxMu1IXdS8YgBWjNNIuQhSW3XAo0W69vvFlQ8lyn/o73/qy59HS7YaA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xu7xaet7arlfwyrzs8wxv3u63hkamj56c50vjw","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","writeyrzs8wxv",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0qAYwR8CH0HQiAzIGSkt4Tyovn4e5FaSVjLkp/Cubfs"},"signature":"J0b5B+tB4hz7DtT8vgP4ID+4WpDbAV8iYkdhgCRhBFBA5ohVtDmMBDUOfsCbDHkeOVq1A+vH3WVwgxYPd71i1g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xu7xaet7arlfwyrzs8wxv3u63hkamj56c50vjw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["writeyrzs8wxv"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0qAYwR8CH0HQiAzIGSkt4Tyovn4e5FaSVjLkp/Cubfs"},"signature":"Wjl/+HLB8UZv7vWAmtnLps166DPhnwTwsFNIWbwI4n0cMbcfki8vubLe2GmP+Szb1iRMQwc3Rjf1Rj5j5+Gc5Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xu7xaet7arlfwyrzs8wxv3u63hkamj56c50vjw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1354","writeyrzs8wxv","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0qAYwR8CH0HQiAzIGSkt4Tyovn4e5FaSVjLkp/Cubfs"},"signature":"6lwn/qGpmL1O897pcUk6D15PqneNGPh+1kKwNr5x69ECiEmvhtCAPpoXFZeDjM14ZgnuZvK01FoVhQwR+dizfQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xu7xaet7arlfwyrzs8wxv3u63hkamj56c50vjw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1354","1","1","g1xu7xaet7arlfwyrzs8wxv3u63hkamj56c50vjw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0qAYwR8CH0HQiAzIGSkt4Tyovn4e5FaSVjLkp/Cubfs"},"signature":"qV5C2Y/11EmQADaMbplP7dOwUOuw6vVFEfWdolkd3Hc6Xs0XQlMeZF7dW7kK84TnAmksoFleLWy+gr4MuRC/sQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12qvvrz45xluke5ufq9elpaq8ht3jgsr6lup2ey","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ML3MdKrdIwNDWPtLUSG+URyhAvHNTx4n3Vr4+ZlquKcIRLbSOQG78FwonNgqcfwqtFt68ooOy9M8NWr921UgZQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12qvvrz45xluke5ufq9elpaq8ht3jgsr6lup2ey","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","coast5ufq9elp",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9KkWnSGJ9nVexJrLyuNtzyAyFWdTZIEdJlEa5yKgo27"},"signature":"6aFVVQAvoGMIbsXb0Njlp9a004kiGXGLiLVpGJ2FAa4SN1mTSxziBN9sKTg9vQ4iNipm2vs4lKg4+cBwqnvXRw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12qvvrz45xluke5ufq9elpaq8ht3jgsr6lup2ey","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["coast5ufq9elp"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9KkWnSGJ9nVexJrLyuNtzyAyFWdTZIEdJlEa5yKgo27"},"signature":"RnFCh4LdUw2MLHWhJYuas/ir7W7pvYO4p22e5wBuTus7JGq+MYXAS6EeQ3FPtFXo3/vS90T2nUyYBfDAdTR1ew=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12qvvrz45xluke5ufq9elpaq8ht3jgsr6lup2ey","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1355","coast5ufq9elp","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9KkWnSGJ9nVexJrLyuNtzyAyFWdTZIEdJlEa5yKgo27"},"signature":"wbRaUXDvkh1eEG9RRMPByupmsz4Y8pQq0b4GDNer+xlG0ofOq2uzEKv1fNeJN4oMKTAEFUWp8lcsygELiQQW+A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12qvvrz45xluke5ufq9elpaq8ht3jgsr6lup2ey","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1355","1","1","g12qvvrz45xluke5ufq9elpaq8ht3jgsr6lup2ey"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9KkWnSGJ9nVexJrLyuNtzyAyFWdTZIEdJlEa5yKgo27"},"signature":"3hA/Ci2sWl4xlWNNMPr8GBUQiYGCQM052jyJ7H9ataQgthjw2HWBmVo4Q3XZHYGdA6Rl29EbbC8CJvFeJgkQHg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g19qy6eeuft75ce734z9wjedu4env2uzjmu0ruuu","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"XQpZ9LEsG/fpKfax3HUhaMtla+/SYlI9xj4HsZ7iCux2CEMiNXT441aWNIr72Jy5ikL0Is8qOViEapEcp7kfkg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19qy6eeuft75ce734z9wjedu4env2uzjmu0ruuu","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","scan734z9wje",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq/c4r3unU/1OE1yB6oAE4OIrgrIslGB3gQTAHhg2RcE"},"signature":"2FDvb94Bca6Q1brbYlfMk62IOapk8anKtNu67fwkeNdfl9AOO6KaVjQ+zqrzORvc4B5i2gzpUNokduj7hXlTyw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19qy6eeuft75ce734z9wjedu4env2uzjmu0ruuu","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["scan734z9wje"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq/c4r3unU/1OE1yB6oAE4OIrgrIslGB3gQTAHhg2RcE"},"signature":"lxfF+92KzD3FY3HL4VTg2cqW69kjtWlxU+QNoRwOKGNPRgqkNlOR7Uoze0FLRovNsT9Bz0OSNLOvo+HVoJpLog=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19qy6eeuft75ce734z9wjedu4env2uzjmu0ruuu","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1356","scan734z9wje","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq/c4r3unU/1OE1yB6oAE4OIrgrIslGB3gQTAHhg2RcE"},"signature":"sHjtl/HSYdtXHf+9tgkcynprJ2w7dkTsV4ekrUzSCbE2bYj38/9LPFfn/Xe6dVhm1fDMlz59u4K1FB/lnX6DYA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19qy6eeuft75ce734z9wjedu4env2uzjmu0ruuu","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1356","1","1","g19qy6eeuft75ce734z9wjedu4env2uzjmu0ruuu"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq/c4r3unU/1OE1yB6oAE4OIrgrIslGB3gQTAHhg2RcE"},"signature":"3fcPtMbu8pL/RNtq1bt4qUNnN2Ix/bPdY36R2+513fJGChOPnAZJL2BG0jpyk0DitCtflEzzBiW8yFV8yxm5DA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g16yl7lp5574pc66txwz30a3wd24msl3ndwlc6eu","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ykLDbe9enUqK2FiQsfps5ldykFRk5EXGslqpjgaQu+p1M7StY19wpuYKZsWdvosgh+XwO0HTwuBqEJdsM81axQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16yl7lp5574pc66txwz30a3wd24msl3ndwlc6eu","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","such6txwz30a",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4vaNuvc1tiCx5D4RFuVnNArm4onLHtgsss95wn5Qvcb"},"signature":"pRKHRkPgPI4OjEy8FvDyxqHuQwOvtqiKYl7UCvuEZ7ttGealBuJIIbZyVj6o8mEdRmt7IuU5IlzmYWSwE9p7wA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16yl7lp5574pc66txwz30a3wd24msl3ndwlc6eu","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["such6txwz30a"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4vaNuvc1tiCx5D4RFuVnNArm4onLHtgsss95wn5Qvcb"},"signature":"jOUv2U54aB1mtmGmhn+4J7+vL56hAikrrtvBx8CiJhNMvLpxF7rScma8Ww0Q+scPAw6MVuhLpBoOFcdTI5K1Iw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16yl7lp5574pc66txwz30a3wd24msl3ndwlc6eu","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1357","such6txwz30a","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4vaNuvc1tiCx5D4RFuVnNArm4onLHtgsss95wn5Qvcb"},"signature":"jXRheni6XGDBqSUU+xMV2h3HlW6721MUB/m0jhYPSPFiCuY49rpAPn1DXopk6lCvecKosgLx+N5WA7ZHQIkg6A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16yl7lp5574pc66txwz30a3wd24msl3ndwlc6eu","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1357","1","1","g16yl7lp5574pc66txwz30a3wd24msl3ndwlc6eu"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4vaNuvc1tiCx5D4RFuVnNArm4onLHtgsss95wn5Qvcb"},"signature":"4MqgX7Rjn0I/7RnrkDsp5vHaCeTMUU13O5z2hLC6LZoN4e/2O2p0dVYPMGtMrRY2dbota5BK+lQ2lQ12Qpob0g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1gg23unnnyms2lgy6utnje0pfy5v5lrvycv4ecp","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Ugl/+lFqkLh25Wu/5vcxUD2ep11jzmp6ETKgJOhRgRFgmsZqVbRfzMaHXFI/PLUJezM9NG0mrlwwpwXJ1l4rZA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gg23unnnyms2lgy6utnje0pfy5v5lrvycv4ecp","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","runwaygy6utnje",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Av68Ohx2aLeVUQ7JgWYHNC4G5eqaBKga52jKI1FdE75+"},"signature":"rvJbncyM8/NO6lnclW+2i4jBYQ8eG7hZtbeNGsTbddpU0rh58w9S4h3iyukbjxr/QFCgJkVEP295D0Poha/4kQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gg23unnnyms2lgy6utnje0pfy5v5lrvycv4ecp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["runwaygy6utnje"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Av68Ohx2aLeVUQ7JgWYHNC4G5eqaBKga52jKI1FdE75+"},"signature":"EWim9eygpG0JC+1O+vtCsLdUjLr2khowKt8hRiUdMqRWjABt3ry6Goi6Q8ucAJk7jA4K9RfdfSAYzqUkWkH1GQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gg23unnnyms2lgy6utnje0pfy5v5lrvycv4ecp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1358","runwaygy6utnje","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Av68Ohx2aLeVUQ7JgWYHNC4G5eqaBKga52jKI1FdE75+"},"signature":"fks18UW1WJvzv1/qY+kat4yq9N5pQAn38kHOjm4SgTNPNNGhu0kXy6FvwqLRFy4UX3R1waRYojU2UDdieaNG1Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gg23unnnyms2lgy6utnje0pfy5v5lrvycv4ecp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1358","1","1","g1gg23unnnyms2lgy6utnje0pfy5v5lrvycv4ecp"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Av68Ohx2aLeVUQ7JgWYHNC4G5eqaBKga52jKI1FdE75+"},"signature":"pl/BbawRDK4t1Qk3FlZAP5H6emphx+GJYkS6HEWb7v8zZHR6+pYhXlpRfpOWfT/Kd8PNTbn8e7HbmhtxJzdjRA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"12000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArADVPfUBrZVmlqmZWPWucRTe9gkJ9wJFyTszJoU5Ebi"},"signature":"o+hS2Pcwb+PnS6mdDz2LnJtXo0oXRx3TwLDJz1K4RPhWsQtobTynkxdi8NkGGWgnm+9tu2Q08eSZxAzNPn1qJw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1msunflj7ljm5wvznc4w9lghe8z9q0js2xah4yp","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"he/1y3n/g90WIczn4w4OpQhnSkNVVMLgH7tE41zVqyVHvzfwMwEhKDorIcA0itFJF8iw0wTNLgs0DgnfyoERiw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","2"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"Q7Rr1gtPNo3wJSgzodyfpsRTOtd52VdoR7oc99Gy8FgOCEHAUeBa6aysfd7Dkxf68XWjn7wD7WIV2vWd4TawDA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1msunflj7ljm5wvznc4w9lghe8z9q0js2xah4yp","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","visitvznc4w9l",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7B+Z8Picfc0Ql2RQZoQfo/XRg9r/rNNBU3f4cg0NSBz"},"signature":"3rxj+rk+LjT3UWY4h68QaSBdpQ/n4bNfSj9kHEgx9S8wyKBhDG9+oYETsvZ/cZ/VAcZBfJm71ErQVEE5xEfwqg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1msunflj7ljm5wvznc4w9lghe8z9q0js2xah4yp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["visitvznc4w9l"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7B+Z8Picfc0Ql2RQZoQfo/XRg9r/rNNBU3f4cg0NSBz"},"signature":"axs3tDysr6xvCoJdWtS+RZur27ZSzeqL7axp7Wx0pJ8fZ+vjOgkrgGqpYX0+wd8SGmaQ0QZ5BJCCFnkB4DxlHw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1msunflj7ljm5wvznc4w9lghe8z9q0js2xah4yp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1359","visitvznc4w9l","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7B+Z8Picfc0Ql2RQZoQfo/XRg9r/rNNBU3f4cg0NSBz"},"signature":"RQRSRe5I+T2Y85v88HvZKlq7XpB97sEc0YNl0N9EYM1/B1BIdbwoD8rp/u60cd9BoWmHcAPn7meKc1zKMR6ijw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1msunflj7ljm5wvznc4w9lghe8z9q0js2xah4yp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1359","1","1","g1msunflj7ljm5wvznc4w9lghe8z9q0js2xah4yp"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7B+Z8Picfc0Ql2RQZoQfo/XRg9r/rNNBU3f4cg0NSBz"},"signature":"Ipgs9JMj1P3cPhXeIcQYvRFnyji9xhLIaTP6PhlK3lp6ilipkYiTSfwGmsC810hZYr6UWYLA5WJqf7tHv+u9wg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1zntgluqmd8npxcfgdfkt3c7d0kt5v2vmrpf66u","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"simoYlcIlkR2ZusBxE5Lhn1zd+Z9LIgbOE2xCH0ZQxQ7JXyvUSlUnb/UCvxyPSPHt2D6dooagfwIWwIIUuQ5Nw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zntgluqmd8npxcfgdfkt3c7d0kt5v2vmrpf66u","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","suspectcfgdfkt3",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0kWVus36uWfHn+0fho2U087oTz024KOiy3qZVBmlQbF"},"signature":"xVpgVi9s5XOxrF7q2+99OU5pM25dbhB5e6UDsBh0Dwwg/u/PS8GCiZMruU5NmodfsjY4P8UAf50XtRegf8F2LA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zntgluqmd8npxcfgdfkt3c7d0kt5v2vmrpf66u","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["suspectcfgdfkt3"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0kWVus36uWfHn+0fho2U087oTz024KOiy3qZVBmlQbF"},"signature":"sb3+3X8Go7DmDmtbtXcuswQjrObtpKqmtBOab1BfuIVJYf1a64jV7r8r2kaW3NDnRjh3QCgTp1kmf5auSKgg0g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zntgluqmd8npxcfgdfkt3c7d0kt5v2vmrpf66u","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1360","suspectcfgdfkt3","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0kWVus36uWfHn+0fho2U087oTz024KOiy3qZVBmlQbF"},"signature":"LM9DqN6+IdhHMsqXWK0Kvrn+0mw9IjnOd4vBkX9QZtVeLlxrTdBl2XLTU8AWtqc3+WG5zxP+IVgs4I41V8OsPA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zntgluqmd8npxcfgdfkt3c7d0kt5v2vmrpf66u","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1360","1","1","g1zntgluqmd8npxcfgdfkt3c7d0kt5v2vmrpf66u"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0kWVus36uWfHn+0fho2U087oTz024KOiy3qZVBmlQbF"},"signature":"43/ualYYM3NWOO8doZs5gBB2fdtHdCp/b2FDbgCZeKxG/TqGUUgI9wFs/hbnDHt4khcSitIJBDEcw25xhFvlGQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1tfn3wk223raqlp2u7yzke2m0ygslyytcefu5cf","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"M3vsHi5+SbCwfjst4ZKccpJqy6kDVZ6TGcQgVaIdY4FCIrQP27h4K3jHAVJgiU45mcOiB3CnzHZt0wOhtgruLw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tfn3wk223raqlp2u7yzke2m0ygslyytcefu5cf","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","supremep2u7yzke",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7esdqoL/gfRP5rvydtXJZpsHWxEftIVFwNjKHG1+QiY"},"signature":"q7vbixPuS0a5dCwBYSmYaOHr+FyjusoTARSis7ZAuTcUpxbw/ndR9KgB8icL4cIlgpT9zuvdzVDgRsobnWJb1g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tfn3wk223raqlp2u7yzke2m0ygslyytcefu5cf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["supremep2u7yzke"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7esdqoL/gfRP5rvydtXJZpsHWxEftIVFwNjKHG1+QiY"},"signature":"ohFd3TAy9lxUI8NEcPrxT44uu6o4CeVOobjn/FJbJP1heJ3p3EJQlViVciyR3tbObk9jd4XYF3HvRi3FaaLX2g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tfn3wk223raqlp2u7yzke2m0ygslyytcefu5cf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1361","supremep2u7yzke","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7esdqoL/gfRP5rvydtXJZpsHWxEftIVFwNjKHG1+QiY"},"signature":"1bh1T7k3gNRTJPKFkKcgsfcpHsFpHONWV3AmBGEK91tnYnckDe5pgxFmGXDEFB/d5G6qKQF7obZTNQT2ugRDSg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tfn3wk223raqlp2u7yzke2m0ygslyytcefu5cf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1361","1","1","g1tfn3wk223raqlp2u7yzke2m0ygslyytcefu5cf"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7esdqoL/gfRP5rvydtXJZpsHWxEftIVFwNjKHG1+QiY"},"signature":"LIE3gGAAHQAgVD5lyGBCKBKh/AsQAvNAnl1v2KPOXIF0cspVbnwPw8Sitee2iZhrZhnbKhe4HPYHeDLStH3fXw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1064cq9xawpqfzmwqwpfnlkkq8htzdhlzj9czux","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"w5CjmWeU6s7m6KZq5DGJDKKvhzHxCha3LJJx/U+uI5wOlnxxQTrFkRqA8cKX0HrbVL9hfT9pAfutA5FeKsDbmA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1064cq9xawpqfzmwqwpfnlkkq8htzdhlzj9czux","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","drymwqwpfnl",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6Dz2xH//Uz8MAgkij03FJzxrq0eqZTbWw2zNQMEXtiS"},"signature":"E55I826+dKtbtcFSHYetXzdnP11Yv48kMaKw1RQ7wetgnPsf6qoWFFGP5Wf/a4dPwVasNxGhknncqEaH/eiXfw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1064cq9xawpqfzmwqwpfnlkkq8htzdhlzj9czux","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["drymwqwpfnl"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6Dz2xH//Uz8MAgkij03FJzxrq0eqZTbWw2zNQMEXtiS"},"signature":"esoIj6KdYtgk0r8a+jzODdNnZunLNi0XNEOPFWjKrfQbx547xAJm05JT65gl2I41W86y8kt4km9KuAU9FlrmJA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1064cq9xawpqfzmwqwpfnlkkq8htzdhlzj9czux","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1362","drymwqwpfnl","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6Dz2xH//Uz8MAgkij03FJzxrq0eqZTbWw2zNQMEXtiS"},"signature":"LItPuRcbXvCZFmMUFztZhR4Zqs/uSQwRhfhTm/uQxNExJo6+1+UWvW2zi+foY6dNzS0498c07A0ht8L4CzepVg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1064cq9xawpqfzmwqwpfnlkkq8htzdhlzj9czux","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1362","1","1","g1064cq9xawpqfzmwqwpfnlkkq8htzdhlzj9czux"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6Dz2xH//Uz8MAgkij03FJzxrq0eqZTbWw2zNQMEXtiS"},"signature":"7BvVDN3gvvFhfzAPq2O5Gxui9qah8KfUEJ4J+3QOzr0XraiWATR0NYCueYnQwo311gClctyLh4iKPSJ9nnli7w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g13p8dnz9363q8m5tnhlxpsvc4vkeafaer07hz4l","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"29nXvmjglDtt0VK3smbZfulmJm6H5m0aIG9+Npcx5rh/pno8fHn4gxz6P3KrAxJdm3rlFbk++YAm6ADlrWs1Eg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13p8dnz9363q8m5tnhlxpsvc4vkeafaer07hz4l","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","claw5tnhlxps",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgfdtYQBtEvnw4moOaad0orfjJDvuT1E4f7mOHY6Q9to"},"signature":"Do/243oQgMonGIEBoeZAFroaL6ug/aj3p3tDQI5WQ2gb8sLL6VocyUG/Q2UzcO8wvQaxHi2ruz+tE4Maxg5cdQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13p8dnz9363q8m5tnhlxpsvc4vkeafaer07hz4l","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["claw5tnhlxps"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgfdtYQBtEvnw4moOaad0orfjJDvuT1E4f7mOHY6Q9to"},"signature":"ZJvrmO/USNc7OwcKH3z3NyKa7I+BjaPVCoQ0mkaaRhpnMb7g5sZ9SrPQLD3BqgYwMfh8CvSl5Nx3yYlm5R0cfg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13p8dnz9363q8m5tnhlxpsvc4vkeafaer07hz4l","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1363","claw5tnhlxps","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgfdtYQBtEvnw4moOaad0orfjJDvuT1E4f7mOHY6Q9to"},"signature":"AfM9u3wYdJ2PFz3jzVY1fqwnMuM5GqtWLLvRbYHmG88B2Y17zOC67dsh4HKDZjSwSq/p0u4TIXwRBLAV7vcynw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13p8dnz9363q8m5tnhlxpsvc4vkeafaer07hz4l","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1363","1","1","g13p8dnz9363q8m5tnhlxpsvc4vkeafaer07hz4l"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgfdtYQBtEvnw4moOaad0orfjJDvuT1E4f7mOHY6Q9to"},"signature":"EtNxgEfaZwoHzwPcsoWUy6chGe5TT9A8DjBgK0UO1B4dh8szvyC5j36xWdkja5wtNDI+QiZhtxliyo0cMj2kuA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g16687h7uv5eugze949eemawcqymkr4nxacnxp57","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"5MvznTtR7TPMyQb6lXfBB6Zg+7gwrXH3/sQMkOO6z7RpNC6Y9t3Io6KvCliMODCU7lOwcUqXyjuzz4owWO/rEw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16687h7uv5eugze949eemawcqymkr4nxacnxp57","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","clicke949eema",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiAxQtp9s80tISxlmKr6KWWf3BzsNtwph62+Fjm9sbQC"},"signature":"sodlepQpPtesBXNmX3yuesl5nIEC1gNldhWyuBUJ1U9hpYNvFOaz2MS7HbVKg6rcor67Yg25M09DW+fXXq4yqA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16687h7uv5eugze949eemawcqymkr4nxacnxp57","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["clicke949eema"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiAxQtp9s80tISxlmKr6KWWf3BzsNtwph62+Fjm9sbQC"},"signature":"O15semwndDcekMBpshkwhYbXh8ko4ulIkgWgaNqvRZxYdFN4rBAh86xllT+G0B3/fPuyeuIB4H3j6xtJqRRsVw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16687h7uv5eugze949eemawcqymkr4nxacnxp57","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1364","clicke949eema","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiAxQtp9s80tISxlmKr6KWWf3BzsNtwph62+Fjm9sbQC"},"signature":"Huk+j5ZWn8HQxn/byohp5L6JgGgDLLE9K0SJh6n/yfEV5VNSnjS8KAsbuDGrfP5rcT1dhIozv81jZBMbYoO8ZQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16687h7uv5eugze949eemawcqymkr4nxacnxp57","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1364","1","1","g16687h7uv5eugze949eemawcqymkr4nxacnxp57"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiAxQtp9s80tISxlmKr6KWWf3BzsNtwph62+Fjm9sbQC"},"signature":"r2h1u1DOg98g3c6j23nEWvX685WIdQvGA+IUvSWphgtqmFvDRHElgkUU6lUYb3Mp3LpUSP60pK17Vo6HDLQbyA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g197n3e0n74ejjjkzvw7q4250xhxrsmv8dgnxfej","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"jaDNCQcbcDftmWMIkZ4lgEYqEzAsS7tjYYkeDf8alRkp2r5fMCsu50SYaervW/43nsnKNYBzaI1fKQ3P+lBtYA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g197n3e0n74ejjjkzvw7q4250xhxrsmv8dgnxfej","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","sheriffkzvw7q42",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkFq0VjUCRufHvpM/36mXp4rZe5nhbrhDUsjmxjqK7QT"},"signature":"XIpCcNauFrGVqB3TAfIz1m6pBX6zjL/wzMOibeGiFmwg9RYUznqXS8Ca55aT/y36eY/+I3o2Z/5U+9ATTGb6Dw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g197n3e0n74ejjjkzvw7q4250xhxrsmv8dgnxfej","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["sheriffkzvw7q42"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkFq0VjUCRufHvpM/36mXp4rZe5nhbrhDUsjmxjqK7QT"},"signature":"4qtd8LkVh/26CT3W6yRvAf+CtrQ4gLzJtH4vr1u/4xF8x/Oz0gEMeiVRHineaL/WxXlf2WrDqZbniz9hXQOP1g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g197n3e0n74ejjjkzvw7q4250xhxrsmv8dgnxfej","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1365","sheriffkzvw7q42","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkFq0VjUCRufHvpM/36mXp4rZe5nhbrhDUsjmxjqK7QT"},"signature":"TwY8sLW0fqZO9AtiS2P3SIhsociNDSQAHI0cBjAwYdxccx/Ulg+l3095PnjyAaFsji3CrHZJPYmaMroVyT474w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g197n3e0n74ejjjkzvw7q4250xhxrsmv8dgnxfej","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1365","1","1","g197n3e0n74ejjjkzvw7q4250xhxrsmv8dgnxfej"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkFq0VjUCRufHvpM/36mXp4rZe5nhbrhDUsjmxjqK7QT"},"signature":"7EsB8A/XsoRtkoKYmrwUcIXs1JTJQZxBeOORxcHAyNF1ZX9tv3GD+46w5SvmXDvcRJuWgaZBLFnM7JoN8dGw2Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g14nh85uhxvgu786dvftcdvdzv8u7v5uajwem9j9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"t2uSvcR7jniJ+HP4XYINiqq3YyWAWHOa6H16EasFtPQGs4VzPqmyF84aALhMBomcFBCM2TOLSXIYHdDjkQzulQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14nh85uhxvgu786dvftcdvdzv8u7v5uajwem9j9","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","then6dvftcdv",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApBt63fERJUoWfLvhY4JIFlKZRhns1DT+bF9dFLK3Itz"},"signature":"sai7o5OH3LpcCHTXqsAxtbgVWrGD005JwPyn7uVvnHY9CAm+4EUwX4n0AwknRQLiT7kkyop3MG71v4ybxnOhmw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14nh85uhxvgu786dvftcdvdzv8u7v5uajwem9j9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["then6dvftcdv"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApBt63fERJUoWfLvhY4JIFlKZRhns1DT+bF9dFLK3Itz"},"signature":"kX3QMDzoOWukL5Wt8+LO1J96YLxF9ylL+STYRRNysYkjTKnFqsExVi5+cDfauEE8kTEeD4CAoLZVVjoLDwgSSQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14nh85uhxvgu786dvftcdvdzv8u7v5uajwem9j9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1366","then6dvftcdv","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApBt63fERJUoWfLvhY4JIFlKZRhns1DT+bF9dFLK3Itz"},"signature":"BcQ6ZUNSXbP2CCT+hBQpY9xqvw0lZ8nJpVgIGKMmKqclxuCFf9Pm3rV5rccukCVQj8T4pSvRQ+ul171GQWosnw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14nh85uhxvgu786dvftcdvdzv8u7v5uajwem9j9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1366","1","1","g14nh85uhxvgu786dvftcdvdzv8u7v5uajwem9j9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApBt63fERJUoWfLvhY4JIFlKZRhns1DT+bF9dFLK3Itz"},"signature":"wNuvJgO9wMqJ+zBe6c0G83Hi37NguqHnqjJ8RRAxFBIAPZ7zS05WCm1wCCt8AJ41hZF5C8XHZsfFMHUNlzyy7w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1khq5uedysddvc5x76s30n2jdtmhux2hk3kfdec","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"QgHsIXKVrREkqTE9jJe7H/PZFmRb3Z7/mIHWy4EIVgVsGAs96KNKm3vq5JHj3DWq5xEKm8UCRYG1mcmGQx/TAQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1khq5uedysddvc5x76s30n2jdtmhux2hk3kfdec","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","toast5x76s30n",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5sjlTEJtlJS/g/bVN8V1eGD1YuJu7KuKULSoSX3km6d"},"signature":"P4ueP2Tgnyf6i20s2lWyASbuGBA9/wrH2x+SxHWSElJ4MeUdlwU3vqJ7HGlN8NesASZzzJdq1XX6bGg4yVwU5A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1khq5uedysddvc5x76s30n2jdtmhux2hk3kfdec","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["toast5x76s30n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5sjlTEJtlJS/g/bVN8V1eGD1YuJu7KuKULSoSX3km6d"},"signature":"9Xoth5f0qWK56n+QktVKMJLPmEXiN6oujl2QL/49xuo7p24ZkriIER9bagj/sCWDDhRCXxEZgP1Cq0+NXVxJBA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1khq5uedysddvc5x76s30n2jdtmhux2hk3kfdec","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1367","toast5x76s30n","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5sjlTEJtlJS/g/bVN8V1eGD1YuJu7KuKULSoSX3km6d"},"signature":"5gfiaqFJ6ykYYck5tjKjv32/iFNinchQaBVCrWHHykA3YXkqRn+i/Uhycl/3qilqVdR7zxg0/LiEzGd0X59Zng=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1khq5uedysddvc5x76s30n2jdtmhux2hk3kfdec","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1367","1","1","g1khq5uedysddvc5x76s30n2jdtmhux2hk3kfdec"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5sjlTEJtlJS/g/bVN8V1eGD1YuJu7KuKULSoSX3km6d"},"signature":"RrLxRA1fKJc7/zI9kaPbi7p8qjZPz2M3gJBQFCVl1lUAhLnXI1E2lNuBdRSLAXTG0hvnzJzqLTQGO0fbWcARsQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12ach8wklgptqwnvsqxpffntg2k9hwd3sv69wrh","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"kC1sN0pB5L6bpw2sNSra57uGLz7COrequ6CDRAESyDVfo2PYfGxU4MCuL92WwTcij1K8fhKKzEysD6Vni7XI2w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12ach8wklgptqwnvsqxpffntg2k9hwd3sv69wrh","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","crimenvsqxpff",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApLNM+LvFwKyrmvzdgtov/goPGy/XFutmzw9Rlyv1vHT"},"signature":"vQrIOSEwkFs6aCTOmXKIFSRHl2qWn/jRPV/IRPGY1wpw5QA5dM8vK5Nq+tzklJq2/Ab1TEl0dOAqQ2OAQfeMeQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12ach8wklgptqwnvsqxpffntg2k9hwd3sv69wrh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["crimenvsqxpff"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApLNM+LvFwKyrmvzdgtov/goPGy/XFutmzw9Rlyv1vHT"},"signature":"N0Avi8E6hyCSATGkw064Y0uEk6Oy4Ym75QOU2vYpJ45CV3rrby3YTDWkDs2ORW534qudRbp+nN/O1ptyZyPvSg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12ach8wklgptqwnvsqxpffntg2k9hwd3sv69wrh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1368","crimenvsqxpff","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApLNM+LvFwKyrmvzdgtov/goPGy/XFutmzw9Rlyv1vHT"},"signature":"SjkOo70qENjOWz8pT7d1uTDsczimd0AsZ8+OybEjQopKFW/l8Z23KS1R4KAQDUHS+0TP/ckZcMT/tuosX3tjFg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12ach8wklgptqwnvsqxpffntg2k9hwd3sv69wrh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1368","1","1","g12ach8wklgptqwnvsqxpffntg2k9hwd3sv69wrh"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApLNM+LvFwKyrmvzdgtov/goPGy/XFutmzw9Rlyv1vHT"},"signature":"/POAyctJwN1JU8ObikCyLBP6t5Gubb25jFv8TPgo+o5FkYLkWsmGPi6RSXoJ83+stQNRs2HH7Pb4vCCyz0qRig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","123"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"YDpOu7c/MFgTQVVOO2bTUK0VPjJnN8it8+Mc+zfh5Z006bvEtwn9rAZUjHvamyazuDgEsYO7dM4LL2N2n8slAA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","11"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"4gwn0vkgL/AJKtwnh5DMFU2uRaZMAmewRMDichxaEahcy8GUKLT67NA46b/w6Pr74+ESQbCEgs7yUa5QEw4kBQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","51"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"wZ2OsxuPdll58Z/S8glWsxkAUJUA5PWDWkkltoxtJudOqHhhUf0XrhxRLnzmoCfWW5c1RtylR30WopGsebHrew=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","61"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"a4uB3z8hxhZtUVoMaWgJshhO3RFAmCMmKINv3Tl2FXYJsocdsM5Pb2Do3Z31bQnmmRihk5/LzvgRzYyWM+6XMg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1v5drp90ljduyru5rfh2ce8ql8r0rsasf9wtcuu","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"o8CU3Y1NWbaHkWS5Zgyta3fShLyEbk5uYvN3C15XpMZ6vRDSxDc3T2i5xM7A3IHC9z/GTOWlPETVkMJSFNe1bg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1v5drp90ljduyru5rfh2ce8ql8r0rsasf9wtcuu","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","enteru5rfh2ce",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxOJai7nHDUerexuHSTo6sENWB3I3qfRZYkxv6qzyOnW"},"signature":"M29E1zGc6800OYWs3pPVVMogTR2o3YzRbIwDGMJ1w51ud/3RBaNrMtkTeKgmuiVYrEPYhVg/UugOP8eiNa85aw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1v5drp90ljduyru5rfh2ce8ql8r0rsasf9wtcuu","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["enteru5rfh2ce"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxOJai7nHDUerexuHSTo6sENWB3I3qfRZYkxv6qzyOnW"},"signature":"OzltWjjMf+aMqUOS5g4U8sQD9npSDv0uFNpQ66XxLWgjoBmFTOJuxXZkUuO0hAvHbWFhfVVz+AYWkf79vJpYZw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1v5drp90ljduyru5rfh2ce8ql8r0rsasf9wtcuu","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1369","enteru5rfh2ce","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxOJai7nHDUerexuHSTo6sENWB3I3qfRZYkxv6qzyOnW"},"signature":"wBx6oiMZr7Pg7cBEIFC+ipdQPv7Ki8hC4yo9J95SgrlyTI+hGt8CE9FICzyM9jVgjvSiEPukqf3xem3GiqiZYg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1v5drp90ljduyru5rfh2ce8ql8r0rsasf9wtcuu","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1369","1","1","g1v5drp90ljduyru5rfh2ce8ql8r0rsasf9wtcuu"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxOJai7nHDUerexuHSTo6sENWB3I3qfRZYkxv6qzyOnW"},"signature":"xAuBgPXUug9h4ONjiujAUo0Z+KOHyKXOKZBeBiuw/4Z0pH2mQRdFYKqGJspgClR5ZktC/IpzQyTu0YOcEFTzQw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1800cuuuh48kp5qxjpxj0cv9vn5hx8g5mhwwp0a","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"H8KESGhIypI5d0l36i9l0oWoBNpKCsJkYm3ftHIhRFdhFZuzZENIzE/KhBOcAy99Zf9ewssPmt90s21T6SPXZQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1800cuuuh48kp5qxjpxj0cv9vn5hx8g5mhwwp0a","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","canyonqxjpxj0c",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6Y79eS+ERARAsWalasVNnVr7jvz0Rn/4ooYe8OlF2/w"},"signature":"AC6e2p4D8poHYz7CEOumXr2qIH7hfq8DIcNXCVoxygFVEaYDwgsYL3U81EpDffpZCbqKxegdz1zs1WfjRaj8/g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1800cuuuh48kp5qxjpxj0cv9vn5hx8g5mhwwp0a","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["canyonqxjpxj0c"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6Y79eS+ERARAsWalasVNnVr7jvz0Rn/4ooYe8OlF2/w"},"signature":"n4xVCmppknZOOQV9d1nXtUyIc//tSpLKtz/cnZVH6fJ0Y7VYSo4hucv+3/8K8xhAo+ZIZKRulyF/DKiFXK07aQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1800cuuuh48kp5qxjpxj0cv9vn5hx8g5mhwwp0a","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1370","canyonqxjpxj0c","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6Y79eS+ERARAsWalasVNnVr7jvz0Rn/4ooYe8OlF2/w"},"signature":"ORf9KiCRAooc7RzYbtggW5M+sF5fxZI/xzCwO866CFwM5Xmd8JTan4ZzpIPu3jfZ/ebpRdVcxOnbMhth/yh9cw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1800cuuuh48kp5qxjpxj0cv9vn5hx8g5mhwwp0a","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1370","1","1","g1800cuuuh48kp5qxjpxj0cv9vn5hx8g5mhwwp0a"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6Y79eS+ERARAsWalasVNnVr7jvz0Rn/4ooYe8OlF2/w"},"signature":"FQnEfa0rT4spE3Z3ihAPD5V2CjwnefJYQqYPlsVJovp7AMNpnJdXmBSNKM246DPpNt41kJ/AnfOblbo7UkEaEw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1rc8pqnsnj86dvl25ctekhvswckplcppjjdw05v","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ct7KKsQxKdE+ta2KmXFySVmwg6Qiew15Ghw0ocy/qWoU8jkGad3igKgzzPKyUBHJxJwYZBrqImM4yaYvZYJrtw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rc8pqnsnj86dvl25ctekhvswckplcppjjdw05v","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","favoritel25ctekh",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5FmeAejEKF1xV8V9G4t2iBrF5CFpumX9zfdgk1ESZdn"},"signature":"mkf0OeywX8QSfeSvoLI64NOBSDvIqB6LMM175qO4uVwhrKYo9Pf2zd1iuZoDy0bzTjLqP0RyP+VKFUScpxzC1Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rc8pqnsnj86dvl25ctekhvswckplcppjjdw05v","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["favoritel25ctekh"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5FmeAejEKF1xV8V9G4t2iBrF5CFpumX9zfdgk1ESZdn"},"signature":"/M7GDBb0d+WBYSClotoARCxoAdyRKDUpIZ8Fy0SuYZh9kxvWJazVpfKTGYV0oVjYH+lbOkiWs7UX++Ex2RcKLA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rc8pqnsnj86dvl25ctekhvswckplcppjjdw05v","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1371","favoritel25ctekh","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5FmeAejEKF1xV8V9G4t2iBrF5CFpumX9zfdgk1ESZdn"},"signature":"7warnAcThE2gk7ztvDXj+f3d9xhUviYBUiznPux0CYVL8eaXin6SfYZae4jQbWYpQtbqvtom/6jbya1RXLDksw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rc8pqnsnj86dvl25ctekhvswckplcppjjdw05v","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1371","1","1","g1rc8pqnsnj86dvl25ctekhvswckplcppjjdw05v"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5FmeAejEKF1xV8V9G4t2iBrF5CFpumX9zfdgk1ESZdn"},"signature":"wB7CoOlSDa0w9jPRoOePawoI9vKe9z/wU/JWn0xI8YME1yAjwM9i7gCT10dOcqq235pufwi1gjbjEP5NsglKAg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1e03ez7htct22h8yruh40c99a9axk77x25w6hdp","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"XHYMwFO1W5dMAQApTtHo3L8CxuK4W5SHu1f2YJ4FBrs2W0hPxcNnSKfMUclfpkwxe425+C0P2OBsfjHB117AfQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e03ez7htct22h8yruh40c99a9axk77x25w6hdp","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","family8yruh40c",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A08lVLgUxZRqf396E26ZVkixR4XF0KBDhsvt86n4gWL2"},"signature":"pI/judfXbYPmv4opPcHsSNrxoRwlmLBOHCkDou0zwnJnkNqjSdfxZ8ezWTkLH9UzuJCMzD03yhLRVWOZMuRp0g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e03ez7htct22h8yruh40c99a9axk77x25w6hdp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["family8yruh40c"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A08lVLgUxZRqf396E26ZVkixR4XF0KBDhsvt86n4gWL2"},"signature":"9BMaQrcbUDIFK3XVvwEIcFFHLEwHpVpx1TiMW2lVxt1tJVM27Yp48R/LZmUpp94acTXkeO2roLzbfL5RrDrWjw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e03ez7htct22h8yruh40c99a9axk77x25w6hdp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1372","family8yruh40c","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A08lVLgUxZRqf396E26ZVkixR4XF0KBDhsvt86n4gWL2"},"signature":"p6fYpCoB7UFAuB0jE1bL5rJFD8ME79ALNRejNOEbcOYQIVL/orRvf3gBrRJdccYfrGEXxrfhI1q4rpArFyGcWA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e03ez7htct22h8yruh40c99a9axk77x25w6hdp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1372","1","1","g1e03ez7htct22h8yruh40c99a9axk77x25w6hdp"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A08lVLgUxZRqf396E26ZVkixR4XF0KBDhsvt86n4gWL2"},"signature":"lbj2wVFiAYl2nKPHFVhsNr98yh0yjbStjMHwhTnfxN5h95DtOK4oSdew+EW1evo84hKku7r/BJjy8DvXkvgUmg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1v4xx7qp45g3qrdtx80d60uc72a3tjwlfkqdapd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"h5+hwec+dB8Sxv549fEyqaJ/ufLsll28wnb98FkEb8ZkrGmf+D5PVJEJSCOjvYJmWNSF3AlGsNbPD4x6xmBwyw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1v4xx7qp45g3qrdtx80d60uc72a3tjwlfkqdapd","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","boildtx80d60",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2NMWApv2sLQZQIogK4tbjn9L8RvnKY/hoG+Z1ofwCux"},"signature":"C2r+cGO+mOmD7VawJh1sly1PcF0HNUuOsQNOIK51EGpxAgOGhqAu3yGsNcv31Nx/oUj60jIll2RduvVB6dETHQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1v4xx7qp45g3qrdtx80d60uc72a3tjwlfkqdapd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["boildtx80d60"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2NMWApv2sLQZQIogK4tbjn9L8RvnKY/hoG+Z1ofwCux"},"signature":"eujPvzTfmVARVGPo/J8K6PJkbwsJP59C4yD3LJOmP/o+Wp5J1Fyu7dy4HPhtSPQNjVnBC4VxrSMpUl9vcNH6qg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1v4xx7qp45g3qrdtx80d60uc72a3tjwlfkqdapd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1373","boildtx80d60","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2NMWApv2sLQZQIogK4tbjn9L8RvnKY/hoG+Z1ofwCux"},"signature":"yU34eqrMJLEq4dQgjevKX08A1oH+8rXiI1TS+DbmZWkuN5jmS0vr/EbDOPkcXAJCCVUOVCWDMce3HlHrEmprDg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1v4xx7qp45g3qrdtx80d60uc72a3tjwlfkqdapd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1373","1","1","g1v4xx7qp45g3qrdtx80d60uc72a3tjwlfkqdapd"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2NMWApv2sLQZQIogK4tbjn9L8RvnKY/hoG+Z1ofwCux"},"signature":"ikI9vjEwyPasRtf+NuEDorUMS2P29fq8wfT8AByii+lD4MOK9YckBiyKc6Rek9IGV1HYBP/PfVql0uH9oSV9tg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1gsjdpsk6nc5xfge2kdgs67u7sv820s7lgxh25m","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"m8GcBO970hGEsJ/njkeXlBWN5E15KLKZ4nRG7+GIBqAl9rDu1076buIl+dv1xlVOKYpOVfexWeg0xNAsjleS4g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gsjdpsk6nc5xfge2kdgs67u7sv820s7lgxh25m","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","goddessge2kdgs6",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2Gc6IgRHgWeG2JI1fRFQCPhSkdGy25E52i6qPvjrl/E"},"signature":"2Lsgc9IqBoyFl6z8nZURD7ohZSOiMgkscCevcXE9Vp9i0DLUp+yFHCDJmCqRCw9Tt1VFN0f/cBLIEvTpx5UpTw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gsjdpsk6nc5xfge2kdgs67u7sv820s7lgxh25m","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["goddessge2kdgs6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2Gc6IgRHgWeG2JI1fRFQCPhSkdGy25E52i6qPvjrl/E"},"signature":"ts1fB5LVSbwUQ4ckU6DPPRDCq7/A3FI2cuhxJ1cEcOsRugRTC65aJvLu1ilY12iAa5ltrViI+kYpiCavjDZIdg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gsjdpsk6nc5xfge2kdgs67u7sv820s7lgxh25m","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1374","goddessge2kdgs6","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2Gc6IgRHgWeG2JI1fRFQCPhSkdGy25E52i6qPvjrl/E"},"signature":"FXBlM/cHXihrP9SoTSXIrjnvMZB+ee0kz1HPLOX0iex8HQl7909xdwK9S8216JMGdtBtQr+/KqmvbKvZgFZPLA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gsjdpsk6nc5xfge2kdgs67u7sv820s7lgxh25m","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1374","1","1","g1gsjdpsk6nc5xfge2kdgs67u7sv820s7lgxh25m"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2Gc6IgRHgWeG2JI1fRFQCPhSkdGy25E52i6qPvjrl/E"},"signature":"IwlpDc5IhqZXU3r6hLhNFiJ/NWlLH15BXwOPT2vcgxNgysCS+wz+5kwT8uiGBRDuuoLXDCEkMmi54rEWqGeKlQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g16qxs2sfatyz3qrxmrqrppv8xh0tnvycd5f0ac4","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"lXmMDYuwX0P2AifOwCmZMtM06vikTBpwuXvDhwJJ/upcT4oPl2CIybwf/WgnViBHqZQx/RNrPnQjh4n25/Dy+w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16qxs2sfatyz3qrxmrqrppv8xh0tnvycd5f0ac4","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","salmonrxmrqrpp",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArqWjHKJ5wa5Cm97QQMbgL87E7fplm0NLF9ArKOPIqOg"},"signature":"JEBeXEe1mgr5OVHggLD2iXQDlSvKRuCUEC+ChTrh994I+k+OTervGQyjTtMoLDGqnfVFNIcgcldF8KoSNeTejA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16qxs2sfatyz3qrxmrqrppv8xh0tnvycd5f0ac4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["salmonrxmrqrpp"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArqWjHKJ5wa5Cm97QQMbgL87E7fplm0NLF9ArKOPIqOg"},"signature":"lANSzS97jCsSlVdhXFCx5RIM75w0bTftyhxSwE4adltLjM/PDOINhZ1wq4flqWFt0/KU/IVwuAlM1mbkBrONUw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16qxs2sfatyz3qrxmrqrppv8xh0tnvycd5f0ac4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1375","salmonrxmrqrpp","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArqWjHKJ5wa5Cm97QQMbgL87E7fplm0NLF9ArKOPIqOg"},"signature":"l4q/JtOV/2ijyzZxfjoY/VAe7MMvMb5YPFs5wreEmFo4GMog2C4k6YM5y1fDNihVBwfSNFGhjqPKzr6vA+EiuQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16qxs2sfatyz3qrxmrqrppv8xh0tnvycd5f0ac4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1375","1","1","g16qxs2sfatyz3qrxmrqrppv8xh0tnvycd5f0ac4"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArqWjHKJ5wa5Cm97QQMbgL87E7fplm0NLF9ArKOPIqOg"},"signature":"wi3srAtwDh6An82Bztpxx7pzfEsDH9kwUadvyOyNjSNnkP0OXhLFhMIZavcYkafmtKyl7yBr9nAwVG5ibh5VWw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1c737m0epgjm9j3xrkjks8ndjdxk0xdn0gljkel","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"4ouIx45VuANqhaCOMaQ+e6MS4M8JTklUF2DeoE8LDKkTJJzHg46W1tM8LjvNa9OCdfyiQ8I1m5BOYlK31L3zgA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c737m0epgjm9j3xrkjks8ndjdxk0xdn0gljkel","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","notable3xrkjks8",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArKFnwbbmq/ipRM8wZ6oHKWGIsb7ZuwiEkmLecXSDf/M"},"signature":"3whMuIqK8p0kHWk1dS4qThkyI2BMHKX/6+zSnx8d9aAhsbXb2mk8Pb3oOpej8DHbtaXdDdxEXS7YOtz9x4CykQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c737m0epgjm9j3xrkjks8ndjdxk0xdn0gljkel","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["notable3xrkjks8"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArKFnwbbmq/ipRM8wZ6oHKWGIsb7ZuwiEkmLecXSDf/M"},"signature":"E+8SwKObCMQ0OaNPnkuqrZ1iSQHsxkoTGSIx6A0e1nEpgszHXgB7+dRsyVCl6H8jfhdBqmATZgV0Sq6Qd49h9g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c737m0epgjm9j3xrkjks8ndjdxk0xdn0gljkel","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1376","notable3xrkjks8","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArKFnwbbmq/ipRM8wZ6oHKWGIsb7ZuwiEkmLecXSDf/M"},"signature":"VOwywJsCyg41vGM7NsIoHT8PDpXHqLHP4StHfLVL7xhyIngUWyqHTAxVUIS88dv4dMyXLeOhFygqZ+KwyBxAXA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c737m0epgjm9j3xrkjks8ndjdxk0xdn0gljkel","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1376","1","1","g1c737m0epgjm9j3xrkjks8ndjdxk0xdn0gljkel"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArKFnwbbmq/ipRM8wZ6oHKWGIsb7ZuwiEkmLecXSDf/M"},"signature":"rR0ZbKvDeK8+uB0dSBPQ0SV30Uvpa+gxS5zu5xW00yhi6xZib3+KqeUwJ9ocip/RSdFS2R2EOKG1PoIdlQESpQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1j3w92u9munxkz896q4w5v9mrd40dk8m3qcnm3h","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"lN2+gw6mUG9EYtTqD22oVpp9TU7M20pzMmB+yFtJUa1EEFpTkHJNZ3esMLnhPy0yJmSbq9FGzUk6ADvISwIEwQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j3w92u9munxkz896q4w5v9mrd40dk8m3qcnm3h","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","three896q4w5v",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AspylJzglYwAVW5tu2fwoDAT9jw+lmyMwL0Vk4OkDbDH"},"signature":"1DQNzSwPoyLgVRs0bsMnuLecwGerNcYwgxcL8ACnkCIAfFyfqqPL1r71HCYvl5+XaeOA7GoRDIw1JnloWfMLGw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j3w92u9munxkz896q4w5v9mrd40dk8m3qcnm3h","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["three896q4w5v"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AspylJzglYwAVW5tu2fwoDAT9jw+lmyMwL0Vk4OkDbDH"},"signature":"ibuwK/TvrvGUDOQPMuGsm5TET8XTFAsIGLe/0gHoDmcSkB9bbtZa0iWUyvYqcrr2OPWi097EOeZEvEtQMnOCDA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j3w92u9munxkz896q4w5v9mrd40dk8m3qcnm3h","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1377","three896q4w5v","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AspylJzglYwAVW5tu2fwoDAT9jw+lmyMwL0Vk4OkDbDH"},"signature":"WUPEzl9G+ayzLFm5PHXKzZDSrDcrvAX7Cgt3pkLPEGQc5ifi1h3+iLmzYnCAXe1RGQDH3Anx1Dssi4YtxYYPgg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j3w92u9munxkz896q4w5v9mrd40dk8m3qcnm3h","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1377","1","1","g1j3w92u9munxkz896q4w5v9mrd40dk8m3qcnm3h"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AspylJzglYwAVW5tu2fwoDAT9jw+lmyMwL0Vk4OkDbDH"},"signature":"yKMPYtPd3keJlCVUOHb0HM1lRu1L1SbzmQvu8lzd8bIOYh7zDaUrILXpHr5GO8Q2o9X5PLsm0/r5BCI4n5iz+A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1vzjx9ja9letydyag3amjynmaew0240nhs7tzjd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"rPsd4jwzo/v1wFLMTZwcW63SiyAgMcdFLGE/kMZOi8Ai1jnJaRFcgsHlM+EX/zxgIcPfYKK7QWeSFV/gAAHP0A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vzjx9ja9letydyag3amjynmaew0240nhs7tzjd","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","spoonyag3amjy",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3vQ01e5H0DK2OeDcY5Z2uCQNefBx0gheElMVijAy2TO"},"signature":"k5sujaPhSvQBT+qoUvB+EnV/bVRIdqfUgevFZ4Z0lU41Ab7+323CM1oXLuxl7nhYBHqHdmLoVEP6ZnUg559r6Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vzjx9ja9letydyag3amjynmaew0240nhs7tzjd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["spoonyag3amjy"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3vQ01e5H0DK2OeDcY5Z2uCQNefBx0gheElMVijAy2TO"},"signature":"D1JC/EC9E7uo2L/Y9b8EEAB0RxUBziRXOkiGaryrcXwXe12/kEw4/4llxwlEQPO8d0Mjj/hGUEc/ZO62DN4uwQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vzjx9ja9letydyag3amjynmaew0240nhs7tzjd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1378","spoonyag3amjy","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3vQ01e5H0DK2OeDcY5Z2uCQNefBx0gheElMVijAy2TO"},"signature":"AOQu3cTPfuZ9M/yX+9s2wYyqlEH6IMEghURfo3vOSUYPhtA5/jxse/nK6h+RxOjQJhwpm+P599B6egWzdJ9XWQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vzjx9ja9letydyag3amjynmaew0240nhs7tzjd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1378","1","1","g1vzjx9ja9letydyag3amjynmaew0240nhs7tzjd"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3vQ01e5H0DK2OeDcY5Z2uCQNefBx0gheElMVijAy2TO"},"signature":"8t7EXLFgogmbvbMtC6VKvBKjgL/qxMOvrCffcZlKX0YCEpKcQRdadqTUqUcKyNdBoPoVdiJTmORFO/jD4cpAcA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g184xqrsqulhzctdquq7e84qkfw67j9hs67plajh","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"YP1d+99KiH3/IzeELPqkhVy4RBVNrOg86EN4wQG8MSw9eMsWhykL9bI9Wxg4SC4hvaUrfd8kN09t4zEfELvLLg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g184xqrsqulhzctdquq7e84qkfw67j9hs67plajh","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","motordquq7e84",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5wd7Z12VZhzQu9kK+6QZCWJfnO/lethwROat1OCRKSA"},"signature":"wnhxhObngeiKYbRqT6h8ri9gbR9j8KGYjSZ3wrCyaR5fP0Y9Tc+zH5b0IAflVjHqyUTTnglY94in3z91maTEUQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g184xqrsqulhzctdquq7e84qkfw67j9hs67plajh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["motordquq7e84"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5wd7Z12VZhzQu9kK+6QZCWJfnO/lethwROat1OCRKSA"},"signature":"3f6iZcFE3qDQ3U5fwl0EPw1V1KIDVMqChEP3VpE3jwh5zNoFeE8Gbsx3BnrS2p7X8z0fIUKaoR47ydslKeHEKQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g184xqrsqulhzctdquq7e84qkfw67j9hs67plajh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1379","motordquq7e84","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5wd7Z12VZhzQu9kK+6QZCWJfnO/lethwROat1OCRKSA"},"signature":"p1l33HAkRB4vrunK3TeVuj0glVs36Gco9JCsxafphssWcnbVQOjU0sQaVqNsmvvHTmw5kmt/qfPa4kCn6EQ54w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g184xqrsqulhzctdquq7e84qkfw67j9hs67plajh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1379","1","1","g184xqrsqulhzctdquq7e84qkfw67j9hs67plajh"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5wd7Z12VZhzQu9kK+6QZCWJfnO/lethwROat1OCRKSA"},"signature":"CpzlninWe5zVCqX/GVjJgcGWCvFk5g4UkaHhzsmNRwlHH8hk36rRr4JbMXigMzVvpNyo12F5/uoNO/pp+AsrmA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1m8txxtcjl55qvc2vekffjthnmppuhwk65wleju","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"PwE8tBpr4UhTQNKvbvMnh51rHyoMTgHQDLGiQ05PFPhSymupzaNk27g1WN4NTjgX0IjwWiwptOZD7quLilQhyQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m8txxtcjl55qvc2vekffjthnmppuhwk65wleju","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","outdoorc2vekffj",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+0BpCVeNL0knTj65cVc07qaezJ/4haO/c0FQNqRwg4M"},"signature":"qZt1p+F2yCism8WGajvlcfum7UCY1h37pq1ny808RJEpb4vzvqBRhQgP2ShN8hunAAjul8sdkeIL0p8d/yYLJg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m8txxtcjl55qvc2vekffjthnmppuhwk65wleju","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["outdoorc2vekffj"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+0BpCVeNL0knTj65cVc07qaezJ/4haO/c0FQNqRwg4M"},"signature":"d2bUez/Ueh4fW5ttcHg+YJs8y3Nu8J6BFy4fg494GplMABm76yhXxp1P2SqMF0cfR9KTFuWG6j4xnQSdH4a+OA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m8txxtcjl55qvc2vekffjthnmppuhwk65wleju","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1380","outdoorc2vekffj","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+0BpCVeNL0knTj65cVc07qaezJ/4haO/c0FQNqRwg4M"},"signature":"VQ/G7YO3onGx16Nggu0jF8X19ZzKyieLSXcs0Ne6vsxb2fClIE/k/bNsWjdiAw+F8+PNXu3ESqPAq8pP7vNeGA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m8txxtcjl55qvc2vekffjthnmppuhwk65wleju","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1380","1","1","g1m8txxtcjl55qvc2vekffjthnmppuhwk65wleju"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+0BpCVeNL0knTj65cVc07qaezJ/4haO/c0FQNqRwg4M"},"signature":"uTCb2/AxGZmGov8HAsYd30ivHWlh+U3nL6fMMWDjU14iUWtyx7Xlm1T24YvpwFaOtBVs1ud1YcQ8UR+xRhqDLQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g15u2lyaar64x7hp7g0ke74mj8262qz24ups09k6","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"66Q5U9wG9rMic27BGU1glvmNdEN8GzRcf+sMWKar24Uak64ephX4G0nHmAYis9FvZ4aFhOskPAgNPNLmMH/aAQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15u2lyaar64x7hp7g0ke74mj8262qz24ups09k6","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","sciencep7g0ke74",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxspzPT59UTYpn++YXDDRzc2UD8HFlH5CPyNpOm0KzmX"},"signature":"Gg6wGNlMNbF9sAqc0wnKMS9TzR5H8RGLeP5/kyvBU8Rpt1E4BUnk/+l93PzsaMzoqypU3Nq3QxHv6EsoAzUKfg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15u2lyaar64x7hp7g0ke74mj8262qz24ups09k6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["sciencep7g0ke74"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxspzPT59UTYpn++YXDDRzc2UD8HFlH5CPyNpOm0KzmX"},"signature":"cQZ8EwFJWcI5hc2BJXCKD/NCX001RMN6qWatL6aVs3EhqvmBwfJxO1rGRPYzDeiWAdKrNO4gmdD7sBENBbPF6Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15u2lyaar64x7hp7g0ke74mj8262qz24ups09k6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1381","sciencep7g0ke74","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxspzPT59UTYpn++YXDDRzc2UD8HFlH5CPyNpOm0KzmX"},"signature":"DWkQBrQlORnwSmLavA+SnRFRtH1D1yBuiglVOK+kHsZzh1p+Q1zvDMNpvmczF+q896pKQ2PwcP9j6QL5rlpOqQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15u2lyaar64x7hp7g0ke74mj8262qz24ups09k6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1381","1","1","g15u2lyaar64x7hp7g0ke74mj8262qz24ups09k6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxspzPT59UTYpn++YXDDRzc2UD8HFlH5CPyNpOm0KzmX"},"signature":"LxiASL0wAkF3aeLdUVYfjwIEHFZLty8rPa1uRSfn/MsWZXMTKUDFKR1bwOI0onutKGoLPlkM5E+4SSXfB8/ueg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1crqw74sfr4s7k5jhcsyqtjjuagxt456fz7qxan","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"XQoqvjcDyqmO+TUgll58KZS6+0x+uwyVEdvtxIUPdHJpM0Bfxw9sVvJwpd3+gnxiZUdLUCnxS2WmpFvOFk6iWA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1crqw74sfr4s7k5jhcsyqtjjuagxt456fz7qxan","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","assume5jhcsyqt",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/BrD2paKLv3XfF4/0mmn7KlB74dDGns+dQiZMuUUzHV"},"signature":"7nC9F2r8SEVisqyePrzp83PB4wn/7lLUjNp9dSgESJpR1za/SJinrUsfRXMGv7fvo/GvPEo07Ee9a/MiXs2l2g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1crqw74sfr4s7k5jhcsyqtjjuagxt456fz7qxan","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["assume5jhcsyqt"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/BrD2paKLv3XfF4/0mmn7KlB74dDGns+dQiZMuUUzHV"},"signature":"x0K4FMW68yLjwB8KBp6vu0twFzBfEUNwkeSdkqsGuJc+/C/Kw3J2QXbbuJvnGxHtp+9OsfMni0C1khe1ys0pWw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1crqw74sfr4s7k5jhcsyqtjjuagxt456fz7qxan","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1382","assume5jhcsyqt","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/BrD2paKLv3XfF4/0mmn7KlB74dDGns+dQiZMuUUzHV"},"signature":"/nVstMEf4lDa2OhryXAYLxWQILwldW2P/kX874IjuZV5Iipv++YG9PsXE6uXxvqvbBNRoO9sM2vZ9BG6J9DipA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1crqw74sfr4s7k5jhcsyqtjjuagxt456fz7qxan","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1382","1","1","g1crqw74sfr4s7k5jhcsyqtjjuagxt456fz7qxan"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/BrD2paKLv3XfF4/0mmn7KlB74dDGns+dQiZMuUUzHV"},"signature":"5VztF/kuHX6ToR8Au6RXS8g4B8fpSlZ2OsdVED94nGggU0Z/QvV2u0/FsdMqXccGi6QL8DwD9GPFyKw2qOvVWQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g135cnnasq93wtc5qgv4ts0uejtyzhcc5kp9px5w","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"WABZGZLBImLLaM1v0vjUTUqxmQ/rhpj1zWA9dCoaxk11sG2aBOpWoL8OUATAzwiPNkr0Bn71kKAfDRK7Hd1awg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g135cnnasq93wtc5qgv4ts0uejtyzhcc5kp9px5w","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","scene5qgv4ts0",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxnY7qOTCQ+4iNheDzgN6CVhALhxIk6tjYIZrAubtIQ5"},"signature":"n/GNcE2sBrR3F2+6JxyleELIjiILwU3Pr9CoSJCm3xNAJW82erhko9Jh6a+qBLhnlDNBmHPXengFSBLVn/AbNA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g135cnnasq93wtc5qgv4ts0uejtyzhcc5kp9px5w","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["scene5qgv4ts0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxnY7qOTCQ+4iNheDzgN6CVhALhxIk6tjYIZrAubtIQ5"},"signature":"PKOtp75gUXBzkJ1eD3kS8gLoWAYoZCnicYKf6RL29E9qJg9quyD7FgF405nSd1GjlapusAuLsIFN4fAQyj4z+A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g135cnnasq93wtc5qgv4ts0uejtyzhcc5kp9px5w","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1383","scene5qgv4ts0","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxnY7qOTCQ+4iNheDzgN6CVhALhxIk6tjYIZrAubtIQ5"},"signature":"lRGGkxRttwKBo2trWhOGQXQzL4TvVKocggsvwR9YFOk0TwLTEiKUK3eOVgWQESuy0FeKHC3bp3ZVhimKi0NeSg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g135cnnasq93wtc5qgv4ts0uejtyzhcc5kp9px5w","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1383","1","1","g135cnnasq93wtc5qgv4ts0uejtyzhcc5kp9px5w"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxnY7qOTCQ+4iNheDzgN6CVhALhxIk6tjYIZrAubtIQ5"},"signature":"+1V5um1IXwrgSlIUbooRuzVctCwO+GNiACl9QY+CUDcU7mCdUwdAsRgBYIYbUW2blqHmslibCKWKpA+23/GDkg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g148vzxh9unkj8tadj7v8uadrp4a5hdyttsh5pjm","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"a8Z99tMAwBD/mst7Slko7c4f8QqDbtEO3xxptdGD3mpBiboYLGjPm2Y7aKcYlcT5u7wjgc38tCA+MXin0J6qsQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g148vzxh9unkj8tadj7v8uadrp4a5hdyttsh5pjm","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","growadj7v8ua",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7uQAH8wxCFG7uW+SNIVX37u2M1ijRh+9rfVqoVQdl/m"},"signature":"M1ohUH7ljUCL8pytIDu65md/+XVZwRyiFGHHg0Ocpado8POiz9IlsuwzTF8sGR/tFZaECKwmdhc9GYWVeIbEag=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g148vzxh9unkj8tadj7v8uadrp4a5hdyttsh5pjm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["growadj7v8ua"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7uQAH8wxCFG7uW+SNIVX37u2M1ijRh+9rfVqoVQdl/m"},"signature":"WXAw08HU3j3iZ6z7VWRCWX3qEtInYbg+Fbq7NdYT5uMBZ6OxOfAvknZLdHEevBo2XvN03SE9aN0QNkwvDautCg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g148vzxh9unkj8tadj7v8uadrp4a5hdyttsh5pjm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1384","growadj7v8ua","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7uQAH8wxCFG7uW+SNIVX37u2M1ijRh+9rfVqoVQdl/m"},"signature":"S1ylijxJpweFQFJgtgZBidYaifyfrljcgFqxUrNdsskmzRJyavuS4OVigHoxlmwvWlOSb3MRAIfVl4H4tDBAuA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g148vzxh9unkj8tadj7v8uadrp4a5hdyttsh5pjm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1384","1","1","g148vzxh9unkj8tadj7v8uadrp4a5hdyttsh5pjm"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7uQAH8wxCFG7uW+SNIVX37u2M1ijRh+9rfVqoVQdl/m"},"signature":"A9c0GDwk9DkSW+4GVOLvAEmvzcn/pEiRRUe8xcoy0c0ItaWhFfiUEv75iVSa9xAqHvFtNoBJZDd/G7k6TAlB7A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1pjgzdrdd5fryup9jmtkyzm0nwg0xgcj4zlfuhs","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ojSS+2o9LhiTgihIEl9l0tiL6qkW9TWalYQscHOLCDJ+pVS8quLwAXm3mLDhI4BZ4H+4Jbi1KOqpa4XdsGKw2Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pjgzdrdd5fryup9jmtkyzm0nwg0xgcj4zlfuhs","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","marriagep9jmtkyz",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsuVIBYGSAUZdTpEujcYOh6ry9P0/Eu8bBl8d92hqwEH"},"signature":"x04pmgoQiRKjqfiHdCJUYE1yvt9NzuP1YSXOh98NBZgfsyKkvR9E8ASipIPzGn1mSa1C1S/Pm4mM3vkcEVjFZg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pjgzdrdd5fryup9jmtkyzm0nwg0xgcj4zlfuhs","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["marriagep9jmtkyz"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsuVIBYGSAUZdTpEujcYOh6ry9P0/Eu8bBl8d92hqwEH"},"signature":"KZs8MTyUBrBsPtGvkSzqGLZCdNLFDC5ntqeNTbTRcox26CIx1g0TuNSHk62y8GGcwvzYAXnhZLNAJaQQR4ATiw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pjgzdrdd5fryup9jmtkyzm0nwg0xgcj4zlfuhs","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1385","marriagep9jmtkyz","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsuVIBYGSAUZdTpEujcYOh6ry9P0/Eu8bBl8d92hqwEH"},"signature":"ppwfQ6/COFbSNIgmJQYa4Pd8XWd3SCHebmK2hRLgi9VuinYaa1S2A3haPqc30B4jOreoyhRg7G+nDPJv4DfB1A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pjgzdrdd5fryup9jmtkyzm0nwg0xgcj4zlfuhs","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1385","1","1","g1pjgzdrdd5fryup9jmtkyzm0nwg0xgcj4zlfuhs"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsuVIBYGSAUZdTpEujcYOh6ry9P0/Eu8bBl8d92hqwEH"},"signature":"h1CbKds9VHvaAizlTuXef3+udXpnJ2K+NT0xSqY0ct14gfgNEY66/IIxFyGSnC+biuIjxJb4F2DfNhk+REpAeA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g182etg7nevuy544j73zyazhpn64f84v45kyphfz","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"q85raYaL8Zw7o/R5eAE5eOosFDJlVgZa5yEH7KktAn1bLYQVp+2vHboKJ6jb8CIkYV7x9EtWE3B1bREgYJYk1Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g182etg7nevuy544j73zyazhpn64f84v45kyphfz","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","asset4j73zyaz",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+nvY+iqrDTykt2YM492UxVpgZpSbrZX+S+RfkfcznQT"},"signature":"Wy7YK/U2vGw/QONt0IuPCuPai7ndsLUeqsv7wTIKHAIQWC9hMwDejIhbZVDe9sd+WYbjPEbrnaVTbQEpkPIzbA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g182etg7nevuy544j73zyazhpn64f84v45kyphfz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["asset4j73zyaz"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+nvY+iqrDTykt2YM492UxVpgZpSbrZX+S+RfkfcznQT"},"signature":"44aJoJf5y0kiS6LGcpk01X9c+gwKtwHVOsT+JR4GeDxv/eXlN7mjemIdK2aA/zB3DgvyRdUK1TdIW3C+pu0c6Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g182etg7nevuy544j73zyazhpn64f84v45kyphfz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1386","asset4j73zyaz","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+nvY+iqrDTykt2YM492UxVpgZpSbrZX+S+RfkfcznQT"},"signature":"2EK3qvod1d35opb/9jonY8n+LG9sm7bYflueNIuCM1grQ0foviaxwIjjiO5OKVO9oAkzUAS+KVodezD9Fa6J/g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g182etg7nevuy544j73zyazhpn64f84v45kyphfz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1386","1","1","g182etg7nevuy544j73zyazhpn64f84v45kyphfz"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+nvY+iqrDTykt2YM492UxVpgZpSbrZX+S+RfkfcznQT"},"signature":"CjjlR2QYt7h4ZbkMUhXgAgfxcr7sOgjxSZRoVmFetDdZvBiBrMtW7WEdyyrYLxB9+7MTeFxAc+VR2hgk+zhhnA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1aa2w8yss8a2uyv7z9v6ygruztqknk0ks09a4rx","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"uTBC60DiDITFgsGi4Zh5+7JaiA/dSEahgMDpv1GaQvZgORPxftdzoii5Xb/GcJH2qBasqNVwkIuoEKaK90VG9g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1aa2w8yss8a2uyv7z9v6ygruztqknk0ks09a4rx","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","winkv7z9v6yg",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0BkfsIJ7hqaJ0185dpgf/i8naMkcb+OzhEzr4uDm4Ju"},"signature":"79lGc6/OpwkWVnCX9JwHSZKktI5wW4FhvKPkGdYi39VowRr0c5PIsxgW/5EMDZh5Ec4w17zSnaBfSxVh1xuA1Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1aa2w8yss8a2uyv7z9v6ygruztqknk0ks09a4rx","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["winkv7z9v6yg"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0BkfsIJ7hqaJ0185dpgf/i8naMkcb+OzhEzr4uDm4Ju"},"signature":"+oQ1gG0XGjGXJ+zoFj1pUCW54se674LTqZHxAemS1QxUih2dlWy6rgQvusXOV8SJAiO9jhykqPzbE60LvWBX4Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1aa2w8yss8a2uyv7z9v6ygruztqknk0ks09a4rx","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1387","winkv7z9v6yg","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0BkfsIJ7hqaJ0185dpgf/i8naMkcb+OzhEzr4uDm4Ju"},"signature":"zt2cxy0oMvtAKOXrNjZJ03ZFOX1RiViCGEhrW4hZCe57ue7QzOSWIisKtNjf3ylewyz2wKvOIQoxrCm68UEjHw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1aa2w8yss8a2uyv7z9v6ygruztqknk0ks09a4rx","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1387","1","1","g1aa2w8yss8a2uyv7z9v6ygruztqknk0ks09a4rx"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0BkfsIJ7hqaJ0185dpgf/i8naMkcb+OzhEzr4uDm4Ju"},"signature":"m3pPMY+Q7sHt8bxozvpGTR7xsdFfn9enznLJp8ThomE83wymvTEOw/VY7snUc3zk3htT1RKfIrWIyWGRcAUs3Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1kracnvydchjjh7nn0f4xsu9nkj7uq5v0xlzjqd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ifc9lochZQoevczJUFmowse23c05AyG8RtpLMGkmk10sR3IjICTWq3csEWENLGsnm7gmunpslItGf/oaiEtnfg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kracnvydchjjh7nn0f4xsu9nkj7uq5v0xlzjqd","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","phone7nn0f4xs",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArXjfaof1GjYgHsQrNr1khWEDqypbwx2z/sQE/9Wtpmp"},"signature":"Px7259XvZbCS5P0EPNclIB3Z7n8p5EPvQoI7mWgCsvEDHVpzIXeI4gY9ZgZ6UHRunNmLtYg+kHQDAADczROjXw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kracnvydchjjh7nn0f4xsu9nkj7uq5v0xlzjqd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["phone7nn0f4xs"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArXjfaof1GjYgHsQrNr1khWEDqypbwx2z/sQE/9Wtpmp"},"signature":"y0PNkC5PopdQRRHb4qycyj3ReaqHJp4/wiMjxojp9V0b5wp3kdiI8OA/HLcamptSJ6qUxzr8y+6/a/yfTrvqJw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kracnvydchjjh7nn0f4xsu9nkj7uq5v0xlzjqd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1388","phone7nn0f4xs","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArXjfaof1GjYgHsQrNr1khWEDqypbwx2z/sQE/9Wtpmp"},"signature":"cfC8oD62jEHnqjGds6jjxK0DLxoxA8k2wNK2vIdnnskxIJygMeysHGpoGzpX0JLIt16USaS81KGKtdx5qVJ4yw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kracnvydchjjh7nn0f4xsu9nkj7uq5v0xlzjqd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1388","1","1","g1kracnvydchjjh7nn0f4xsu9nkj7uq5v0xlzjqd"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArXjfaof1GjYgHsQrNr1khWEDqypbwx2z/sQE/9Wtpmp"},"signature":"kNnlnKgskN+XaUYDAzC0bLXlibOKDqwGKbvxyLM06eRvtFKdr9CRVwZRNxjF8PqK2ByQI0XmC1jYmNkNPYXkIw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g13j2txf0dza638z4d96u2e4w3n3xfvwtujj8vzr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"5MudCKGRtsn4dSUef6Vii/0HJa8IgY3jF1ZnU9u0w2hlJ93IxPlWvMAqOspOV+MFe59J9BwIEPcQ9DgzaVjy5w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13j2txf0dza638z4d96u2e4w3n3xfvwtujj8vzr","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","orbitz4d96u2e",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnNnyvd1dNP3OCebZzJku7eS+LDlUISuLtPtIz4IFKhA"},"signature":"A4CJpEj17Iz7ZsUkqtxMY8Jbi9v3JvJ4Z1Z/WP6AOTVJB6KcLrfNQWRQcZYPeZwnDatMT8i8UKapChxBZ3DJdg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13j2txf0dza638z4d96u2e4w3n3xfvwtujj8vzr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["orbitz4d96u2e"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnNnyvd1dNP3OCebZzJku7eS+LDlUISuLtPtIz4IFKhA"},"signature":"S0iBsGgF1+ZHwGjbmk8Tr6dR78VWP72+WKe167Q4GEUgVD/QO3ElK9Ou9OCDFOLYuU5amFe4Rgeu7lboNZ0EkQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13j2txf0dza638z4d96u2e4w3n3xfvwtujj8vzr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1389","orbitz4d96u2e","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnNnyvd1dNP3OCebZzJku7eS+LDlUISuLtPtIz4IFKhA"},"signature":"cTsvhZMXqOlHyo9BNjC6FPBHAVYUx7lh/cRgt6XRY+EFzzOxBjwC6YLMOOKvbOezYZuPubGYLvHLrBmHunkzmQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13j2txf0dza638z4d96u2e4w3n3xfvwtujj8vzr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1389","1","1","g13j2txf0dza638z4d96u2e4w3n3xfvwtujj8vzr"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnNnyvd1dNP3OCebZzJku7eS+LDlUISuLtPtIz4IFKhA"},"signature":"qOsht47OYJgoTAWpYFg8pZqjNYMzL+yM5H50aIGzKEkr9nMEl58Rby+Pj4p7+uKhTPY5QSDKdt/7pJdL7rcO0Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1pgdkneu5785jvv4jjrszl6q5rafrh32x39wxze","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"EuJOSaclUH5DuPAb+CRVDC6tQXTZb/hUc3VNKQZ9MDxA9R9/eBcILGy316NaGYxSci8nilimKy1PfqQqJelSyw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pgdkneu5785jvv4jjrszl6q5rafrh32x39wxze","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","missv4jjrszl",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2UC1ObeWLipYNT6pCwHH3v6mlQxj9LsL2SwnNl3OJax"},"signature":"Sq2dkHvSMGwj9t8GZDqO/fEnwZVkkiEEzyqgGkM8tbITH9nRjBM3adhbzHwnjQWkgZibap70EklKxKwOtaqBmg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pgdkneu5785jvv4jjrszl6q5rafrh32x39wxze","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["missv4jjrszl"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2UC1ObeWLipYNT6pCwHH3v6mlQxj9LsL2SwnNl3OJax"},"signature":"DYGNIwBcGWbQSKcOOJ1XlH6Xorr7ONutch7V+wyl2dclD4oglqhCmyg2puYdP0+eCfhoPxZlYFngl74+ZsFCmg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pgdkneu5785jvv4jjrszl6q5rafrh32x39wxze","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1390","missv4jjrszl","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2UC1ObeWLipYNT6pCwHH3v6mlQxj9LsL2SwnNl3OJax"},"signature":"7Rzd6Nggnyf17MLbTBfV2NZxUOmEUhef//LVCw7eAhAyeDEZQCMcfwoWe/ydQN5+I98kHwMPD7xaCbZaW/WfTA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pgdkneu5785jvv4jjrszl6q5rafrh32x39wxze","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1390","1","1","g1pgdkneu5785jvv4jjrszl6q5rafrh32x39wxze"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2UC1ObeWLipYNT6pCwHH3v6mlQxj9LsL2SwnNl3OJax"},"signature":"R/vrSBcSVMtMlv9ERMfam6S++HBI4aJZY4Gq2WLc1nE31tRVhpOn1Y3OsI6KpIuuriTdwjWkHT2+zw1ObS8aWg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g17wpxac9ve489s90g2tqe49avpv9pzhvfd6nht0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"/BwVaykkzY2FPTZgwqoF8rHU6pPWg75GcxL3lWwXfFIeZJhNZx8oClHhDrpTA5ACCbHkNyfUq1frJ4IOCbFALw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17wpxac9ve489s90g2tqe49avpv9pzhvfd6nht0","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","reunion90g2tqe4",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvNJpZKPCSOCbKPXZ6KFeg9aPeZ7nNdkQGZjGZeZGFGn"},"signature":"iNhnA5VvExLwbbKymUc3hJKvpRgEsgew4OLxLYXQ/x8GNEi6wD7JeAD2m7GMAj/8v1POOaU3CGcwBKf13sDR7Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17wpxac9ve489s90g2tqe49avpv9pzhvfd6nht0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["reunion90g2tqe4"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvNJpZKPCSOCbKPXZ6KFeg9aPeZ7nNdkQGZjGZeZGFGn"},"signature":"wrpKCyTFMaUptRJs0UVpQqnDdmIxJf7sVPo5XV0yR9ADpsOBXdMYKmLVs0wSN0oazJTrLzG0Ow0aUYzYM/efUw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17wpxac9ve489s90g2tqe49avpv9pzhvfd6nht0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1391","reunion90g2tqe4","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvNJpZKPCSOCbKPXZ6KFeg9aPeZ7nNdkQGZjGZeZGFGn"},"signature":"s8ag0laA2n//FY3ZPjXENr+yUEl3oQE1PScdbZWYNbcAt7IvyjVTCpU7UPQwjdINFsl0tu86SI33/1BSYwxYXA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17wpxac9ve489s90g2tqe49avpv9pzhvfd6nht0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1391","1","1","g17wpxac9ve489s90g2tqe49avpv9pzhvfd6nht0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvNJpZKPCSOCbKPXZ6KFeg9aPeZ7nNdkQGZjGZeZGFGn"},"signature":"pBT2mmTc585UnW/6xQKhCn+pcrC7xepQXC/Yxk0DCUJS7G9wmhldDsYL6NZuOJlQcwEOBcJ2rAX9GX1fJs6J8g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g167fu8fwdszega4rx9zadk6zzq4de6ergc6nher","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"KhszKDGMg//xFFF+ze/gUtwOhUvKR6svGjVmY+OPX8xJKvfZSZsoGgYG7hIxuKYakLq6EOezMPeFv5A/YDa1dA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g167fu8fwdszega4rx9zadk6zzq4de6ergc6nher","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","sting4rx9zadk",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhY4QvLEevF1o4njy06cC3vg/VZKpYw97DpFWwrLeQbm"},"signature":"Is7jZgn4TXUfrS7Mg88v+XcAzPbo8k0UTuCbyEBl9TQq/Dj06nFM5f2a5ryYlMGijOq9gQoQCaEa2Igr/Es1hw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g167fu8fwdszega4rx9zadk6zzq4de6ergc6nher","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["sting4rx9zadk"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhY4QvLEevF1o4njy06cC3vg/VZKpYw97DpFWwrLeQbm"},"signature":"Gfn/94WbX5YkcfNRYuUPU3KNkV24uFPKwgpO8zzHBUAY1aLI2i29VrOhi9fwJjlCIcYRLmyq+zjHZdPKjTwgGg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g167fu8fwdszega4rx9zadk6zzq4de6ergc6nher","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1392","sting4rx9zadk","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhY4QvLEevF1o4njy06cC3vg/VZKpYw97DpFWwrLeQbm"},"signature":"IAld01rwhDsy6KdPabG4H08a2WAwCqxjQDwiCGCd1UpA6jhQF3xTVZDE2YmawGKD52X7mV3QvnsSUAKvtjVB3g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g167fu8fwdszega4rx9zadk6zzq4de6ergc6nher","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1392","1","1","g167fu8fwdszega4rx9zadk6zzq4de6ergc6nher"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhY4QvLEevF1o4njy06cC3vg/VZKpYw97DpFWwrLeQbm"},"signature":"IzQrN4hA5uBfcK4yitQ9okOetXiwOB78Z5fKxRNlOQhrw86bkk9AESzkdX7+E9V3Q5/RG7AHppAO8ZyhZaoNQQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g19e6yw2rwh6thenwp28qpj6ylc4mk4hahtfvnyz","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"QIdteiPxtSlZHAYfbbQktQlWBiz5kd2bEx7cUl9rglUBQ9qbdg3rZp/2aizibxvDzNNYy7v5V/UPi/Q5oecz8w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19e6yw2rwh6thenwp28qpj6ylc4mk4hahtfvnyz","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","kidnwp28qpj",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aqcn/xYJGleKd8wIuRgEI+Z8nfelN+HtWD0Y7EBBymvx"},"signature":"6Fh1q+nxUuj+pSz5YPObNKVw3LK0NckFKw5tIA/CLBwfONjBfzM+FFU/5YGwCZ0d/HMcmVDT+xmDu0E0cFLY5A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19e6yw2rwh6thenwp28qpj6ylc4mk4hahtfvnyz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["kidnwp28qpj"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aqcn/xYJGleKd8wIuRgEI+Z8nfelN+HtWD0Y7EBBymvx"},"signature":"XGkPJT3l52LlYM9yE7SPQZd25e9ImFbjIY7yoN0QyrcsDFmM3Z6lrqsZfhs5baNTzPcKGfWpjUai5bSY6BF9DA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19e6yw2rwh6thenwp28qpj6ylc4mk4hahtfvnyz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1393","kidnwp28qpj","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aqcn/xYJGleKd8wIuRgEI+Z8nfelN+HtWD0Y7EBBymvx"},"signature":"zmf+c3Q9l1e34viZfnza7ln5eBdjv2DC+U1jMqcwwE83gPDelWoINx4wy+oqcR2VV/B+J/f4Tl/0VK1OxRsATQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19e6yw2rwh6thenwp28qpj6ylc4mk4hahtfvnyz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1393","1","1","g19e6yw2rwh6thenwp28qpj6ylc4mk4hahtfvnyz"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aqcn/xYJGleKd8wIuRgEI+Z8nfelN+HtWD0Y7EBBymvx"},"signature":"SzjoG3lAz7HI7/ZZX45dqQN3ANFQIgTU7qe5L++024BRoq4y05BFPDo9UauoQtsNayeM6ooUfEFNUHuML2Ohqg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1adnaytf57hjut5lnus2epjx0gt3s66jtpldvkm","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"PpemWqTIgjFjZ2sjqvHSSZAk8uHT3JvPFjSTQQnjFLxL9UpxZPegFrI8K/MTR6RHcQKpgx59GXyrHBvKeHtNdA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1adnaytf57hjut5lnus2epjx0gt3s66jtpldvkm","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","message5lnus2ep",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkV/fBSTx+YrRTrY60l6nuzf1NFggIJKxfwxYNbS0s5G"},"signature":"QAEeLdxAu8xLp8obXpPoPA9677YOyo7dT1iaMyk6RQkM99uMLQ7DJo22MT9kcuKg+v3eJiACaHqCIHamU/0w/A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1adnaytf57hjut5lnus2epjx0gt3s66jtpldvkm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["message5lnus2ep"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkV/fBSTx+YrRTrY60l6nuzf1NFggIJKxfwxYNbS0s5G"},"signature":"ucK5QmYU+JC92oTweiFGq2VwVua+RjGDxAG0KKMPs3VJDeL91oV6D07i6OBomd8FG5QKUqoHZc/66QDy2FDkUA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1adnaytf57hjut5lnus2epjx0gt3s66jtpldvkm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1394","message5lnus2ep","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkV/fBSTx+YrRTrY60l6nuzf1NFggIJKxfwxYNbS0s5G"},"signature":"qnZRXFLrTa17gmcTk8ycEKllJGloh82ib22wDK0+DfdY7LR+wSAJmFCZN1W9NWhx8OD9A8mCx89+SWejL9jeWA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1adnaytf57hjut5lnus2epjx0gt3s66jtpldvkm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1394","1","1","g1adnaytf57hjut5lnus2epjx0gt3s66jtpldvkm"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkV/fBSTx+YrRTrY60l6nuzf1NFggIJKxfwxYNbS0s5G"},"signature":"msjAhqtN8v6KWosYB4f2kIF05+Tnv2aatX/SSBb//uII0e62OFb5NhDDd9sogHHG+26EuueaarOfYGceL4ZSQg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1q3pwl28hgfz6dygqmkyqgpqal8cwg2x0x2nhe3","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"qMK/U5FI9nAiG01/4TV5qZC0ICfo/V/UO9JvKcRhv9tMgGr0nE3KJQBJgXQ/Ayg/Y24tZMTEbSfNlP1z6ZsQjQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1q3pwl28hgfz6dygqmkyqgpqal8cwg2x0x2nhe3","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","vaultygqmkyqg",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/wvpa9TZUAJGh930OHSPU+kR3q5IvDva1nozFTZyW8m"},"signature":"fPaOjp/zcaV6MJb4RU6xEF2XgrY3Qv3K2fd7MCn7o09MRdbCgn47mAGF3poPSvdlkAbEo7rc2kdO3crDG1FkgA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1q3pwl28hgfz6dygqmkyqgpqal8cwg2x0x2nhe3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["vaultygqmkyqg"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/wvpa9TZUAJGh930OHSPU+kR3q5IvDva1nozFTZyW8m"},"signature":"lgX2CL5mncG7Mk4ARyYhQz7ZC/Jwh4KgpprnfqUYj8pH9jbAJb++kd/uuvqQK4rFJH5osdwE2soNoSOthFqGQQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1q3pwl28hgfz6dygqmkyqgpqal8cwg2x0x2nhe3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1395","vaultygqmkyqg","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/wvpa9TZUAJGh930OHSPU+kR3q5IvDva1nozFTZyW8m"},"signature":"hndodEpAtc5dhOFDSpzFy5Km4QKgcyE6J1QLKvUv4ORNBVl7Vc6jUownU6s9snLNzWlenxdhHHz1jTQojAec8Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1q3pwl28hgfz6dygqmkyqgpqal8cwg2x0x2nhe3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1395","1","1","g1q3pwl28hgfz6dygqmkyqgpqal8cwg2x0x2nhe3"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/wvpa9TZUAJGh930OHSPU+kR3q5IvDva1nozFTZyW8m"},"signature":"gERPDV7XRf8ggqo3lfFLrmyDmMeiOMULvE3JR+U45mJcA++j5C9keYdU72zv/ubfVEkxsdf32Dr+2ilTcp+cdg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"Cj4phqqylhJ+nqiUJFDlvK9ot0Zb0Yo4YC57/Qk5V244R5waDZClWJXnKzOHZ3Pr9jJ+FnMKTseKR0hBZnW7PA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"SiSvPTMDSyA136x4iN7HGrEf8z4zcY+G2MyLO5+xPFQU6RsS2n8H36YLLbqJbhUzWfg4mBn2NZNdwzNoPO/HDA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"teZaxUxF2Xc+ZIbw93MAMc5dhyBTmbRGVgztYoujeURkE7ZmtlDVUMSPfUM2bBJohVp8CkPn+lGktORdWodq/Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"8LHxz1jAvXKcvBQXiBxoztVuSuJPgmU4wGVZR1ks8VoEY7cpAIcNnkOz2oP9G/eu/X2FJQ3GLlDYOWPIAbBBKA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"j6go6jx2j5tRulxLPpRWB/67XUtcZYsSa1wLlxwJIzA7UHfPeI17+r9CAE/H/6yxs97RWADhgQDP121a2vlQIA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"RrVRZ5aBbWnvQwb63By4FkdUl0rqvzymuxzd7/hHUaZIAFB/a2AbSIPoOxJKM6JXn1KYbb+P0o2044xLrgi6Tg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"YUxwwsiWx/MtRTyrlkAfASDYS9u2Izp9hW38Uy9QBPoVtn9Xr3oyG/Hxg2x0x6WJC+JLiiHNNYUqUbPFTDdM6A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"D22Ko4hNWFyD48NnjXsBHXO6XkBqPb/VIgZ4rgKn0TUXl8u/w60wlJi16Dupw77TK0onOTHjgWY3Fionsn5C7A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"H56rDMtVItU4ZhgtjJ6xnnTZfJfaVGTj4wLvICBx40kvx4ph+UIKBJPQ7Y9+KOowgMkVmnHx9mqFIIPeayK/6A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1s7uy0cs77utjnmck3ww00ncgcxexwa45tlrgd4","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"f3cBaEyp7Pai9C3E28Uwtrs4Yqv56FQHpjGryRQlE2hpC7gyZJxW+2b/evNVBthsc6Icw+336OoykQQwbO/02w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","2"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"Orj6q1lLoOdj8wN/+VGVzP8HyYCjuiBVem48CwCk67ZV0XJGRzye097dWo+Mrs0BLyB/pzG0/4xPzlgiwOFTHA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s7uy0cs77utjnmck3ww00ncgcxexwa45tlrgd4","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","promotemck3ww00",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2bEnFLfpB+xMqrnkntMFFkvD7LUt6WAnR70aHBD2JFD"},"signature":"+HIEOP8g2s/WMX3JwF9HQ3D2ey+Z3sXilQvZbmJgZ1xw8tYeJyF9uPwvWU+HmrX+0T3Utuaw8797ch1KacEFGg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s7uy0cs77utjnmck3ww00ncgcxexwa45tlrgd4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["promotemck3ww00"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2bEnFLfpB+xMqrnkntMFFkvD7LUt6WAnR70aHBD2JFD"},"signature":"cVY2HDAB5agTHM8ja+YlqOagnioULh/iXZJfI/xoRqRRKYN6D5GnIGxMiGymoa9+sOLZc0pxQYTWGW8MymhSqg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s7uy0cs77utjnmck3ww00ncgcxexwa45tlrgd4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1396","promotemck3ww00","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2bEnFLfpB+xMqrnkntMFFkvD7LUt6WAnR70aHBD2JFD"},"signature":"Ze049fK+AcGPdRmnKjLK6ixffYCFJOCVKHnriQWSmf54TsHjQ7cY198e9GKJkTDMRdV9GdoFDgGxuykXJOM3og=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s7uy0cs77utjnmck3ww00ncgcxexwa45tlrgd4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1396","1","1","g1s7uy0cs77utjnmck3ww00ncgcxexwa45tlrgd4"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2bEnFLfpB+xMqrnkntMFFkvD7LUt6WAnR70aHBD2JFD"},"signature":"OCxZGZ6zAzoOEOCxW4sBtDO/eit8CD3J8Jx8N9C61fEvvom5GD/SnnlMmlKBaoETk8d0CFwNVRnwe6pCoYFn4g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g17gjcdqc3y6f39ah4kdphx4ywmsen7m35shkgc0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ug1CK6+LHeUfBnTKMPVQGHuQKQ+Zj6R+J7mfBt5BfrUeTYi+Fj/fOj/6rEqfZAJnTkrgb6vhfp9cDt7Bjxs2CQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17gjcdqc3y6f39ah4kdphx4ywmsen7m35shkgc0","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","nobleah4kdphx",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1jU69t9nyOWQGNSQBGIIPjrEknb/I25qMUSRgcnNGFh"},"signature":"aktsr+kvakE4TmuLYnNtvAkd8VzDFvkdJRADH3bI4B1SDDdZ5M+AGOub818Lp9SF14vIZ72Mfy0hJRs5yii/lg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17gjcdqc3y6f39ah4kdphx4ywmsen7m35shkgc0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["nobleah4kdphx"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1jU69t9nyOWQGNSQBGIIPjrEknb/I25qMUSRgcnNGFh"},"signature":"ECLfoXCRwTVvqZYkKGM2jXnueGzbSFkdlb6hN3zrd3xy/hM4IG2q9NpTt+zW2d0/cxIyLYVwAcg6XNp4egEFLw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17gjcdqc3y6f39ah4kdphx4ywmsen7m35shkgc0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1397","nobleah4kdphx","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1jU69t9nyOWQGNSQBGIIPjrEknb/I25qMUSRgcnNGFh"},"signature":"kjKb2QL2CRi+XHOuUD08qLUMhEwdLd5uZwiT8Z7Msg9XuSvhA7KG2HEVHcqVHpnsAF0kMtx6/FAwgdUzl6lGnQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17gjcdqc3y6f39ah4kdphx4ywmsen7m35shkgc0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1397","1","1","g17gjcdqc3y6f39ah4kdphx4ywmsen7m35shkgc0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1jU69t9nyOWQGNSQBGIIPjrEknb/I25qMUSRgcnNGFh"},"signature":"kCRzoOST+C6s7y0RaLQQ/6zt0bGHBGzIF6pg8b36CiAkS1quMIVwR+cV6lM7gZXNmuM5h4wCeQz96wmhqEtqlg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1w6dr08j3px4xzma2hyk9dq3rd4wnnq3vxfrm29","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"rM2kWB7tMMof9o3Z6uMIacFhvtTn/u6bvuPx7rRUmQJ3kRYuO9UkWZwU6BVEnqYWN1yqIJwbryBnj2k5jGR7Yg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1w6dr08j3px4xzma2hyk9dq3rd4wnnq3vxfrm29","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","barelyma2hyk9d",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5Y7PRQs3dAnVctt2rUysIzVqFWAE8yM6DtSD7iVh8zO"},"signature":"wE2w/1FzY6Hf7eJJkF5unkAPSsOlv8/K9T6D4EZcm0VFtcdNsyleWgqKWc9a6GeWn5uI7G14MRLO7ckkhWjITg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1w6dr08j3px4xzma2hyk9dq3rd4wnnq3vxfrm29","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["barelyma2hyk9d"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5Y7PRQs3dAnVctt2rUysIzVqFWAE8yM6DtSD7iVh8zO"},"signature":"khqsHFuEA902Vkq39DoXn/ehkS2vvhbbTjAJm8sDvGtT5Tftpdvd9Jsp1j0VLDLOkZAN3h4oK7Rpx/7NzReHHQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1w6dr08j3px4xzma2hyk9dq3rd4wnnq3vxfrm29","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1398","barelyma2hyk9d","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5Y7PRQs3dAnVctt2rUysIzVqFWAE8yM6DtSD7iVh8zO"},"signature":"BhzagejNgy3FDsgvQmPq7EyOPmsM41WHLvyI8N2ajTV4cfDeObZBh+lpmssd1hnpuEsTgn4uPUhYGZIR9WZQzw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1w6dr08j3px4xzma2hyk9dq3rd4wnnq3vxfrm29","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1398","1","1","g1w6dr08j3px4xzma2hyk9dq3rd4wnnq3vxfrm29"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5Y7PRQs3dAnVctt2rUysIzVqFWAE8yM6DtSD7iVh8zO"},"signature":"N7qDI2gurITdqLhskmlR1SDGtOptdEdruEHktfnQ1hcvgYoOtPsrbpc9S98nCO1FeRuy+pbHic94H9Taj7jTZQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1hgfcjkpnay0390gr2jfndzfn33pqe0t3fdjy2y","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"g0j5pWgYSX0+yCdvQfDljcR8mF8ZPPY0iSgOfEV51/EGbXQJCuS8eUoah24sIiD01jgb9baEkgYUK+Cznrou8Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hgfcjkpnay0390gr2jfndzfn33pqe0t3fdjy2y","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","enhance0gr2jfnd",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap5Djei0UKtPLafQmpGLZdDV6XqXEDu63TyDrHqcNvLI"},"signature":"islRD6Q5CNdS99c99CjDvY+z+qNmXTqZ2ASKld/jsCk4A7CWYaMWLh/AHjAUt5k2ubILywCymo7fJDTPlXN6lw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hgfcjkpnay0390gr2jfndzfn33pqe0t3fdjy2y","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["enhance0gr2jfnd"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap5Djei0UKtPLafQmpGLZdDV6XqXEDu63TyDrHqcNvLI"},"signature":"RXAOR/jgw1lPMHtJJA7c/kKGUlfduKx5JvtBnNX2XMxKEJjkAMtCT3g4ksP6LUZoNwOgq5h/n6l4ss8QOuEwPA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hgfcjkpnay0390gr2jfndzfn33pqe0t3fdjy2y","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1399","enhance0gr2jfnd","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap5Djei0UKtPLafQmpGLZdDV6XqXEDu63TyDrHqcNvLI"},"signature":"99RHGJkrzv64e9Nr340ORNjLX8R3UJIlx/wFUMQSSFAz+UFERyqxE5kBsmXDpVS+OGWIGEqVnxCmztpTLDqHMA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hgfcjkpnay0390gr2jfndzfn33pqe0t3fdjy2y","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1399","1","1","g1hgfcjkpnay0390gr2jfndzfn33pqe0t3fdjy2y"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap5Djei0UKtPLafQmpGLZdDV6XqXEDu63TyDrHqcNvLI"},"signature":"23N/P1e0pNBzBeAMD9LKRgb6BT07e7TxOZNI3iF5yscL+4gkgSltLGWfGf7TNeQfrcibogA0sdfoSTTXbeIiKQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g10slke8zxzfkeuqhv8hg8ttx73uelxyws6r24ck","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"uooNU4CKZGXuYNyvVqwve08R9YQpLaQ97SpjEspLUmIQ7JXC2wtRXJxkMKPwT5wgwMgV6QycaSsFnfuElB4bKQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10slke8zxzfkeuqhv8hg8ttx73uelxyws6r24ck","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","badgeqhv8hg8t",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+p6P0V7Q+nDhnVFukW6Nwc2NU15YLpXqcShcPD65iiK"},"signature":"RbfUTUPvoAM2cU/I5ALQIhQp0Bq8GWHs7gfoDbn/raBd+ZFrlCYFwGQ19EXBntQ58067JDHSfG0bXzFRvdJX4A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10slke8zxzfkeuqhv8hg8ttx73uelxyws6r24ck","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["badgeqhv8hg8t"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+p6P0V7Q+nDhnVFukW6Nwc2NU15YLpXqcShcPD65iiK"},"signature":"QmdTxDqhW65NNNjYg1XpH2oeUYlgccXWEh6Zs/tZNC47P9FS76dShlyca8O1RFSRYh+vyjAsAr3DYYAWotkb1Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10slke8zxzfkeuqhv8hg8ttx73uelxyws6r24ck","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1400","badgeqhv8hg8t","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+p6P0V7Q+nDhnVFukW6Nwc2NU15YLpXqcShcPD65iiK"},"signature":"NEl37WZ/j+9NOW/Mwg3wMGlWNwnG6gCw+tobRXKqZz4gp8m0xyXpsFN6fDJ2ieusruCK+w8CnoFc9xLFvkEklQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10slke8zxzfkeuqhv8hg8ttx73uelxyws6r24ck","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1400","1","1","g10slke8zxzfkeuqhv8hg8ttx73uelxyws6r24ck"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+p6P0V7Q+nDhnVFukW6Nwc2NU15YLpXqcShcPD65iiK"},"signature":"qgMEAMp/zIhAl5gekvkndxzLWiWe8I1P3Ggt66Ok3w8C7TRUN0TdS5kaNqPCbLMVxsvf5uKc4Sj9gnj8DI++fw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g142cm03ndvra9x9tv9gunwxmmlxzhhdz42xjz9q","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"q4KZ83VU6Iq22fNXzCxBKRBEEnbjwSFedhqf10pQWIlGQMYeRasCe2ZFHabDsSh0qFIk4iV04TRMTdNlzrxixg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g142cm03ndvra9x9tv9gunwxmmlxzhhdz42xjz9q","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","unit9tv9gunw",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah4WhGm7bsldykonwgw2+IQBt85+s96S1+WyGuolRDQY"},"signature":"mE3GkTdCOzdR7toJn0/+wrHGgwa+x0BQtNEZDeVI7KwXMVUr8HaVgXr3V6UNMHn8n2vt4NGBs84KSOy7rcKemQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g142cm03ndvra9x9tv9gunwxmmlxzhhdz42xjz9q","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["unit9tv9gunw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah4WhGm7bsldykonwgw2+IQBt85+s96S1+WyGuolRDQY"},"signature":"KO3M9WckOCP/9EotkIP+2GW2ZIYr+XVY5kk78ldrN4k4UyOgOzYWxu4ZXZJWAU+jQUphv05VqdKq8Tzmj6YQ3w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g142cm03ndvra9x9tv9gunwxmmlxzhhdz42xjz9q","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1401","unit9tv9gunw","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah4WhGm7bsldykonwgw2+IQBt85+s96S1+WyGuolRDQY"},"signature":"0VI9l3BtiCCVuL2yzk1T0K05vNLcLPydDFjOKnKL7ndIZ52ZlYXQaP+N0R6GRPrS/uJIkavAyj++vWPklbWikg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g142cm03ndvra9x9tv9gunwxmmlxzhhdz42xjz9q","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1401","1","1","g142cm03ndvra9x9tv9gunwxmmlxzhhdz42xjz9q"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah4WhGm7bsldykonwgw2+IQBt85+s96S1+WyGuolRDQY"},"signature":"ZuEEWkwoP7XfImrhNPKXix2tj3iArM4OsYfXbuLRtGVCAWOmb/W0vvD836RkTJVk7wiTsTG7/oxpFs0gm0FETQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1t8x36c72f3yy88duyylmnzshlsd0qhc2pkenw7","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"8E8uPAVVsk8+bFXFd2UejcT69EPnG0aQBja2oMq6F/VbIu66ynpYRBz3m7swqARLazor6+9DuNNs9H7kYtgGGw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t8x36c72f3yy88duyylmnzshlsd0qhc2pkenw7","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","artwork8duyylmn",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjqVHYIuM43BKB91SxKQM3zXPy0V91TpC9VZhSND3ZW7"},"signature":"t+oo3mJJYncHmY9nvqyFzTgHDoZNqlB8zWksfbSjigkrosWb9WSaAi40ts815xPM2Mckm4/5Xk30sMQ18diGZg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t8x36c72f3yy88duyylmnzshlsd0qhc2pkenw7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["artwork8duyylmn"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjqVHYIuM43BKB91SxKQM3zXPy0V91TpC9VZhSND3ZW7"},"signature":"LW5TGkjGMF4+QC32P2wKuvX0TaPqz/yz0a5sH1pld6JB48dJZ7cDq9zlED9a637SX448Xjc5udVsRUBANxqhIA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t8x36c72f3yy88duyylmnzshlsd0qhc2pkenw7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1402","artwork8duyylmn","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjqVHYIuM43BKB91SxKQM3zXPy0V91TpC9VZhSND3ZW7"},"signature":"/Vf3MNEpqqJ1ywT+jVq0g3ztPPAhwe/SefHT0jfiQPx4G0tQcEUEnIhMtwDS9vx//dOfs73GzjJ+AJgoT7UITg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t8x36c72f3yy88duyylmnzshlsd0qhc2pkenw7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1402","1","1","g1t8x36c72f3yy88duyylmnzshlsd0qhc2pkenw7"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjqVHYIuM43BKB91SxKQM3zXPy0V91TpC9VZhSND3ZW7"},"signature":"gUUQ2qeo/6a0swbxYuwC/5jREjCPT1d6VN5VQ2tomrgUcM7CA5D+8/S/j4Gly1/43gDEOaBycFTqnDixQylhEg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1lwwqnkwyljeyksnyuv4zycc9y6jfufzx76gryq","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ieIhG9awyRgIf9kf/jr1lkeLCPnswZ7j4ab8gqUSWnhJCJxpkIIT9ZrfNPlWLmIAqz+QKRHre596Oj7lXdY6zw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lwwqnkwyljeyksnyuv4zycc9y6jfufzx76gryq","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","juniorsnyuv4zy",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2E0BOmuTRB+yxwBq2mKmgFX79HM1m1g68tMa9LNYR4n"},"signature":"RB3n+Rn3u2L3EbregSNE4Iq1PCvjp/tXCdzoOsmeGosC4RwKmw65xPFilSk9g7XJd2u6B3WWQmRDXz4st6G4nQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lwwqnkwyljeyksnyuv4zycc9y6jfufzx76gryq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["juniorsnyuv4zy"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2E0BOmuTRB+yxwBq2mKmgFX79HM1m1g68tMa9LNYR4n"},"signature":"fhPakF+7fjyKekGzUx952FBdercd2VkECgJ5eWat7EAjzYSua+umD1Wlrd8LRw7teeaA/ctWBnR0wqgT6KXt/Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lwwqnkwyljeyksnyuv4zycc9y6jfufzx76gryq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1403","juniorsnyuv4zy","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2E0BOmuTRB+yxwBq2mKmgFX79HM1m1g68tMa9LNYR4n"},"signature":"EY+NW3MTT/fyWOGZcSyGlCNuJGQ8aA9njt30aMMFfxBJHdqx+Hd8XJ663gYKe2YwgC4kt8iMDkqdnuja3gYADQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lwwqnkwyljeyksnyuv4zycc9y6jfufzx76gryq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1403","1","1","g1lwwqnkwyljeyksnyuv4zycc9y6jfufzx76gryq"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2E0BOmuTRB+yxwBq2mKmgFX79HM1m1g68tMa9LNYR4n"},"signature":"qetNJFGHm96Qno+dWN6zKxNO9PMEUDRkEtWQP6sP0kxrVfueWLKriGCehXJkbOOsGiweD6Mmg/AQEpb2B3HYEg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1t2vzp42gsd0mafj5g9f0puecd2ax25mlutkl8d","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"1+hs9OEzr2wDZE0X0m1Rb7fuA1Sn1T2V4FdPiL5thgcxYIdJbeOaL+Ah5Y3tsb93kL5GXgss4qrNS58hZFzG7A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t2vzp42gsd0mafj5g9f0puecd2ax25mlutkl8d","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","stonefj5g9f0p",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/GZMMybC0tr6AQ+K5+vW7aw2ic3SpFQCWHnbHHXDydi"},"signature":"gihAHEK+GDvMNZu1CGgjYXf/wE57/nyqQGzPj1r8yG5gi0a8BKoIFAL+PkMwN971rskqB312qlR5wLeyCSQmgA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t2vzp42gsd0mafj5g9f0puecd2ax25mlutkl8d","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["stonefj5g9f0p"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/GZMMybC0tr6AQ+K5+vW7aw2ic3SpFQCWHnbHHXDydi"},"signature":"ZwPflFb5p+6GlgrsJ0yijzfTc2kXY1mv6eqz0xjYO0EOjdLW4rvjde/hkkeLMpu+1iAF399aZ6AGCoxcopt6og=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t2vzp42gsd0mafj5g9f0puecd2ax25mlutkl8d","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1404","stonefj5g9f0p","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/GZMMybC0tr6AQ+K5+vW7aw2ic3SpFQCWHnbHHXDydi"},"signature":"4ec6t6OF0zT3ev3hU+wLPe2BWSVuSy0VpPNvSpYVH3xrxsEy++0vaHoxNZcG8CB4IvfdEu2Ko1HJb69Eh8/1qA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t2vzp42gsd0mafj5g9f0puecd2ax25mlutkl8d","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1404","1","1","g1t2vzp42gsd0mafj5g9f0puecd2ax25mlutkl8d"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/GZMMybC0tr6AQ+K5+vW7aw2ic3SpFQCWHnbHHXDydi"},"signature":"2cknquMFpt5sAaSyNht/ddA+ooMkPXFtj0F0U+LPBhwajqe61UuBYwZjfOvab0ciucw9/M38YYdxFB0mRvuxtg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ersty0mv7nerdncz0sqm6vu9lskcllvgfhkc59","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"djjXTomGxsznpq6iYUvlr6Xv/sAGYxHTjKFI80LbzW5pBpDV64xN5d/qFv9Ra9tTIOtBBs/3XDkAZBAnDyT2CA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ersty0mv7nerdncz0sqm6vu9lskcllvgfhkc59","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","clockncz0sqm6",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvpZ/zyBAL+XHjdZFhp2VVVWloJaPDZX2YLJZTErvSGn"},"signature":"mgg9o3zQxp0fF+c0dnjuLt2PZW94PAeaHO403KbOvG9NWZ6Fu7+ANbDPudlQUVQ1eMgGZ/sAFO4ppZYJy/veow=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ersty0mv7nerdncz0sqm6vu9lskcllvgfhkc59","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["clockncz0sqm6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvpZ/zyBAL+XHjdZFhp2VVVWloJaPDZX2YLJZTErvSGn"},"signature":"DrrAQD0BIpc8cBpEENPXaGH/7pRxZ5F8sx9ZkZ5IFvN/85qZQTBgq7X6K0gvN1KcmSEzdGsG6s48tjkkPCztlQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ersty0mv7nerdncz0sqm6vu9lskcllvgfhkc59","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1405","clockncz0sqm6","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvpZ/zyBAL+XHjdZFhp2VVVWloJaPDZX2YLJZTErvSGn"},"signature":"961Qk16BmyKdx16RCbYw13qmWKMRr2f+ThEDECPBt4QvXkHqPbLNOhHK5+5YnB8Vktx0G16o0+ZmJbv1wMEJbA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ersty0mv7nerdncz0sqm6vu9lskcllvgfhkc59","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1405","1","1","g1ersty0mv7nerdncz0sqm6vu9lskcllvgfhkc59"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvpZ/zyBAL+XHjdZFhp2VVVWloJaPDZX2YLJZTErvSGn"},"signature":"QzeXe1RVHyhfsNlMF7vNYFzy3iKKTXaFsnTnz8pHV5JpIhguleqiwHgJufVUqIeNCYVhYfynlb3Kodb4L0ByXQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1te032sl20vy2pxqtuzkk5sgs42r5r7q2x2lxtk","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"APFzC/XyfArwI9rF56R2CVjSk8guz5RB+myIDIZL5UVYGAfP0GK6vs/Q4jYbGqXirNI3FQ2J+K3d/63zHHjQuw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1te032sl20vy2pxqtuzkk5sgs42r5r7q2x2lxtk","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","erosionxqtuzkk5",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxaVR7dOb6Hj1N2o+YlZZ+BbWqjCVxIwLvkp2KvCPaTv"},"signature":"OxjaNIXTm7yeAWCXG5jcupBhCn+plI100rz4l6ZnbsQtR0wEBnQa0VI7iV5g7P8LPCSOQMbH7N6a4tTsdZ9V9g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1te032sl20vy2pxqtuzkk5sgs42r5r7q2x2lxtk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["erosionxqtuzkk5"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxaVR7dOb6Hj1N2o+YlZZ+BbWqjCVxIwLvkp2KvCPaTv"},"signature":"dWP3vry+AXUCp1T1eUNtBp2KhOeO9uxgAaOetTML3iFazsi3pITrV68jsZYcTYIxznODZ1yTdk4ueGvWpoe3Dg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1te032sl20vy2pxqtuzkk5sgs42r5r7q2x2lxtk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1406","erosionxqtuzkk5","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxaVR7dOb6Hj1N2o+YlZZ+BbWqjCVxIwLvkp2KvCPaTv"},"signature":"fYDec1OJB5MYGihUSYtfLk8XzvFFz1KKIrFQX6pH3+ARdbJRm0QCaBG6CmGYi9Yx8wA9MpIgbfjr+9Cwd2Ggrw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1te032sl20vy2pxqtuzkk5sgs42r5r7q2x2lxtk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1406","1","1","g1te032sl20vy2pxqtuzkk5sgs42r5r7q2x2lxtk"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxaVR7dOb6Hj1N2o+YlZZ+BbWqjCVxIwLvkp2KvCPaTv"},"signature":"JJ8fPFMant+5a6+0EUuqz0n+XJDVBVZUeVzy6ZqrINktPpK/2cW4+CTZvW6H7ebySv7z/UxaarYIgSO0x3C++g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18zkjz75ze9xhuxaze4k94gegq0kfl3n2eekc6a","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ibpjBSIvitq8E5pvqFIw3Ef28P8o3nwnhrE4IpFF0VVbtECT0ptD5Ga/6MyOHKPepDG8iAHwEfQkfNeHf7jvow=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18zkjz75ze9xhuxaze4k94gegq0kfl3n2eekc6a","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","seekxaze4k94",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Asea1yfirD1u6skpsT5f0U4yfRXBLmMaKus5j0oeGBkL"},"signature":"0FqVdoDG7buP87H02dtxkL4s/TKZdkT7aL2Q1JhLIDggF1/Zx8nFnVwbMwtKFvHq8dOnhxdo9/Tq4c30TXqWIw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18zkjz75ze9xhuxaze4k94gegq0kfl3n2eekc6a","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["seekxaze4k94"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Asea1yfirD1u6skpsT5f0U4yfRXBLmMaKus5j0oeGBkL"},"signature":"gNqLpcCeEI2qvesAR8RfIx+QbGsp2oYnq041PfKH3WQ//8OX3+qYGzU/AMk97bhmOBoPQlGRvfduKCBd/nMmUA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18zkjz75ze9xhuxaze4k94gegq0kfl3n2eekc6a","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1407","seekxaze4k94","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Asea1yfirD1u6skpsT5f0U4yfRXBLmMaKus5j0oeGBkL"},"signature":"HY2uue9iQz+mRnjQ8W0U6zhMo2VflpJP0yQpH4zJ2MEPy2ZwHiHIjVjzgUbcX+GZL1LJXoQjNcrz2X6SEXVFbA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18zkjz75ze9xhuxaze4k94gegq0kfl3n2eekc6a","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1407","1","1","g18zkjz75ze9xhuxaze4k94gegq0kfl3n2eekc6a"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Asea1yfirD1u6skpsT5f0U4yfRXBLmMaKus5j0oeGBkL"},"signature":"oWo1iIdDhp4Bz9W0MhM0a/U2XGeAAB2GtsvdGD97SitoMuvKs2NR71htFPmDGHN08RCYe7sMjsSJxDgr17Xc+A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g15lt6acmf5xtk3p4gzyr3hp09ta8jd6v4yzskp3","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"0vsPn8TpmaQvhI6UI1eihNzPAEB97R8tBfhcqsIGXGMUAk4EJiXgibgFQuMJAhSaZE/TD7k9M8gghSwOi2Pzkg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15lt6acmf5xtk3p4gzyr3hp09ta8jd6v4yzskp3","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","clickp4gzyr3h",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A74c9ax0j2RJhawNMX7dbxD70f6rHIvRl76kjFw1kObd"},"signature":"eCzvurC8illDdcMYl1hKViEwgS/+qfukOgWR18EEl2Ff36QBfWO/oIOwgJk689SACDp8dYSLmguM0g8zxraPmA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15lt6acmf5xtk3p4gzyr3hp09ta8jd6v4yzskp3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["clickp4gzyr3h"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A74c9ax0j2RJhawNMX7dbxD70f6rHIvRl76kjFw1kObd"},"signature":"wh1fyPfggmR/RGDcif5OBUVNmywAcHkPrMOjO3YwD3oC97ZupmdIYSnpg0B7EtM7nyJKD0vjK9hQS6ubGbeZpA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15lt6acmf5xtk3p4gzyr3hp09ta8jd6v4yzskp3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1408","clickp4gzyr3h","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A74c9ax0j2RJhawNMX7dbxD70f6rHIvRl76kjFw1kObd"},"signature":"zSr4hlYe62FdKyLnvfxJDOzZ2rgqIXCB7GnO8FMz7EM1SIEEwynB0Q1j2EenBYo9MuRuFqEyyYcLFei9bqbqCw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15lt6acmf5xtk3p4gzyr3hp09ta8jd6v4yzskp3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1408","1","1","g15lt6acmf5xtk3p4gzyr3hp09ta8jd6v4yzskp3"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A74c9ax0j2RJhawNMX7dbxD70f6rHIvRl76kjFw1kObd"},"signature":"p2rwB/JKxsmLdF/y8yXwBq0n44aPAv9XgjT8GVtHOgZj+N1bsk3mSo3dI6B03QNksmnLfRbfS0F3Fw8Z+77lQA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ddymqljd9fjj974gtyu47v8ejptgktn85tg05w","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"V/pKOipi6nq9EGHc3WFenqpjvFRmsrNnrMQYsCrpFWU9OJcXCXuFslCmW6ZWIH9cjwrdWxehA9Evfoy86hVfSA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ddymqljd9fjj974gtyu47v8ejptgktn85tg05w","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","maze74gtyu47",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A54jYOypUMPhnCBkdwdF5rmex/MzO5BHgnZvKgSy4i6u"},"signature":"F+3rM0HvhZv/fz1Rmosp1o5MRx5JmYSvN1TibLfAeDQl8k/ulldS2epOPq/faX2XPBrGIVXu+kHOVobEdv9pXg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ddymqljd9fjj974gtyu47v8ejptgktn85tg05w","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["maze74gtyu47"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A54jYOypUMPhnCBkdwdF5rmex/MzO5BHgnZvKgSy4i6u"},"signature":"z03i8iUS90FNPahSDHqJLWciJ/UTlCood6FrrBjpn7QBINRGTu7nds50k2n059awsdDju5B+H2FKiKZ03P7rBA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ddymqljd9fjj974gtyu47v8ejptgktn85tg05w","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1409","maze74gtyu47","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A54jYOypUMPhnCBkdwdF5rmex/MzO5BHgnZvKgSy4i6u"},"signature":"1+MfEohMsJcIViUddLRUNPHK04NKMmpA562DCqTlmhEMyriKCiSWOpSTrTILss92uPQ+qRHjNlV3Rtuup5FVdw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ddymqljd9fjj974gtyu47v8ejptgktn85tg05w","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1409","1","1","g1ddymqljd9fjj974gtyu47v8ejptgktn85tg05w"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A54jYOypUMPhnCBkdwdF5rmex/MzO5BHgnZvKgSy4i6u"},"signature":"xw77vBkDPr80+0O9LxGXDqP2zJyaE95M6A1STbqewHhQAq+96wm8TtbtZaJMhvNM7AEisHkqf0TBlK3t+43ihg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1qazwgtv3wvg5ywxwwy4wemkpu8epd5mrjshq9l","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"2Ad/cIPkyEyQKpd+4ULWez6NlbfsQnOw4bRMSW1LYnkvGTfRDNJgmBkL0/oh/D6AueOVW7Af5+Q3vxEAixR7gA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qazwgtv3wvg5ywxwwy4wemkpu8epd5mrjshq9l","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","resistwxwwy4we",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlikltQTJJQBGGGpCABuwc7azKlKJbNDidBripzDcmZA"},"signature":"etOyOOrKmFAuATfQPahzAENYLzsIeznr1jWzDDA04JNRibpmsVoH+0tkm2BLMJA7zu9X/0qF+g6zamQj/CPCaA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qazwgtv3wvg5ywxwwy4wemkpu8epd5mrjshq9l","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["resistwxwwy4we"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlikltQTJJQBGGGpCABuwc7azKlKJbNDidBripzDcmZA"},"signature":"20nu9nNaYSCE7R5R/X7N4wrSsT980H7joHalCJtilAxgv72SlPZOfJVZiguYSjRY9cvRu/AQV8gtgLf1Zzupvw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qazwgtv3wvg5ywxwwy4wemkpu8epd5mrjshq9l","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1410","resistwxwwy4we","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlikltQTJJQBGGGpCABuwc7azKlKJbNDidBripzDcmZA"},"signature":"F7AoB6wN/8LAyjXMrNCyuG63VgJSy9SD/wlysTGUfIdVZE2lrmASKdrsS193kKXu7Ya8Jl/tVQAQOBA8QtKQhQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qazwgtv3wvg5ywxwwy4wemkpu8epd5mrjshq9l","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1410","1","1","g1qazwgtv3wvg5ywxwwy4wemkpu8epd5mrjshq9l"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlikltQTJJQBGGGpCABuwc7azKlKJbNDidBripzDcmZA"},"signature":"+LDzwOklTYWmcK3rUOwHuI3Yml9iOjtnPO6f8NTjGxxGbxMG5Ju/qwaN1+HC9ifJteXOVicsbYbd5j5qtAbUJQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17mcw908lp5y006avp4fjr082wrzryzqh2qgr8k","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","12"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1Ie2uJQVGI4K/6kwsKQkZK48YDrk3Ic4DKiVS1Ee2yL"},"signature":"9BYzbO9c1kPGuyIsNlozZa9wjww71ZMXUichDv/aTcBlROW/zqJSL5RmBuZaJTprb068TgiriBLvgodN9ZJIBA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1jdyk4tex9a84tkhllterq3ldfe05hmq8vnyxhc","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"lJhBmINo1K9IT6SHayR+4f8U/Z57nLdzoJtnpeVxAZtCXnSn+ft5StnLJg6oIvz6Xw9Z2YJosXROFz1ae50KIw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jdyk4tex9a84tkhllterq3ldfe05hmq8vnyxhc","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","tenantkhllterq",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AydWb5OnURfFkAIWT1GfzoP0vV8ekgBsjjY/rkWXoIz5"},"signature":"1jHzlxDiYwybDryFi1pYeGcQVnDTS5dfijmbG5EkL0IxCYrx7eAEZxmrPA6mznPzt3QK17CG9IWVEdmpN7SgKA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jdyk4tex9a84tkhllterq3ldfe05hmq8vnyxhc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["tenantkhllterq"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AydWb5OnURfFkAIWT1GfzoP0vV8ekgBsjjY/rkWXoIz5"},"signature":"ipwxCEW3Akl0tEaTmCJK95aILfoLOF9g0S1fAh+73fQGJQANw4XWyQ/qDy1zjMMVrGiGcE4NwrDVGTik4mr6Yg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jdyk4tex9a84tkhllterq3ldfe05hmq8vnyxhc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1411","tenantkhllterq","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AydWb5OnURfFkAIWT1GfzoP0vV8ekgBsjjY/rkWXoIz5"},"signature":"+KskhveS4HQimuPkUF3CwwES7/6fm6BO03zstNnT/i9Eo7pfit3tec/bWA7oM+lW+rKRcyFREkGlGLU7/27OBQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jdyk4tex9a84tkhllterq3ldfe05hmq8vnyxhc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1411","1","1","g1jdyk4tex9a84tkhllterq3ldfe05hmq8vnyxhc"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AydWb5OnURfFkAIWT1GfzoP0vV8ekgBsjjY/rkWXoIz5"},"signature":"184XoC0gvlk+fTqV5Kp7A4jvCDiqPTLivX78v2B3mvVDh2QprMn1XL7bIXuV+CylXx3rqIc+LZgNU9BDpssnlA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1fya6n4f4n2wy9hukesgurx0gsr5l7l3jtp87z3","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"kLbiHMTtrJNhIczxeCTUy3MqEVBzOIo+a0rchy9fh6c1BR6fLMGQavgCvKRoDPdxI16LezgySTw4DUTDl/58NQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fya6n4f4n2wy9hukesgurx0gsr5l7l3jtp87z3","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","stoolhukesgur",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArXpWiJsu2KGOtfcprjL2TCN7BHSjG4FxJDLZ19SAlmE"},"signature":"V1ovt+5/e8v7idJznXPI9lL41EMnlNW1efAj27vEjHhOCzVlLTLdTccxaRM6eJ4zIc98FUj5vg9zT0knkkOAOg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fya6n4f4n2wy9hukesgurx0gsr5l7l3jtp87z3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["stoolhukesgur"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArXpWiJsu2KGOtfcprjL2TCN7BHSjG4FxJDLZ19SAlmE"},"signature":"ULrXLkMFMju+mY08p2ujJE75JI5FPCt6Q50Q+NTCgvJ12+oAb4mgBayxVyJCNW7k1g0dMPKvpoLsVQAUNGM5hg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fya6n4f4n2wy9hukesgurx0gsr5l7l3jtp87z3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1412","stoolhukesgur","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArXpWiJsu2KGOtfcprjL2TCN7BHSjG4FxJDLZ19SAlmE"},"signature":"5ZIYIXLoi+P020dxghAv+ZYA9xj+WwYF+XzbaO4djrclUaM039CsiXl3oX/4oSqxByp0PimjrJNPYHfegqk0ig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fya6n4f4n2wy9hukesgurx0gsr5l7l3jtp87z3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1412","1","1","g1fya6n4f4n2wy9hukesgurx0gsr5l7l3jtp87z3"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArXpWiJsu2KGOtfcprjL2TCN7BHSjG4FxJDLZ19SAlmE"},"signature":"bZPR5Sepb93DJhb41ZgqqYJ7KWatDalG0LHbf5iGijoz05Ak/cmei2FnxnDwiFwclWzBxGbq8IaaZBL4xAhYxw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18ntkrvmyntjpylrg4xl0zacj3ydg2nwccgwqws","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"6M34+dP/+2Su6JL6chAu0eEVkLYXho2eB7/3qGQqcI8MHfwDpw8untotKfRS+Bpqp4gckHf7tgL8iE0c487hqw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18ntkrvmyntjpylrg4xl0zacj3ydg2nwccgwqws","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","happylrg4xl0z",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A15qgUVfK4KIjWRIUehRJMrW8F5RLAAEUgHINt8xTyfd"},"signature":"GipyOpZLx6O76prkYqTcAfLSJmtbkkNwEEEYU7aMNqQdfyQndA1p6ivZvbtWxBqm/qTAU+vOBj315Sfn1Vvv6Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18ntkrvmyntjpylrg4xl0zacj3ydg2nwccgwqws","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["happylrg4xl0z"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A15qgUVfK4KIjWRIUehRJMrW8F5RLAAEUgHINt8xTyfd"},"signature":"lnNevMtecw5E/k7kipnJ9xXkxRfDYeqGP+m3hjzM1e4cndk50CztwDPtGcxALVxNQHXoV5x/Zo5+VXU2EFZUjg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18ntkrvmyntjpylrg4xl0zacj3ydg2nwccgwqws","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1413","happylrg4xl0z","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A15qgUVfK4KIjWRIUehRJMrW8F5RLAAEUgHINt8xTyfd"},"signature":"6soYHB8Hje8P+hLP7H54/Glw/0Q8MpYw6Piszw17AXMx9y5o8dZzyeig0ySZi/abDIuMf5iHJyJd8cudMZCnAA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18ntkrvmyntjpylrg4xl0zacj3ydg2nwccgwqws","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1413","1","1","g18ntkrvmyntjpylrg4xl0zacj3ydg2nwccgwqws"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A15qgUVfK4KIjWRIUehRJMrW8F5RLAAEUgHINt8xTyfd"},"signature":"uyOEfstHfDrpFh6iEcREzvAXvYnxbJ2sq0S3rlb6bf8Ramlp0/PzXySmMx+t1DFU96G9+7V0Ig1A95BOZqu8uw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1hahsuam3lspelueluecxppawgcq2dyzmhgkhjm","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"1Ne8DlEnDPYgdWpU5wgsna1leAEojjlikm0eSkuX5QsGQ4jOzMiBwLsXuRSM6Nv0kz0u4AMCeYS8D86PfrQjeA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hahsuam3lspelueluecxppawgcq2dyzmhgkhjm","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","rightueluecxp",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqiA6pxW5+aCfYsMddl22YXcjj9VaZl10DKEf0n7vgiP"},"signature":"4GGzOUmbQ5ASiX0W2Zk1s5Lwj68h5M+Ty/UDPSAAkcAbF6wguWy1LEkJ+QRfKzK8qwtJmWuZx6rK6tY5CbAHCQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hahsuam3lspelueluecxppawgcq2dyzmhgkhjm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["rightueluecxp"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqiA6pxW5+aCfYsMddl22YXcjj9VaZl10DKEf0n7vgiP"},"signature":"PIG9jnasmnc4087AUOR3DZrukwM9BMWjNabjXppoKLZY/5n/VECN6bzKNJRfbXbsqvVhl+RPS2ABWpjIDKAL5A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hahsuam3lspelueluecxppawgcq2dyzmhgkhjm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1414","rightueluecxp","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqiA6pxW5+aCfYsMddl22YXcjj9VaZl10DKEf0n7vgiP"},"signature":"I6Qskm7hM5WsSoU2lPzu91wq91v6/Ob3LowVDJub9WIujM7PXpPfltmtZ3uTK/Q3wYgs/OlnOGFG4sVnKU+H7A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hahsuam3lspelueluecxppawgcq2dyzmhgkhjm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1414","1","1","g1hahsuam3lspelueluecxppawgcq2dyzmhgkhjm"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqiA6pxW5+aCfYsMddl22YXcjj9VaZl10DKEf0n7vgiP"},"signature":"iDNuzFVDukEnGGEczkb8cRcW8J2H9LWL7eKmQA4GFc5QxARBsSUeFmPtoEnX71eMFJfb2d1Rcnn4S5XtQEzgkA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1uaj90vvvqt5al0ejt478uswlfs8mf9cyfvn24m","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"crYn4D/302rpfqQUbt3Xqmp2+4ugRjyW+S86u3WS/G0kHUlPHoIosBNNDtpX4sW947PBc6ZvSymOlbgCro2Rvg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uaj90vvvqt5al0ejt478uswlfs8mf9cyfvn24m","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","daring0ejt478u",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvNTnIibB7xY2h/ah2PFPYQuZ1mOkX/6S1e7k2RlArvK"},"signature":"UxK6he5WiUbFnq9ljAHu0C35HbVrJDzh0JojicbTRXkdhDwYz1Skmp/aDYW8D3Vp8/5sxzzpJAMV2m08J2qVEQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uaj90vvvqt5al0ejt478uswlfs8mf9cyfvn24m","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["daring0ejt478u"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvNTnIibB7xY2h/ah2PFPYQuZ1mOkX/6S1e7k2RlArvK"},"signature":"Q4Yhwtg4T7pdusK+07/bfxlhhvB/mahYWMWyIgV0TB5EF4LqPhPF52SVTNXBZm3WC7M7tDzV0TpcZCBgM80Bwg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uaj90vvvqt5al0ejt478uswlfs8mf9cyfvn24m","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1415","daring0ejt478u","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvNTnIibB7xY2h/ah2PFPYQuZ1mOkX/6S1e7k2RlArvK"},"signature":"xmVlJo6OeB2rDpLHF22R4uqIscJO/yC5vxJoKY45YfAJjslBrF1k1LNXcJ+YaJ2AqeT9SD4rLIXwaGthBTT38w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uaj90vvvqt5al0ejt478uswlfs8mf9cyfvn24m","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1415","1","1","g1uaj90vvvqt5al0ejt478uswlfs8mf9cyfvn24m"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvNTnIibB7xY2h/ah2PFPYQuZ1mOkX/6S1e7k2RlArvK"},"signature":"7i1QIkvGR7xgOtL0rtiPVho1DQXq597gFr9RjQZtBiMzMhny8X4ibmsZNE2Rg8jhFXYTrX3xlzBxs09ZPOJ9tA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g14mu3mmmep4ek4lh6uyxv2mdg4p4s847s060ew4","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"kkJe96NeUuoJW2fQzzWNTVzDCoHahXCX8k8f8e7LojVEwPnzq3u1VYp81uo4Q8Cl2SxApecwTZr0xf62Es4lQw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14mu3mmmep4ek4lh6uyxv2mdg4p4s847s060ew4","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","potatolh6uyxv2",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AypoTI5laWSWsaVnS7rOmr17FlYoN1e0P+dlolcEvJ8j"},"signature":"4wBIpeLwh5UnI3d0PCdQdJHZaVeJkuMikeSC3ckbYxpvF1looVzBpYZFGpbh/YCTVwViwZ8eutk8xT/XH/UXVQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14mu3mmmep4ek4lh6uyxv2mdg4p4s847s060ew4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["potatolh6uyxv2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AypoTI5laWSWsaVnS7rOmr17FlYoN1e0P+dlolcEvJ8j"},"signature":"j6uOBNJvY4z2ozTBZyj/tChzkDXDEzQBXgEhr/4hGHp0KIHhvjvqcj4AwSpy9/LesnlawDWzEKnCJWwP7F4ihQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14mu3mmmep4ek4lh6uyxv2mdg4p4s847s060ew4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1416","potatolh6uyxv2","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AypoTI5laWSWsaVnS7rOmr17FlYoN1e0P+dlolcEvJ8j"},"signature":"H2yrKFmHJt/vB6sSol+pm1okV7ooKgvrQkojELjrxjUK4nAbeT6YD4nXakU9PKpA5kdTJEdiz+g+thjfeQJCqA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14mu3mmmep4ek4lh6uyxv2mdg4p4s847s060ew4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1416","1","1","g14mu3mmmep4ek4lh6uyxv2mdg4p4s847s060ew4"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AypoTI5laWSWsaVnS7rOmr17FlYoN1e0P+dlolcEvJ8j"},"signature":"JA2cN9UK3gCopDIIaEaCysecPLNQKLy9+fyS67e7voRcmVH705R+ngG6slnH6bcziPEzoKOTuA1QcWmBAQuo3w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1thyaf5qmjn897qt0dp55el2qnjf0gru42hsvu0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"IOBnpNWUSfOUhlcsdmsTtv31yqcD7saC3il0KZncuzx9F/Tyy7OI9Q+1wYW/pVRSM/v7p6/Y+qOaqPlAXypP9w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1thyaf5qmjn897qt0dp55el2qnjf0gru42hsvu0","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","usualqt0dp55e",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6ngOkWgsBhVkHn4ZeDylllaJ9pvDMqsAL+c4SKzVxv6"},"signature":"Wip+SP0lIMYBdgRLY9t/hg5P8rpFDD4cwyPjJooVOglC5U53TdaquFbe6Gby/++gsR0A4P3ec0HdI16l1umFXQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1thyaf5qmjn897qt0dp55el2qnjf0gru42hsvu0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["usualqt0dp55e"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6ngOkWgsBhVkHn4ZeDylllaJ9pvDMqsAL+c4SKzVxv6"},"signature":"fQEAhXjRe3BGHAOhUeBB3kgQZfOq5JYVTpvbY6KI4bwiyCMPgDJzJG1NKbg85lo2Eo9rU1xBsFTnJJPnt0YAcg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1thyaf5qmjn897qt0dp55el2qnjf0gru42hsvu0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1417","usualqt0dp55e","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6ngOkWgsBhVkHn4ZeDylllaJ9pvDMqsAL+c4SKzVxv6"},"signature":"dWLHl9cwFk/K2ejI/aAH0h/u8nnIXFBGBAGG5vW7NiwSZ4HfoktAac4yxQSnUe/r9JlRCSZqV3qEsJzdYXNbMQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1thyaf5qmjn897qt0dp55el2qnjf0gru42hsvu0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1417","1","1","g1thyaf5qmjn897qt0dp55el2qnjf0gru42hsvu0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6ngOkWgsBhVkHn4ZeDylllaJ9pvDMqsAL+c4SKzVxv6"},"signature":"JQUpd08bS4ooXShSSYb+KQYvLJlm5WYZ5fPToA0szfEBcwm1o+UssPIHUHEEHzEmC+nvZpEKEmrsXn5y0mUtbA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1fqeu4mq780nkxndt9wa6h66u0hs2tcwnh48gmf","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"DqoO9tTiY8pR9WQpmuooCfANd+uh+rKTonJggRxntIM+yCpOq4eWAA+ujeDO+jYX9Ivgkewh/NkbdcZPUSNjmA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fqeu4mq780nkxndt9wa6h66u0hs2tcwnh48gmf","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","cheapndt9wa6h",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgCPxI3uGYPoaLMib40hOx8IJkxPftyg0IKbGJ9brQ0k"},"signature":"UFT0MIdTDF6Oy5BgqS6btPXtpCmwg0cBAeSWmmNPPQBiQitGccJFLHwRKxTf7aMuf+PIkEb4eDEyO439T59UMA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fqeu4mq780nkxndt9wa6h66u0hs2tcwnh48gmf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["cheapndt9wa6h"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgCPxI3uGYPoaLMib40hOx8IJkxPftyg0IKbGJ9brQ0k"},"signature":"K8B1QHO9iJyQ6w3ujbaFDbb3Aw1P8FImtTLMs6Bd9OMj6eKQQp/Ejr45/LgzXVKhgD1QcmXErYntJFk8iLfCNw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fqeu4mq780nkxndt9wa6h66u0hs2tcwnh48gmf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1418","cheapndt9wa6h","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgCPxI3uGYPoaLMib40hOx8IJkxPftyg0IKbGJ9brQ0k"},"signature":"RtZ2il4Pb6CDxekjd8z+LBjoEAYgK0hL+7frC0y2U6J26pQDj+DKPQkVLoXpVXUVUV/y+estCFm9l1xlaAUX0A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fqeu4mq780nkxndt9wa6h66u0hs2tcwnh48gmf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1418","1","1","g1fqeu4mq780nkxndt9wa6h66u0hs2tcwnh48gmf"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgCPxI3uGYPoaLMib40hOx8IJkxPftyg0IKbGJ9brQ0k"},"signature":"QpiIncHKQ9sqCw9msb8brx2gjlhSW5ZIvd6mOtuPfzQQoRWeYtel3w2fCTxfh4Rk+S0l7rd0ScX7ijKZqT+UhA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1lsh9s0lzprysc8cm32tvkrq3u47s9xa7lc8c5h","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Tx06x1gG86Nc8PL6g7sEW7mYt72Rt1J07ZQCVtBDCnQbuqOYoZdN3lpcAgSK/MzLo2xvTjVCj0N+9w3RxL0tmQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lsh9s0lzprysc8cm32tvkrq3u47s9xa7lc8c5h","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","armed8cm32tvk",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtHjEMQ9AMCRsbxq0McFlEeD9X8pJ1Ouk5EWuVq5mKLU"},"signature":"y1p0OPdvs60rKycHnNXM/FCb+CVavKpdcHP2TNTUeY0oAhgrIWPWvx/3sEjfNncC6id5qDU/k/rOoPqhpV27Jg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lsh9s0lzprysc8cm32tvkrq3u47s9xa7lc8c5h","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["armed8cm32tvk"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtHjEMQ9AMCRsbxq0McFlEeD9X8pJ1Ouk5EWuVq5mKLU"},"signature":"EgBzJbNDr9TSxtBQLYsl/jgYlkWeYPZCMH5XcL/bFjANPZy5uB6wP8pLKV5svmJc3CY4p9w9QVyuhxl+yiwfMg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lsh9s0lzprysc8cm32tvkrq3u47s9xa7lc8c5h","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1419","armed8cm32tvk","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtHjEMQ9AMCRsbxq0McFlEeD9X8pJ1Ouk5EWuVq5mKLU"},"signature":"xcSS4SB8rqCN/8IFgX4WmsZ8oQGIZzkliTDZKSfoTFIPIFr/FsfYtsYAG2i4O1vgdTx99/z6paNukItWbsXbsg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lsh9s0lzprysc8cm32tvkrq3u47s9xa7lc8c5h","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1419","1","1","g1lsh9s0lzprysc8cm32tvkrq3u47s9xa7lc8c5h"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtHjEMQ9AMCRsbxq0McFlEeD9X8pJ1Ouk5EWuVq5mKLU"},"signature":"Q0/BYtStryAUnje/y132icY5/qWg1XVVMhbAwS3v7j4awrcpVMSBl+2UsTQM/DshbvoNvRx0tD/ie467XBOp5A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1jln99ypww5hudkr9gzfqlggd3j4mxl07qgmm3k","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"5Jae3PV8aY2wNfq3H646UsBlQpjyUlniuwwp8EJvrL4pkgfz3RMi7R0tiD9laGV9ee6yIRYTPjw+Cj/M80zABQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jln99ypww5hudkr9gzfqlggd3j4mxl07qgmm3k","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","issuekr9gzfql",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A72LgDgO9juajD2qzWRmQb9YYcjiM1oCW1M/Z5fxZt1q"},"signature":"UQAdoP1oZ4p/h+mWiWw62JQCdIV0rtT03xhkMyooX7gBFE+kRNkHNbmUmt5te0CB6jJHaUACfJU6aos/PB0Wbg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jln99ypww5hudkr9gzfqlggd3j4mxl07qgmm3k","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["issuekr9gzfql"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A72LgDgO9juajD2qzWRmQb9YYcjiM1oCW1M/Z5fxZt1q"},"signature":"DYmSj/rct0iwRQdtIINKHEAJMYnW5j4tfInn5VnnrR8frH4YM2kV7x+6p1J+urGzW0etO/5X6EPSkuDmBeHhrg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jln99ypww5hudkr9gzfqlggd3j4mxl07qgmm3k","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1420","issuekr9gzfql","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A72LgDgO9juajD2qzWRmQb9YYcjiM1oCW1M/Z5fxZt1q"},"signature":"RrtMOmGAIgVaSHBM4hfYvpyv5FOdVDHWbAbQzNR6UIwB1D3OiYYCd8T1wU6iOfZkwIsTU1SPPCdkLTfy7xmZ3A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jln99ypww5hudkr9gzfqlggd3j4mxl07qgmm3k","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1420","1","1","g1jln99ypww5hudkr9gzfqlggd3j4mxl07qgmm3k"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A72LgDgO9juajD2qzWRmQb9YYcjiM1oCW1M/Z5fxZt1q"},"signature":"ifbIdoHN+LWfJGyjgD8SgvmPzbrr2zcdY6IXMghVMc14+NTfIkqLKGKeRFbh7TPAdxkATL1b+uJUJDTZzc2S/A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1yed5wpssypyjljga0vep04cemex8k0hhfyyt6r","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"RKoghnKsOru3ehLHfn/DeyphyyJZAMdpLfGPcKiashV6am7tkPEEp4cxGpuOOGhMG20FRgf95MPevb+FpOi2dw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yed5wpssypyjljga0vep04cemex8k0hhfyyt6r","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","hybridjga0vep0",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AovEuiVUDtYqo0x7g/wAwet2DXquIcP8iCQPQc8ldOXn"},"signature":"3J4fW/fhTDYfS42bPYWpwTdKCNA5aw8rX7SpSbmhmt0/2874FWb+sdtqJA06hl5G2jCMqRXaQJ1+rlUa5+6Nqw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yed5wpssypyjljga0vep04cemex8k0hhfyyt6r","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["hybridjga0vep0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AovEuiVUDtYqo0x7g/wAwet2DXquIcP8iCQPQc8ldOXn"},"signature":"6vnY4G7DhIwChDW2aVDNYkEinBzGBqhIWfzqsHilUHIuELnjfdllIi+Psl2QNjhIDgg2AAGeMg/uW7KrDJDjQg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yed5wpssypyjljga0vep04cemex8k0hhfyyt6r","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1421","hybridjga0vep0","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AovEuiVUDtYqo0x7g/wAwet2DXquIcP8iCQPQc8ldOXn"},"signature":"lH187o2MvHBX5T7Qu7zYguagNDWNgCPSKJFI23dlDdwf6wSPamXDkS9lRSCKlPaoM3Cy5YfGrsnJQRQY7xMOuw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yed5wpssypyjljga0vep04cemex8k0hhfyyt6r","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1421","1","1","g1yed5wpssypyjljga0vep04cemex8k0hhfyyt6r"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AovEuiVUDtYqo0x7g/wAwet2DXquIcP8iCQPQc8ldOXn"},"signature":"MF2KDbtwYfweAjYsWEzxXkd8j1hWK5asTZLmEg1nOkF0bM6XH74o6VHCnJYPwM+9QErZvW9FoiNswAjjmDutkw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1r0fspfex2uz3vt4v4w0xr485jtsnqlu3sws469","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Y98BBaZHrF3T0T7DktrCvWf8AAtfphhQw9pI4iST4hVYmsvN7QLyphpoURtiaVmv25FXuQ2F6qsZefuLfyfJrw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1r0fspfex2uz3vt4v4w0xr485jtsnqlu3sws469","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","tellt4v4w0xr",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtKfzNr7ML6pxu6yGJeBPS4GVEvtD2RlXYmlUXD92bDR"},"signature":"Dt8AcNIb7YD1ZUjLggMd0U1tlwK+HY/lA4FOHpXBGxxYU+4Qo8h1Tb18AwpxSj6tFTWqeOHE4WpyPMGDLmD9Wg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1r0fspfex2uz3vt4v4w0xr485jtsnqlu3sws469","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["tellt4v4w0xr"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtKfzNr7ML6pxu6yGJeBPS4GVEvtD2RlXYmlUXD92bDR"},"signature":"mPfhQdH8HtTG+llfYee1bwqMYO+MW888QWhFgQccFsca3z/56jdV6xx35JWV1Xf2UCfpm6V3sBXyORvOXktgGA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1r0fspfex2uz3vt4v4w0xr485jtsnqlu3sws469","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1422","tellt4v4w0xr","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtKfzNr7ML6pxu6yGJeBPS4GVEvtD2RlXYmlUXD92bDR"},"signature":"p1GyZ/N3NdLJ+NhAqSyPSPZzE3xvwrbSPi3bPI8gd1QlLVsSH52AzcTyLfaCvfc9CRlIPm4SFWbScG1aiwL1vw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1r0fspfex2uz3vt4v4w0xr485jtsnqlu3sws469","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1422","1","1","g1r0fspfex2uz3vt4v4w0xr485jtsnqlu3sws469"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtKfzNr7ML6pxu6yGJeBPS4GVEvtD2RlXYmlUXD92bDR"},"signature":"yvkvaGWjkh358ODvho+JFNdnA4zB4WKQ9PRTnDGVm30bRTCUE7QqimxjJvtEmYgx779vL6CzkL1FpbT7h9tHDg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1uwthkfgj7wnwlscf9eayhp287r3nk25wy0ufkt","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"MhuhFrDWCfPTAN45qtsx4JmEBQwUptjIoCc5GUtYTDdwE/UKFyTyv/04O9W47tpj+c3Z8+nyA/gns+dqyE5hyQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uwthkfgj7wnwlscf9eayhp287r3nk25wy0ufkt","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","fencescf9eayh",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkHQFRS67evwgfDMj9QD1P6kQ6/jJ6giDL6hgYbg/LDw"},"signature":"NkNOdwZ8tjLdB0s9H99Z3TZGV81NdUnPtI7TFw/wQV9stRpeE220hth1pWKWSnmWfkIqv/AFAjiaeHovkZZ/3w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uwthkfgj7wnwlscf9eayhp287r3nk25wy0ufkt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["fencescf9eayh"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkHQFRS67evwgfDMj9QD1P6kQ6/jJ6giDL6hgYbg/LDw"},"signature":"Q8jaMJ99dL1UV6zbr3pxKiRjubIgjDt4xvhgxBQiPZlqAqpwE8qEGIVRD30WwKvd53/ry9af8SIMbQPz/WUPOA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uwthkfgj7wnwlscf9eayhp287r3nk25wy0ufkt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1423","fencescf9eayh","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkHQFRS67evwgfDMj9QD1P6kQ6/jJ6giDL6hgYbg/LDw"},"signature":"HlJ3T50mCWb4g/TacD420DRz5/+Yb2W/fdDG7j3R7qwbi/nWLPr1uvv1YrUrbq6UWN9PtxFPKRB0Un0h6HoDAg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uwthkfgj7wnwlscf9eayhp287r3nk25wy0ufkt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1423","1","1","g1uwthkfgj7wnwlscf9eayhp287r3nk25wy0ufkt"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkHQFRS67evwgfDMj9QD1P6kQ6/jJ6giDL6hgYbg/LDw"},"signature":"w8n9PImkpkNw4pyVcqpMXx1QzIeji3AdFFPmgQ1WiBshD+FBbGF9Znak59dnFC9+zfTcJTWbV6sVgf2dzI+1+A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1sa62untt76y5ke86899h5y7vwkjxhen3ydylew","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"QE+b/fq6qZJZ7TSeDdYHY1wCcXswhvwc1Zjh8Xcqn3gs96oAlJI8FtDWzz05KXxU8waLNhacX+isbULhsKSKVw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sa62untt76y5ke86899h5y7vwkjxhen3ydylew","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","employe86899h5",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhfHpOI/3z19UhIOEYCFgNx0ilprVl2Uq5zXR+mBLy/s"},"signature":"WcSD3I43xxQlPbwB+TC37H3Tq8X9Lw0u00V8Dy3xIbABPUOwwgj2hih7+B2xV2WQTjvkUriDHWX+E9PPq17L8A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sa62untt76y5ke86899h5y7vwkjxhen3ydylew","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["employe86899h5"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhfHpOI/3z19UhIOEYCFgNx0ilprVl2Uq5zXR+mBLy/s"},"signature":"NcLj3fWDC8noHxjyXdMq+We5BEvooRnRH8f6BwJTlVALjYvvtcg0lLc6XrwCGKNjAAfotNssEwx0a7fHYyeChA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sa62untt76y5ke86899h5y7vwkjxhen3ydylew","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1424","employe86899h5","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhfHpOI/3z19UhIOEYCFgNx0ilprVl2Uq5zXR+mBLy/s"},"signature":"7yl190ed4/hpFe3wWW20neK1yR+KPuNyq09vhhRMc/h3Um1GWkwGm51hPJYZddUYIunnhB9dD1OCI6u70SCE1Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sa62untt76y5ke86899h5y7vwkjxhen3ydylew","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1424","1","1","g1sa62untt76y5ke86899h5y7vwkjxhen3ydylew"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhfHpOI/3z19UhIOEYCFgNx0ilprVl2Uq5zXR+mBLy/s"},"signature":"KgHO9rQI/ErkzLEARm40QzjVq2YR45Tjk8kjXpqRXEAtggJYBmg/UR93RW4Lkp1um6DRCPpXLDNygmfND10P+g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1mpw2cem8zuqj792v4qy9q9yjg8qh203c8y7ll2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"guiuVkN+n7XO/g7lvpcH+WhMAmhKgbG2yLkmQVb0KQ0N3gA/D4BUxQzlrwyeYA1XgLbgXGxqx5epAcBHsbAOOw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mpw2cem8zuqj792v4qy9q9yjg8qh203c8y7ll2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","trick92v4qy9q",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Awn9k3YwhRI9oqVn5/Kr8yGjYgITEEcRLerA3ic6/3zK"},"signature":"QMl77blALGmtH5sun9FHW+Dqyep7pOPcY/gjRTC9E7pKe+Ti7GWqte4+3JZvYQdI+L+iom/kXO0Jb8iYbBZKmg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mpw2cem8zuqj792v4qy9q9yjg8qh203c8y7ll2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["trick92v4qy9q"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Awn9k3YwhRI9oqVn5/Kr8yGjYgITEEcRLerA3ic6/3zK"},"signature":"Q4m9o/5whtkLlhizUCwiZFybb3LBsC7VSqNvLwV87coGOJRgMUk9zzpJpq7+R7ItjW3EWRTejE1TVQJqyhGRBQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mpw2cem8zuqj792v4qy9q9yjg8qh203c8y7ll2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1425","trick92v4qy9q","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Awn9k3YwhRI9oqVn5/Kr8yGjYgITEEcRLerA3ic6/3zK"},"signature":"EFJ/mOOr9HiYWtGMuzpEN2Fn2mDrwhXMi8JmRPxJhaBjxjFjjZmW0toM03kYdLfnaTCovnDTHIyeafHUc8eIeQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mpw2cem8zuqj792v4qy9q9yjg8qh203c8y7ll2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1425","1","1","g1mpw2cem8zuqj792v4qy9q9yjg8qh203c8y7ll2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Awn9k3YwhRI9oqVn5/Kr8yGjYgITEEcRLerA3ic6/3zK"},"signature":"zl6dfHc+8GYB6fiKlYY+sAaBDYnvcEqGnpwSxt0/8MlQSJPpGOT40LBrTVHy8hto6p4+4KlvrFdL9zZ05uqzAA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1623qrseulq2scraxr7m736kmnmp2p54nl5anth","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ii0kiZQFH2RqeQzTn6CyMzKBu95nN/Wn/gCvNiI2FywTrga2dML2Y3a1zF7zAd8wIZrBtZwOmmdQdm/tdr+SBw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1623qrseulq2scraxr7m736kmnmp2p54nl5anth","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","fograxr7m73",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiEgr2dspYEAH2pW7/hGpVlFs3dOr+gdV2uKElar1toE"},"signature":"kKDuL1XGYp2RE3YapDgbuIemcD+c0UhLb/S//mInXwdEehVIaiBLTaOZiEzrYptEHai37auwISgN6j+QrCe+cw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1623qrseulq2scraxr7m736kmnmp2p54nl5anth","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["fograxr7m73"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiEgr2dspYEAH2pW7/hGpVlFs3dOr+gdV2uKElar1toE"},"signature":"tRVWAt0OaNc891ESDkbwEDub/enFlQ8GvfwYE5rHCYxnC32VzyBsylh/J5pkEMWeY+taK/emO206+nsdhY98OQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1623qrseulq2scraxr7m736kmnmp2p54nl5anth","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1426","fograxr7m73","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiEgr2dspYEAH2pW7/hGpVlFs3dOr+gdV2uKElar1toE"},"signature":"9vSDdnEI/wDY3GRx80pSbRdnmPZ/0bjsvZKq6n9mfQgjrVl+8NUjrFlgvi34grR+E3Yuc6keBlDXSwg4HbC3xQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1623qrseulq2scraxr7m736kmnmp2p54nl5anth","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1426","1","1","g1623qrseulq2scraxr7m736kmnmp2p54nl5anth"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiEgr2dspYEAH2pW7/hGpVlFs3dOr+gdV2uKElar1toE"},"signature":"fjg/sDX03gCGBGng1zS2aaKf4hMPQiAP19QrLBfOPvNBY2UcyqOBiVdUZxSs2o0SN6ACQwUvfijtNirj6LKBpA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1vkc5z5tehr73080tnvln6nk89fjdl4hre4w9sw","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"xXpFj9z2W36lwilPhWg4ZxPtTfKoc/yY+pzrrhVtTKE+Grwrgi1Oxlsmfv0KgSNiUxnl2ehskKKvN0GEH398Fw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vkc5z5tehr73080tnvln6nk89fjdl4hre4w9sw","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","life80tnvln6",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5cB6KFwkWjh2S0Zk8md+iKLBfTt3iGMCpzjgovhevsT"},"signature":"yRflyU5A283K5+8fIvIXT3OigJBe3FOdeJgaQQ0lmWo+DxSQ+BTImYwCVVJz63Qv2I0ERwsmkZMPeWUAaKK2+A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vkc5z5tehr73080tnvln6nk89fjdl4hre4w9sw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["life80tnvln6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5cB6KFwkWjh2S0Zk8md+iKLBfTt3iGMCpzjgovhevsT"},"signature":"d03x2BChgTCwFsxxjOvqiyo+GMui7qpw5A5rhz72ZOgFLEJOPE2qg21PeSp2d57XJRWAT99fhLUxXxkimeKkGA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vkc5z5tehr73080tnvln6nk89fjdl4hre4w9sw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1427","life80tnvln6","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5cB6KFwkWjh2S0Zk8md+iKLBfTt3iGMCpzjgovhevsT"},"signature":"g/q9QTE52Wp2Tn9Jf0mQidCjUSle062LYY38tyr3LFJ2ew9Of2iqpgjHe4zyMZ8b/SjC4tfkXzMAfbE3hw9M5w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vkc5z5tehr73080tnvln6nk89fjdl4hre4w9sw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1427","1","1","g1vkc5z5tehr73080tnvln6nk89fjdl4hre4w9sw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5cB6KFwkWjh2S0Zk8md+iKLBfTt3iGMCpzjgovhevsT"},"signature":"4orUieQeDxSJhs/nouVuKe9frJ7yEaP45Pp2+OsWYv9jy1y+ZPn/TlCCdhygtGkvC0thn2s1AIC4I8bILbveOw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1gj57jqnwtha8ee30eq3py6mr5g4ms43qjx7wp6","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"XGUBSO+WgDyqjef8ZwaonGCMjiBtuqBGaSsFs9IRQdIOir6jt7/KrTOloBjTLJ+p59azZw+Gn7He8q9x6A9T0w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gj57jqnwtha8ee30eq3py6mr5g4ms43qjx7wp6","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","luxurye30eq3py",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyJFJzG3WvO73Sqac+sHVfpxwlgT2GaU2f9aeyQkLCN4"},"signature":"KLRTkKcOKDHg+cm44nzIKCLz1odzj2E1+sFskjLHkLwrtEExnWMacKL8J3GpxBttR1OWTBbskoJ/tXzxaWUzdA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gj57jqnwtha8ee30eq3py6mr5g4ms43qjx7wp6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["luxurye30eq3py"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyJFJzG3WvO73Sqac+sHVfpxwlgT2GaU2f9aeyQkLCN4"},"signature":"xLOVohHmU2wan6BH4Ffz3R6nvYMycHXPRUbE+J+RGi50YQUkDD09tt4yZ83FJOJG/IOBfl29hkbeHdvilIxmoQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gj57jqnwtha8ee30eq3py6mr5g4ms43qjx7wp6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1428","luxurye30eq3py","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyJFJzG3WvO73Sqac+sHVfpxwlgT2GaU2f9aeyQkLCN4"},"signature":"HGdkNdsC4NxS2F1AkioxvmBwHZP28KVdyGUbXXx2wkxJrNVfGXLNgL9q6DOcOqE6WfB729m7ryzsmJZ9T7SM9w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gj57jqnwtha8ee30eq3py6mr5g4ms43qjx7wp6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1428","1","1","g1gj57jqnwtha8ee30eq3py6mr5g4ms43qjx7wp6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyJFJzG3WvO73Sqac+sHVfpxwlgT2GaU2f9aeyQkLCN4"},"signature":"DUqjsX34V5ro7VEo0ROQvfqSeWmkISA6Mly0zlnniz8VwPYy/lJ06A2WLwNbFfTFv6x0cBDDHQOCEqbkxK+wrQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g19dwwxapnxxlqr274jk6rrcwk2wtrrhkl0jag2j","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"1lrY5t99X4I/varQD0pByNSOtyUqlPAenBXchjRxhKY7iqMQjQjrca6nhjM5riYktGf91tn+c/uXgenZsORJeg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19dwwxapnxxlqr274jk6rrcwk2wtrrhkl0jag2j","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","poem274jk6rr",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqJlRatlU5nOOD+eGFLomDmJO8KBnah7XaAiDDw6o59O"},"signature":"ciU20rDwKbK6UrJ/9kGCf9htxOsqdiqwlM9BzMrZmB0Bk5X6UR6ovQZaKa/5L3rDDux2ItfHL8pFFsmtYSwAPg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19dwwxapnxxlqr274jk6rrcwk2wtrrhkl0jag2j","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["poem274jk6rr"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqJlRatlU5nOOD+eGFLomDmJO8KBnah7XaAiDDw6o59O"},"signature":"At7pQy/caH2s9ryND35wH2G6E1jiuLC3vqQ6Awpmv+NLPeOCXdQNbawCqz/jdUugIE/WMrG/jN7MOLSJcxVNbg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19dwwxapnxxlqr274jk6rrcwk2wtrrhkl0jag2j","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1429","poem274jk6rr","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqJlRatlU5nOOD+eGFLomDmJO8KBnah7XaAiDDw6o59O"},"signature":"Eis6EvL/DTQ5rfVTwtL+dqac8inq8kIhfK3AYEZIR1YItBr7+QuHa2U5otvDPZ7hs+xNpv/AGXeaxIFoNCORKw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19dwwxapnxxlqr274jk6rrcwk2wtrrhkl0jag2j","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1429","1","1","g19dwwxapnxxlqr274jk6rrcwk2wtrrhkl0jag2j"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqJlRatlU5nOOD+eGFLomDmJO8KBnah7XaAiDDw6o59O"},"signature":"z3x+ryEiFw95v8sghrhwoHcH8aoSquwa2AlsUmwCpqRQlR4VvOHH51tUOQlgm1RuFpSdMez6K8wDUWaVklRovA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g19ge5arauesjqndm875x3hv93krl8ny5f73u67e","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"EoxGpMbywzyVSI61GdHYJiKMErXerOd1XRsUt+xS9UAGG1/sAHZnE2yih7XG93WxpyZruhhykLGEfwaQPdvHSg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19ge5arauesjqndm875x3hv93krl8ny5f73u67e","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","mountaindm875x3h",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3gR1wakAk4xmHidnHPv6KpNQ7oflq8wDwTvzYvOTjlA"},"signature":"BqFC54wS94v5+RhYGWxKk4JF0wcm8S0t/yLR4enPVNQs23pL3Zq/IIqSzFmhRIVwZ4cKgPxNOHKH/c5S7rzdUA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19ge5arauesjqndm875x3hv93krl8ny5f73u67e","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["mountaindm875x3h"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3gR1wakAk4xmHidnHPv6KpNQ7oflq8wDwTvzYvOTjlA"},"signature":"wIyZolT9D5oyMM136fTPeKfBB/uKMh3Ef8W1muoS2lp3qvGH4IXoJvxL78vOYeLivc7FzSBD9zUgbO0aKv3zTw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19ge5arauesjqndm875x3hv93krl8ny5f73u67e","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1430","mountaindm875x3h","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3gR1wakAk4xmHidnHPv6KpNQ7oflq8wDwTvzYvOTjlA"},"signature":"lmm4WWYIMpj6NxhOb+Yc2FjsF90FAOrtJeolzACuBYQMe02c/xWoIBY8zPo7x4ARBEseKRaeZd0MsiLiDt+TPA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19ge5arauesjqndm875x3hv93krl8ny5f73u67e","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1430","1","1","g19ge5arauesjqndm875x3hv93krl8ny5f73u67e"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3gR1wakAk4xmHidnHPv6KpNQ7oflq8wDwTvzYvOTjlA"},"signature":"v5QNd8scvydXMCEmxrZilyEIy7hfgIaIJ2dnVU1Xv5BO/WRFSS84RyvgattVkI047RvY1U2FWYnB2IXf3QtmYw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1397rx6s6x2pdw2flckyv9nu5vh4gx6l52fkahf","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"W+mVOOqZzMdtoMEpiWqRo1LwPjdvSuRv3qGxkl88zG0ewE3csYAE3zvIt/huMCMMAHyPAyADUDt4dW98vuBrzQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1397rx6s6x2pdw2flckyv9nu5vh4gx6l52fkahf","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","crunch2flckyv9",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwHqhq0zAM6R7dqijpYHx1rJsXubb5yrEIdwY6ra6OaQ"},"signature":"0ORTDTPFdGXtqKFtaRJ++lUbf6Zr5gHgd6rvhGgQ4vRLwyVvi0Up13A8QvwRsRGRtffP++cvd0prgQ17tBPIlQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1397rx6s6x2pdw2flckyv9nu5vh4gx6l52fkahf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["crunch2flckyv9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwHqhq0zAM6R7dqijpYHx1rJsXubb5yrEIdwY6ra6OaQ"},"signature":"XgWX/JYIGLcdh4vUipD27uMhktqu23FMbUgnxzVGSqU1yFDLiVTNSe42WQD4ZnrqAg30syGb+yRfKpMxLuXGpg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1397rx6s6x2pdw2flckyv9nu5vh4gx6l52fkahf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1431","crunch2flckyv9","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwHqhq0zAM6R7dqijpYHx1rJsXubb5yrEIdwY6ra6OaQ"},"signature":"QE1Grp2qNwGSWgESsUM26lf+oYqR11QEs0iGLnxaMAkmmyzCa3R9SL48VzsXvJioLAm3nAC1lBSKmJFDcs4SqQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1397rx6s6x2pdw2flckyv9nu5vh4gx6l52fkahf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1431","1","1","g1397rx6s6x2pdw2flckyv9nu5vh4gx6l52fkahf"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwHqhq0zAM6R7dqijpYHx1rJsXubb5yrEIdwY6ra6OaQ"},"signature":"XKs0PP2z+BuvPypPyplVyWnpMirdOx2eRCntRCa7aq8wsiAQ6L9y8vC0pN+kQrSDRYClvF7wtOWv6XVCN73JGA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1a685mej30nlmyacw0glf4ljmrg2055p6ststm9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"cQdghKdxRiBNIvyUmpny//C+ZxkK6I1XRVO1ngwGn51lW8f4Iq+RygpEkDb/XXYbeQnXNz7XSp9z1cXl/vp2dQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a685mej30nlmyacw0glf4ljmrg2055p6ststm9","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","busacw0glf4",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A007By4W8HerH1rWbc6yn45xlGuX/8M3FTxh2R65fszI"},"signature":"pVMlJVgfhAVc1rP3M7Oz4IXy8di6CDSXX+EVuX4sir8mKoilzbU5qyS2y1POhuDX5NLdvCTJ2MqfqyKYQP8JLw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a685mej30nlmyacw0glf4ljmrg2055p6ststm9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["busacw0glf4"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A007By4W8HerH1rWbc6yn45xlGuX/8M3FTxh2R65fszI"},"signature":"qW4hdoCoZD0oYZgLFO0R2IrdUGSWbC+roxbKZRXcyppzbmlgfFs0O0sbxcwfiPicVvzwUF8YYxLiggixrsnxAw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a685mej30nlmyacw0glf4ljmrg2055p6ststm9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1432","busacw0glf4","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A007By4W8HerH1rWbc6yn45xlGuX/8M3FTxh2R65fszI"},"signature":"Fy9McPvJrDNA/sYG+42ySNteP00veNKuPsIZ67IRIKwi9F0Xm0U97A6ju5fGhhW9TPWsenn8FbBObVNGKZJqEQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a685mej30nlmyacw0glf4ljmrg2055p6ststm9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1432","1","1","g1a685mej30nlmyacw0glf4ljmrg2055p6ststm9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A007By4W8HerH1rWbc6yn45xlGuX/8M3FTxh2R65fszI"},"signature":"eCjg35DBikWsCft+enfn7BypyqpgWktDMVjnUtwqqK4DyhzowIWoCesnqVCWFPxnhEUOnFf+OVbRuGzK9/WL5Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g16tagax82sxmsq36cn3jgfzwkkdy8nwawhx2y94","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"b/b5yWKWUAr2GjgnbK8MfG7P3MVV+rOoJJht1/LsL2NHAerxquOEX69pS+EGvCrsbAgs7fbZggXkJGe2c3TDwg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16tagax82sxmsq36cn3jgfzwkkdy8nwawhx2y94","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","nose36cn3jgf",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkbT1KsR5Ra9YFKfEvEmsafpb+goEBqJZx/Kp0XfiY5F"},"signature":"aIgtfceDgBt22y8JBXZNJaxo6KT8t5C2SBV+D72WueEAmDZd8k78IZKtHy275iH02I/29m64qGmx52bL/h5qQA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16tagax82sxmsq36cn3jgfzwkkdy8nwawhx2y94","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["nose36cn3jgf"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkbT1KsR5Ra9YFKfEvEmsafpb+goEBqJZx/Kp0XfiY5F"},"signature":"L8CmxXYj2YYKbwxlcfGFT33BpZhQ/8AmAhOJYyiG1gRPcNo6SKiaUeSEzHDQF/h2V8Kg6NXtKibR03yrE6WQlw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16tagax82sxmsq36cn3jgfzwkkdy8nwawhx2y94","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1433","nose36cn3jgf","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkbT1KsR5Ra9YFKfEvEmsafpb+goEBqJZx/Kp0XfiY5F"},"signature":"C9cCGW/Oe/reKT2p4PK7vf28FWOwTC2YSE68kC6q+/5oTkj4Lo06F1A97amW6eOkd34pitjo/sfHwxbIAib4Zw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16tagax82sxmsq36cn3jgfzwkkdy8nwawhx2y94","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1433","1","1","g16tagax82sxmsq36cn3jgfzwkkdy8nwawhx2y94"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkbT1KsR5Ra9YFKfEvEmsafpb+goEBqJZx/Kp0XfiY5F"},"signature":"ffn1VbPUVm/U7gSR85bEnOa0VHmM2belyFyph3qMAYRtzUnYH8PAnA+56ZPWkm3JqOR8pStA732yy1atX0Zn+w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1yexl6mu86lhfglr0dxagwq3ngef6ksl2n7chzc","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"7OxzjDOedpwqV1Qnmo6U0h9OG8XlAdcXfkajR9TL8eADXF9hdo7GI89YJQ9I2Dbl10YVphwLg11T0dwTlqIsBQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yexl6mu86lhfglr0dxagwq3ngef6ksl2n7chzc","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","welcomelr0dxagw",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8YAjrclc5g5/JZb+Q64tA7bkyBzwTlFX+ZzdX5v4I2M"},"signature":"Lty5qtf5XwkRrU/eNHahdtxz+B0BaJjv7nd7P+lZC9U68aP81zPo5OoMSE20eTcyRNFi660V53grIMYvrpfwTA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yexl6mu86lhfglr0dxagwq3ngef6ksl2n7chzc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["welcomelr0dxagw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8YAjrclc5g5/JZb+Q64tA7bkyBzwTlFX+ZzdX5v4I2M"},"signature":"JL72yOhfcP5zqwD5yI8lIZ3+BRkLGUACVY5C711UzLAfIu3c9BbPj5YTb6UcYeAHgwYcXFspWj/sruecsSVR0A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yexl6mu86lhfglr0dxagwq3ngef6ksl2n7chzc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1434","welcomelr0dxagw","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8YAjrclc5g5/JZb+Q64tA7bkyBzwTlFX+ZzdX5v4I2M"},"signature":"DHyMsBOJLT02qGqB+NHmEg1nHJfClC0C/w7PiLiwevRblnYShhS+8Wy4Ie9xwSpktIosjTd+8OfWnGQLTYfSUg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yexl6mu86lhfglr0dxagwq3ngef6ksl2n7chzc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1434","1","1","g1yexl6mu86lhfglr0dxagwq3ngef6ksl2n7chzc"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8YAjrclc5g5/JZb+Q64tA7bkyBzwTlFX+ZzdX5v4I2M"},"signature":"goYKlWfZfvokIQJfZJ4n+Rdj4pzyB/XSX5vv+efUpO0gEosxzKlRVD5WTfb404LRExFDENHqCYflp4j+CzW/xA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g14s6m09agw8c3jnxyhwe8u2r4jm8kzxduf8ukgg","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"1HM6ViOXbhyERMWy02Z+86ph4bUUceNm6RVEEisVviUYSDhBp2REL56EpKpNmdzHNg696ZNbp3KDZsK1FMx0mQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14s6m09agw8c3jnxyhwe8u2r4jm8kzxduf8ukgg","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","layernxyhwe8u",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmToVyzVXF7VKvK7DhMBtBnWVpI4wW3MqK4sGzz56g3Q"},"signature":"C6RyYybGIE7FkRnDq/upV+Vyrl9CKLGi01HV59g57hJuyCa8iZxNN4E+/z2xkdbpT4anC48aJSAhIiFZ9sA8Wg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14s6m09agw8c3jnxyhwe8u2r4jm8kzxduf8ukgg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["layernxyhwe8u"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmToVyzVXF7VKvK7DhMBtBnWVpI4wW3MqK4sGzz56g3Q"},"signature":"VxF72Ty0BFe52C5UqcEPkWpqt7ije10mf20a+u+6gHA28RwBAWuWtAGVuqNQQuYHzjk47yuX7wIQblg3FtIx4Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14s6m09agw8c3jnxyhwe8u2r4jm8kzxduf8ukgg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1435","layernxyhwe8u","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmToVyzVXF7VKvK7DhMBtBnWVpI4wW3MqK4sGzz56g3Q"},"signature":"JH48+V8SA+E9A/HdivxVsdOa+/9oedkwI+Reto/IBfsIP0DExH1hh+pX8tjEsQ9Ladkt7pMw/5dwI6pz6C3yIg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14s6m09agw8c3jnxyhwe8u2r4jm8kzxduf8ukgg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1435","1","1","g14s6m09agw8c3jnxyhwe8u2r4jm8kzxduf8ukgg"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmToVyzVXF7VKvK7DhMBtBnWVpI4wW3MqK4sGzz56g3Q"},"signature":"WvCEkHlAbaMpHGov36zJIJm+fx1Syzhjlp5F5xcGa/dPtMyw0fd7yCH1XqPRUXBKrfvjIzM5bFJ9dQG1EBmbug=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1hfdmg3txftc5vtvl8ap7wtmm93mpqa76aszsaq","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"zU/Lg1E71JuI0tzBJ3tK0C/VAeIZ7qJ6LH6WnVJAstsJHH8ivkOJkCI3YauVujAzGhQpBnDz5W1IGaxatBHy9Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hfdmg3txftc5vtvl8ap7wtmm93mpqa76aszsaq","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","choicetvl8ap7w",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8mZ2rjRz9W6VbSOhJ5xHNU4LZOU10TRHwAvHMYdb/8z"},"signature":"juh3+6ylWFepK0afakX9346UwjurHrj2mOubHUr1hm9w+M0M10jWAUzAXmJO4FamjEUrjYivriutG694uechHw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hfdmg3txftc5vtvl8ap7wtmm93mpqa76aszsaq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["choicetvl8ap7w"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8mZ2rjRz9W6VbSOhJ5xHNU4LZOU10TRHwAvHMYdb/8z"},"signature":"zmNNv1NxYos170mOsQGladPc6hWcE5UhwDufTaXs7tsEdDg912E4uApM8lgTrx7/Qu7Q3kLR1n7Ax+e6WE4jCA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hfdmg3txftc5vtvl8ap7wtmm93mpqa76aszsaq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1436","choicetvl8ap7w","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8mZ2rjRz9W6VbSOhJ5xHNU4LZOU10TRHwAvHMYdb/8z"},"signature":"M5DKaSn1eEXWBp7mulUIpqifrNrInpLJGn6H1RiXM0A2pH+He6ov9eUxb4qqxjmrvJYVWihuYXkDOlgYkZne/A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hfdmg3txftc5vtvl8ap7wtmm93mpqa76aszsaq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1436","1","1","g1hfdmg3txftc5vtvl8ap7wtmm93mpqa76aszsaq"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8mZ2rjRz9W6VbSOhJ5xHNU4LZOU10TRHwAvHMYdb/8z"},"signature":"hm2R9nlGOtMHfDo4KD1lotH2xHqf0u8y/vK59viOIrguKiCnAiqkZSwccaIJOOzaDPdtu3I+M+SlL65ERy5ajg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1m455sdw03pvl7t9a6emrg0e4h9rcf2fqrnw4wn","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"VI9+4X5Qmllv5tTceuwSsXijs6apJAlwEsORf18n48ATyeiqb25mPi1X0/lIQ78ow+gjSd6nwN0ncfVdJCSfHw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m455sdw03pvl7t9a6emrg0e4h9rcf2fqrnw4wn","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","hammert9a6emrg",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AldXIEwas5bcW0YTeWf1mktikVLHV9Y2eUtMHMS7Pntg"},"signature":"03tDNgMAVC/qwywYyxERPZZDn+rP4XJ05t8jDJycSRtYEvMtnHPr2gyLyHWhdrMah+kkBmo6R3uujYXbt43UJg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m455sdw03pvl7t9a6emrg0e4h9rcf2fqrnw4wn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["hammert9a6emrg"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AldXIEwas5bcW0YTeWf1mktikVLHV9Y2eUtMHMS7Pntg"},"signature":"efCMx5H10fPgOC6NMugB/y/qafH0Yy3Cb8IlM6lVOg1p3CL/YCmNRqjv3sNMQ3PGOToxEAgkexovpaIU0cbE8A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m455sdw03pvl7t9a6emrg0e4h9rcf2fqrnw4wn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1437","hammert9a6emrg","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AldXIEwas5bcW0YTeWf1mktikVLHV9Y2eUtMHMS7Pntg"},"signature":"9eFwr2LmcTtZpBdO1ZJNrX2S0hvs0GPVZshB27LFekRyAI/PyUXCMgywuO1/rYkLJ4KyQdMy3ZDmrKVSw4TeIA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m455sdw03pvl7t9a6emrg0e4h9rcf2fqrnw4wn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1437","1","1","g1m455sdw03pvl7t9a6emrg0e4h9rcf2fqrnw4wn"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AldXIEwas5bcW0YTeWf1mktikVLHV9Y2eUtMHMS7Pntg"},"signature":"p6ubccqAMCJNuQCgfAeIzEfKbXT0wydPz/XTAunD2C4Wiy2guRHY5EmKgPUURJ4JG4p2aAn5jEYJS2OAlU5R9A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1m8cv48zpmz4fujyw83s85zr9a67yd3uhmkunn3","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ti8KB+X+/ZKAqzfc96UyxCIaKgujUdazkoxzPRAdJZZCtlKVZ4RaW9nG/5I+3RChLCkUn7S4Dq5a7VYTLOknwg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m8cv48zpmz4fujyw83s85zr9a67yd3uhmkunn3","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","hamsterjyw83s85",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6iSntrRBPnSpfZkpl5naQnji+8mMkJepey/+SrNnuL4"},"signature":"ihYM9pk/o7LzE/4GpyDdmPpcS0HXhIo8qv06jaTqIKN9GoVLRIvPn2mybsavHxJbJFtpKgWzXnYegqeblks7Hg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m8cv48zpmz4fujyw83s85zr9a67yd3uhmkunn3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["hamsterjyw83s85"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6iSntrRBPnSpfZkpl5naQnji+8mMkJepey/+SrNnuL4"},"signature":"NgFFNIV/WGqoRAYl16ZLYlQjvkfxkXDW+j5QlW5Hu8tJK/VNDvsHDnu9BzppEJg8JGvkyPFSD2DMFk9YyaZ3VQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m8cv48zpmz4fujyw83s85zr9a67yd3uhmkunn3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1438","hamsterjyw83s85","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6iSntrRBPnSpfZkpl5naQnji+8mMkJepey/+SrNnuL4"},"signature":"NJypjjM6wB2A6/z9EWvao4YeD8zy+OgR7EFEZI2R7iZeGzkHEznO6rWCJtHAEkSy9wNwrvRZkpMQBRFHHFXxsw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m8cv48zpmz4fujyw83s85zr9a67yd3uhmkunn3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1438","1","1","g1m8cv48zpmz4fujyw83s85zr9a67yd3uhmkunn3"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6iSntrRBPnSpfZkpl5naQnji+8mMkJepey/+SrNnuL4"},"signature":"N4LajtX192jD5SK6Qm3fAEkrIAvHtkFEMjQ8Sor+t/9mAE8ZNcnkNVHsbBYCHy0EHwh5QxcMFP2eJv5jdCfaiQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g16fnj5xlpc56g2vwqp3r6fx6eugdkghmwlg3ry0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"TQhyO9Lix35gpryv4F+z0jODSg0AKWkcDIfbCFiBV5N1u1tfCJplJbatkjoW2+a+FNESY3bNawasfZGj2FHsRg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16fnj5xlpc56g2vwqp3r6fx6eugdkghmwlg3ry0","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","imposevwqp3r6f",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5e4YYUUtQ/zzDn6omIfhM4f3UeCyzlrWTyKK4D6+EP1"},"signature":"K0gPJKhGcsnW4KQfiMheLkBOSKMOTSD9SkA+Sg0zghlGeW6wTrOdnsPPqTHLZ587R9jby1yzfDR3tcYUw5dr0g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16fnj5xlpc56g2vwqp3r6fx6eugdkghmwlg3ry0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["imposevwqp3r6f"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5e4YYUUtQ/zzDn6omIfhM4f3UeCyzlrWTyKK4D6+EP1"},"signature":"NXbjAMzvNx5mGUL6jhUwQIK2hqynPOI1dif5N2GMxt5+CeqqJKsOnIWEyZ2i7TEy3HY/0zRS4wsV4k+8mQXkXw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16fnj5xlpc56g2vwqp3r6fx6eugdkghmwlg3ry0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1439","imposevwqp3r6f","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5e4YYUUtQ/zzDn6omIfhM4f3UeCyzlrWTyKK4D6+EP1"},"signature":"Kg4jsNYXN1Si6Jrqsk/T/7VGmbRdk9baf93XX4Ty7GE1Dr2xwA4Np7N407BdBAnBPcRLULfIRkuRh90TN175Ag=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16fnj5xlpc56g2vwqp3r6fx6eugdkghmwlg3ry0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1439","1","1","g16fnj5xlpc56g2vwqp3r6fx6eugdkghmwlg3ry0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5e4YYUUtQ/zzDn6omIfhM4f3UeCyzlrWTyKK4D6+EP1"},"signature":"ivlGI74dh/zZ5j2ciYrvCUlsZTW2feUo4fQ1eYo6uoV+EdwPp61sf5KzWW4SrHB90+T+ODPtNVgQfqp2wH86fA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1myvvrlve2vr7sczfjf6h2mmkavuj9s0yjv6fa0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"6W5jqJJGk/J8tGlzOr7mCbZ8rUhBnKiyX0P5DTO/9f0KP1OHL+BdHY3h7L1D63m5qP1qosIl0I9l9i08qettTw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1myvvrlve2vr7sczfjf6h2mmkavuj9s0yjv6fa0","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","updateczfjf6h2",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApVQB7HXbFjG9Bj6o1WJHBZ1hAXgGk/k2yioGoZn7IL/"},"signature":"R87TWoYclglsLOPZh7h4Ey0B5FXqOSnYd6BjBYes7F9ESCHlsHbtlS1+zhupnfM1Pz0o29UmxP7NQSX9DFAOXg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1myvvrlve2vr7sczfjf6h2mmkavuj9s0yjv6fa0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["updateczfjf6h2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApVQB7HXbFjG9Bj6o1WJHBZ1hAXgGk/k2yioGoZn7IL/"},"signature":"YvnpjUfxxJ+9JTc3XcooBaQ/Qd55/RNxGsYY5/1XkwtrmGh4ugEoa79F440a5HEaaYlyNpx/bNR+ra7b0yhJJw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1myvvrlve2vr7sczfjf6h2mmkavuj9s0yjv6fa0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1440","updateczfjf6h2","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApVQB7HXbFjG9Bj6o1WJHBZ1hAXgGk/k2yioGoZn7IL/"},"signature":"k9sHFsRwcp+SMle4XcYCsJ0vye3C9tEAWeHx9YkloyNiLaYUPkL7jTF06gkdQa7w4lvp5pfUh4kEiGxpK79UFQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1myvvrlve2vr7sczfjf6h2mmkavuj9s0yjv6fa0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1440","1","1","g1myvvrlve2vr7sczfjf6h2mmkavuj9s0yjv6fa0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApVQB7HXbFjG9Bj6o1WJHBZ1hAXgGk/k2yioGoZn7IL/"},"signature":"1sr8b0Vi07c/5dXh73EcU2783cAYwNA20iuEP+p41u1NrFunDKFZJATT3dxJBjGTzYohDQfxdacj+3HO7ANR7Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g106m0x7p4ex6wduc7wx4f0qkfy7sy2cvl8ryafh","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"/vJ+RqlZ57uDmMG4UmP9xJ4lHMlsO7m1updgt636kI89Z5y7qcYZ7uPl8RdplD6Z25wHa9uy16alODyJGZRGvw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g106m0x7p4ex6wduc7wx4f0qkfy7sy2cvl8ryafh","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","natureuc7wx4f0",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Amw49a8MYjVxDWYdif5TCCm+M3Y7e+ie1zoe122hMjj2"},"signature":"+wae1phnXgeUoWbE8nUWlftYqOYpLPF+sijsoJQx2JNjDkFV1bxtmCLirs7snFMGSQL2abZAOyov23HbFoZYUQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g106m0x7p4ex6wduc7wx4f0qkfy7sy2cvl8ryafh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["natureuc7wx4f0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Amw49a8MYjVxDWYdif5TCCm+M3Y7e+ie1zoe122hMjj2"},"signature":"H4ICUS1sZeFOAshFeOoAjdq3ZHzjTXIYFwv+Sp+GoPFqBHqi711fpXdbX+HMdgEfVjPB1qje3DvErXCmZJ0IPA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g106m0x7p4ex6wduc7wx4f0qkfy7sy2cvl8ryafh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1441","natureuc7wx4f0","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Amw49a8MYjVxDWYdif5TCCm+M3Y7e+ie1zoe122hMjj2"},"signature":"jhjMshS0PnnnRmyhCZYew8XbTcBtjDXZFHiC6SIzUV9ByruWd8eZ21AhCiLMRfkxO7c+3ocacKMnrsf99Rqz7Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g106m0x7p4ex6wduc7wx4f0qkfy7sy2cvl8ryafh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1441","1","1","g106m0x7p4ex6wduc7wx4f0qkfy7sy2cvl8ryafh"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Amw49a8MYjVxDWYdif5TCCm+M3Y7e+ie1zoe122hMjj2"},"signature":"9fbCJMpUQhKOUByH70mfiC2IsMBS9wUQ60L8r9gH+FouJMO5oGLnsEh/V5gxBqh2Is+uHQyCDzGjA04qchTnqA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1yg9uzhvxksvvp48ug436adfjm6mmvlydf36w3l","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"dtR2YHlROhKvXVcQJoNuXyaK3YfxjXEVmOMXMbzmqR4yyleSTp/zenkolByh3ZCiJklwC1dmHG1hAvEjogur7Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yg9uzhvxksvvp48ug436adfjm6mmvlydf36w3l","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","weather48ug436a",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoDmzjE9/frxiuxZ9h+VRZ/JVj8zeo0Isf/p61k/rAiG"},"signature":"NihnWNfdEFThIxDsGKUhC6ZgKOemi3QpCrud8TNo6hZjFiFrrYf9t0Td1hW3QjjFxqSKU9D63MJa8Fv1uerMgQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yg9uzhvxksvvp48ug436adfjm6mmvlydf36w3l","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["weather48ug436a"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoDmzjE9/frxiuxZ9h+VRZ/JVj8zeo0Isf/p61k/rAiG"},"signature":"g0Q8DdhefI7srMqQ+KDIctGP26mFhLqK2VA4SpEtyUlUcZeMZSjpAgFnJy4ttwX8ShmcgJlZLVqHUuHsfI6vTg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yg9uzhvxksvvp48ug436adfjm6mmvlydf36w3l","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1442","weather48ug436a","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoDmzjE9/frxiuxZ9h+VRZ/JVj8zeo0Isf/p61k/rAiG"},"signature":"uBbmyvWa2NWEMsAxTjCA4zqYSr/yGkp6nKuJnf/RU69xBG0KUidO6TEVNAQzlViXe/xvyY94MsO3ppDgJyOPfw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yg9uzhvxksvvp48ug436adfjm6mmvlydf36w3l","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1442","1","1","g1yg9uzhvxksvvp48ug436adfjm6mmvlydf36w3l"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoDmzjE9/frxiuxZ9h+VRZ/JVj8zeo0Isf/p61k/rAiG"},"signature":"E8CkfTuWI6em3aPeqYcq2eabyIu4UBvLdsrgSk3+lypCHMOwwbf3VWPF5SWiUbuclIOzQiUqg+sZi9mNJJIEJg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1yj4n9j240yc8rf6zarr8k6aeut7kktud27z3ny","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Q383mLIKThQLN+W4hFtk4qecfzmuBqjQUF5fqlDZYMpaK11sjZDkMUk/rObrc7fVm+aAtO7YumsGBgC8q8zhrw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yj4n9j240yc8rf6zarr8k6aeut7kktud27z3ny","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","paddlef6zarr8k",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkyfNP9ChIqbKBIvdhXEMuIv2s2d9M4+VNocwCFhhibO"},"signature":"uCmOGwxpL4btHhKH2nkveU9t55M7J7rqbVRMgfgRc3taEPL8I7xcA7HeCbc85jL4TyxsGGAM5jUtt9gAOQrk+w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yj4n9j240yc8rf6zarr8k6aeut7kktud27z3ny","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["paddlef6zarr8k"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkyfNP9ChIqbKBIvdhXEMuIv2s2d9M4+VNocwCFhhibO"},"signature":"QfbdvlRxXtT2cB3yxt08M2aTUZWoTxaQIwCAx/OApW0n0xwhcBppuDBwtTacRnyarKTNUlF4VGyw1y+k+u0HcA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yj4n9j240yc8rf6zarr8k6aeut7kktud27z3ny","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1443","paddlef6zarr8k","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkyfNP9ChIqbKBIvdhXEMuIv2s2d9M4+VNocwCFhhibO"},"signature":"zzC55HgcJqfuUP8McmhknK4VQCQFLHlRfCEFon9n3/JxypaES16/17Nixn81nfzMsvwwUylxp1pZGn/95leCwQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yj4n9j240yc8rf6zarr8k6aeut7kktud27z3ny","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1443","1","1","g1yj4n9j240yc8rf6zarr8k6aeut7kktud27z3ny"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkyfNP9ChIqbKBIvdhXEMuIv2s2d9M4+VNocwCFhhibO"},"signature":"/hWY+WwnDTId/6rpIuk5rM3glM4nXEEOHScj/6xUbrIAwObCi4Qck7iwGhLwdOQLrXCDjrKAlxW1gwHYTacEgw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12w4p46sy8qlt23x9q2caw6v6eptg936srtt85k","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"u4Dar8F6Iwplr6pk7oxv5mM9b2dlAVmuOec0Y2SMyU59vzrKhWtv+A2n5ftFTPfxJ95dnOBvtvOMu1kvuH37hQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12w4p46sy8qlt23x9q2caw6v6eptg936srtt85k","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","skate3x9q2caw",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtBCDOaTOx0QOGuJ6fccsQh2RTynYcZvyX1yIM8Knxlv"},"signature":"GzGRnDQ/anF4v9zug+nO4N8d76LHEMloDgbcY1AjbGJU52vv0+eVhxzInMMQqERzsB/AVNkxsyACkk1TYGPlyQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12w4p46sy8qlt23x9q2caw6v6eptg936srtt85k","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["skate3x9q2caw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtBCDOaTOx0QOGuJ6fccsQh2RTynYcZvyX1yIM8Knxlv"},"signature":"aK/kreJBow50o1UGp8ZrEn4IdslIj+Y6Tb/hDj6EBrFB3dO12Tfnaa3L3pw3TvNIlWCHu7QwvYfusGsc4sX1Ug=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12w4p46sy8qlt23x9q2caw6v6eptg936srtt85k","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1444","skate3x9q2caw","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtBCDOaTOx0QOGuJ6fccsQh2RTynYcZvyX1yIM8Knxlv"},"signature":"C0wyplHXQS9Ya1RyADMZC2/37WQe5Aajf3XBDyD9WgofpA0xlcSLxEoXAznPBk0/zyvaBU2PU/BFOOw1rS/MyA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12w4p46sy8qlt23x9q2caw6v6eptg936srtt85k","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1444","1","1","g12w4p46sy8qlt23x9q2caw6v6eptg936srtt85k"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtBCDOaTOx0QOGuJ6fccsQh2RTynYcZvyX1yIM8Knxlv"},"signature":"BdCAa/vDt/UBAuhQ2NjhXD1h+08qUMlMj9/MPAuxDrcoGuJ1ivol1igXj3ElNNDemTHy0RwAXkpmiJhAPcJlbQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g170lznqqlspqhq5a80nywasgy2u5ua6jxwytxjm","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"g1NfiFJfijujo8M6ZYIBsrJFjjB1PGOkWZsiSD697QEhStM4kNnmb6Rv7zCq+56pO5nllGzWyOd0GDMUoPH1pQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g170lznqqlspqhq5a80nywasgy2u5ua6jxwytxjm","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","teach5a80nywa",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuW0rJhChagYGSBiWIjCAaUftHM2fsAzuXvF9yr9Zhu0"},"signature":"EMtZ42kfZolaNFFWJD98zbF0P+So6QEzSWHM6g5ZJYxRW/aHsQh1u3nASged3l218J63dKdcgIujOs6X1AyMMg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g170lznqqlspqhq5a80nywasgy2u5ua6jxwytxjm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["teach5a80nywa"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuW0rJhChagYGSBiWIjCAaUftHM2fsAzuXvF9yr9Zhu0"},"signature":"OGjmUhgZYyOO0hNdpZzr1x1FSyJ232OIvq3xHQdVn2oxcM73ElLt9C7QlXXljpXNRiGFGBUhAOCzxQpD6l1Gtw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g170lznqqlspqhq5a80nywasgy2u5ua6jxwytxjm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1445","teach5a80nywa","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuW0rJhChagYGSBiWIjCAaUftHM2fsAzuXvF9yr9Zhu0"},"signature":"RFmpk2BhLNSRrwpcq2ujODre39mFYQsE0O8s/1+nILo9GW3pq8ueNXI5iFI30L1aR1iWKne3LYfvnJzGtsbtdw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g170lznqqlspqhq5a80nywasgy2u5ua6jxwytxjm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1445","1","1","g170lznqqlspqhq5a80nywasgy2u5ua6jxwytxjm"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuW0rJhChagYGSBiWIjCAaUftHM2fsAzuXvF9yr9Zhu0"},"signature":"SmngkSA0oUHr9c73kX3W8KCRlh9yAyYpRsTw/6ISAX4TfW8OotVt+RuhHh8+Gob9LpJcAY8RkGtu6OwpV/qRgQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g14px8xc2huxx2q5wgwedn3spalj9fauqxshdkqw","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"JgTae+rdvRYXPGj8fI550l9DeA4qaabZiOSAYT6x+G9X9Ktfg6bwLzdUj1heoyFZkWueQ7S2eadOzWMGuj/nDQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14px8xc2huxx2q5wgwedn3spalj9fauqxshdkqw","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","boat5wgwedn3",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ahr3zg/KZzQ6b0HobLcq5g78j+3U688bWqv2bG9jvOye"},"signature":"C9Lxn9q1KJAswyyZssykEvTdIBhFsuE5OiljU9E3A1gh2wgT3bF6QlelkqqiJm4aMXjTL+UF6wqobryBB1+ORA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14px8xc2huxx2q5wgwedn3spalj9fauqxshdkqw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["boat5wgwedn3"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ahr3zg/KZzQ6b0HobLcq5g78j+3U688bWqv2bG9jvOye"},"signature":"Tidz5uqt+OwPwtNkBex4KviXC9YqadEhkEgsYwZSqIs08F4txOjeyQg/PQ8Fr2sc7OQsH2iGbWN3aqYGWHyS3Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14px8xc2huxx2q5wgwedn3spalj9fauqxshdkqw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1446","boat5wgwedn3","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ahr3zg/KZzQ6b0HobLcq5g78j+3U688bWqv2bG9jvOye"},"signature":"Yi0hWiFIwuRD/qntAd1wYgHu/LuLcv8EeUv6niwXNjA5vHa03YsmH1ON/TwU/K5vVyOTVW/3b/rBojlgv+H7Xw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14px8xc2huxx2q5wgwedn3spalj9fauqxshdkqw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1446","1","1","g14px8xc2huxx2q5wgwedn3spalj9fauqxshdkqw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ahr3zg/KZzQ6b0HobLcq5g78j+3U688bWqv2bG9jvOye"},"signature":"rxtq8vkcR7+GF7OXYinmKNqaGFjc/gE2NRXstJ9D2Q4KPuZ9nD5eeQ2QZ9FRSwITf5kfY/y/YtplEME3ehMtcA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g109zkr77s8v9wakzvwjw7xwy593272dvgsac050","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"P7IUpn99T9Pdk6HL5czckapA2eJAzNeKazFK4cRPO0UnTS1tQ/4uz8JINR7sVR3WZGh0TX/uMFok2TJh55l+gg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g109zkr77s8v9wakzvwjw7xwy593272dvgsac050","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","togetherkzvwjw7x",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApEJSNFwBbbyQHNPHL4rYyynrzGJNynoNMHcNNKwHaBC"},"signature":"QAmCji2bYMgBK4Ookc9nzkRKMjxoZiioPDnIp155ARJaMdGsB76XkxKyIGaAlWKlbYchE1gEHNVHtZiQVOyglg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g109zkr77s8v9wakzvwjw7xwy593272dvgsac050","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["togetherkzvwjw7x"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApEJSNFwBbbyQHNPHL4rYyynrzGJNynoNMHcNNKwHaBC"},"signature":"8kNbBnDCN7xoXWhImEH26nJQkHAWT/M9DDWWHtguK8oOOb90Y0ZRxXNx40dzQd5WUjYsndYCLYG46dupDqvklw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g109zkr77s8v9wakzvwjw7xwy593272dvgsac050","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1447","togetherkzvwjw7x","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApEJSNFwBbbyQHNPHL4rYyynrzGJNynoNMHcNNKwHaBC"},"signature":"g4ouTef1kKszAsSXJfGtklzYAQwUiiKSLZVv8lgH6TVYSRE7JRmx7TXJN0LySsIICY3MWPhonhuCZ8ooeJxYJw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g109zkr77s8v9wakzvwjw7xwy593272dvgsac050","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1447","1","1","g109zkr77s8v9wakzvwjw7xwy593272dvgsac050"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApEJSNFwBbbyQHNPHL4rYyynrzGJNynoNMHcNNKwHaBC"},"signature":"6Ux11wMxFOo3grz1R7hA+oARjnAoFqGkuN2KLG0XtSFwuiHrfVPipOuumTcoP5mSIzGUCWL83KErLEmQ2bb+IQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1a89dag8zpaquqwpm6m3rutd256h7pxycl6ntrs","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"l/lLm/uxaylt9ERQmaKrAJ1MgiYvYdt62La6Rv8kmZVRcjRvYuU7h6pJj2KrPMDIMIFPuPwCo9Fn8dwEwB+x8g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a89dag8zpaquqwpm6m3rutd256h7pxycl6ntrs","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","extendfirstwp",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzSVpuyMkA2M5BnNcifb05NRqWBxgIUl4gtXrOJZfK+I"},"signature":"YXSexS10vQMld4wFmkpu7NxCQ4ZhwaLK4E+7fuXEa0ci6c+PYYLc/KwdXpK0OMUii+9eDE2mECCQGMhA2GCSIA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a89dag8zpaquqwpm6m3rutd256h7pxycl6ntrs","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["extendfirstwp"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzSVpuyMkA2M5BnNcifb05NRqWBxgIUl4gtXrOJZfK+I"},"signature":"/DP+gxx9eRX4EIxT0qWyhsV82saz6+cLCnBo72UDl4A/k+kGOk5/ngCWcVcqkOZMD1hAQQwChyybSgHPI8bscg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a89dag8zpaquqwpm6m3rutd256h7pxycl6ntrs","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1448","extendfirstwp","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzSVpuyMkA2M5BnNcifb05NRqWBxgIUl4gtXrOJZfK+I"},"signature":"gP64bmw4WU7ZJcfk86v27d7QJPUnhrXyzYPaMJDGBHRcSgSnvhn36ZmPc3K1BY5oYteoEg1GYP/WJ1rPInpv/A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a89dag8zpaquqwpm6m3rutd256h7pxycl6ntrs","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1448","1","1","g1a89dag8zpaquqwpm6m3rutd256h7pxycl6ntrs"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzSVpuyMkA2M5BnNcifb05NRqWBxgIUl4gtXrOJZfK+I"},"signature":"SZ3us6PC361J+pge5mAkwTE0AyGf8vinGvazx+T2Uv5SSKDjmzTTkRlFWqE4PlToa1YsX3nwoar/1m4l59ODAA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1k5gj9vmnxyhq50strdlq7h45k6lvvx3yxp63gr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"WfS2TlMdGfLhwT7gdJUX438hcgVeruxiJoYBTURvkgg9CwxvnMPzU3Xdkb4pyK7ma6XE6J7uWsng+RztQiiDWg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1k5gj9vmnxyhq50strdlq7h45k6lvvx3yxp63gr","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","rotateorchard0s",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArCzXtG5RolJIpLvT/5P8P5XmIeZ06vTj1KerQfphkeL"},"signature":"16mOnC6p0DIuaaDewgaTJ28YcBlRgUHl5TWJnYV650Vviv2SGKSyKEmknOWbIBgpODbnr7fuzoQ3qtUUhc5tlQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1k5gj9vmnxyhq50strdlq7h45k6lvvx3yxp63gr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["rotateorchard0s"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArCzXtG5RolJIpLvT/5P8P5XmIeZ06vTj1KerQfphkeL"},"signature":"Gxjyebs5Mh5/+8dzeHMQki1QwRdPJcY1jGLeAA1M2Dsb3YBB0+dg/iTwk73rCply2CSpFBNnidqROl8tFUog0A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1k5gj9vmnxyhq50strdlq7h45k6lvvx3yxp63gr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1449","rotateorchard0s","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArCzXtG5RolJIpLvT/5P8P5XmIeZ06vTj1KerQfphkeL"},"signature":"Ib6TMGcdH7GKu70lbmluJi5IS9z46a2CVzaLRbU0tTgjFzUGbMflAFJVkD6YvfElGYVtizTnER9Pfi9W2QMaIA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1k5gj9vmnxyhq50strdlq7h45k6lvvx3yxp63gr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1449","1","1","g1k5gj9vmnxyhq50strdlq7h45k6lvvx3yxp63gr"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArCzXtG5RolJIpLvT/5P8P5XmIeZ06vTj1KerQfphkeL"},"signature":"bMGik11DHErG7XeuwCJsqr8A79xOtJyj24wy9f3qRS4L2ZIeEPCTQr2zFBdmpxT8dPLqImYQQ1cxccN7ki3J4g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g10w3ztv2hec2nhq38kzknmm9v9wh0v79mnpd27x","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"5zGD+Qp7NhCKn8w9lXxrVzXcvhRe9BL9K9yJFl3n1jAawv5Ig9z0HrNh/kgY8Caxhg+I6E/IvGzRk9FJyeM+gw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10w3ztv2hec2nhq38kzknmm9v9wh0v79mnpd27x","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","observehumorq3",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsRSbNT7xBI8Its8bYdsM6FBlxR8a1yYz1U1LQZldtbB"},"signature":"eNFz2YaQUE9VjKpZaUyiP4GLnqDcMgG+WTO0z15888hpYxo7xDNL7dVudUEpVa9ZR88heuoZkavn/3loV0Syvg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10w3ztv2hec2nhq38kzknmm9v9wh0v79mnpd27x","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["observehumorq3"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsRSbNT7xBI8Its8bYdsM6FBlxR8a1yYz1U1LQZldtbB"},"signature":"A7NPVsY+FiMAz7awWQ9c9AQKOOeEM5y5m8gexgi5OmUfALGcjPvE8/WtE10wxM25vowxsO1a4uXDV+sJlgBkCg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10w3ztv2hec2nhq38kzknmm9v9wh0v79mnpd27x","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1450","observehumorq3","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsRSbNT7xBI8Its8bYdsM6FBlxR8a1yYz1U1LQZldtbB"},"signature":"HeJy1xOvNW0OqVBiSHv/jV1aaPXxOI4WM0E0Tze9HulLhVSRbldgEzjjWZtb6pBDS/IIvg2Xb2NlTstWa1QChg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10w3ztv2hec2nhq38kzknmm9v9wh0v79mnpd27x","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1450","1","1","g10w3ztv2hec2nhq38kzknmm9v9wh0v79mnpd27x"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsRSbNT7xBI8Its8bYdsM6FBlxR8a1yYz1U1LQZldtbB"},"signature":"cDByGA/OE/Y0LjznDVAKYeKxTrh5oXkmCXUCEqTx6Gh1UjfsguyWBaKSWrqdkMlCfrbh9/YVjWnts5YUU1PFfQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ass025n093rjsk554hr2sjnprkhg9wyz8hzx0u","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"NctMJln+afh5ClN9DgAAP8Ayv0SQGL+H6O8EHNd5VIgiQQ1HuTPqnaUx48RqEMdgNFS0qWV8ZCN4uvnoGMwnkQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ass025n093rjsk554hr2sjnprkhg9wyz8hzx0u","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","nucleark554hr2sj",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuntNImNmwPMyGRi309l0n0RDmlC6Fw9Gz9NXC8Zs1yG"},"signature":"I8CR4W8t+nIuvQGohZ64RMCVPN7zb5TFkkvYc8Q5/HFwrkWpcFz6ByIz7whkKIM3FGBLzaOjd5Kkk9z1n1XNaA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ass025n093rjsk554hr2sjnprkhg9wyz8hzx0u","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["nucleark554hr2sj"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuntNImNmwPMyGRi309l0n0RDmlC6Fw9Gz9NXC8Zs1yG"},"signature":"9d5axcnZEtBgyMABoJvpURNPVTIP8gas8pnA05uahQ5xVuxEK4YXXxz3MYcF40p6nWF/rSsBUmu9ndesGKu6xw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1u3295843jrslvcul2ht0qe6s49yzgk6d5khuz8","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"lbpireTPSMLEzjJGd736EnvSL2uIq8dsTrs4xcwm90kjp94BbSa6cUWA8DXrs3zM0Bxe+E/bx8apwdA0BwrTEg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u3295843jrslvcul2ht0qe6s49yzgk6d5khuz8","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","findmiddlecu",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9s9C+FteatjR7GpHiM7siljufx6RVHXBuby+mVdKXRn"},"signature":"dlB4v+JVIsWVEThR18+GVZA6Zsm5lb8+599Uh8SKdWpcILhpaTGxSgrojFVP9CcCuoc7AzQxpwJc93P0BB06Xg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u3295843jrslvcul2ht0qe6s49yzgk6d5khuz8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["findmiddlecu"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9s9C+FteatjR7GpHiM7siljufx6RVHXBuby+mVdKXRn"},"signature":"xtNZ7iMdqaFTXYpx/sQGfmr4xTxhASu7p0wPWifk4KcXY6a0HYYVddNXK54AUzhHEiv1DGQvJ6xb+lxd8pPRnQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u3295843jrslvcul2ht0qe6s49yzgk6d5khuz8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1452","findmiddlecu","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9s9C+FteatjR7GpHiM7siljufx6RVHXBuby+mVdKXRn"},"signature":"+LFpLDFmT8vomF9W3bfxRZT2O/CYIXNeWQAavACxc04yufhgO2aNHXE2FFBIIKoF/63pc3mNQBElD5ishvrS0A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u3295843jrslvcul2ht0qe6s49yzgk6d5khuz8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1452","1","1","g1u3295843jrslvcul2ht0qe6s49yzgk6d5khuz8"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9s9C+FteatjR7GpHiM7siljufx6RVHXBuby+mVdKXRn"},"signature":"r3ZZ+OHTdcC1CI0Xwm2e+QRIA+xwvEhSxMVgmGjpCGlGDKrS3cOcQms1nRxDypqDMXXvR5pIr6es0da6HHXheA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1hlcv6zp6vy0fwwe5hg9ugqc8fs380hgh53rkxt","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"75fJ40JKoxy7ctL7pVY5SYZfc9kroJaOjBmIrreWmi5McZtwRxhLLebfUmeRofxUnKdFnobY+fguBvXHZLXdvA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hlcv6zp6vy0fwwe5hg9ugqc8fs380hgh53rkxt","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","auditwe5hg9ugq",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3VWjgBEh+1gOPRK97GPbNm6J/+juQtDlKBACc/1vPK5"},"signature":"Rg2Gt3MHIA1bimR1nZuqR2C2ccOdvulxJWLjmgUHaCQ0dlCde4L01BxEmU9tns4494eYuB2BqLucNR03wuINvw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hlcv6zp6vy0fwwe5hg9ugqc8fs380hgh53rkxt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["auditwe5hg9ugq"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3VWjgBEh+1gOPRK97GPbNm6J/+juQtDlKBACc/1vPK5"},"signature":"z3mtSNPjagO66o2VlGX61bZsfOOKrsEVD8TM1xRf1q02SSpxudB2tgoL1KSRpQeuAYfzADOsV5o/oI42Ao6HoQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hlcv6zp6vy0fwwe5hg9ugqc8fs380hgh53rkxt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1453","1","1","g1hlcv6zp6vy0fwwe5hg9ugqc8fs380hgh53rkxt"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3VWjgBEh+1gOPRK97GPbNm6J/+juQtDlKBACc/1vPK5"},"signature":"gTrR2PmtLXYWuAAcfHsgZGXIaVqml0U8GOzFPBs+bC0sF8kDsye0uQ1XElD6dI3D8NU31gqbbFrimZnOvorFUA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g17wnanquzv7urwwunssv6xflzd8u42r45a55g7f","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"81MRGVDN4UcaR3jvRcb7+skUkhrriP9t9mFronx44oEXlQuXuNbqEVxf8LAG5NhMXB3mYzRzEr4gLuGh3VcTdg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17wnanquzv7urwwunssv6xflzd8u42r45a55g7f","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","neckwunssv6xf",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"At9jhok8ifQXaYJZ/+9DBXHABSJbVkoD/uhBiKpPeOXO"},"signature":"jrBssYJUPBDwoPIerni4AQHzUEZKx7nMuNqRsp+qxVprXD606aSAGkcbVbLouAKcm8ZPMHLMUvc2eirpFqfzrw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17wnanquzv7urwwunssv6xflzd8u42r45a55g7f","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["neckwunssv6xf"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"At9jhok8ifQXaYJZ/+9DBXHABSJbVkoD/uhBiKpPeOXO"},"signature":"uHA6aEq5zOiidHpDRmPlsCc6P6RQfmUdprsFIhOkuugk4F6PAyw+E+c9YeeaJ5MCqNCCO2S32Fq6pB2FyUi94w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17wnanquzv7urwwunssv6xflzd8u42r45a55g7f","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1454","1","1","g17wnanquzv7urwwunssv6xflzd8u42r45a55g7f"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"At9jhok8ifQXaYJZ/+9DBXHABSJbVkoD/uhBiKpPeOXO"},"signature":"twV55pdRWLrIcc/tBsoeVR5N8E6kzxAatjz80syRGFI61C08kEzMjeehXzU3pO0yogAKtDgi0TE5HIv+UyTK1A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12jmg0s2gpyj3llv2kc0h9emaztlddkna4xclg5","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"FCOgTVCI8NpvgT9tsSEZhCYXAOh/ZFpwLBRvMaJJmLsr/Vsj5k9XMMGR/B1jiMvBn77Uey5QKsDWbeD9BrIa2w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12jmg0s2gpyj3llv2kc0h9emaztlddkna4xclg5","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","palmhurrylv",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/SZ8OqNfvDb1C3tlXoXW3kEZ5dDeBOpUaq6M59movkL"},"signature":"G7lT3uwTPKrqec1iYKlzAEk6W3NyWjYLYG7WzPRWyZYXdy2VKRELYmrWHCnIZsPZfcc8hhhRAhTEokOJDchrig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1gyrd9wwlcc4z8v3ljdck9nju442arcaan6vt8c","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"J839M1pEn+jGU3tKZdeMmnxB23N0fVPZooTw/hNUNhoGYs2gnxHqoSmr0Mi32zUHKPgUR+B6v6fIx24/lEdlMw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12jmg0s2gpyj3llv2kc0h9emaztlddkna4xclg5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["palmhurrylv"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/SZ8OqNfvDb1C3tlXoXW3kEZ5dDeBOpUaq6M59movkL"},"signature":"bIufyYJqOOPOa8Cm3xIpQQORbSyno/FylNKj0PBrDdMv+L4D6uZiC0PaORNY8ab/bp5MriAfgSs4lCD1t5JBKQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12jmg0s2gpyj3llv2kc0h9emaztlddkna4xclg5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1455","palmhurrylv","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/SZ8OqNfvDb1C3tlXoXW3kEZ5dDeBOpUaq6M59movkL"},"signature":"AW8GWHOXPxBC1Z+Ar9v4UQMBh/0pTypy7euCRoXcdDxUcaBXZAuNaJHGoA6sqBpAEL09ows17BEPMLkBoym7sA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12jmg0s2gpyj3llv2kc0h9emaztlddkna4xclg5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1455","1","1","g12jmg0s2gpyj3llv2kc0h9emaztlddkna4xclg5"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/SZ8OqNfvDb1C3tlXoXW3kEZ5dDeBOpUaq6M59movkL"},"signature":"cdPYZERWBa6PyTbEqEZvYNi/6MVt61KRlioTVvMS0vMKtaDP3nEwu0t2ejHks3LBWeZOz185GnQL1EcP8+0eiA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1l47x640c4petu4chfjge3qg2uplakx78hkxqxd","amount":"123000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"Xmw0RmcqtbOLYmgRE5e8qy6KtbkQVYcJ0J/dU9is8kYelCmH2qjgSksykcgW06pGlLh6Ldtg70qqiNDf27+U9g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"123000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"qUuPKJp53Am9fo/SUsnQkp1BOZPDs9r1l2fSEO79zmZDhnZf8ZHAXdr5pmmlOOWrfFi+pFkhoVR8t7hsozHSIQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"+9rwJppyaNufOyDgm3OrSYqYNl2gWlqN8B+n79Um9dsr+SmtJU12n13ZyfFpJznLNQguBR5V8OaTT+5hcNESdw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1jueshh78w0zgz7a46px60ph4d0rr9y06zsm9fh","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"JTKF1Bw2jzoQtTq0hJa+gRrY0x7G0gMn+H74UNgm8FQZcxZQgv8XXdSRBovqPeZPdChPxZGA7fT1axn0mJvS3g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1dewry6yux33mgwxre9a3c2lqevvax7q607qwwn","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"NyLPj85rnON260cWtRWLvoKiDZydHbdgZ7sJAYIqbXgP96D5CV7LGmjBsFpNGtwgUEEUsYP+qC9HKpVRJdHN3Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"0YEJPRvDmUGFdeyk7nDtVSInQdX8DNkP2cTag3A2kct0dfArda/O4yWUU4kFYeMzWdS3PDgi/uuGspiEEpaREA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","gg","HI"]},{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","gggg1","Hello"]},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"5000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"l16G41a4BjZ+pUk4qZN1YjFv0uviOZUj6hQrtesYTRFY+MQmTx6kLyp1YCAXHTgIHb5cz6URgjTrgoMG5EgHjA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17mcw908lp5y006avp4fjr082wrzryzqh2qgr8k","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1Ie2uJQVGI4K/6kwsKQkZK48YDrk3Ic4DKiVS1Ee2yL"},"signature":"SPPEktMi5vqDEduUCaC+JlSkD/n9eAod5fQf47S2wgt0ClwMbyvvc1kr+sxhKkqZWksEcfEqDM6F8Sd3zXICmg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","123"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"a+knlCpadHJOeRuAS+laCEQ6RxXI6DYBI74htNi/6AYPkaNvgnfXFucB9JTXe2gLhPW+ZOHZh3mBIDSEpm9LlQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"7/nn2h+ynlcWXCaMPgCu6U8Df5t35BidvbiU77Ft27MybHM6lTz5Ik1IHTkbiS67uYZB2fbz3zkvoHyNJeBa6g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1234"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"kReX6YtK3ZQxiNDyTMJDMJ+TGmpAKt6qJX6YR2ot8dAJzgmcAPC8f/vHIUV8RAWfsQz8cJ+QBpq/AdqJYuSyxw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"utguYw1zJYWw6eU8b54N8tCjUlZNlArQJI40R1UYVMlZ0+KVUVXJ0mgzRMOXT8Bmhl7YsDc88aV7UaNDdt9vgQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"m02lKaJNrjUEmWESu/8Jm/sa9nV5pSEfbzZhtSMgmW5Gts0IoQ7B5plXByl6+dYiPsfznwCqeSVbducl2qAmNw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"GZMc8ZfEw3QTFGanwUUSK7BRZafmuSbeIeLNVA7Ivsl6wgYs+eIoQkmVGnStEqDH06GdzPgFVRADhXK//f4gOQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"qsuNbug11I/pz9orHBSWm2VUYiQIn3vwWFjDHpzLXlYo5BYO3XOQz+rAp+gybe5JPVZKE74WP3FT7jY+KV1bzQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g17mcw908lp5y006avp4fjr082wrzryzqh2qgr8k","to_address":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","amount":"100ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1Ie2uJQVGI4K/6kwsKQkZK48YDrk3Ic4DKiVS1Ee2yL"},"signature":"wbxkD74Tkc0ZsQpC9yCMgu/nF9jTWNrjKdmOyZ3f5gEJp8/T8F0Z35xkiFgXXVG5rcSPRx58cifnr04X2oQc2Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g1sjquaysws7egnuxa9rwx2sxwz5pswr8ltq6wxd","1234"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"1b9GDmb4P0m/F5o+XlExGVrSyaogmL2nY59Vgp9IFlhDJFm/T01vbLuCMcEKyxPoZwQRXPsWhSX8OBy1Nu4gzQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1234"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"y9EwEXmph4u+UO43abqeIK7Ejmd2bQtQM4ljQZSYaApFZ1e/tvfLaRUYhAZ5mQ0ybAfnp9YbBb4bj8NS+TKliw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1etq6j7lddvzvwq9kz50ywmlyyfgk6qw76kzwss","1234"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"2P0HsywBS+qZXm9MpO7FZ+hgFYsSM6tygpohBq1CiYJq1hFHtDrGNlQXzdGaob+9nREKCf9rsrOBgghEfBngQg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","1234567890123456789"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"7Y6ECQkjtn5LGP/POipDhZnlcoH+7/J2tmyuD0/mADkBLd+V/y1e3g8woHdy5zNAfCJR5UblICDIhAbvLgnmnA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","0.1234567890123456789"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"F7XtFUBOLVhdAJogd04dg8c1D/gwtyAc1ecGgHZde0xvTrmlWrT8+yfUl0f9e192YQ6fDAQWoRJvijigkGyv1Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","gggg","HI"]},{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","baybe","Hello"]},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"5000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"TaHxSc+NflIgVPYH45PQmFKwKuc7tkhMeR15LrUS/+0EYvVNJ1+Ci85JlmPSZKinAIcrW7maKf3DuIxZIkRK8w=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"WsuFy7f2MMWlAgOtn9figTTqyW+ryMvsihyjB87ZDSEakWxx9SdWTuDTS9IlVaEGIOSkd+Teb72KtlBexG/Q5g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","1.5"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"yRlPqjVFEl+VzSJK8+PtYo6tGau9TDulqLMatw4OT984upNXJUy5P8WhWaM47LAEYu0ggRG+vgctMl54TIW0pQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","amount":"100000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"yTfxrRtK7SEHGNo+HyZmav1jvEJB9CA4oVr8/7mtr5oljIKW+uA9M5mhDWqbvSf1stTH32QihXiSf9RRxVSb8Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","5000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"sz7K+bebM656PV1Rgy4hwjLN6WElGONGh7AykXCJjkccVLMXQpCXOKSeJr9nCJxhWhyHORv37CoRbjIuJzAOGQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","100000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"+yu8MfDOEEwpLJMxehiFe1KV9W0o4Xrj1jDo4skwPr9Ze30fsjtVSLkU1KSmhpNJUgmmi7/h0LOOt6Ht+7mA0A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","to_address":"g1j9uz6gfvsa4g06aur96vp0dejxyg3lnpj4wjn0","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"JSx6dfmnbF0lYXT6RuQUSExAx13X8VFTeNJkSdpodrZG6z84mE6VPG0B4z3rcKxz5KGrIz8zEg4EVvHGv8dwnw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1j9uz6gfvsa4g06aur96vp0dejxyg3lnpj4wjn0","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"n3BGZS97u5TmWrnSVvUBpHKqgNUydLWnx/WES6aJjqI4gRJ0cSomkV16Bd7CMrDWYR+2RCezmC6wOcGP5PwmCQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g1j9uz6gfvsa4g06aur96vp0dejxyg3lnpj4wjn0","10000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"IXGH0Umeknajub0YcojR88/eftErMUZJ0icUnb/5ol48X3yTdpc3Rz0QRpwRrBPW1jbdL/RNnpC21CgIxBuxPA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"10000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"2A2ke2mOiXicYFSZZAEXeEkp6ij/OLb2e7iVDlYglyN6SGWy9hZjHxEvFDSXDy4aXA34dk/qRsKdA+KSOiethQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","100"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"qV55CVpB6NUShrYEVNKK9LYEPmuOniKfULiFaCBxAVxkTXdFTmCDKP13b9SMS4C9KmbNrcCg5l28cJvXoYB4mw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","10000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"y7DUeiP/E1IZEoWOxRBgdwmsvBaPeVbDhpyyZJGdd6kF8fDZJ5odWreifGTg5ZJmpranQoF67S/fyFOgsEExbA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","to_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","amount":"10000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"AESaRkhTR/zyV5qgDWoHWRtQTUPFXxLA3x49xr+0Szgy8YIlRGIE22NSRt+86LRtH1onwetwWenw0iPJgnHEig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","100"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"TQdvFq1Ti6qauv1VNpnOL+KksJ77pdSOAdsMCbY2c/5ojkMOPrxwmlb1wwNL9qkv3opvm+dHI2xkoyXV65IP4A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","10000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"fa7EAseTCodZLDy61KTldnl7Foehjk5Pw3RKyn4igZUaD8lejH55Ude45fve92gWNqbaH3l6E2jWdqePZrcbjQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j9uz6gfvsa4g06aur96vp0dejxyg3lnpj4wjn0","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ar+pxoZTuI54H7+M8GZE23GEP0ZJjbJf2TFMOdl1laPG"},"signature":"lKLOSVUhhW7OuTyNbSAmv4C7+tyIt/QRWKCNEhejXwZD8nuaCOWWIQXD5Q9vtklPKz7JOWTEHaUHKSQ4IPiz8g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j9uz6gfvsa4g06aur96vp0dejxyg3lnpj4wjn0","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ar+pxoZTuI54H7+M8GZE23GEP0ZJjbJf2TFMOdl1laPG"},"signature":"s8wK0LuCOuP+XCG9zE8512qSiiU341eaoyAG51LFgsgDS5fHOfBoHDZD6CPJSYe2+MCE5+TBW8YkYAOp5IT0Nw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"a64Hn6hpOgm5a/scn26xMUsNdNMnfk/SPWn4hqzP0csOVIIevuysQP1+S3IAPbDUhC2U4HdB13kkgI/JkJVhbA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","100"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"iBoyMcbeJvVbnoFHS9ibDCcw4NDni0hqOcl9eWSz4TA1vixJwd9cJ+EuQ6BJ4IvCoDEQMrqcZE9xvqF0+mmMiw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","10000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"xcZkgqPisUsD59iJp0uk+cQl5/VZIz2m1OpY49OhOjpz/eTs7FsjHaEtywGHu269Hvk9nppsnTlTg4+fCjChtw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","amount":"10000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"mxld/Z1M53iYSwZMmjfLjcw0vTI59owGslPXPKwsdJ0xF5zxWsIw1mU/FBFwFtLHasKMjZRWVRIjcog/AWBM2g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","100"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"yISLKl4R5O7uLx2O2MR3iyBFrdj5/ckeV2fCErQpXFkecnOnjJEyH58H5KQ//CivKuJd5J1D4e8Kmmq9XT2m6w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","100"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"Re36dFypgpQ6OwKpWXFzVrTQLbEBEMz16rm42cdtDz0dIz6OZLNNJrhflq/jXpCHywstwL3H1zlqI3V5xOu7Jg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","gggggag","HI"]},{"@type":"/vm.m_call","caller":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","bayggbe","Hello"]},{"@type":"/bank.MsgSend","from_address":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"50000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"PLGDgHpXxxQ4H2fU/m6wGL4OMFR9rCeFEZPJMTEo7pZSpGujwmzfyeEn9fnOZ6g7HFaPlHfV14tuKPm3VPJkbw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","gggg11gag","HI"]},{"@type":"/vm.m_call","caller":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","bayggb1e","Hello"]},{"@type":"/bank.MsgSend","from_address":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"50000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"EyHaY+e6N/5sIXcE6h0mWkYArQU0TVAd8+GAwRmX76sieK81liXZ4kTzRMMj3LP8PZD+CQVshs+Pj0SHjN/qiQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"5000000ugnot"}],"fee":{"gas_wanted":"30000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"gHg3ZaYPK4YvuzhxhSxo6IGdGLqiRe5ry+Gta59T7mUNJZg5eaP6PDui/UyV16ozpqF2JGwAmGRlyVRWd/p/sQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"5000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"fSrL5dt6IFIqfCWwqBvOfq+WP7i3FYJ6VZtkp9SCzPUWmC7JaEnlWsDOVuf8El6OILIbAXTVBlfbESfKjVH8/A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"5000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"rWkSFBNI/0dBxePUYPhhjYWD9WR+NCyef3yPAuK8LmdqzxyUipuBeCOtVkAzNjNlWViOWPdw9lQ2AaeIUg2zcA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"5000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"dE5785UYINhtHIyywiphFTDGUnTv3C2y0FQxDGlFmBBTAFlXQwAPo+ebzwYjHsnzrL8BIeYjiHw1xQ7Qf/TcYQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","4"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"dwRC1jXd8dlgU9zOdqH/rMjQa5+KbQsz+xIG/yH1YPRa42f8XcUxQ/jl6icfFTLK9T614wF7u/oUNKxxY+OeAw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"3000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"pb6JbheTUPhJVGDqxcGcb8vi0ou6YSIa+oCkl5tpgstlbBHgJ8w8VCub2QUuq233qmsJ9eR3qIXaOcXMl43hOg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","21"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"2BmVVJQMNhC9m43TcDkgHae6HWSSxOS+jikmTzYMjbss2/QXUYe6GFJubmUBZ/R6AqZoFhJxU1i8twP7L+7bZA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"2000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"KFFYX/sQGbnZ992jMNBDn1q1OngASgzAhYNGxMbetJUIwle848GH1Iaqjt7lZCibImOkii5zlAIFIpgVu5HXsA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","0.0000001"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"HUjtOKfJhaSBYF6XWIiz9vbAAaHACXxm4G2qXcpsVmsFOcG48dg8csqbUjHiQ0Ngh15FyLYf9TqjE2ABYQzcgA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"eVCHkynEl4eH9l6gn+QA3GOrvPI87W6E0ExXs4QjbThD8QFk5Ure9cx4uAlRZuMOl57CQsFwMqHMZisrhMafNw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"10000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"Hv/ctSzghHNnTPpeL5zN51h3mPaRMW2gFrRKqF4SrpkICRmSKSV39g8y5qAU5t/naF0vTcBGmAUondO9CYIUWg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","to_address":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","amount":"10000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"K+0AA/epRZYEVzWnZHrCG8MwrdbXtxIVMlUxJuf811cC29MiLX69CgPKKP9OseW56Op7NzGPISjU/8kgJqmoFA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","0.0000001"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"ZixulDBkTDxhfVTymf8xtvhjOPia6pkjDsOxqIeo7AsNHrixZgPjnF38JkVKXa72+/bdLJ1qNv+1Yny3nU/TjQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1.23456789012345678901234567890"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"kE0xunAQP14NObMBPCbR+oFZ83AZ2yhrRCFZiyTIq7cJaHzd5RiOOD8PF6bEOFwUwuAxPhmKbm44Dhr3krM9hg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","12345678901234567890.23456789012345678901234567890"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"8zBSQMEsASXzo/vaoh+K0d2Up60EXs8niGpKDG6gzD85XrNFkjGjPy+fw8if8f/wt/lvyM7Ye/lHqmNfO9quBQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1234567890123456789012345678901234567890.123456789012345678901234567890"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"Nkz5XqEjihM10erBthL59PkJyqgDLvzgxYk8/YabNyEMdL6ptBqVxjfJLAGSTPMow6G+GK3Dst+kiN/7OlimYA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","2"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"ocQNljpiz4zAy8ar4496FZrS9zG9Yp0ghPigSACuAbILAV7AaN8BrxY67pl7Nc1lKftlPAbj9n1GHqo7J1a26Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","2"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"PHHIjpwmAJNvIDa/HSO/einmWGzwxBSMu7Q0H7oLnYooLvuXcxn+gm13xBFlB4Qwd7wzESTYMwC1RLrM/uSLqQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"adPpOEHRFNCmTbdrRcT5ss47OLORuGRuoXklE5N5NX9JdoGdv2VJeevsQ5iC1BMM/uQInp/6OdD8X/lZa8dbTA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","amount":"50ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"/HSkwYBPQrHOnzxw8+7S4tZ+fd0Wz0ApjJWmX4O8WydKYlqLZEEJO57TmNA6dW+20X2kj3dBMENXiLW/Y2uPMw=="}],"memo":"12313"}
{"msg":[{"@type":"/vm.m_call","caller":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","0.0000001"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"NLGSFLEW99FWoE8bb3NyocGpCS9CQ4Co559BEIS8xfsnKiKNrqQhTCNLohePTOUuOwe6GyzcX5QbXeDGdutlVQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"Q3rWvIBZCTHMb9CzN1ys9pLP/XxHw8SWb+pfH6nJZcs2ZPpW/ruCWnhZ2zvoqoP/G6bDRB7SqtbCAslbDxeEUQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"NhMZAvmwz5g6nZqNOtyWrWltjfwhzrH6lbI6QJ/JWohrEd2op//b6Ovx6zW2hiYff5jlf7AFBtgnS0UvJdzMKw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","amount":"1ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"VMrgS4u/KDnWCSyOWR3exfYK1P+rdIo3CKI2lKIMCWw5bbUJzyWN/dhcjIrWmIadOoajFdAIdWFAl3cZGC56eA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1l47x640c4petu4chfjge3qg2uplakx78hkxqxd","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","2"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3+XBwhRNxB98UM5CE/sbFKQFUNrwd3wclkoRFngQHN4"},"signature":"HtfCfLH5xi2BfU1INF5ijD3hi6ScZIEctzzs4B2G0CgFjhjDo/7DZfdT7TgBkINF4Dha9mr7lw7RTPrmr9O1wg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","2"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"LHWEBrRvEcdszFcLCgcJJ9CmxevL3K2E52nfLzuwcBIJ44nXVZ1txvcpCwBilJxvh+NP2vJwUwivw6vpieZnkA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1k3x467uvu7z7vc87wrcyq3l9vfrw9u4kvxlxcs","amount":"12000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"n/nZ/ah3tmXavY7bFUXwvJIDc5Wb7gZsdgjM424NOPhTLtajDkP1Chggkg6OTJQZ4pE8KyF4ll2x2auVjhIWxg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1k3x467uvu7z7vc87wrcyq3l9vfrw9u4kvxlxcs","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4E79zrKKNuFgMoTPr+bclWljKQWl1Oj+19T4QlPEbHX"},"signature":"qArmrMGbb7CFocjfo5yx0PJA/a4tLZ2M8MOd43PGQDdwX1vAK/ijVlxchyt5FrSee9ZR4t1Cw50zvKbk5v8eig=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1k3x467uvu7z7vc87wrcyq3l9vfrw9u4kvxlxcs","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"10000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4E79zrKKNuFgMoTPr+bclWljKQWl1Oj+19T4QlPEbHX"},"signature":"yWGhGjGAqn/JgN3B3E8FQCszpWJLsGH4MQBJdO4ykbQBwkoi3uEWT2bAJf1wNXXnO0O7p41XmxeZegWS2Zf0YA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1k3x467uvu7z7vc87wrcyq3l9vfrw9u4kvxlxcs","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1110ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4E79zrKKNuFgMoTPr+bclWljKQWl1Oj+19T4QlPEbHX"},"signature":"K55h9oYVzLNH6RzQQodOIrQ8G0kkVjTm+UDPpf/j/3o1zp9o7Q+Npe4OkHrO0SKUspwZ0CJDFVndFQdXnYRUSQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1k3x467uvu7z7vc87wrcyq3l9vfrw9u4kvxlxcs","to_address":"g1k3x467uvu7z7vc87wrcyq3l9vfrw9u4kvxlxcs","amount":"1ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4E79zrKKNuFgMoTPr+bclWljKQWl1Oj+19T4QlPEbHX"},"signature":"NKDw0kqDADeZyRqRBwaoGk1IhwzY70Uw5kenh2ZUG4cyHVi2sKQVZDq5Qq3qwRIesuZ/K7KSaduJQOFON7FqPw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1k3x467uvu7z7vc87wrcyq3l9vfrw9u4kvxlxcs","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"wBQqh9Kx/IIVwubPTC8UOk1agQ3E0dbh9NxfctXRtid35Nye5YJ6c/Xbgu+lhDKjCop++cTgTCvWbngpJSTBGA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"YINdOtmX5JP6txs2CmJ30l3C2keMGexcJLfYjzqaNJwcPjqfK3GOg+nQRL2jXohfykSS9/oOVD3Hmkl22bCFAw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"f17osbcUqDqBHdL9VMDuPk8W4uN6nXEDV0OO7opBME1lpcuyaCyrcC5WPlXX02+kDaEPHup/jr81bALiXfivTw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","to_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","amount":"123000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"SB+Py7z1enzIQ7+Ler6r2hp4tFExMPLmfmG93e5VTyBHzJyeM56J2YV/V5mWb8qaSudL3iGBSE1YCBitnBAP8g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","package":{"Name":"mi","Path":"gno.land/r/mi","Files":[{"Name":"gno.mod","Body":"module gno.land/r/mi"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"swF+/zB0+3vWayrZWg3mHbctcfZLqXH+xWr9Kv8t/gIL/BXemC8/B35ib9Oe5bohGAxLDrVvRn+gybTqo41rpw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","package":{"Name":"mmm","Path":"gno.land/p/mmm","Files":[{"Name":"gno.mod","Body":"module gno.land/p/mmm"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"Cge9waNaVZAALV4C9PAiYlXN83+D6SUjJy6E16BUgMg6iMwWkqO5vp2i0ixOrg+szz5H6tmv8YfWop+nnCQf3A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","package":{"Name":"mmm","Path":"gno.land/p/mmm","Files":[{"Name":"gno.mod","Body":"module gno.land/p/no"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"d+Gea2UeBT6K9lXuq0nHOkIiEcdZhSQ0mJidgiK+jNBxojep4feae7Ud890+x7FcYeyrRrP9FBGZLjqHguSkng=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","package":{"Name":"mmm","Path":"gno.land/p/mmm","Files":[{"Name":"gno.mod","Body":"module gno.land/p/noy"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"OpgSv7Bt0V39JQFDRXxHt3vF3lBpqS1wKLt23TINPvtqkrvfmKVOTFkmk/+Qml4uzt6j/mzsSF7Sdd5vElSRcA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","package":{"Name":"noy","Path":"gno.land/p/noy","Files":[{"Name":"gno.mod","Body":"module gno.land/p/noy"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"tMv6lhXHjQbNc8FRnbj9zlQ+8TXgoe4LjNnhUUOHHGYUgZXKSbYinbJBMmPZfmGaJAYFXczDv3lXs6v+ByrDaw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","package":{"Name":"noy","Path":"gno.land/p/noy","Files":[{"Name":"gno.mod","Body":"module gno.land/p/noy"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"NMSI9NChtWAED6urxpnJAlbbcVd6vArv0ntb7uLS44cWi7QFof9c6HVJtJ0ykq2j0akj3l5XqFfrqKXunVTcFQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g10lvdavdw2jhwke0vry2nyd0n25wj5eae7ensuq","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"rd//iAeKp1Qk9eVKEle7GInGkdqSm4afwZAyWOwBvWlGC6U7WT14Ngw1aa8yUk8SYKsA8sNy1zG1MCwEUReONA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/users","func":"GetUserByAddressOrName","args":["keyboard_worrier"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"uxLjtL8N1qhRFS2lA/AwEPKgKHwpOK2M42owicAukx5ILORY/9yGwoXe4hOZoLHPlkLawC21iyN3kLFfEOogRQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/users","func":"GetUserByAddress","args":["g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"4Iz54EyukdwaOfk3W0RaUBkBMQ1xWx1dparUd71il0UAvOBhVsqazi7up4CFpS7NieS2m/VpnRXCrbsVEMwesg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/users","func":"GetUserByAddress","args":["keyboard_worrier"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"zseyeaMOrvqQQk/r7cBoyKXHDlLIzbg+oFYLaBCToRpiOzAPFZm5I5qoapKhKPQnF9r1D0sSquMHnVY1dgIFBw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/users","func":"GetUserByAddressOrName","args":["keyboard_worrier"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"0EPdlVgMz76iU9e/HhqYkVsaaiewizBA8YutU7/xL75aY1d2gp88s6niReqX93HK+Q6g+JqL5ENm4muH1HJiUQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/users","func":"GetUserByName","args":["keyboard_worrier"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"Gk/rlWVHkOd91HySZK/FOtEl70V2gKGlnSI26wifXCgPI4gWdvxI/wVp4twes+JFcjsYzWrirqQ5db7lO6QbSg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","123"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"kIKraJmX8j818PEFY9yl0uXHSWBMAhEBWdYsT7eHdKt0jyOwh/i5aE1m5BnJjM9HNSRyQY+01JSzmYaUk/viSA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","1234567890123456789"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"oMdeDMtV/orDdvpnPV8leTIRc3VIGKdy4SKtNW3xTs92db4Cr0EgJK3x1ER5TdBfHEGN9+kTjlmDmQEEt+Q3Dg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","package":{"Name":"noy","Path":"gno.land/p/noy","Files":[{"Name":"gno.mod","Body":"module gno.land/p/noy"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"tleGH7pxsdALG/FcanNwV5F/EBlJ6pS5h2MGQBhWsNFF//KXEk/kSLTLQ0kZYWupJS8xpMP+faefS4JFNqlUfA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1sf76sqaftdnedg28wmxq6h7akhd790zz8aynz0","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlJRdvc88GCeEwDT3xFa7E2IXoAFQUEfszgSZMtpInhV"},"signature":"EMaQLwc0qW/Jwlt/OHywGOSAkuGHd1K8MJ9nX1jxhXhFxFMMh9T0zC/rtKK+Z2NjGKshRvtd8vGKg63qk2ITNQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1sf76sqaftdnedg28wmxq6h7akhd790zz8aynz0","to_address":"g1dh8yl7y0k9jylthtgc4za6mmechp3tq47lu5yp","amount":"1000000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlJRdvc88GCeEwDT3xFa7E2IXoAFQUEfszgSZMtpInhV"},"signature":"eWTjWNolEiLO2AZB2su8h5gM5t8OfR4EoP8zFQvsY+8rxZE+kPjBnYH99xoBwpPbutjHAmbFMA5MFz4zB4R7yQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mjzyk7r49ta4h6ppgv2fedgz5ek6hgyttge9pv","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7z","12"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwpFZ/Eba2YD0tSPYISodHi2gBBhx/hUg/PPZTt93aq7"},"signature":"yul18auOKr+PZ6umg9sZzPTJHIuf/VGvEkaPYMZvJ8o9U2C6d/ZqKANLwRoZu1r21zrRGtRDWenXdDCs17O8Vw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mjzyk7r49ta4h6ppgv2fedgz5ek6hgyttge9pv","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7z","3"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwpFZ/Eba2YD0tSPYISodHi2gBBhx/hUg/PPZTt93aq7"},"signature":"jWsD83h80x5JDMk/psiWTnchfgGrZrpGiUt3NABSbCxjlu0WeZkVuDvtlLjofVVBaXpD0vd6yNqrB8zlqJiMDw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g112345678901234567890123456789012345678","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"PCzgwcs+eE5OSJSM8BI2tcyMxuxIVtGlbV1D2EDekCl9xCSQ9XwfqScFrJGOADyCw5lfsbWchb9QC3zhKkhXxA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","package":{"Name":"gnopages","Path":"gno.land/r/gnoland/pages_beta","Files":[{"Name":"admin.gno","Body":"package gnopages\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadminAddr     std.Address\n\tmoderatorList avl.Tree\n\tinPause       bool\n)\n\nfunc init() {\n\t// adminAddr = std.GetOrigCaller() // FIXME: find a way to use this from the main's genesis.\n\tadminAddr = \"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq\"\n}\n\nfunc AdminSetAdminAddr(addr std.Address) {\n\tassertIsAdmin()\n\tadminAddr = addr\n}\n\nfunc AdminSetInPause(state bool) {\n\tassertIsAdmin()\n\tinPause = state\n}\n\nfunc AdminAddModerator(addr std.Address) {\n\tassertIsAdmin()\n\tmoderatorList.Set(addr.String(), true)\n}\n\nfunc AdminRemoveModerator(addr std.Address) {\n\tassertIsAdmin()\n\tmoderatorList.Set(addr.String(), false) // FIXME: delete instead?\n}\n\nfunc ModAddPost(slug, title, body, tags string) {\n\tassertIsModerator()\n\n\tcaller := std.GetOrigCaller()\n\ttagList := strings.Split(tags, \",\")\n\terr := b.NewPost(caller, slug, title, body, tagList)\n\tcheckErr(err)\n}\n\nfunc ModEditPost(slug, title, body, tags string) {\n\tassertIsModerator()\n\n\ttagList := strings.Split(tags, \",\")\n\terr := b.GetPost(slug).Update(title, body, tagList)\n\tcheckErr(err)\n}\n\nfunc isAdmin(addr std.Address) bool {\n\treturn addr == adminAddr\n}\n\nfunc isModerator(addr std.Address) bool {\n\t_, found := moderatorList.Get(addr.String())\n\treturn found\n}\n\nfunc assertIsAdmin() {\n\tcaller := std.GetOrigCaller()\n\tif !isAdmin(caller) {\n\t\tpanic(\"access restricted.\")\n\t}\n}\n\nfunc assertIsModerator() {\n\tcaller := std.GetOrigCaller()\n\tif isAdmin(caller) || isModerator(caller) {\n\t\treturn\n\t}\n\tpanic(\"access restricted\")\n}\n\nfunc assertNotInPause() {\n\tif inPause {\n\t\tpanic(\"access restricted (pause)\")\n\t}\n}\n"},{"Name":"pages.gno","Body":"package gnopages\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/blog\"\n)\n\nvar b = \u0026blog.Blog{\n\tTitle:  \"Gnoland's Pages\",\n\tPrefix: \"/r/gnoland/pages:\",\n}\n\nfunc init(){\n\t_ = b.NewPost(\"\", \"gor\", \"Game of Realms\", \"Lorem Ipsum\", nil)\n\t_ = b.NewPost(\"\", \"events\", \"Events\", \"Lorem Ipsum\", nil)\n}\n\nfunc Render(path string) string {\n\treturn b.Render(path)\n}\n"},{"Name":"pages_test.gno","Body":"package gnopages\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n)\n\nfunc TestPackage(t *testing.T) {\n\tstd.TestSetOrigCaller(std.Address(\"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq\"))\n\n\tauthor := std.GetOrigCaller()\n\n\t// by default, lorem ipsum posts\n\t{\n\t\tgot := Render(\"\")\n\t\texpected := `\n# Gnoland's Pages\n\n## [\u0026#9656; Events](/r/gnoland/pages:p/events)\n\n## [\u0026#9656; Game of Realms](/r/gnoland/pages:p/gor)\n`\n\t\tassertMDEquals(t, got, expected)\n\t}\n}\n\nfunc assertMDEquals(t *testing.T, got, expected string) {\n\tt.Helper()\n\texpected = strings.TrimSpace(expected)\n\tgot = strings.TrimSpace(got)\n\tif expected != got {\n\t\tt.Errorf(\"invalid render output.\\nexpected %q.\\ngot      %q.\", expected, got)\n\t}\n}\n"},{"Name":"util.gno","Body":"package gnopages\n\nfunc checkErr(err error) {\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"OhXlOPpwIRrgvk/B5AUofeK96bzPISIjzYsZDX3fwcdS343TY4stZT+KqUYZUV1JgdNNhhJoBVC0ovONMwtgxQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","package":{"Name":"gnopages","Path":"gno.land/r/gnoland/pages_beta","Files":[{"Name":"admin.gno","Body":"package gnopages\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadminAddr     std.Address\n\tmoderatorList avl.Tree\n\tinPause       bool\n)\n\nfunc init() {\n\t// adminAddr = std.GetOrigCaller() // FIXME: find a way to use this from the main's genesis.\n\tadminAddr = \"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq\"\n}\n\nfunc AdminSetAdminAddr(addr std.Address) {\n\tassertIsAdmin()\n\tadminAddr = addr\n}\n\nfunc AdminSetInPause(state bool) {\n\tassertIsAdmin()\n\tinPause = state\n}\n\nfunc AdminAddModerator(addr std.Address) {\n\tassertIsAdmin()\n\tmoderatorList.Set(addr.String(), true)\n}\n\nfunc AdminRemoveModerator(addr std.Address) {\n\tassertIsAdmin()\n\tmoderatorList.Set(addr.String(), false) // FIXME: delete instead?\n}\n\nfunc ModAddPost(slug, title, body, tags string) {\n\tassertIsModerator()\n\n\tcaller := std.GetOrigCaller()\n\ttagList := strings.Split(tags, \",\")\n\terr := b.NewPost(caller, slug, title, body, tagList)\n\tcheckErr(err)\n}\n\nfunc ModEditPost(slug, title, body, tags string) {\n\tassertIsModerator()\n\n\ttagList := strings.Split(tags, \",\")\n\terr := b.GetPost(slug).Update(title, body, tagList)\n\tcheckErr(err)\n}\n\nfunc isAdmin(addr std.Address) bool {\n\treturn addr == adminAddr\n}\n\nfunc isModerator(addr std.Address) bool {\n\t_, found := moderatorList.Get(addr.String())\n\treturn found\n}\n\nfunc assertIsAdmin() {\n\tcaller := std.GetOrigCaller()\n\tif !isAdmin(caller) {\n\t\tpanic(\"access restricted.\")\n\t}\n}\n\nfunc assertIsModerator() {\n\tcaller := std.GetOrigCaller()\n\tif isAdmin(caller) || isModerator(caller) {\n\t\treturn\n\t}\n\tpanic(\"access restricted\")\n}\n\nfunc assertNotInPause() {\n\tif inPause {\n\t\tpanic(\"access restricted (pause)\")\n\t}\n}\n"},{"Name":"pages.gno","Body":"package gnopages\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/blog\"\n)\n\nvar b = \u0026blog.Blog{\n\tTitle:  \"Gnoland's Pages\",\n\tPrefix: \"/r/gnoland/pages:\",\n}\n\nfunc init(){\n\t_ = b.NewPost(\"\", \"gor\", \"Game of Realms\", \"Lorem Ipsum\", nil)\n\t_ = b.NewPost(\"\", \"events\", \"Events\", \"Lorem Ipsum\", nil)\n}\n\nfunc Render(path string) string {\n\treturn b.Render(path)\n}\n"},{"Name":"pages_test.gno","Body":"package gnopages\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n)\n\nfunc TestPackage(t *testing.T) {\n\tstd.TestSetOrigCaller(std.Address(\"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq\"))\n\n\tauthor := std.GetOrigCaller()\n\n\t// by default, lorem ipsum posts\n\t{\n\t\tgot := Render(\"\")\n\t\texpected := `\n# Gnoland's Pages\n\n## [\u0026#9656; Events](/r/gnoland/pages:p/events)\n\n## [\u0026#9656; Game of Realms](/r/gnoland/pages:p/gor)\n`\n\t\tassertMDEquals(t, got, expected)\n\t}\n}\n\nfunc assertMDEquals(t *testing.T, got, expected string) {\n\tt.Helper()\n\texpected = strings.TrimSpace(expected)\n\tgot = strings.TrimSpace(got)\n\tif expected != got {\n\t\tt.Errorf(\"invalid render output.\\nexpected %q.\\ngot      %q.\", expected, got)\n\t}\n}\n"},{"Name":"util.gno","Body":"package gnopages\n\nfunc checkErr(err error) {\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"trLBgba2uTzZmQeFJRs8X14oBALLOMd1SE+Z0iPLNfwxAifWJ+gSn4GnvpdT3NqKaaTzv+k0CmozImT15/9KkA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","package":{"Name":"gnopages","Path":"gno.land/r/gnoland/pages_beta","Files":[{"Name":"admin.gno","Body":"package gnopages\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadminAddr     std.Address\n\tmoderatorList avl.Tree\n\tinPause       bool\n)\n\nfunc init() {\n\t// adminAddr = std.GetOrigCaller() // FIXME: find a way to use this from the main's genesis.\n\tadminAddr = \"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq\"\n}\n\nfunc AdminSetAdminAddr(addr std.Address) {\n\tassertIsAdmin()\n\tadminAddr = addr\n}\n\nfunc AdminSetInPause(state bool) {\n\tassertIsAdmin()\n\tinPause = state\n}\n\nfunc AdminAddModerator(addr std.Address) {\n\tassertIsAdmin()\n\tmoderatorList.Set(addr.String(), true)\n}\n\nfunc AdminRemoveModerator(addr std.Address) {\n\tassertIsAdmin()\n\tmoderatorList.Set(addr.String(), false) // FIXME: delete instead?\n}\n\nfunc ModAddPost(slug, title, body, tags string) {\n\tassertIsModerator()\n\n\tcaller := std.GetOrigCaller()\n\ttagList := strings.Split(tags, \",\")\n\terr := b.NewPost(caller, slug, title, body, tagList)\n\tcheckErr(err)\n}\n\nfunc ModEditPost(slug, title, body, tags string) {\n\tassertIsModerator()\n\n\ttagList := strings.Split(tags, \",\")\n\terr := b.GetPost(slug).Update(title, body, tagList)\n\tcheckErr(err)\n}\n\nfunc isAdmin(addr std.Address) bool {\n\treturn addr == adminAddr\n}\n\nfunc isModerator(addr std.Address) bool {\n\t_, found := moderatorList.Get(addr.String())\n\treturn found\n}\n\nfunc assertIsAdmin() {\n\tcaller := std.GetOrigCaller()\n\tif !isAdmin(caller) {\n\t\tpanic(\"access restricted.\")\n\t}\n}\n\nfunc assertIsModerator() {\n\tcaller := std.GetOrigCaller()\n\tif isAdmin(caller) || isModerator(caller) {\n\t\treturn\n\t}\n\tpanic(\"access restricted\")\n}\n\nfunc assertNotInPause() {\n\tif inPause {\n\t\tpanic(\"access restricted (pause)\")\n\t}\n}\n"},{"Name":"pages.gno","Body":"package gnopages\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/blog\"\n)\n\nvar b = \u0026blog.Blog{\n\tTitle:  \"Gnoland's Pages\",\n\tPrefix: \"/r/gnoland/pages:\",\n}\n\nfunc init(){\n\t_ = b.NewPost(\"\", \"gor\", \"Game of Realms\", \"Lorem Ipsum\", nil)\n\t_ = b.NewPost(\"\", \"events\", \"Events\", \"Lorem Ipsum\", nil)\n}\n\nfunc Render(path string) string {\n\treturn b.Render(path)\n}\n"},{"Name":"pages_test.gno","Body":"package gnopages\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n)\n\nfunc TestPackage(t *testing.T) {\n\tstd.TestSetOrigCaller(std.Address(\"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq\"))\n\n\tauthor := std.GetOrigCaller()\n\n\t// by default, lorem ipsum posts\n\t{\n\t\tgot := Render(\"\")\n\t\texpected := `\n# Gnoland's Pages\n\n## [\u0026#9656; Events](/r/gnoland/pages:p/events)\n\n## [\u0026#9656; Game of Realms](/r/gnoland/pages:p/gor)\n`\n\t\tassertMDEquals(t, got, expected)\n\t}\n}\n\nfunc assertMDEquals(t *testing.T, got, expected string) {\n\tt.Helper()\n\texpected = strings.TrimSpace(expected)\n\tgot = strings.TrimSpace(got)\n\tif expected != got {\n\t\tt.Errorf(\"invalid render output.\\nexpected %q.\\ngot      %q.\", expected, got)\n\t}\n}\n"},{"Name":"util.gno","Body":"package gnopages\n\nfunc checkErr(err error) {\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"zfMjNw1bPoU0YJe9ZbwK9pFWwaNTFyT9FNXLmGPP7q181ybKC2D/QbXYtc3QxwiFP3TcDrhTeqNeXqpXMq/C3w=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1sf76sqaftdnedg28wmxq6h7akhd790zz8aynz0","to_address":"g1g84try906zvyuzcd6lcdc8sg00scqwm3ajzyll","amount":"9998998999997ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlJRdvc88GCeEwDT3xFa7E2IXoAFQUEfszgSZMtpInhV"},"signature":"OTJvuwiVhKX8g4vLJ9PYnUYpX2g7PXeo7u9PYQyJLkZnD8Zy1aeZmsUVhK7PpJ8h2TeUEZVWtORGw1jUl9Z8Jw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g84try906zvyuzcd6lcdc8sg00scqwm3ajzyll","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","woongjae",""]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1gRZFloPKe1mAG7Qbyk6/ZOsGbHdzpxkXrbzM015yDv"},"signature":"sb52KDeBEchj9yXfHJVLLcgMnvV+aP9f5cfDbsMWimkB+rdPrP4Knjwiwid7cjlIfX2qMChmej2Z0s9k3aAuvw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1uprcpgrkm5jz78hsd5s4emem2asgjykecd7ust","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"WTQu6AuptuCxHrPk2TUcjWHyOs/TbZ0dzTuIwEy5aYhT5SYyI57VTNP5NOcYaCC5ZQA47Cug4bQowKYhQVXjjg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1g84try906zvyuzcd6lcdc8sg00scqwm3ajzyll","package":{"Name":"adena","Path":"gno.land/r/adena/usernames","Files":[{"Name":"usernames.gno","Body":"package adena\n\nimport (\n\tusers \"gno.land/r/demo/users\"\n)\n\nfunc GetAddressByUsername(username string) string {\n    user := users.GetUserByName(username)\n\n    if user == nil {\n        return \"\"\n    }\n\n    return string(user.Address())\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1gRZFloPKe1mAG7Qbyk6/ZOsGbHdzpxkXrbzM015yDv"},"signature":"1Oyqa4FuBnsCuLJ6tfCRACUeNO15WAAinyJqZzDd6VcdHETXIe7zj22EtbKKuMqjWtZ3ghUGz6Cih1uAR3U4Qg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1g84try906zvyuzcd6lcdc8sg00scqwm3ajzyll","to_address":"g1g84try906zvyuzcd6lcdc8sg00scqwm3ajzyll","amount":"1111ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1gRZFloPKe1mAG7Qbyk6/ZOsGbHdzpxkXrbzM015yDv"},"signature":"n0XKSi73OVaTVT2Sjx+9GIRrHMQC+h5l3rllHYuwTchJbtfG6gX4w1NMZyTZ4Z++tzmtdTxFuk9oCCZfEpVmQA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/foo20","func":"BalanceOf","args":["g1hxecqgcv4f0p7s7ap6t20vaeeuvqgvl9qtchr6"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"OmmIW/wjau3QjEHi++TFHorwL17sLyIo2ZwEIUzRAb5yFEGilLImchNMl2JdVQJU7qOvDrpgYxyzD8jH39g+IA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["man_in_black","12345"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"f3n3m96N3OZMQ3SZRL84Gv2FmxI3buUUh1IpuJGc3MgJy7pihNfk1PbfNHnHYINQrQIP7eo5iVir0PEeUOzNcw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/foo20","func":"BalanceOf","args":["g1hxecqgcv4f0p7s7ap6t20vaeeuvqgvl9qtchr6"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"TMtARr/aybABxiWj+A/S1D5M95tX3gmvI3QLvpz4QfF4pslKklwFLLgpGsINvtE3CeUfMPGFvJ21xtwOrFc9KQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","to_address":"g17w4yv87n0jm9h6y8m9g7wuuhddqhshnnn97sn9","amount":"100000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"lhVu3rLQTKCuFevqSqdbycO1orM1o3LUOTR/Zj1lvcRjLvxrFRmWLipYlVlitqOdR7polp64dQ4gL76GObDBhg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1lrgyaymlhp8jm0gu6qwskpgx2t9fkkdmder8wd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"+bLux4wiQzGVXe6YPgCsDGsaqbYjF/YMj3CLXj7Gz9p9ThW6uBhY//O4yNrvN0YZUuJCDov2A9RgjUmqiniVyg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1lrgyaymlhp8jm0gu6qwskpgx2t9fkkdmder8wd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"/5cu9c6iYv7s9sa8ESucNOggdr9vAuC8qLI0XRWl3JM3tMtGPb2weJrTJpUbUwx61vm8W00lpd6vtTLXpF9AcA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1lrgyaymlhp8jm0gu6qwskpgx2t9fkkdmder8wd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"PIOA6btf/w+pdVFDwUVYzirxgmzKZ5UkKCYRW2hUfpdcBWNp2xju2Xf1bm2b052o6Ky8LfGA9k242FlPNcxDbg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","norman",""]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"rraH3Zm/qgS6iNMwS0y7rCMQiMnM/sSbZoyC20NOZlEx7Mze6uk/sPQkF+zWSWfOT2lMftpw7K7jxCf+mf4VnA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"demo","Path":"gno.land/r/demo/hello_gnogno","Files":[{"Name":"contract.gno","Body":"package demo\n\nfunc Hello(name string) string {\n\treturn \"Hello \" + name + \"!\"\n}\n"},{"Name":"contract_test.gno","Body":"package demo\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\t{\n\t\tgot := Hello(\"People\")\n\t\texpected := \"Hello People!\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\t{\n\t\tgot := Hello(\"\")\n\t\texpected := \"Hello !\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"1s2z9UmaYPNw6H27KNzjeUoDUNLaCYF/JD52DVljdWN0BNQhrySSngBbD6ePz5IuFuo70z2N4N6i2cQYOn1yUw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","package":{"Name":"demo","Path":"gno.land/r/demo/hello_gnogno","Files":[{"Name":"contract.gno","Body":"package demo\n\nfunc Hello(name string) string {\n\treturn \"Hello \" + name + \"!\"\n}\n"},{"Name":"contract_test.gno","Body":"package demo\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\t{\n\t\tgot := Hello(\"People\")\n\t\texpected := \"Hello People!\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\t{\n\t\tgot := Hello(\"\")\n\t\texpected := \"Hello !\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"yHstbfiQ9XyP8ojmW790tp+ksHQ3zPXzU9r47FH7kSI54aOREgAoE7NwTRbMguUm+SGequ4D/qcsXGfpjnz8GQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","package":{"Name":"demo","Path":"gno.land/r/demo/hello_nono","Files":[{"Name":"contract.gno","Body":"package demo\n\nfunc Hello(name string) string {\n\treturn \"Hello \" + name + \"!\"\n}\n"},{"Name":"contract_test.gno","Body":"package demo\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\t{\n\t\tgot := Hello(\"People\")\n\t\texpected := \"Hello People!\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\t{\n\t\tgot := Hello(\"\")\n\t\texpected := \"Hello !\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"9D/Vd5gMZjeDGGXRMHT2hpUQ7dpoSagNkX/QpvNUZgdhVrYdxNRNoXSVOV4zKBPjOVskqNTQTIMd2z8mYhaWPw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18t62346y0ue7l7k5p2h9darn9pne06ufg2uja3","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"H6Wb1owfOVXlnqoaLfSxTqlGWTFH5UEXIaPhCKskkPFJXu6Xe6LnqMhGs8tgGJYvKMj/ABbZum6UVS49gMEoqg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g1g84try906zvyuzcd6lcdc8sg00scqwm3ajzyll","1000000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"EFcwNP12fH0H9yZyxyzArM3CqqqO26JTqfj74WvuAzFJM1ZUfMe5Sn+ij0MQTt9T37M6jlPeldc34WcK22sLwA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g84try906zvyuzcd6lcdc8sg00scqwm3ajzyll","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","100"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1gRZFloPKe1mAG7Qbyk6/ZOsGbHdzpxkXrbzM015yDv"},"signature":"736HSbffCEgMKGCQ4MA0PqaiG3jzVaQ6zW6uUaSlKG0BhVMFSHLBjs1arb0d+J/3v2WCwMCnwel3AZ7YqtqjdA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g84try906zvyuzcd6lcdc8sg00scqwm3ajzyll","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["@keyboard_worrier","100"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1gRZFloPKe1mAG7Qbyk6/ZOsGbHdzpxkXrbzM015yDv"},"signature":"BqfMNAD2H4YO4+x0ACZr0Z227B/gZDAtfb144XTNJkJsT8K0u9B81qBzxpWOIU9Y4nSrBwUAL+uSrtrPm7gWgA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g84try906zvyuzcd6lcdc8sg00scqwm3ajzyll","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["@keyboard_worrier1","100"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1gRZFloPKe1mAG7Qbyk6/ZOsGbHdzpxkXrbzM015yDv"},"signature":"/92L1vPlHPRgPF5eJVIFqb5GMbtdgBMuwcDeTMcX7iBRoTLo4R5l5XmxAnI18iwZJMUsQhMm/28QXhRWGhTQqA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g84try906zvyuzcd6lcdc8sg00scqwm3ajzyll","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["keyboard_worrier","100"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1gRZFloPKe1mAG7Qbyk6/ZOsGbHdzpxkXrbzM015yDv"},"signature":"JDMUsI7S2PQkZsTIF8WMD076i90/2r8e5NPQ2yG/A8lwES4kfrvCiBK8ML+o//CxDOBuj94zlEOSdGr3gaBUSA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g84try906zvyuzcd6lcdc8sg00scqwm3ajzyll","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["keyboard_worrier1","100"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1gRZFloPKe1mAG7Qbyk6/ZOsGbHdzpxkXrbzM015yDv"},"signature":"jjKBVNYXEkuJl69updd804lV7qP0jS2Q8jLB4J8VcbUQ7MpUnXhhm8OlmvAPA1s6Gwo/GC6g7hzG6tMJvLyUBA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"5QMEJZ/NwmsFCnBlF8gtASdM7hCOrXdFnNNiQzt0iFk4XMTeNGCRCnHqISOkgJbbw2Zap5ZCGZadm6MtUHrVHw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["@hyojin","12345"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"Hn0NQ3g96XwUFId2HteWt/vY2wxIHdzZzSM5eLRXnA9gcVt15vPiYy4N97OO7msmLRb7qLOJrbCTtkHw6ldmzw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"rP67q1Eo8r7Hf4ImzlH/9Vg2GUrr6pOYtUAqmIrG4fEREZInravF8MOSXVjOG/5Lh3j3i3KdVntXO13ULBCXpw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"aMLIuDB9H/6WARxmno69EmuZuSU1db204jCH0/Gm6QcrLJQVytEvedEBTZFHAXmib7JKWMOli2uRGM0Ei/CBjw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"3ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"gtq7jen0+lwYF4AyFTv1FikyGraPc39TOs1D154XJSo+2bsclGlciaTrZQO+mwNcVPXOd4bxnX05B06s8O684w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ckn395mpttp0vupgtratyufdaakgh8jgkmr3ym","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","my_account",""]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aszr4WZZtoqvpWfpKQFXAT8Bx/fH234W2oIq4eQnTnbI"},"signature":"qweffUIJHvhYBQeKvyXrpOpBqF/4cxctDZex7aglhtcQ4jsqz00G8XQ4KitUtQlib9cLhoRzdOn6ylrEntkrMQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ckn395mpttp0vupgtratyufdaakgh8jgkmr3ym","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","my_account",""]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aszr4WZZtoqvpWfpKQFXAT8Bx/fH234W2oIq4eQnTnbI"},"signature":"CJJ3l5kX4F85FeALkJpB919sKnbAWSQVa2h7oFjyzJIL7m0KXWLibkiXTW5EbZZndMpHWgSmuAuA14J3uF2+RQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ckn395mpttp0vupgtratyufdaakgh8jgkmr3ym","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","yo1110",""]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aszr4WZZtoqvpWfpKQFXAT8Bx/fH234W2oIq4eQnTnbI"},"signature":"JgZBmn2vJlS7ri2hOu5snLgEJk0JnVjIqcqG+9GIyMN/1bu9jH/m3mkrMkkqZG650aNcSy7RRXuPfBmOT9t8kg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1mw9r7kghwghdea6nhe52av5uw0gnfdr4yvwe8c","to_address":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","amount":"100000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoD5XtwERf3WfB7B+FqeuXmQnUotS2EMUATisnYTbcSa"},"signature":"N9Tb1ndLziUl5KxxI4vQcsFk5QlYaF+n2ZB6+v/zndoEeJ7lcKNMOSw5B9WC3CeusqrCyIXpMIo62fmyKs4Axg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","normadena",""]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"SRfBAlDenA3OmmfUN/mW+hKMs5Dskx3u/oOltWc8BEwhvM0BpJtTg3JFNo2KP9t1wEGTrHgTMkdxQRFIeWIv/A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","normadena",""]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"OoWQkir06pvET/TVD6ziDbsrTUau/dwyJzEsmtt8M6gGO5Ga2ajYS+UoqowlXzfb0kl5nXoSVyg/tddRgonmTQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1mw9r7kghwghdea6nhe52av5uw0gnfdr4yvwe8c","to_address":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","amount":"150000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoD5XtwERf3WfB7B+FqeuXmQnUotS2EMUATisnYTbcSa"},"signature":"llX+oAjuV5jwFhejcPq4G616uEDSy1VE2gSl86jqPcBW/C1LPvvSbXHinl7HesFYf1Cw9kDAdP3TBq6/snla2A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","normadena",""]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"a0KDMt9T6JAqGZy4d9Rs1DK/5XvvgANwjJHFgn+eVDRNpiYHslkz+x9X25dH85xWl4tkHDiy513AFNRh65n1rQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","package":{"Name":"markdown_utils","Path":"gno.land/p/demo/markdown_utils","Files":[{"Name":"markdown_utils.gno","Body":"package markdown_utils\n\nimport (\n\t\"strings\"\n)\n\n// this function take as input a markdown string and add an indentation level to markdown titles\nfunc Indent(markdown string) string {\n\t// split the markdown string into lines\n\tlines := strings.Split(markdown, \"\\n\")\n\n\t// iterate over the lines\n\tfor i, line := range lines {\n\t\t// if the line starts with a markdown title\n\t\tif strings.HasPrefix(line, \"#\") {\n\t\t\t// add an indentation level to the title\n\t\t\tlines[i] = \"#\" + line\n\t\t}\n\t}\n\n\t// join the lines back into a string\n\treturn strings.Join(lines, \"\\n\")\n}\n\n// thanks copilot this is perfect xD\n// I just renamed it, AddIndentationLevelToMarkdownTitles was too long\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"4ZN3MxOm2dR6a34sJE88R0AbM2ixeQePBZmJggIqDnl+NdkbFwBMr8i+QNFYSyEKO3A5YjjaNMcZz6YE+G1FXA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","package":{"Name":"grc4_group","Path":"gno.land/p/demo/grc/grc4_group","Files":[{"Name":"grc4_group.gno","Body":"package grc4_group\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\n// TODO: fully match cw4 api where it makes sense\ntype IGRC4Group interface {\n\tUpdateMembers(toAdd []Member, toRemove []std.Address)\n\t// AddHook()\n\t// RemoveHook()\n\n\tMember(address std.Address) (uint64, bool)\n\tListMembers() *avl.Tree\n\tTotalWeight() uint64\n\t// Hooks()\n\n\tRender(path string) string\n}\n\ntype Member struct {\n\tAddress std.Address\n\tWeight  uint64\n}\n\ntype grc4Group struct {\n\tIGRC4Group\n\n\tadmin       std.Address\n\tmembers     *avl.Tree\n\ttotalWeight uint64\n}\n\nfunc NewGRC4Group(members []Member) IGRC4Group {\n\tAssertUniqueMembers(members)\n\n\ttotalWeight := uint64(0)\n\tfor _, member := range members {\n\t\ttotalWeight += member.Weight\n\t}\n\n\tmembersTree := avl.NewTree()\n\tfor _, member := range members {\n\t\tmembersTree.Set(member.Address.String(), member.Weight)\n\t}\n\n\treturn \u0026grc4Group{\n\t\tmembers:     membersTree,\n\t\ttotalWeight: totalWeight,\n\t}\n}\n\nfunc (g *grc4Group) UpdateMembers(toAdd []Member, toRemove []std.Address) {\n\tAssertUniqueMembers(toAdd)\n\n\tfor _, member := range toAdd {\n\t\tstrAddr := member.Address.String()\n\t\toldWeight, has := g.members.Get(strAddr)\n\t\tif has {\n\t\t\tg.totalWeight -= oldWeight.(uint64)\n\t\t}\n\t\tg.members.Set(strAddr, member.Weight)\n\t\tg.totalWeight += member.Weight\n\t}\n\n\tfor _, addr := range toRemove {\n\t\tstrAddr := addr.String()\n\t\tweight, has := g.members.Get(strAddr)\n\t\tif has {\n\t\t\tg.totalWeight -= weight.(uint64)\n\t\t}\n\t\tg.members.Remove(strAddr)\n\t}\n\n\t// TODO: call hooks\n}\n\nfunc (g *grc4Group) Admin() std.Address {\n\treturn g.admin\n}\n\nfunc (g *grc4Group) Member(addr std.Address) (uint64, bool) {\n\tweight, has := g.members.Get(addr.String())\n\treturn weight.(uint64), has\n}\n\nfunc (g *grc4Group) ListMembers() *avl.Tree {\n\treturn g.members\n}\n\nfunc (g *grc4Group) TotalWeight() uint64 {\n\treturn g.totalWeight\n}\n\nfunc (g *grc4Group) Render(path string) string {\n\tmembersCount := g.members.Size()\n\tmembersString := strconv.Itoa(membersCount) + \" member\"\n\tif membersCount \u003e 1 {\n\t\tmembersString += \"s\"\n\t}\n\n\tr := \"# GRC4 Group\" + \"\\n\" +\n\t\t\"## Summary\" + \"\\n\" +\n\t\t\"Admin: \" + g.admin.String() + \"\\n\\n\" +\n\t\tmembersString + \"\\n\\n\" +\n\t\t\"Total weight: \" + strconv.FormatUint(g.totalWeight, 10) + \"\\n\" +\n\t\t\"## Members\" + \"\\n\"\n\n\tg.members.Iterate(\"\", \"\", func(key string, weight interface{}) bool {\n\t\tr += \"- \" + key + \" (\" + strconv.FormatUint(weight.(uint64), 10) + \")\" + \"\\n\"\n\t\treturn false\n\t})\n\n\treturn r\n}\n\nfunc (g *grc4Group) AssertIsAdmin() {\n\tcaller := std.GetOrigCaller()\n\tif caller != g.admin {\n\t\tpanic(errors.New(\"you're not admin\"))\n\t}\n}\n"},{"Name":"grc4_group_test.gno","Body":"package grc4_group\n\nimport (\n\t\"std\"\n\t\"testing\"\n)\n\nfunc Test(t *testing.T) {\n\t{\n\t\th := NewGRC4Group(nil)\n\t\tgot := h.TotalWeight()\n\t\texpected := 0\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\t{\n\t\th := NewGRC4Group([]Member{\n\t\t\t{std.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"), 11},\n\t\t\t{std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"), 31},\n\t\t})\n\t\tgot := h.TotalWeight()\n\t\texpected := 42\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\t{\n\t\tfunc() {\n\t\t\tdefer func() {\n\t\t\t\tif r := recover(); r == nil {\n\t\t\t\t\tt.Fatalf(\"expected panic, got none.\")\n\t\t\t\t}\n\t\t\t}()\n\t\t\th := NewGRC4Group([]Member{\n\t\t\t\t{std.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"), 1},\n\t\t\t\t{std.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"), 1},\n\t\t\t})\n\t\t}()\n\t}\n\t{\n\t\th := NewGRC4Group([]Member{\n\t\t\t{std.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"), 11},\n\t\t\t{std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"), 31},\n\t\t})\n\t\th.Render(\"\")\n\t}\n\t{\n\t\th := NewGRC4Group([]Member{\n\t\t\t{std.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"), 11},\n\t\t})\n\t\th.UpdateMembers([]Member{\n\t\t\t{std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"), 31},\n\t\t},\n\t\t\t[]std.Address{\n\t\t\t\tstd.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"),\n\t\t\t},\n\t\t)\n\t\tgot := h.TotalWeight()\n\t\texpected := 31\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t\tmembers := h.ListMembers()\n\t\tif members.Size() != 1 {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", 1, members.Size())\n\t\t}\n\t\taddr, weight := members.GetByIndex(0)\n\t\tif addr != \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\" {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", addr)\n\t\t}\n\t\tif weight.(uint64) != 31 {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", 31, weight.(uint64))\n\t\t}\n\t}\n\t{\n\t\th := NewGRC4Group(nil)\n\t\tfunc() {\n\t\t\tdefer func() {\n\t\t\t\tif r := recover(); r == nil {\n\t\t\t\t\tt.Fatalf(\"expected panic, got none.\")\n\t\t\t\t}\n\t\t\t}()\n\t\t\th.UpdateMembers([]Member{\n\t\t\t\t{std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"), 1},\n\t\t\t\t{std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"), 1},\n\t\t\t}, nil)\n\t\t}()\n\t}\n}\n"},{"Name":"utils.gno","Body":"package grc4_group\n\nimport (\n\t\"gno.land/p/demo/avl\"\n)\n\nfunc AssertUniqueMembers(members []Member) {\n\tseen := avl.NewTree()\n\tfor _, member := range members {\n\t\tmemberAddress := member.Address.String()\n\t\tif seen.Has(memberAddress) {\n\t\t\tpanic(\"duplicate member: \" + memberAddress)\n\t\t}\n\t\tseen.Set(memberAddress, true)\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"aRHUllLMB+lB8OnWD6OGI1CbuAWwbfwJxB1g0XkBGatPlwEgImHOCB/PVJtcpGT7gJY6Kn9iTd5YZavcbgAhsQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","package":{"Name":"grc4_group","Path":"gno.land/p/demo/grc/grc4_group","Files":[{"Name":"grc4_group.gno","Body":"package grc4_group\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\n// TODO: fully match cw4 api where it makes sense\ntype IGRC4Group interface {\n\tUpdateMembers(toAdd []Member, toRemove []std.Address)\n\t// AddHook()\n\t// RemoveHook()\n\n\tMember(address std.Address) (uint64, bool)\n\t// ListMembers() *avl.Tree // dev\n\tListMembers() *avl.MutTree // test3\n\tTotalWeight() uint64\n\t// Hooks()\n\n\tRender(path string) string\n}\n\ntype Member struct {\n\tAddress std.Address\n\tWeight  uint64\n}\n\ntype grc4Group struct {\n\tIGRC4Group\n\n\tadmin std.Address\n\t// members     *avl.Tree // dev\n\tmembers     *avl.MutTree // test3\n\ttotalWeight uint64\n}\n\nfunc NewGRC4Group(members []Member) IGRC4Group {\n\tAssertUniqueMembers(members)\n\n\ttotalWeight := uint64(0)\n\tfor _, member := range members {\n\t\ttotalWeight += member.Weight\n\t}\n\n\t/* dev\n\tmembersTree := avl.NewTree()\n\t*/\n\n\t//* test\n\tmembersTree := avl.NewMutTree()\n\t//*/\n\n\tfor _, member := range members {\n\t\tmembersTree.Set(member.Address.String(), member.Weight)\n\t}\n\n\treturn \u0026grc4Group{\n\t\tmembers:     membersTree,\n\t\ttotalWeight: totalWeight,\n\t}\n}\n\nfunc (g *grc4Group) UpdateMembers(toAdd []Member, toRemove []std.Address) {\n\tAssertUniqueMembers(toAdd)\n\n\tfor _, member := range toAdd {\n\t\tstrAddr := member.Address.String()\n\t\toldWeight, has := g.members.Get(strAddr)\n\t\tif has {\n\t\t\tg.totalWeight -= oldWeight.(uint64)\n\t\t}\n\t\tg.members.Set(strAddr, member.Weight)\n\t\tg.totalWeight += member.Weight\n\t}\n\n\tfor _, addr := range toRemove {\n\t\tstrAddr := addr.String()\n\t\tweight, has := g.members.Get(strAddr)\n\t\tif has {\n\t\t\tg.totalWeight -= weight.(uint64)\n\t\t}\n\t\tg.members.Remove(strAddr)\n\t}\n\n\t// TODO: call hooks\n}\n\nfunc (g *grc4Group) Admin() std.Address {\n\treturn g.admin\n}\n\nfunc (g *grc4Group) Member(addr std.Address) (uint64, bool) {\n\tweight, has := g.members.Get(addr.String())\n\treturn weight.(uint64), has\n}\n\n// func (g *grc4Group) ListMembers() *avl.Tree { // dev\nfunc (g *grc4Group) ListMembers() *avl.MutTree { // test3\n\treturn g.members\n}\n\nfunc (g *grc4Group) TotalWeight() uint64 {\n\treturn g.totalWeight\n}\n\nfunc (g *grc4Group) Render(path string) string {\n\tmembersCount := g.members.Size()\n\tmembersString := strconv.Itoa(membersCount) + \" member\"\n\tif membersCount \u003e 1 {\n\t\tmembersString += \"s\"\n\t}\n\n\tr := \"# GRC4 Group\" + \"\\n\" +\n\t\t\"## Summary\" + \"\\n\" +\n\t\t\"Admin: \" + g.admin.String() + \"\\n\\n\" +\n\t\tmembersString + \"\\n\\n\" +\n\t\t\"Total weight: \" + strconv.FormatUint(g.totalWeight, 10) + \"\\n\" +\n\t\t\"## Members\" + \"\\n\"\n\n\tg.members.Iterate(\"\", \"\", func(key string, weight interface{}) bool {\n\t\tr += \"- \" + key + \" (\" + strconv.FormatUint(weight.(uint64), 10) + \")\" + \"\\n\"\n\t\treturn false\n\t})\n\n\treturn r\n}\n\nfunc (g *grc4Group) AssertIsAdmin() {\n\tcaller := std.GetOrigCaller()\n\tif caller != g.admin {\n\t\tpanic(errors.New(\"you're not admin\"))\n\t}\n}\n"},{"Name":"grc4_group_test.gno","Body":"package grc4_group\n\nimport (\n\t\"std\"\n\t\"testing\"\n)\n\nfunc Test(t *testing.T) {\n\t{\n\t\th := NewGRC4Group(nil)\n\t\tgot := h.TotalWeight()\n\t\texpected := 0\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\t{\n\t\th := NewGRC4Group([]Member{\n\t\t\t{std.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"), 11},\n\t\t\t{std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"), 31},\n\t\t})\n\t\tgot := h.TotalWeight()\n\t\texpected := 42\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\t{\n\t\tfunc() {\n\t\t\tdefer func() {\n\t\t\t\tif r := recover(); r == nil {\n\t\t\t\t\tt.Fatalf(\"expected panic, got none.\")\n\t\t\t\t}\n\t\t\t}()\n\t\t\th := NewGRC4Group([]Member{\n\t\t\t\t{std.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"), 1},\n\t\t\t\t{std.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"), 1},\n\t\t\t})\n\t\t}()\n\t}\n\t{\n\t\th := NewGRC4Group([]Member{\n\t\t\t{std.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"), 11},\n\t\t\t{std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"), 31},\n\t\t})\n\t\th.Render(\"\")\n\t}\n\t{\n\t\th := NewGRC4Group([]Member{\n\t\t\t{std.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"), 11},\n\t\t})\n\t\th.UpdateMembers([]Member{\n\t\t\t{std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"), 31},\n\t\t},\n\t\t\t[]std.Address{\n\t\t\t\tstd.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"),\n\t\t\t},\n\t\t)\n\t\tgot := h.TotalWeight()\n\t\texpected := 31\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t\tmembers := h.ListMembers()\n\t\tif members.Size() != 1 {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", 1, members.Size())\n\t\t}\n\t\taddr, weight := members.GetByIndex(0)\n\t\tif addr != \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\" {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", addr)\n\t\t}\n\t\tif weight.(uint64) != 31 {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", 31, weight.(uint64))\n\t\t}\n\t}\n\t{\n\t\th := NewGRC4Group(nil)\n\t\tfunc() {\n\t\t\tdefer func() {\n\t\t\t\tif r := recover(); r == nil {\n\t\t\t\t\tt.Fatalf(\"expected panic, got none.\")\n\t\t\t\t}\n\t\t\t}()\n\t\t\th.UpdateMembers([]Member{\n\t\t\t\t{std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"), 1},\n\t\t\t\t{std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"), 1},\n\t\t\t}, nil)\n\t\t}()\n\t}\n}\n"},{"Name":"utils.gno","Body":"package grc4_group\n\nimport (\n\t\"gno.land/p/demo/avl\"\n)\n\nfunc AssertUniqueMembers(members []Member) {\n\t// seen := avl.NewTree() // dev\n\tseen := avl.NewMutTree() // test3\n\tfor _, member := range members {\n\t\tmemberAddress := member.Address.String()\n\t\tif seen.Has(memberAddress) {\n\t\t\tpanic(\"duplicate member: \" + memberAddress)\n\t\t}\n\t\tseen.Set(memberAddress, true)\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"u4AQ0TxTOAl/aQqCePh/PJ+8rYRMVDJyHy/Yl1bZI1wqOs6ek4zSDht2zTpTLO02VlWrUjJkRkCbg3U5tQ2vSQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","package":{"Name":"grc4_group","Path":"gno.land/p/demo/grc/grc4_group","Files":[{"Name":"grc4_group.gno","Body":"package grc4_group\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\n// TODO: fully match cw4 api where it makes sense\ntype IGRC4Group interface {\n\tUpdateMembers(toAdd []Member, toRemove []std.Address)\n\t// AddHook()\n\t// RemoveHook()\n\n\tMember(address std.Address) (uint64, bool)\n\t// ListMembers() *avl.Tree // dev\n\tListMembers() *avl.MutTree // test3\n\tTotalWeight() uint64\n\t// Hooks()\n\n\tRender(path string) string\n}\n\ntype Member struct {\n\tAddress std.Address\n\tWeight  uint64\n}\n\ntype grc4Group struct {\n\tIGRC4Group\n\n\tadmin std.Address\n\t// members     *avl.Tree // dev\n\tmembers     *avl.MutTree // test3\n\ttotalWeight uint64\n}\n\nfunc NewGRC4Group(members []Member) IGRC4Group {\n\tAssertUniqueMembers(members)\n\n\ttotalWeight := uint64(0)\n\tfor _, member := range members {\n\t\ttotalWeight += member.Weight\n\t}\n\n\t/* dev\n\tmembersTree := avl.NewTree()\n\t*/\n\n\t//* test\n\tmembersTree := avl.NewMutTree()\n\t//*/\n\n\tfor _, member := range members {\n\t\tmembersTree.Set(member.Address.String(), member.Weight)\n\t}\n\n\treturn \u0026grc4Group{\n\t\tmembers:     membersTree,\n\t\ttotalWeight: totalWeight,\n\t}\n}\n\nfunc (g *grc4Group) UpdateMembers(toAdd []Member, toRemove []std.Address) {\n\tAssertUniqueMembers(toAdd)\n\n\tfor _, member := range toAdd {\n\t\tstrAddr := member.Address.String()\n\t\toldWeight, has := g.members.Get(strAddr)\n\t\tif has {\n\t\t\tg.totalWeight -= oldWeight.(uint64)\n\t\t}\n\t\tg.members.Set(strAddr, member.Weight)\n\t\tg.totalWeight += member.Weight\n\t}\n\n\tfor _, addr := range toRemove {\n\t\tstrAddr := addr.String()\n\t\tweight, has := g.members.Get(strAddr)\n\t\tif has {\n\t\t\tg.totalWeight -= weight.(uint64)\n\t\t}\n\t\tg.members.Remove(strAddr)\n\t}\n\n\t// TODO: call hooks\n}\n\nfunc (g *grc4Group) Admin() std.Address {\n\treturn g.admin\n}\n\nfunc (g *grc4Group) Member(addr std.Address) (uint64, bool) {\n\tweight, has := g.members.Get(addr.String())\n\treturn weight.(uint64), has\n}\n\n// func (g *grc4Group) ListMembers() *avl.Tree { // dev\nfunc (g *grc4Group) ListMembers() *avl.MutTree { // test3\n\treturn g.members\n}\n\nfunc (g *grc4Group) TotalWeight() uint64 {\n\treturn g.totalWeight\n}\n\nfunc (g *grc4Group) Render(path string) string {\n\tmembersCount := g.members.Size()\n\tmembersString := strconv.Itoa(membersCount) + \" member\"\n\tif membersCount \u003e 1 {\n\t\tmembersString += \"s\"\n\t}\n\n\tr := \"# GRC4 Group\" + \"\\n\" +\n\t\t\"## Summary\" + \"\\n\" +\n\t\t\"Admin: \" + g.admin.String() + \"\\n\\n\" +\n\t\tmembersString + \"\\n\\n\" +\n\t\t\"Total weight: \" + strconv.FormatUint(g.totalWeight, 10) + \"\\n\" +\n\t\t\"## Members\" + \"\\n\"\n\n\t/* dev\n\tg.members.Iterate(\"\", \"\", func(key string, weight interface{}) bool {\n\t\tr += \"- \" + key + \" (\" + strconv.FormatUint(weight.(uint64), 10) + \")\" + \"\\n\"\n\t\treturn false\n\t})\n\t*/\n\n\t// /* test3\n\tfor i := 0; i \u003c membersCount; i++ {\n\t\tkey, weight := g.members.GetByIndex(i)\n\t\tr += \"- \" + key + \" (\" + strconv.FormatUint(weight.(uint64), 10) + \")\" + \"\\n\"\n\t}\n\t// */\n\n\treturn r\n}\n\nfunc (g *grc4Group) AssertIsAdmin() {\n\tcaller := std.GetOrigCaller()\n\tif caller != g.admin {\n\t\tpanic(errors.New(\"you're not admin\"))\n\t}\n}\n"},{"Name":"grc4_group_test.gno","Body":"package grc4_group\n\nimport (\n\t\"std\"\n\t\"testing\"\n)\n\nfunc Test(t *testing.T) {\n\t{\n\t\th := NewGRC4Group(nil)\n\t\tgot := h.TotalWeight()\n\t\texpected := 0\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\t{\n\t\th := NewGRC4Group([]Member{\n\t\t\t{std.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"), 11},\n\t\t\t{std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"), 31},\n\t\t})\n\t\tgot := h.TotalWeight()\n\t\texpected := 42\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\t{\n\t\tfunc() {\n\t\t\tdefer func() {\n\t\t\t\tif r := recover(); r == nil {\n\t\t\t\t\tt.Fatalf(\"expected panic, got none.\")\n\t\t\t\t}\n\t\t\t}()\n\t\t\th := NewGRC4Group([]Member{\n\t\t\t\t{std.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"), 1},\n\t\t\t\t{std.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"), 1},\n\t\t\t})\n\t\t}()\n\t}\n\t{\n\t\th := NewGRC4Group([]Member{\n\t\t\t{std.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"), 11},\n\t\t\t{std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"), 31},\n\t\t})\n\t\th.Render(\"\")\n\t}\n\t{\n\t\th := NewGRC4Group([]Member{\n\t\t\t{std.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"), 11},\n\t\t})\n\t\th.UpdateMembers([]Member{\n\t\t\t{std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"), 31},\n\t\t},\n\t\t\t[]std.Address{\n\t\t\t\tstd.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"),\n\t\t\t},\n\t\t)\n\t\tgot := h.TotalWeight()\n\t\texpected := 31\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t\tmembers := h.ListMembers()\n\t\tif members.Size() != 1 {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", 1, members.Size())\n\t\t}\n\t\taddr, weight := members.GetByIndex(0)\n\t\tif addr != \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\" {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", addr)\n\t\t}\n\t\tif weight.(uint64) != 31 {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", 31, weight.(uint64))\n\t\t}\n\t}\n\t{\n\t\th := NewGRC4Group(nil)\n\t\tfunc() {\n\t\t\tdefer func() {\n\t\t\t\tif r := recover(); r == nil {\n\t\t\t\t\tt.Fatalf(\"expected panic, got none.\")\n\t\t\t\t}\n\t\t\t}()\n\t\t\th.UpdateMembers([]Member{\n\t\t\t\t{std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"), 1},\n\t\t\t\t{std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"), 1},\n\t\t\t}, nil)\n\t\t}()\n\t}\n}\n"},{"Name":"utils.gno","Body":"package grc4_group\n\nimport (\n\t\"gno.land/p/demo/avl\"\n)\n\nfunc AssertUniqueMembers(members []Member) {\n\t// seen := avl.NewTree() // dev\n\tseen := avl.NewMutTree() // test3\n\tfor _, member := range members {\n\t\tmemberAddress := member.Address.String()\n\t\tif seen.Has(memberAddress) {\n\t\t\tpanic(\"duplicate member: \" + memberAddress)\n\t\t}\n\t\tseen.Set(memberAddress, true)\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"+LTLxrYeeFWz1M52RhDAba59XQ7wJPZmp3hW7yHcAa4d+pALbwYZNo0uxy3/QRdMbapxY/JL7tpZShPAQWIONg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","package":{"Name":"dao_interfaces","Path":"gno.land/p/demo/daodao/interfaces","Files":[{"Name":"dao_interfaces.gno","Body":"package dao_interfaces\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\ntype IVotingModule interface {\n\tVotingPower(addr std.Address) uint64\n\tTotalPower() uint64\n\tRender(path string) string\n}\n\ntype Ballot struct {\n\tPower     uint64\n\tVote      Vote\n\tRationale string\n}\n\ntype Votes struct {\n\tYes     uint64\n\tNo      uint64\n\tAbstain uint64\n}\n\nfunc (v *Votes) Add(vote Vote, power uint64) {\n\tswitch vote {\n\tcase VoteYes:\n\t\tv.Yes += power\n\tcase VoteNo:\n\t\tv.No += power\n\tcase VoteAbstain:\n\t\tv.Abstain += power\n\tdefault:\n\t\tpanic(\"unknown vote kind\")\n\t}\n}\n\nfunc (v *Votes) Remove(vote Vote, power uint64) {\n\tswitch vote {\n\tcase VoteYes:\n\t\tv.Yes -= power\n\tcase VoteNo:\n\t\tv.No -= power\n\tcase VoteAbstain:\n\t\tv.Abstain -= power\n\tdefault:\n\t\tpanic(\"unknown vote kind\")\n\t}\n}\n\nfunc (v *Votes) Total() uint64 {\n\treturn v.Yes + v.No + v.Abstain\n}\n\ntype Proposal struct {\n\tID          int\n\tTitle       string\n\tDescription string\n\tProposer    std.Address\n\tMessages    []interface{}\n\t// Ballots     *avl.Tree // dev\n\tBallots *avl.MutTree // test3\n\tVotes   Votes\n\tStatus  ProposalStatus\n}\n\ntype ProposalStatus int\n\nconst (\n\tProposalStatusOpen ProposalStatus = iota\n\tProposalStatusPassed\n\tProposalStatusExecuted\n)\n\nfunc (p ProposalStatus) String() string {\n\tswitch p {\n\tcase ProposalStatusOpen:\n\t\treturn \"Open\"\n\tcase ProposalStatusPassed:\n\t\treturn \"Passed\"\n\tcase ProposalStatusExecuted:\n\t\treturn \"Executed\"\n\tdefault:\n\t\treturn \"Unknown(\" + strconv.Itoa(int(p)) + \")\"\n\t}\n}\n\ntype Vote int\n\nconst (\n\tVoteYes Vote = iota\n\tVoteNo\n\tVoteAbstain\n)\n\nfunc (v Vote) String() string {\n\tswitch v {\n\tcase VoteYes:\n\t\treturn \"Yes\"\n\tcase VoteNo:\n\t\treturn \"No\"\n\tcase VoteAbstain:\n\t\treturn \"Abstain\"\n\tdefault:\n\t\treturn \"Unknown(\" + strconv.Itoa(int(v)) + \")\"\n\t}\n}\n\ntype IProposalModule interface {\n\tPropose(\n\t\ttitle string,\n\t\tdescription string,\n\t\tactions []interface{},\n\t)\n\tVote(proposalId int, vote Vote, rationale string)\n\tExecute(proposalId int)\n\tThreshold() Threshold\n\n\tProposals() []Proposal\n\n\tRender(path string) string\n}\n"},{"Name":"threshold.gno","Body":"package dao_interfaces\n\nimport (\n\t\"strconv\"\n)\n\ntype Percent uint16 // 4 decimals fixed point\n\ntype PercentageThreshold struct {\n\tPercent *Percent\n}\n\ntype ThresholdQuorum struct {\n\tThreshold PercentageThreshold\n\tQuorum    PercentageThreshold\n}\n\ntype Threshold struct {\n\tThresholdQuorum *ThresholdQuorum\n}\n\nfunc (p Percent) String() string {\n\ts := strconv.FormatUint(uint64(p)/100, 10)\n\tdecPart := uint64(p) % 100\n\tif decPart != 0 {\n\t\ts += \".\" + strconv.FormatUint(decPart, 10)\n\t}\n\treturn s + \"%\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"t6evkTNBGnD1MQJkQco87kjBRuLFUQxvWUuyQB/9EMZuI3LTuimptWhFHRdlGeocTEq+8hGmJItqL2uR8sTb4A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","package":{"Name":"dao_voting_grc4","Path":"gno.land/p/demo/daodao/voting_grc4","Files":[{"Name":"dao_voting_grc4.gno","Body":"package dao_voting_grc4\n\nimport (\n\t\"std\"\n\n\tdao_interfaces \"gno.land/p/demo/daodao/interfaces\"\n\t\"gno.land/p/demo/grc/grc4_group\"\n\t\"gno.land/p/demo/markdown_utils\"\n)\n\ntype grc4Voting struct {\n\tdao_interfaces.IVotingModule\n\n\tgroup grc4_group.IGRC4Group\n}\n\nfunc NewGRC4Voting(group grc4_group.IGRC4Group) dao_interfaces.IVotingModule {\n\treturn \u0026grc4Voting{group: group}\n}\n\nfunc (v *grc4Voting) VotingPower(addr std.Address) uint64 {\n\tweight, has := v.group.Member(addr)\n\tif !has {\n\t\treturn 0\n\t}\n\treturn weight\n}\n\nfunc (v *grc4Voting) TotalPower() uint64 {\n\treturn v.group.TotalWeight()\n}\n\nfunc (v *grc4Voting) Render(path string) string {\n\treturn \"# GRC4 Voting Module\\n\" + markdown_utils.Indent(v.group.Render(path))\n}\n"},{"Name":"dao_voting_grc4_test.gno","Body":"package grc4\n\nimport (\n\t\"std\"\n\t\"testing\"\n)\n\nfunc Test(t *testing.T) {\n\t{\n\t\tadmin := \"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"\n\t\tg := grc4.NewGRC4Group(std.Address(admin), nil)\n\t\tv := NewGRC4Voting(g)\n\t\tgot := v.TotalPower()\n\t\texpected := uint64(0)\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"AUE06GDqQxKsjQVPNjBbMIYy+ofiU4QbsnQobBAL0tBUAQlaqXxE3fjC3oaOOMYZRIZKjO7f9+SbT4AqPahaZw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","package":{"Name":"dao_core","Path":"gno.land/p/demo/daodao/core","Files":[{"Name":"dao_core.gno","Body":"package dao_core\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\tdao_interfaces \"gno.land/p/demo/daodao/interfaces\"\n\t\"gno.land/p/demo/markdown_utils\"\n)\n\ntype IDAOCore interface {\n\tAddProposalModule(proposalMod dao_interfaces.IProposalModule)\n\n\tVotingModule() dao_interfaces.IVotingModule\n\tProposalModules() []dao_interfaces.IProposalModule\n\n\tRender(path string) string\n}\n\ntype daoCore struct {\n\tIDAOCore\n\n\tvotingModule    dao_interfaces.IVotingModule\n\tproposalModules []dao_interfaces.IProposalModule\n}\n\nfunc NewDAOCore(\n\tvotingModule dao_interfaces.IVotingModule,\n\tproposalModules []dao_interfaces.IProposalModule,\n) IDAOCore {\n\treturn \u0026daoCore{\n\t\tvotingModule:    votingModule,\n\t\tproposalModules: proposalModules,\n\t}\n}\n\nfunc (d *daoCore) VotingModule() dao_interfaces.IVotingModule {\n\treturn d.votingModule\n}\n\nfunc (d *daoCore) ProposalModules() []dao_interfaces.IProposalModule {\n\treturn d.proposalModules\n}\n\nfunc (d *daoCore) AddProposalModule(proposalMod dao_interfaces.IProposalModule) {\n\td.proposalModules = append(d.proposalModules, proposalMod)\n}\n\nfunc (d *daoCore) Render(path string) string {\n\ts := \"# DAO Core\\n\"\n\ts += \"This is a port of [DA0-DA0 contracts](https://github.com/DA0-DA0/dao-contracts)\\n\"\n\ts += markdown_utils.Indent(d.votingModule.Render(path)) + \"\\n\"\n\tfor _, propMod := range d.proposalModules {\n\t\ts += markdown_utils.Indent(propMod.Render(path)) + \"\\n\"\n\t}\n\treturn s\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"PHKjL2Jl3KqSgqXpEC5pE1FeJU9MkwYdHGo7eA4GNERRAzNVtwGsIqVhppmtyEUj/USovR9xDGFXNrC2DhjLAQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","package":{"Name":"dao_proposal_single","Path":"gno.land/p/demo/daodao/proposal_single","Files":[{"Name":"dao_proposal_single.gno","Body":"package dao_proposal_single\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"time\"\n\n\t\"gno.land/p/demo/avl\"\n\tdao_core \"gno.land/p/demo/daodao/core\"\n\tdao_interfaces \"gno.land/p/demo/daodao/interfaces\"\n)\n\ntype DAOProposalSingleOpts struct {\n\t/// The threshold a proposal must reach to complete.\n\tThreshold dao_interfaces.Threshold\n\t/// The default maximum amount of time a proposal may be voted on\n\t/// before expiring.\n\tMaxVotingPeriod time.Duration\n\t/// The minimum amount of time a proposal must be open before\n\t/// passing. A proposal may fail before this amount of time has\n\t/// elapsed, but it will not pass. This can be useful for\n\t/// preventing governance attacks wherein an attacker aquires a\n\t/// large number of tokens and forces a proposal through.\n\tMinVotingPeriod time.Duration // 0 means no minimum\n\t/// If set to true only members may execute passed\n\t/// proposals. Otherwise, any address may execute a passed\n\t/// proposal.\n\tOnlyMembersExecute bool\n\t/// Allows changing votes before the proposal expires. If this is\n\t/// enabled proposals will not be able to complete early as final\n\t/// vote information is not known until the time of proposal\n\t/// expiration.\n\tAllowRevoting bool\n\t/// Information about what addresses may create proposals.\n\t// preProposeInfo PreProposeInfo\n\t/// If set to true proposals will be closed if their execution\n\t/// fails. Otherwise, proposals will remain open after execution\n\t/// failure. For example, with this enabled a proposal to send 5\n\t/// tokens out of a DAO's treasury with 4 tokens would be closed when\n\t/// it is executed. With this disabled, that same proposal would\n\t/// remain open until the DAO's treasury was large enough for it to be\n\t/// executed.\n\tCloseProposalOnExecutionFailure bool\n}\n\ntype daoProposalSingle struct {\n\tdao_interfaces.IProposalModule\n\n\tcore      dao_core.IDAOCore\n\topts      *DAOProposalSingleOpts\n\tproposals []dao_interfaces.Proposal\n}\n\nfunc NewDAOProposalSingle(core dao_core.IDAOCore, opts *DAOProposalSingleOpts) dao_interfaces.IProposalModule {\n\tif core == nil {\n\t\tpanic(\"core cannot be nil\")\n\t}\n\n\tif opts == nil {\n\t\tpanic(\"opts cannot be nil\")\n\t}\n\n\tif opts.AllowRevoting {\n\t\tpanic(\"allow revoting not implemented\")\n\t}\n\n\tif opts.OnlyMembersExecute {\n\t\tpanic(\"only members execute not implemented\")\n\t}\n\n\t// TODO: support other threshold types\n\tthreshold := opts.Threshold.ThresholdQuorum\n\tif threshold == nil {\n\t\tpanic(\"opts.Threshold must be of type ThresholdQuorum\")\n\t}\n\n\tthresholdPercent := threshold.Threshold.Percent\n\tif thresholdPercent == nil {\n\t\tpanic(\"opts.Threshold.Threshold must be of type Percent\")\n\t}\n\tif *thresholdPercent \u003e 10000 {\n\t\tpanic(\"opts.Threshold.Threshold must be \u003c= 100%\")\n\t}\n\n\tquorumPercent := threshold.Quorum.Percent\n\tif quorumPercent == nil {\n\t\tpanic(\"opts.Threshold.Quorum must be of type Percent\")\n\t}\n\tif *quorumPercent \u003e 10000 {\n\t\tpanic(\"opts.Threshold.Quorum must be \u003c= 100%\")\n\t}\n\n\treturn \u0026daoProposalSingle{core: core, opts: opts}\n}\n\nfunc (d *daoProposalSingle) Render(path string) string {\n\tminVotingPeriodStr := \"No minimum voting period\"\n\tif d.opts.MinVotingPeriod != 0 {\n\t\tminVotingPeriodStr = \"Min voting period: \" + d.opts.MinVotingPeriod.String()\n\t}\n\n\texecuteStr := \"Any address may execute passed proposals\"\n\tif d.opts.OnlyMembersExecute {\n\t\texecuteStr = \"Only members may execute passed proposals\"\n\t}\n\n\trevotingStr := \"Revoting is not allowed\"\n\tif d.opts.AllowRevoting {\n\t\trevotingStr = \"Revoting is allowed\"\n\t}\n\n\tcloseOnExecFailureStr := \"Proposals will remain open after execution failure\"\n\tif d.opts.CloseProposalOnExecutionFailure {\n\t\tcloseOnExecFailureStr = \"Proposals will be closed if their execution fails\"\n\t}\n\n\tthresholdStr := \"\"\n\tif threshold := d.opts.Threshold.ThresholdQuorum; threshold != nil {\n\t\tthresholdStr = \"Threshold: \" + threshold.Threshold.Percent.String() + \"\\n\\n\" +\n\t\t\t\"Quorum: \" + threshold.Quorum.Percent.String()\n\t}\n\n\tproposalsStr := \"## Proposals\\n\"\n\tfor _, p := range d.proposals {\n\t\tproposalsStr += \"### #\" + strconv.Itoa(p.ID) + \" \" + p.Title + \"\\n\" +\n\t\t\t\"Status: \" + p.Status.String() + \"\\n\\n\" +\n\t\t\t\"Proposed by \" + p.Proposer.String() + \"\\n\\n\" +\n\t\t\tp.Description + \"\\n\\n\" +\n\t\t\t\"Votes summary:\" + \"\\n\\n\" +\n\t\t\t\"- Yes: \" + strconv.FormatUint(p.Votes.Yes, 10) + \"\\n\" +\n\t\t\t\"- No: \" + strconv.FormatUint(p.Votes.No, 10) + \"\\n\" +\n\t\t\t\"- Abstain: \" + strconv.FormatUint(p.Votes.Abstain, 10) + \"\\n\\n\" +\n\t\t\t\"Total: \" + strconv.FormatUint(p.Votes.Total(), 10) + \"\\n\" +\n\t\t\t\"#### Messages\\n\" +\n\t\t\t\"#### Votes\\n\"\n\n\t\t/* dev\n\t\tp.Ballots.Iterate(\"\", \"\", func(k string, v interface{}) bool {\n\t\t\tballot := v.(dao_interfaces.Ballot)\n\t\t\tproposalsStr += \"- \" + k + \" voted \" + ballot.Vote.String() + \"\\n\"\n\t\t\treturn false\n\t\t})\n\t\t*/\n\n\t\t// /* test3\n\t\tballotsCount := p.Ballots.Size()\n\t\tfor i := 0; i \u003c ballotsCount; i++ {\n\t\t\tk, v := g.Ballots.GetByIndex(i)\n\t\t\tballot := v.(dao_interfaces.Ballot)\n\t\t\tproposalsStr += \"- \" + k + \" voted \" + ballot.Vote.String() + \"\\n\"\n\t\t}\n\t\t// */\n\n\t\tproposalsStr += \"\\n\"\n\t}\n\n\treturn \"# Single choice proposals module\" + \"\\n\" +\n\t\t\"## Summary\" + \"\\n\" +\n\t\t\"Max voting period: \" + d.opts.MaxVotingPeriod.String() + \"\\n\\n\" +\n\t\tminVotingPeriodStr + \"\\n\\n\" +\n\t\texecuteStr + \"\\n\\n\" +\n\t\trevotingStr + \"\\n\\n\" +\n\t\tcloseOnExecFailureStr + \"\\n\\n\" +\n\t\tthresholdStr + \"\\n\\n\" +\n\t\tproposalsStr\n}\n\nfunc (d *daoProposalSingle) Propose(title string, description string, messages []interface{}) {\n\t// TODO: auth\n\td.proposals = append(d.proposals, dao_interfaces.Proposal{\n\t\tID:          len(d.proposals),\n\t\tTitle:       title,\n\t\tDescription: description,\n\t\tMessages:    messages,\n\t\tProposer:    std.GetOrigCaller(),\n\t\t// Ballots:     avl.NewTree(), // dev\n\t\tBallots: avl.NewMutTree(), // test3\n\t\tStatus:  dao_interfaces.ProposalStatusOpen,\n\t})\n}\n\nfunc (d *daoProposalSingle) Vote(proposalID int, vote dao_interfaces.Vote, rationale string) {\n\tvoter := std.GetOrigCaller()\n\n\tif len(d.proposals) \u003c= proposalID {\n\t\tpanic(\"proposal does not exist\")\n\t}\n\tproposal := d.proposals[proposalID]\n\t// TODO: check proposal expiration\n\n\tvotePower := d.core.VotingModule().VotingPower(voter)\n\tif votePower == 0 {\n\t\tpanic(\"you're not a member\")\n\t}\n\n\t// TODO: handle revoting\n\tif ok := proposal.Ballots.Has(voter.String()); ok {\n\t\tpanic(\"you already voted\")\n\t}\n\tproposal.Ballots.Set(voter.String(), dao_interfaces.Ballot{\n\t\tVote:      vote,\n\t\tPower:     votePower,\n\t\tRationale: rationale,\n\t})\n\n\tproposal.Votes.Add(vote, votePower)\n\n\td.updateStatus(proposalID)\n}\n\nfunc (d *daoProposalSingle) Execute(proposalID int) {\n\texecuter := std.GetOrigCaller()\n\n\tif len(d.proposals) \u003c= proposalID {\n\t\tpanic(\"proposal does not exist\")\n\t}\n\tprop := d.proposals[proposalID]\n\n\td.updateStatus(proposalID)\n\tif prop.Status != dao_interfaces.ProposalStatusPassed {\n\t\tpanic(\"proposal is not passed\")\n\t}\n\n\tfor _, message := range prop.Messages {\n\t}\n\n\td.proposals[proposalID].Status = dao_interfaces.ProposalStatusExecuted\n}\n\n// FIXME: should probably return a copy for safety\nfunc (d *daoProposalSingle) Proposals() []dao_interfaces.Proposal {\n\treturn d.proposals\n}\n\nfunc (d *daoProposalSingle) Threshold() dao_interfaces.Threshold {\n\treturn d.opts.Threshold\n}\n\nfunc (d *daoProposalSingle) updateStatus(proposalID int) {\n\tproposal := d.proposals[proposalID]\n\tif proposal.Status == dao_interfaces.ProposalStatusOpen \u0026\u0026 d.isPassed(proposalID) {\n\t\td.proposals[proposalID].Status = dao_interfaces.ProposalStatusPassed\n\t\treturn\n\t}\n}\n\nfunc (d *daoProposalSingle) isPassed(proposalID int) bool {\n\tproposal := d.proposals[proposalID]\n\n\t// TODO: support other threshold types\n\tthreshold := d.opts.Threshold.ThresholdQuorum.Threshold\n\tquorum := d.opts.Threshold.ThresholdQuorum.Quorum\n\n\ttotalPower := d.core.VotingModule().TotalPower()\n\n\tif !doesVoteCountPass(proposal.Votes.Total(), totalPower, quorum) {\n\t\treturn false\n\t}\n\n\t// TODO: handle expiration\n\toptions := totalPower - proposal.Votes.Abstain\n\treturn doesVoteCountPass(proposal.Votes.Yes, options, threshold)\n}\n\nfunc doesVoteCountPass(yesVotes uint64, options uint64, percent dao_interfaces.PercentageThreshold) bool {\n\tif options == 0 {\n\t\treturn false\n\t}\n\tpercentValue := uint64(*percent.Percent)\n\tvotes := yesVotes * 10000\n\tthreshold := options * percentValue\n\treturn votes \u003e= threshold\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"HugpUI3Z/50WzpXWoQM3WomnxMtFIwEeSjnYOeUBlQx7iQ5XOFU0m/Ewg80Mj3RXRfQIiEE72pvkkG6O7Svs6w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","package":{"Name":"grc4_group","Path":"gno.land/p/demo/grc/grc4_group","Files":[{"Name":"grc4_group.gno","Body":"package grc4_group\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\n// TODO: fully match cw4 api where it makes sense\ntype IGRC4Group interface {\n\tUpdateMembers(toAdd []Member, toRemove []std.Address)\n\t// AddHook()\n\t// RemoveHook()\n\n\tMember(address std.Address) (uint64, bool)\n\t// ListMembers() *avl.Tree // dev\n\tListMembers() *avl.MutTree // test3\n\tTotalWeight() uint64\n\t// Hooks()\n\n\tRender(path string) string\n}\n\ntype Member struct {\n\tAddress std.Address\n\tWeight  uint64\n}\n\ntype grc4Group struct {\n\tIGRC4Group\n\n\tadmin std.Address\n\t// members     *avl.Tree // dev\n\tmembers     *avl.MutTree // test3\n\ttotalWeight uint64\n}\n\nfunc NewGRC4Group(members []Member) IGRC4Group {\n\tAssertUniqueMembers(members)\n\n\ttotalWeight := uint64(0)\n\tfor _, member := range members {\n\t\ttotalWeight += member.Weight\n\t}\n\n\t/* dev\n\tmembersTree := avl.NewTree()\n\t*/\n\n\t//* test\n\tmembersTree := avl.NewMutTree()\n\t//*/\n\n\tfor _, member := range members {\n\t\tmembersTree.Set(member.Address.String(), member.Weight)\n\t}\n\n\treturn \u0026grc4Group{\n\t\tmembers:     membersTree,\n\t\ttotalWeight: totalWeight,\n\t}\n}\n\nfunc (g *grc4Group) UpdateMembers(toAdd []Member, toRemove []std.Address) {\n\tAssertUniqueMembers(toAdd)\n\n\tfor _, member := range toAdd {\n\t\tstrAddr := member.Address.String()\n\t\toldWeight, has := g.members.Get(strAddr)\n\t\tif has {\n\t\t\tg.totalWeight -= oldWeight.(uint64)\n\t\t}\n\t\tg.members.Set(strAddr, member.Weight)\n\t\tg.totalWeight += member.Weight\n\t}\n\n\tfor _, addr := range toRemove {\n\t\tstrAddr := addr.String()\n\t\tweight, has := g.members.Get(strAddr)\n\t\tif has {\n\t\t\tg.totalWeight -= weight.(uint64)\n\t\t}\n\t\tg.members.Remove(strAddr)\n\t}\n\n\t// TODO: call hooks\n}\n\nfunc (g *grc4Group) Admin() std.Address {\n\treturn g.admin\n}\n\nfunc (g *grc4Group) Member(addr std.Address) (uint64, bool) {\n\tweight, has := g.members.Get(addr.String())\n\treturn weight.(uint64), has\n}\n\n// func (g *grc4Group) ListMembers() *avl.Tree { // dev\nfunc (g *grc4Group) ListMembers() *avl.MutTree { // test3\n\treturn g.members\n}\n\nfunc (g *grc4Group) TotalWeight() uint64 {\n\treturn g.totalWeight\n}\n\nfunc (g *grc4Group) Render(path string) string {\n\tmembersCount := g.members.Size()\n\tmembersString := strconv.Itoa(membersCount) + \" member\"\n\tif membersCount \u003e 1 {\n\t\tmembersString += \"s\"\n\t}\n\n\tr := \"# GRC4 Group\" + \"\\n\" +\n\t\t\"## Summary\" + \"\\n\" +\n\t\t\"Admin: \" + g.admin.String() + \"\\n\\n\" +\n\t\tmembersString + \"\\n\\n\" +\n\t\t\"Total weight: \" + strconv.FormatUint(g.totalWeight, 10) + \"\\n\" +\n\t\t\"## Members\" + \"\\n\"\n\n\t/* dev\n\tg.members.Iterate(\"\", \"\", func(key string, weight interface{}) bool {\n\t\tr += \"- \" + key + \" (\" + strconv.FormatUint(weight.(uint64), 10) + \")\" + \"\\n\"\n\t\treturn false\n\t})\n\t*/\n\n\t// /* test3\n\tfor i := 0; i \u003c membersCount; i++ {\n\t\tkey, weight := g.members.GetByIndex(i)\n\t\tr += \"- \" + key + \" (\" + strconv.FormatUint(weight.(uint64), 10) + \")\" + \"\\n\"\n\t}\n\t// */\n\n\treturn r\n}\n\nfunc (g *grc4Group) AssertIsAdmin() {\n\tcaller := std.GetOrigCaller()\n\tif caller != g.admin {\n\t\tpanic(errors.New(\"you're not admin\"))\n\t}\n}\n"},{"Name":"grc4_group_test.gno","Body":"package grc4_group\n\nimport (\n\t\"std\"\n\t\"testing\"\n)\n\nfunc Test(t *testing.T) {\n\t{\n\t\th := NewGRC4Group(nil)\n\t\tgot := h.TotalWeight()\n\t\texpected := 0\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\t{\n\t\th := NewGRC4Group([]Member{\n\t\t\t{std.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"), 11},\n\t\t\t{std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"), 31},\n\t\t})\n\t\tgot := h.TotalWeight()\n\t\texpected := 42\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\t{\n\t\tfunc() {\n\t\t\tdefer func() {\n\t\t\t\tif r := recover(); r == nil {\n\t\t\t\t\tt.Fatalf(\"expected panic, got none.\")\n\t\t\t\t}\n\t\t\t}()\n\t\t\th := NewGRC4Group([]Member{\n\t\t\t\t{std.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"), 1},\n\t\t\t\t{std.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"), 1},\n\t\t\t})\n\t\t}()\n\t}\n\t{\n\t\th := NewGRC4Group([]Member{\n\t\t\t{std.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"), 11},\n\t\t\t{std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"), 31},\n\t\t})\n\t\th.Render(\"\")\n\t}\n\t{\n\t\th := NewGRC4Group([]Member{\n\t\t\t{std.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"), 11},\n\t\t})\n\t\th.UpdateMembers([]Member{\n\t\t\t{std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"), 31},\n\t\t},\n\t\t\t[]std.Address{\n\t\t\t\tstd.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"),\n\t\t\t},\n\t\t)\n\t\tgot := h.TotalWeight()\n\t\texpected := 31\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t\tmembers := h.ListMembers()\n\t\tif members.Size() != 1 {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", 1, members.Size())\n\t\t}\n\t\taddr, weight := members.GetByIndex(0)\n\t\tif addr != \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\" {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", addr)\n\t\t}\n\t\tif weight.(uint64) != 31 {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", 31, weight.(uint64))\n\t\t}\n\t}\n\t{\n\t\th := NewGRC4Group(nil)\n\t\tfunc() {\n\t\t\tdefer func() {\n\t\t\t\tif r := recover(); r == nil {\n\t\t\t\t\tt.Fatalf(\"expected panic, got none.\")\n\t\t\t\t}\n\t\t\t}()\n\t\t\th.UpdateMembers([]Member{\n\t\t\t\t{std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"), 1},\n\t\t\t\t{std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"), 1},\n\t\t\t}, nil)\n\t\t}()\n\t}\n}\n"},{"Name":"utils.gno","Body":"package grc4_group\n\nimport (\n\t\"gno.land/p/demo/avl\"\n)\n\nfunc AssertUniqueMembers(members []Member) {\n\t// seen := avl.NewTree() // dev\n\tseen := avl.NewMutTree() // test3\n\tfor _, member := range members {\n\t\tmemberAddress := member.Address.String()\n\t\tif seen.Has(memberAddress) {\n\t\t\tpanic(\"duplicate member: \" + memberAddress)\n\t\t}\n\t\tseen.Set(memberAddress, true)\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"krfteT2KdhDa8O+z30nzwDyp/q2gW4EDuqKaJHEf4AB0sILeA4GYX1S+u5aIQRMwjRTQf5AThoC5MZYdr/hsQA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","package":{"Name":"dao_interfaces","Path":"gno.land/p/demo/daodao/interfaces","Files":[{"Name":"dao_interfaces.gno","Body":"package dao_interfaces\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\ntype IVotingModule interface {\n\tVotingPower(addr std.Address) uint64\n\tTotalPower() uint64\n\tRender(path string) string\n}\n\ntype Ballot struct {\n\tPower     uint64\n\tVote      Vote\n\tRationale string\n}\n\ntype Votes struct {\n\tYes     uint64\n\tNo      uint64\n\tAbstain uint64\n}\n\nfunc (v *Votes) Add(vote Vote, power uint64) {\n\tswitch vote {\n\tcase VoteYes:\n\t\tv.Yes += power\n\tcase VoteNo:\n\t\tv.No += power\n\tcase VoteAbstain:\n\t\tv.Abstain += power\n\tdefault:\n\t\tpanic(\"unknown vote kind\")\n\t}\n}\n\nfunc (v *Votes) Remove(vote Vote, power uint64) {\n\tswitch vote {\n\tcase VoteYes:\n\t\tv.Yes -= power\n\tcase VoteNo:\n\t\tv.No -= power\n\tcase VoteAbstain:\n\t\tv.Abstain -= power\n\tdefault:\n\t\tpanic(\"unknown vote kind\")\n\t}\n}\n\nfunc (v *Votes) Total() uint64 {\n\treturn v.Yes + v.No + v.Abstain\n}\n\ntype Proposal struct {\n\tID          int\n\tTitle       string\n\tDescription string\n\tProposer    std.Address\n\tMessages    []interface{}\n\t// Ballots     *avl.Tree // dev\n\tBallots *avl.MutTree // test3\n\tVotes   Votes\n\tStatus  ProposalStatus\n}\n\ntype ProposalStatus int\n\nconst (\n\tProposalStatusOpen ProposalStatus = iota\n\tProposalStatusPassed\n\tProposalStatusExecuted\n)\n\nfunc (p ProposalStatus) String() string {\n\tswitch p {\n\tcase ProposalStatusOpen:\n\t\treturn \"Open\"\n\tcase ProposalStatusPassed:\n\t\treturn \"Passed\"\n\tcase ProposalStatusExecuted:\n\t\treturn \"Executed\"\n\tdefault:\n\t\treturn \"Unknown(\" + strconv.Itoa(int(p)) + \")\"\n\t}\n}\n\ntype Vote int\n\nconst (\n\tVoteYes Vote = iota\n\tVoteNo\n\tVoteAbstain\n)\n\nfunc (v Vote) String() string {\n\tswitch v {\n\tcase VoteYes:\n\t\treturn \"Yes\"\n\tcase VoteNo:\n\t\treturn \"No\"\n\tcase VoteAbstain:\n\t\treturn \"Abstain\"\n\tdefault:\n\t\treturn \"Unknown(\" + strconv.Itoa(int(v)) + \")\"\n\t}\n}\n\ntype IProposalModule interface {\n\tPropose(\n\t\ttitle string,\n\t\tdescription string,\n\t\tactions []interface{},\n\t)\n\tVote(proposalId int, vote Vote, rationale string)\n\tExecute(proposalId int)\n\tThreshold() Threshold\n\n\tProposals() []Proposal\n\n\tRender(path string) string\n}\n"},{"Name":"threshold.gno","Body":"package dao_interfaces\n\nimport (\n\t\"strconv\"\n)\n\ntype Percent uint16 // 4 decimals fixed point\n\ntype PercentageThreshold struct {\n\tPercent *Percent\n}\n\ntype ThresholdQuorum struct {\n\tThreshold PercentageThreshold\n\tQuorum    PercentageThreshold\n}\n\ntype Threshold struct {\n\tThresholdQuorum *ThresholdQuorum\n}\n\nfunc (p Percent) String() string {\n\ts := strconv.FormatUint(uint64(p)/100, 10)\n\tdecPart := uint64(p) % 100\n\tif decPart != 0 {\n\t\ts += \".\" + strconv.FormatUint(decPart, 10)\n\t}\n\treturn s + \"%\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"2Uj7saRwXJOJw30dH6qriewqsLDwB2AKonSV0KtXpX4/6nckJPvg3fIScWxBB/fk1eiUHOf8yzNLsMyLV3cxow=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","package":{"Name":"dao_proposal_single","Path":"gno.land/p/demo/daodao/proposal_single","Files":[{"Name":"dao_proposal_single.gno","Body":"package dao_proposal_single\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"time\"\n\n\t\"gno.land/p/demo/avl\"\n\tdao_core \"gno.land/p/demo/daodao/core\"\n\tdao_interfaces \"gno.land/p/demo/daodao/interfaces\"\n)\n\ntype DAOProposalSingleOpts struct {\n\t/// The threshold a proposal must reach to complete.\n\tThreshold dao_interfaces.Threshold\n\t/// The default maximum amount of time a proposal may be voted on\n\t/// before expiring.\n\tMaxVotingPeriod time.Duration\n\t/// The minimum amount of time a proposal must be open before\n\t/// passing. A proposal may fail before this amount of time has\n\t/// elapsed, but it will not pass. This can be useful for\n\t/// preventing governance attacks wherein an attacker aquires a\n\t/// large number of tokens and forces a proposal through.\n\tMinVotingPeriod time.Duration // 0 means no minimum\n\t/// If set to true only members may execute passed\n\t/// proposals. Otherwise, any address may execute a passed\n\t/// proposal.\n\tOnlyMembersExecute bool\n\t/// Allows changing votes before the proposal expires. If this is\n\t/// enabled proposals will not be able to complete early as final\n\t/// vote information is not known until the time of proposal\n\t/// expiration.\n\tAllowRevoting bool\n\t/// Information about what addresses may create proposals.\n\t// preProposeInfo PreProposeInfo\n\t/// If set to true proposals will be closed if their execution\n\t/// fails. Otherwise, proposals will remain open after execution\n\t/// failure. For example, with this enabled a proposal to send 5\n\t/// tokens out of a DAO's treasury with 4 tokens would be closed when\n\t/// it is executed. With this disabled, that same proposal would\n\t/// remain open until the DAO's treasury was large enough for it to be\n\t/// executed.\n\tCloseProposalOnExecutionFailure bool\n}\n\ntype daoProposalSingle struct {\n\tdao_interfaces.IProposalModule\n\n\tcore      dao_core.IDAOCore\n\topts      *DAOProposalSingleOpts\n\tproposals []dao_interfaces.Proposal\n}\n\nfunc NewDAOProposalSingle(core dao_core.IDAOCore, opts *DAOProposalSingleOpts) dao_interfaces.IProposalModule {\n\tif core == nil {\n\t\tpanic(\"core cannot be nil\")\n\t}\n\n\tif opts == nil {\n\t\tpanic(\"opts cannot be nil\")\n\t}\n\n\tif opts.AllowRevoting {\n\t\tpanic(\"allow revoting not implemented\")\n\t}\n\n\tif opts.OnlyMembersExecute {\n\t\tpanic(\"only members execute not implemented\")\n\t}\n\n\t// TODO: support other threshold types\n\tthreshold := opts.Threshold.ThresholdQuorum\n\tif threshold == nil {\n\t\tpanic(\"opts.Threshold must be of type ThresholdQuorum\")\n\t}\n\n\tthresholdPercent := threshold.Threshold.Percent\n\tif thresholdPercent == nil {\n\t\tpanic(\"opts.Threshold.Threshold must be of type Percent\")\n\t}\n\tif *thresholdPercent \u003e 10000 {\n\t\tpanic(\"opts.Threshold.Threshold must be \u003c= 100%\")\n\t}\n\n\tquorumPercent := threshold.Quorum.Percent\n\tif quorumPercent == nil {\n\t\tpanic(\"opts.Threshold.Quorum must be of type Percent\")\n\t}\n\tif *quorumPercent \u003e 10000 {\n\t\tpanic(\"opts.Threshold.Quorum must be \u003c= 100%\")\n\t}\n\n\treturn \u0026daoProposalSingle{core: core, opts: opts}\n}\n\nfunc (d *daoProposalSingle) Render(path string) string {\n\tminVotingPeriodStr := \"No minimum voting period\"\n\tif d.opts.MinVotingPeriod != 0 {\n\t\tminVotingPeriodStr = \"Min voting period: \" + d.opts.MinVotingPeriod.String()\n\t}\n\n\texecuteStr := \"Any address may execute passed proposals\"\n\tif d.opts.OnlyMembersExecute {\n\t\texecuteStr = \"Only members may execute passed proposals\"\n\t}\n\n\trevotingStr := \"Revoting is not allowed\"\n\tif d.opts.AllowRevoting {\n\t\trevotingStr = \"Revoting is allowed\"\n\t}\n\n\tcloseOnExecFailureStr := \"Proposals will remain open after execution failure\"\n\tif d.opts.CloseProposalOnExecutionFailure {\n\t\tcloseOnExecFailureStr = \"Proposals will be closed if their execution fails\"\n\t}\n\n\tthresholdStr := \"\"\n\tif threshold := d.opts.Threshold.ThresholdQuorum; threshold != nil {\n\t\tthresholdStr = \"Threshold: \" + threshold.Threshold.Percent.String() + \"\\n\\n\" +\n\t\t\t\"Quorum: \" + threshold.Quorum.Percent.String()\n\t}\n\n\tproposalsStr := \"## Proposals\\n\"\n\tfor _, p := range d.proposals {\n\t\tproposalsStr += \"### #\" + strconv.Itoa(p.ID) + \" \" + p.Title + \"\\n\" +\n\t\t\t\"Status: \" + p.Status.String() + \"\\n\\n\" +\n\t\t\t\"Proposed by \" + p.Proposer.String() + \"\\n\\n\" +\n\t\t\tp.Description + \"\\n\\n\" +\n\t\t\t\"Votes summary:\" + \"\\n\\n\" +\n\t\t\t\"- Yes: \" + strconv.FormatUint(p.Votes.Yes, 10) + \"\\n\" +\n\t\t\t\"- No: \" + strconv.FormatUint(p.Votes.No, 10) + \"\\n\" +\n\t\t\t\"- Abstain: \" + strconv.FormatUint(p.Votes.Abstain, 10) + \"\\n\\n\" +\n\t\t\t\"Total: \" + strconv.FormatUint(p.Votes.Total(), 10) + \"\\n\" +\n\t\t\t\"#### Messages\\n\" +\n\t\t\t\"#### Votes\\n\"\n\n\t\t/* dev\n\t\tp.Ballots.Iterate(\"\", \"\", func(k string, v interface{}) bool {\n\t\t\tballot := v.(dao_interfaces.Ballot)\n\t\t\tproposalsStr += \"- \" + k + \" voted \" + ballot.Vote.String() + \"\\n\"\n\t\t\treturn false\n\t\t})\n\t\t*/\n\n\t\t// /* test3\n\t\tballotsCount := p.Ballots.Size()\n\t\tfor i := 0; i \u003c ballotsCount; i++ {\n\t\t\tk, v := p.Ballots.GetByIndex(i)\n\t\t\tballot := v.(dao_interfaces.Ballot)\n\t\t\tproposalsStr += \"- \" + k + \" voted \" + ballot.Vote.String() + \"\\n\"\n\t\t}\n\t\t// */\n\n\t\tproposalsStr += \"\\n\"\n\t}\n\n\treturn \"# Single choice proposals module\" + \"\\n\" +\n\t\t\"## Summary\" + \"\\n\" +\n\t\t\"Max voting period: \" + d.opts.MaxVotingPeriod.String() + \"\\n\\n\" +\n\t\tminVotingPeriodStr + \"\\n\\n\" +\n\t\texecuteStr + \"\\n\\n\" +\n\t\trevotingStr + \"\\n\\n\" +\n\t\tcloseOnExecFailureStr + \"\\n\\n\" +\n\t\tthresholdStr + \"\\n\\n\" +\n\t\tproposalsStr\n}\n\nfunc (d *daoProposalSingle) Propose(title string, description string, messages []interface{}) {\n\t// TODO: auth\n\td.proposals = append(d.proposals, dao_interfaces.Proposal{\n\t\tID:          len(d.proposals),\n\t\tTitle:       title,\n\t\tDescription: description,\n\t\tMessages:    messages,\n\t\tProposer:    std.GetOrigCaller(),\n\t\t// Ballots:     avl.NewTree(), // dev\n\t\tBallots: avl.NewMutTree(), // test3\n\t\tStatus:  dao_interfaces.ProposalStatusOpen,\n\t})\n}\n\nfunc (d *daoProposalSingle) Vote(proposalID int, vote dao_interfaces.Vote, rationale string) {\n\tvoter := std.GetOrigCaller()\n\n\tif len(d.proposals) \u003c= proposalID {\n\t\tpanic(\"proposal does not exist\")\n\t}\n\tproposal := d.proposals[proposalID]\n\t// TODO: check proposal expiration\n\n\tvotePower := d.core.VotingModule().VotingPower(voter)\n\tif votePower == 0 {\n\t\tpanic(\"you're not a member\")\n\t}\n\n\t// TODO: handle revoting\n\tif ok := proposal.Ballots.Has(voter.String()); ok {\n\t\tpanic(\"you already voted\")\n\t}\n\tproposal.Ballots.Set(voter.String(), dao_interfaces.Ballot{\n\t\tVote:      vote,\n\t\tPower:     votePower,\n\t\tRationale: rationale,\n\t})\n\n\tproposal.Votes.Add(vote, votePower)\n\n\td.updateStatus(proposalID)\n}\n\nfunc (d *daoProposalSingle) Execute(proposalID int) {\n\texecuter := std.GetOrigCaller()\n\n\tif len(d.proposals) \u003c= proposalID {\n\t\tpanic(\"proposal does not exist\")\n\t}\n\tprop := d.proposals[proposalID]\n\n\td.updateStatus(proposalID)\n\tif prop.Status != dao_interfaces.ProposalStatusPassed {\n\t\tpanic(\"proposal is not passed\")\n\t}\n\n\tfor _, message := range prop.Messages {\n\t}\n\n\td.proposals[proposalID].Status = dao_interfaces.ProposalStatusExecuted\n}\n\n// FIXME: should probably return a copy for safety\nfunc (d *daoProposalSingle) Proposals() []dao_interfaces.Proposal {\n\treturn d.proposals\n}\n\nfunc (d *daoProposalSingle) Threshold() dao_interfaces.Threshold {\n\treturn d.opts.Threshold\n}\n\nfunc (d *daoProposalSingle) updateStatus(proposalID int) {\n\tproposal := d.proposals[proposalID]\n\tif proposal.Status == dao_interfaces.ProposalStatusOpen \u0026\u0026 d.isPassed(proposalID) {\n\t\td.proposals[proposalID].Status = dao_interfaces.ProposalStatusPassed\n\t\treturn\n\t}\n}\n\nfunc (d *daoProposalSingle) isPassed(proposalID int) bool {\n\tproposal := d.proposals[proposalID]\n\n\t// TODO: support other threshold types\n\tthreshold := d.opts.Threshold.ThresholdQuorum.Threshold\n\tquorum := d.opts.Threshold.ThresholdQuorum.Quorum\n\n\ttotalPower := d.core.VotingModule().TotalPower()\n\n\tif !doesVoteCountPass(proposal.Votes.Total(), totalPower, quorum) {\n\t\treturn false\n\t}\n\n\t// TODO: handle expiration\n\toptions := totalPower - proposal.Votes.Abstain\n\treturn doesVoteCountPass(proposal.Votes.Yes, options, threshold)\n}\n\nfunc doesVoteCountPass(yesVotes uint64, options uint64, percent dao_interfaces.PercentageThreshold) bool {\n\tif options == 0 {\n\t\treturn false\n\t}\n\tpercentValue := uint64(*percent.Percent)\n\tvotes := yesVotes * 10000\n\tthreshold := options * percentValue\n\treturn votes \u003e= threshold\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"WajYK3awS39wffcTEhgCe6T2gQGMO6ZcGu/LJc9XCWFhVVrwQVxJMqPS9T97Qf+7vPbmA+WlBJb/wvHcZc7sHw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","package":{"Name":"dao_realm","Path":"gno.land/r/demo/foo_dao","Files":[{"Name":"dao_realm.gno","Body":"package dao_realm\n\nimport (\n\t\"std\"\n\t\"time\"\n\n\t\"gno.land/p/demo/daodao/core\"\n\t\"gno.land/p/demo/daodao/interfaces\"\n\t\"gno.land/p/demo/daodao/proposal_single\"\n\t\"gno.land/p/demo/daodao/voting_grc4\"\n\t\"gno.land/p/demo/grc/grc4_group\"\n)\n\nvar daoCore = dao_core.NewDAOCore(dao_voting_grc4.NewGRC4Voting(grc4_group.NewGRC4Group([]grc4_group.Member{\n\t{\"g1747t5m2f08plqjlrjk2q0qld7465hxz8gkx59c\", 1}, // zooma\n\t{\"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv\", 1}, // normadena\n\t{\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\", 1}, // no dev\n\t{\"g1ckn395mpttp0vupgtratyufdaakgh8jgkmr3ym\", 1}, // yo\n})), nil)\n\nfunc init() {\n\ttt := dao_interfaces.Percent(100) // 1%\n\ttq := dao_interfaces.Percent(100) // 1%\n\tproposalMod := dao_proposal_single.NewDAOProposalSingle(daoCore, \u0026dao_proposal_single.DAOProposalSingleOpts{\n\t\tMaxVotingPeriod: time.Hour * 24 * 42,\n\t\tThreshold: dao_interfaces.Threshold{ThresholdQuorum: \u0026dao_interfaces.ThresholdQuorum{\n\t\t\tThreshold: dao_interfaces.PercentageThreshold{Percent: \u0026tt},\n\t\t\tQuorum:    dao_interfaces.PercentageThreshold{Percent: \u0026tq},\n\t\t}},\n\t})\n\tdaoCore.AddProposalModule(proposalMod)\n}\n\nfunc Render(path string) string {\n\treturn daoCore.Render(path)\n}\n\nfunc GetCore() dao_core.IDAOCore {\n\treturn daoCore\n}\n\nfunc Vote(moduleIndex int, proposalID int, vote dao_interfaces.Vote, rationale string) {\n\tmods := GetCore().ProposalModules()\n\tif len(mods) \u003c= moduleIndex {\n\t\tpanic(\"invalid module index\")\n\t}\n\tmods[moduleIndex].Vote(proposalID, vote, rationale)\n}\n\nfunc Execute(moduleIndex int, proposalID int) {\n\tmods := GetCore().ProposalModules()\n\tif len(mods) \u003c= moduleIndex {\n\t\tpanic(\"invalid module index\")\n\t}\n\tmods[moduleIndex].Execute(proposalID)\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"N3lWCoajtJ/15PnsBPKsfw6kgEgnOWHz6fch4YH0JJ8dxr6ZWye09W/KgtTpXzZN7wxruSkfkZaDu2Pmni3SWg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","package":{"Name":"dao_proposal_single","Path":"gno.land/p/demo/daodao/proposal_single","Files":[{"Name":"dao_proposal_single.gno","Body":"package dao_proposal_single\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"time\"\n\n\t\"gno.land/p/demo/avl\"\n\tdao_core \"gno.land/p/demo/daodao/core\"\n\tdao_interfaces \"gno.land/p/demo/daodao/interfaces\"\n)\n\ntype DAOProposalSingleOpts struct {\n\t/// The threshold a proposal must reach to complete.\n\tThreshold dao_interfaces.Threshold\n\t/// The default maximum amount of time a proposal may be voted on\n\t/// before expiring.\n\tMaxVotingPeriod time.Duration\n\t/// The minimum amount of time a proposal must be open before\n\t/// passing. A proposal may fail before this amount of time has\n\t/// elapsed, but it will not pass. This can be useful for\n\t/// preventing governance attacks wherein an attacker aquires a\n\t/// large number of tokens and forces a proposal through.\n\tMinVotingPeriod time.Duration // 0 means no minimum\n\t/// If set to true only members may execute passed\n\t/// proposals. Otherwise, any address may execute a passed\n\t/// proposal.\n\tOnlyMembersExecute bool\n\t/// Allows changing votes before the proposal expires. If this is\n\t/// enabled proposals will not be able to complete early as final\n\t/// vote information is not known until the time of proposal\n\t/// expiration.\n\tAllowRevoting bool\n\t/// Information about what addresses may create proposals.\n\t// preProposeInfo PreProposeInfo\n\t/// If set to true proposals will be closed if their execution\n\t/// fails. Otherwise, proposals will remain open after execution\n\t/// failure. For example, with this enabled a proposal to send 5\n\t/// tokens out of a DAO's treasury with 4 tokens would be closed when\n\t/// it is executed. With this disabled, that same proposal would\n\t/// remain open until the DAO's treasury was large enough for it to be\n\t/// executed.\n\tCloseProposalOnExecutionFailure bool\n}\n\ntype daoProposalSingle struct {\n\tdao_interfaces.IProposalModule\n\n\tcore      dao_core.IDAOCore\n\topts      *DAOProposalSingleOpts\n\tproposals []dao_interfaces.Proposal\n}\n\nfunc NewDAOProposalSingle(core dao_core.IDAOCore, opts *DAOProposalSingleOpts) dao_interfaces.IProposalModule {\n\tif core == nil {\n\t\tpanic(\"core cannot be nil\")\n\t}\n\n\tif opts == nil {\n\t\tpanic(\"opts cannot be nil\")\n\t}\n\n\tif opts.AllowRevoting {\n\t\tpanic(\"allow revoting not implemented\")\n\t}\n\n\tif opts.OnlyMembersExecute {\n\t\tpanic(\"only members execute not implemented\")\n\t}\n\n\t// TODO: support other threshold types\n\tthreshold := opts.Threshold.ThresholdQuorum\n\tif threshold == nil {\n\t\tpanic(\"opts.Threshold must be of type ThresholdQuorum\")\n\t}\n\n\tthresholdPercent := threshold.Threshold.Percent\n\tif thresholdPercent == nil {\n\t\tpanic(\"opts.Threshold.Threshold must be of type Percent\")\n\t}\n\tif *thresholdPercent \u003e 10000 {\n\t\tpanic(\"opts.Threshold.Threshold must be \u003c= 100%\")\n\t}\n\n\tquorumPercent := threshold.Quorum.Percent\n\tif quorumPercent == nil {\n\t\tpanic(\"opts.Threshold.Quorum must be of type Percent\")\n\t}\n\tif *quorumPercent \u003e 10000 {\n\t\tpanic(\"opts.Threshold.Quorum must be \u003c= 100%\")\n\t}\n\n\treturn \u0026daoProposalSingle{core: core, opts: opts}\n}\n\nfunc (d *daoProposalSingle) Render(path string) string {\n\tminVotingPeriodStr := \"No minimum voting period\"\n\tif d.opts.MinVotingPeriod != 0 {\n\t\tminVotingPeriodStr = \"Min voting period: \" + d.opts.MinVotingPeriod.String()\n\t}\n\n\texecuteStr := \"Any address may execute passed proposals\"\n\tif d.opts.OnlyMembersExecute {\n\t\texecuteStr = \"Only members may execute passed proposals\"\n\t}\n\n\trevotingStr := \"Revoting is not allowed\"\n\tif d.opts.AllowRevoting {\n\t\trevotingStr = \"Revoting is allowed\"\n\t}\n\n\tcloseOnExecFailureStr := \"Proposals will remain open after execution failure\"\n\tif d.opts.CloseProposalOnExecutionFailure {\n\t\tcloseOnExecFailureStr = \"Proposals will be closed if their execution fails\"\n\t}\n\n\tthresholdStr := \"\"\n\tif threshold := d.opts.Threshold.ThresholdQuorum; threshold != nil {\n\t\tthresholdStr = \"Threshold: \" + threshold.Threshold.Percent.String() + \"\\n\\n\" +\n\t\t\t\"Quorum: \" + threshold.Quorum.Percent.String()\n\t}\n\n\tproposalsStr := \"## Proposals\\n\"\n\tfor _, p := range d.proposals {\n\t\tproposalsStr += \"### #\" + strconv.Itoa(p.ID) + \" \" + p.Title + \"\\n\" +\n\t\t\t\"Status: \" + p.Status.String() + \"\\n\\n\" +\n\t\t\t\"Proposed by \" + p.Proposer.String() + \"\\n\\n\" +\n\t\t\tp.Description + \"\\n\\n\" +\n\t\t\t\"Votes summary:\" + \"\\n\\n\" +\n\t\t\t\"- Yes: \" + strconv.FormatUint(p.Votes.Yes, 10) + \"\\n\" +\n\t\t\t\"- No: \" + strconv.FormatUint(p.Votes.No, 10) + \"\\n\" +\n\t\t\t\"- Abstain: \" + strconv.FormatUint(p.Votes.Abstain, 10) + \"\\n\\n\" +\n\t\t\t\"Total: \" + strconv.FormatUint(p.Votes.Total(), 10) + \"\\n\" +\n\t\t\t\"#### Messages\\n\" +\n\t\t\t\"#### Votes\\n\"\n\n\t\t/* dev\n\t\tp.Ballots.Iterate(\"\", \"\", func(k string, v interface{}) bool {\n\t\t\tballot := v.(dao_interfaces.Ballot)\n\t\t\tproposalsStr += \"- \" + k + \" voted \" + ballot.Vote.String() + \"\\n\"\n\t\t\treturn false\n\t\t})\n\t\t*/\n\n\t\t// /* test3\n\t\tballotsCount := p.Ballots.Size()\n\t\tfor i := 0; i \u003c ballotsCount; i++ {\n\t\t\tk, v := p.Ballots.GetByIndex(i)\n\t\t\tballot := v.(dao_interfaces.Ballot)\n\t\t\tproposalsStr += \"- \" + k + \" voted \" + ballot.Vote.String() + \"\\n\"\n\t\t}\n\t\t// */\n\n\t\tproposalsStr += \"\\n\"\n\t}\n\n\treturn \"# Single choice proposals module\" + \"\\n\" +\n\t\t\"## Summary\" + \"\\n\" +\n\t\t\"Max voting period: \" + d.opts.MaxVotingPeriod.String() + \"\\n\\n\" +\n\t\tminVotingPeriodStr + \"\\n\\n\" +\n\t\texecuteStr + \"\\n\\n\" +\n\t\trevotingStr + \"\\n\\n\" +\n\t\tcloseOnExecFailureStr + \"\\n\\n\" +\n\t\tthresholdStr + \"\\n\\n\" +\n\t\tproposalsStr\n}\n\nfunc (d *daoProposalSingle) Propose(title string, description string, messages []interface{}) {\n\t// TODO: auth\n\td.proposals = append(d.proposals, dao_interfaces.Proposal{\n\t\tID:          len(d.proposals),\n\t\tTitle:       title,\n\t\tDescription: description,\n\t\tMessages:    messages,\n\t\tProposer:    std.GetOrigCaller(),\n\t\t// Ballots:     avl.NewTree(), // dev\n\t\tBallots: avl.NewMutTree(), // test3\n\t\tStatus:  dao_interfaces.ProposalStatusOpen,\n\t})\n}\n\nfunc (d *daoProposalSingle) Vote(proposalID int, vote dao_interfaces.Vote, rationale string) {\n\tvoter := std.GetOrigCaller()\n\n\tif len(d.proposals) \u003c= proposalID {\n\t\tpanic(\"proposal does not exist\")\n\t}\n\tproposal := d.proposals[proposalID]\n\t// TODO: check proposal expiration\n\n\tvotePower := d.core.VotingModule().VotingPower(voter)\n\tif votePower == 0 {\n\t\tpanic(\"you're not a member\")\n\t}\n\n\t// TODO: handle revoting\n\tif ok := proposal.Ballots.Has(voter.String()); ok {\n\t\tpanic(\"you already voted\")\n\t}\n\tproposal.Ballots.Set(voter.String(), dao_interfaces.Ballot{\n\t\tVote:      vote,\n\t\tPower:     votePower,\n\t\tRationale: rationale,\n\t})\n\n\tproposal.Votes.Add(vote, votePower)\n\n\td.updateStatus(proposalID)\n}\n\nfunc (d *daoProposalSingle) Execute(proposalID int) {\n\texecuter := std.GetOrigCaller()\n\n\tif len(d.proposals) \u003c= proposalID {\n\t\tpanic(\"proposal does not exist\")\n\t}\n\tprop := d.proposals[proposalID]\n\n\td.updateStatus(proposalID)\n\tif prop.Status != dao_interfaces.ProposalStatusPassed {\n\t\tpanic(\"proposal is not passed\")\n\t}\n\n\tfor _, message := range prop.Messages {\n\t}\n\n\td.proposals[proposalID].Status = dao_interfaces.ProposalStatusExecuted\n}\n\n// FIXME: should probably return a copy for safety\nfunc (d *daoProposalSingle) Proposals() []dao_interfaces.Proposal {\n\treturn d.proposals\n}\n\nfunc (d *daoProposalSingle) Threshold() dao_interfaces.Threshold {\n\treturn d.opts.Threshold\n}\n\nfunc (d *daoProposalSingle) updateStatus(proposalID int) {\n\tproposal := d.proposals[proposalID]\n\tif proposal.Status == dao_interfaces.ProposalStatusOpen \u0026\u0026 d.isPassed(proposalID) {\n\t\td.proposals[proposalID].Status = dao_interfaces.ProposalStatusPassed\n\t\treturn\n\t}\n}\n\nfunc (d *daoProposalSingle) isPassed(proposalID int) bool {\n\tproposal := d.proposals[proposalID]\n\n\t// TODO: support other threshold types\n\tthreshold := d.opts.Threshold.ThresholdQuorum.Threshold\n\tquorum := d.opts.Threshold.ThresholdQuorum.Quorum\n\n\ttotalPower := d.core.VotingModule().TotalPower()\n\n\tif !doesVoteCountPass(proposal.Votes.Total(), totalPower, quorum) {\n\t\treturn false\n\t}\n\n\t// TODO: handle expiration\n\toptions := totalPower - proposal.Votes.Abstain\n\treturn doesVoteCountPass(proposal.Votes.Yes, options, threshold)\n}\n\nfunc doesVoteCountPass(yesVotes uint64, options uint64, percent dao_interfaces.PercentageThreshold) bool {\n\tif options == 0 {\n\t\treturn false\n\t}\n\tpercentValue := uint64(*percent.Percent)\n\tvotes := yesVotes * 10000\n\tthreshold := options * percentValue\n\treturn votes \u003e= threshold\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"2tOjzFaVnHimXzPN3E9KMSCl67bJnM+Swpt9eZSGljgB1r/RbHh+ofXPZn+CpGqqKrcjYFm4ZwbeteU8pnApnw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","package":{"Name":"dao_realm","Path":"gno.land/r/demo/foo_dao_2","Files":[{"Name":"dao_realm.gno","Body":"package dao_realm\n\nimport (\n\t\"std\"\n\t\"time\"\n\n\t\"gno.land/p/demo/daodao/core\"\n\t\"gno.land/p/demo/daodao/interfaces\"\n\t\"gno.land/p/demo/daodao/proposal_single\"\n\t\"gno.land/p/demo/daodao/voting_grc4\"\n\t\"gno.land/p/demo/grc/grc4_group\"\n)\n\nvar daoCore = dao_core.NewDAOCore(dao_voting_grc4.NewGRC4Voting(grc4_group.NewGRC4Group([]grc4_group.Member{\n\t{\"g1747t5m2f08plqjlrjk2q0qld7465hxz8gkx59c\", 1}, // zooma\n\t{\"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv\", 1}, // normadena\n\t{\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\", 1}, // no dev\n\t{\"g1ckn395mpttp0vupgtratyufdaakgh8jgkmr3ym\", 1}, // yo\n})), nil)\n\nfunc init() {\n\ttt := dao_interfaces.Percent(100) // 1%\n\ttq := dao_interfaces.Percent(100) // 1%\n\tproposalMod := dao_proposal_single.NewDAOProposalSingle(daoCore, \u0026dao_proposal_single.DAOProposalSingleOpts{\n\t\tMaxVotingPeriod: time.Hour * 24 * 42,\n\t\tThreshold: dao_interfaces.Threshold{ThresholdQuorum: \u0026dao_interfaces.ThresholdQuorum{\n\t\t\tThreshold: dao_interfaces.PercentageThreshold{Percent: \u0026tt},\n\t\t\tQuorum:    dao_interfaces.PercentageThreshold{Percent: \u0026tq},\n\t\t}},\n\t})\n\tdaoCore.AddProposalModule(proposalMod)\n}\n\nfunc Render(path string) string {\n\treturn daoCore.Render(path)\n}\n\nfunc GetCore() dao_core.IDAOCore {\n\treturn daoCore\n}\n\nfunc Vote(moduleIndex int, proposalID int, vote dao_interfaces.Vote, rationale string) {\n\tmods := GetCore().ProposalModules()\n\tif len(mods) \u003c= moduleIndex {\n\t\tpanic(\"invalid module index\")\n\t}\n\tmods[moduleIndex].Vote(proposalID, vote, rationale)\n}\n\nfunc Execute(moduleIndex int, proposalID int) {\n\tmods := GetCore().ProposalModules()\n\tif len(mods) \u003c= moduleIndex {\n\t\tpanic(\"invalid module index\")\n\t}\n\tmods[moduleIndex].Execute(proposalID)\n}\n\nfunc Propose(moduleIndex int, title string, description string) {\n\tmods := GetCore().ProposalModules()\n\tif len(mods) \u003c= moduleIndex {\n\t\tpanic(\"invalid module index\")\n\t}\n\tmods[moduleIndex].Propose(title, description, nil)\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"ge0jUbtyBo3BWXJlotaJn4aMY2D3D/5QKT86XD2wJo084UzvUsQ7hoAtuExTu0In5TcDburJbFFpch8tPvYLKQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","package":{"Name":"dao_realm","Path":"gno.land/r/demo/foo_dao_3","Files":[{"Name":"dao_realm.gno","Body":"package dao_realm\n\nimport (\n\t\"std\"\n\t\"time\"\n\n\t\"gno.land/p/demo/daodao/core\"\n\t\"gno.land/p/demo/daodao/interfaces\"\n\t\"gno.land/p/demo/daodao/proposal_single\"\n\t\"gno.land/p/demo/daodao/voting_grc4\"\n\t\"gno.land/p/demo/grc/grc4_group\"\n)\n\nvar daoCore = dao_core.NewDAOCore(dao_voting_grc4.NewGRC4Voting(grc4_group.NewGRC4Group([]grc4_group.Member{\n\t{\"g1747t5m2f08plqjlrjk2q0qld7465hxz8gkx59c\", 1}, // zooma\n\t{\"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv\", 1}, // normadena\n\t{\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\", 1}, // no dev\n\t{\"g1ckn395mpttp0vupgtratyufdaakgh8jgkmr3ym\", 1}, // yo\n})), nil)\n\nfunc init() {\n\ttt := dao_interfaces.Percent(100) // 1%\n\ttq := dao_interfaces.Percent(100) // 1%\n\tproposalMod := dao_proposal_single.NewDAOProposalSingle(daoCore, \u0026dao_proposal_single.DAOProposalSingleOpts{\n\t\tMaxVotingPeriod: time.Hour * 24 * 42,\n\t\tThreshold: dao_interfaces.Threshold{ThresholdQuorum: \u0026dao_interfaces.ThresholdQuorum{\n\t\t\tThreshold: dao_interfaces.PercentageThreshold{Percent: \u0026tt},\n\t\t\tQuorum:    dao_interfaces.PercentageThreshold{Percent: \u0026tq},\n\t\t}},\n\t})\n\tdaoCore.AddProposalModule(proposalMod)\n}\n\nfunc Render(path string) string {\n\treturn daoCore.Render(path)\n}\n\nfunc GetCore() dao_core.IDAOCore {\n\treturn daoCore\n}\n\nfunc Vote(moduleIndex int, proposalID int, vote dao_interfaces.Vote, rationale string) {\n\tmods := GetCore().ProposalModules()\n\tif len(mods) \u003c= moduleIndex {\n\t\tpanic(\"invalid module index\")\n\t}\n\tmods[moduleIndex].Vote(proposalID, vote, rationale)\n}\n\nfunc Execute(moduleIndex int, proposalID int) {\n\tmods := GetCore().ProposalModules()\n\tif len(mods) \u003c= moduleIndex {\n\t\tpanic(\"invalid module index\")\n\t}\n\tmods[moduleIndex].Execute(proposalID)\n}\n\nfunc Propose(moduleIndex int, title string, description string) {\n\tmods := GetCore().ProposalModules()\n\tif len(mods) \u003c= moduleIndex {\n\t\tpanic(\"invalid module index\")\n\t}\n\tmods[moduleIndex].Propose(title, description, nil)\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"jgRi9HbES/xoQiVHxNF9e8HqBPJayheMVRPZqMFmEnAsi7mOALDuASVYJeg38hTUz1/M+4A223dGGsDo1YF3tA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","send":"","pkg_path":"gno.land/r/demo/foo_dao_2","func":"Propose","args":["0","CLI Proposal","This proposal was created by CLI, so it has 1337 powers"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"9pHxz0RZTH6FUt3EAR6Oi5UVleNEyJhRXhggvZA2tgMO8oB2klmFDLRyXPEBB97nTXCAVv+ORhOZutXGb0XpYQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g12345","14"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"a9e3buHZFNFMd7Xdnf1I0BmV2OfgqOzhMRQp4Lb5Sh4UaVVklQp4nBbKA7vdAhFXUl1/5Nnpq11qr6oMdW/FgQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","package":{"Name":"mi","Path":"gno.land/r/mi","Files":[{"Name":"a.gno","Body":"// You can edit this code!\n//\n//\t.     Click here and start typing.\npackage oack"},{"Name":"gno.mod","Body":"module gno.land/r/mi"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"XEhlVprEYiC6fBbTQMAF1RK1wYmIXcyUD5cQJdPsnbgI1bAp6R9pYXtEDZdYIL9TTLs4Dj1PUpi2c4DeQ2rYLA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","to_address":"g1flk9z2qmkgqeyrl654r3639rzgz7xczdfwwqw7","amount":"4129883ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"wzesgh9DZ06WscaxdHysUmgenLqDCs11FAFiCfcJsCcs5V6ngp2ADxETdh1byiPH6A1uNddJg7bd/lrkk8Nj1A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1flk9z2qmkgqeyrl654r3639rzgz7xczdfwwqw7","to_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0cN2jM5SaG0tbXUEYYhgUmFIGjdIxzlDeBxpetbIQsa"},"signature":"5Cc3zPBdTKi7FZkrNdKokr/WzrsUtUGp2ccbLX0dX6wiqvOL8fOnEANr592RC6WPehyaO3N1vXvcQjwudG3xsg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","to_address":"g1flk9z2qmkgqeyrl654r3639rzgz7xczdfwwqw7","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"1vpUCPmWLTw77MMigdOn8yVYwqlBX5CiueAXnSH/1GwKsZsAU2tbMO11MvIdf9WLCFJpUeN/4U44UslUgzexeA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1r8r79suzvajkh047qss09ce3akegaqars3j6uy","to_address":"g1r8r79suzvajkh047qss09ce3akegaqars3j6uy","amount":"309999999ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxBOIDQaEvDBJrHMopsYcZDKDwwRLQ3AqoHUYa6gDbYM"},"signature":"jiQ1HVPT19ovCDjExeIN7N6jZgH7XdQ30i69c7etPk18rk2SWchQOOcBIjbH1vK1QD8Tu+stw0pAa0yTYH4RyA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_2","func":"Vote","args":["0","0","0","I like it"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"/04kQ8Kg3wjJvOrPe8F2bbY7VNfqsrKxng7pXShYy5o1KyrFMEUW/k/YJVxB7E65sAwrTlcz2RTs07TlGBuYZQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_2","func":"Execute","args":["0","0"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"ngiEMoJ4cy04pbchrvmuMu1dOD7qcJC6u1Jfk4Pth1IdZvDVzPG3pWS3lUIhXxHd6W086745Ugu7KLm3NIThQA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_2","func":"Propose","args":["0","A proposal","This is a proposal created in the Teritori dApp using Adena"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"1j45sW/Nc03wacrMg834/NY4USN3OM9hqm6VAUBavTdFgbI+PvPBfZ60JRRlhfYwW987IurwgcUFsAgWomWZkw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_2","func":"Vote","args":["0","1","0","I like it"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"mFwTIGgkJN/36R4fks/yj3B55FJZc/QdfepD07fr0+gtWq0zrw+oarCcg0TWa/oNPbFqtoxqS9bu9U0jTqlGGg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_2","func":"Execute","args":["0","1"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"8/yhRIZ5mRKLpxRhZ+K4tTy2mcfcI6NTlCZsYrw+LKMfalNDOPUcZdoSfYRQrHI+QdnEHkbAZsaYLnfRQLSX8w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g183qc644n8fqzuqapy6q0tkcc9qhwqarg3uflnh","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1mjzyk7r49ta4h6ppgv2fedgz5ek6hgyttge9pv","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5XQ9SBS7WBA44IZGpu5wntarn9DHeqGY+nU5efQLT6f"},"signature":"KBVyfV1hHmM8D3EC8P/OERJu3hl3WjWESz6PlmERuNpZ6Ro+uw9Y4vfHJM6rrxVrPuJWY4qQAjGrQOnBRKtfNw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1"]},{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","a2","Hello"]},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"5000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"9HIYmKB8P1aDcypP4ImNC4H27sW5R9geGM60AGnpBas/x6pTTvM9VQ4U342025UdwJWgBzMQntnoGDjFM23B5g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"5000000ugnot"},{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","a2","Hello"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"NyisN2khQzK5ClzITyNOwpq7c6VcDEZg5HT8SBrYIYcV35NXlCp7DUbqR92azvxPmP3hpykm7XyR1qGWxC7J7Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"ㅁㄴㅇㄹㄴㅇ","func":"234124ㅁ","args":["123"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"nMNiS2+Ry9ZUYWkkty8MSS7g+9sswhIWlPdJRX7wCsVzwJ65hz4+ascpxaXqGZp2/cD8Mp/0ZsH95wooEvCB3Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"zo3MXksXKZE3b4hHdjClRwzN1T2LtleEt8tJlrOF1jI2xyQvEwrpP7fRw5PXd09C7xsxVLmy8d7EY3sy/oTxOA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g1zm2t02yjr93ek4hm8hew0nuhdhza4m6maptkll","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"xbNQtotb1sYXq2js8L3gF4pMJI4mCjb/+rBSmWyAGgpCBSnnrgOz1N6VzCmf0EP12nuIVX+/MqU+UwEVU9PA0Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72s0","10"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"7RISbzWHRI0oU11QO5A/p1Yj89ceoQ/GeL2VdUJIqGAVQGd9ll2ny2zWz6NZSbKLPTyaTa9ivxyOb+ZJC19GeA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","amount":"12000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"AUkXTCPENLKtxOpnQCzT5wotJB6RUfguQpNFf3sm3uhgNoTMRDWfu88bH15OrbDYBuA9dD+hgaTBFMSBsplg9Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","12"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"WC7dfwFkyuq3whufj8Ocp7/04k7E85mPIje1PW3hQlUgRjlBjYma50JTqjh0qyaHnLUVQC/ti1HlvFmoGrxd/A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","123"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"3NcsF+EMacffqz5JoZKwy1dEToZ2AnSBAEub1qgC2nkE3NYbyyLKqir27RKSV07PgkRDDhaTIiPIN00dgucnIw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","to_address":"g15wl79apvky9kr994t8q04keq3u79lx96x0sjy5","amount":"12000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"pHW+RT1sJroWuHjvXIFCI5yA4XAaQDlUjVO7ahsgTpM48meNKUR2axwPZe8c8wgvSET/5sQmIoO7j7jaAgXKEQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15wl79apvky9kr994t8q04keq3u79lx96x0sjy5","123"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"TV2A3F4WlWWxY9GXwi7BavuF01AgmFKZq6ROq9SO9Og3+M0o4pydxdcA8zNezSEWcElYIpSrgqNp8LkR3qC4uQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15wl79apvky9kr994t8q04keq3u79lx96x0sjy5","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g17mcw908lp5y006avp4fjr082wrzryzqh2qgr8k","12"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4Zq2nQ1PgKJi6u8SDBgHQVXaO3v8ULqUBG8JwiDqVve"},"signature":"jUpY7wc4JZhIPns+yRzEuHOZDaU8FLvxxzh9W0oywyUKK9eKnwWH/YlmX4r0MQHkXfODd7aywh54mLCcPdWq9g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","2"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"o1Cqc1ZEgnf2E8+Qcy3d8ZWljfk5/XGzg8c2HKWpV79Z3kjJv8suhH7Q3oWvNRGML1h653oxrWokaarh3/H/IQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1fnakf9vrd6uqn8qdmp88yam4p0ngy572answ9f","to_address":"g1fnakf9vrd6uqn8qdmp88yam4p0ngy572answ9f","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3cWVULHSHC1mwK8o1vfJHKfNMvLEvKU/sHPQoFWRoey"},"signature":"XxDERJc1YZq/ks/cVhJRuT6rLItmva8BkBUKsDpbnWtRXxTMU/SufP2JGkmy96P0AN2UH2Xa+5/TfYTu0LF1yQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1fnakf9vrd6uqn8qdmp88yam4p0ngy572answ9f","to_address":"g1fnakf9vrd6uqn8qdmp88yam4p0ngy572answ9f","amount":"1ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3cWVULHSHC1mwK8o1vfJHKfNMvLEvKU/sHPQoFWRoey"},"signature":"2BImZ+e0I0hITxIKXtE1UKlO06+0Nhgg+RUc9gXSbapwEUDpcZKctH//2aunPvCIsB/a0UAntq7HBItIH2PTYg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g1fnakf9vrd6uqn8qdmp88yam4p0ngy572answ9f","5000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"5MP9LUeBFC24qT8Fdb+3v1rmwjXvblKMKgIriyjAk8Z2UE07EsIKC2ZnhQXfwo0m3ohmsCkjMVF+UKm/S9KEIg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fnakf9vrd6uqn8qdmp88yam4p0ngy572answ9f","send":"","pkg_path":" gno.land/r/demo/tong","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt"," 1"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3cWVULHSHC1mwK8o1vfJHKfNMvLEvKU/sHPQoFWRoey"},"signature":"LgkzYIvyXugn97JsSxuL9NVl/+kvA0+ypt+Y2OWfiAs+sBFr/e2jF4eSnZsu2M9nku2cn6Zlsh1oVHo9+EhFEQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_2","func":"Propose","args":["0","UI Proposal","This is a proposal written in the UI, so it's extra sweet"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"WisLN6ym3nl3VineEWKocFguG9kSKyd99d9oc8NEHCMmUxLSfK6cPXkl3aqRr5/42OGCjRAq6qoGmuBPTY9Wvw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_2","func":"Propose","args":["0","UI Proposal The Second","Testing stuff.."]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"cVwauJ7wda/R0Z7QteXyP26gPDmJYBHunM2MZiRezuM7Wrmpxhh5buys7pFUVlV2qOFAkZwcB1qq5DzkTgAXGA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_2","func":"Propose","args":["0","UI Proposal The Third aka The Charm","I will soon run out of proposal name ideas"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"2v4JrRAb08r8AtxM4iA4pAVvlHzpQ5Eo1BwNE6qlTX8TwixqA8ZDa83QHdlSVOOwRE+/XQ0JOoPewcfYePmE8A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_2","func":"Vote","args":["0","4","0","I like it"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"RPRa1LIg+lfnL/QxldhvvdK2F7DsxRnlih3n+zw+a01uo/DdfqNfGvV0a1STkhHp1YBOos3LZcPgI3/zfUsDRA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_2","func":"Vote","args":["0","3","0","I like it"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"JpAfPpMnjriu2rGVwEDjZ4SiKrhbO1+5k0ZJ68Wuy/kouPgq/pVvXn7ne7M1WzGPC0qzgSdgMTMV9S37zd4pkw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_2","func":"Vote","args":["0","2","0","I like it"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"jaKrm/fNSQJNpvlr+o0cUbj5y4irBJd+zZFQC62mtuFa1cfl36SkCDQdDENuVKBOPH74W0UnjeSFsUzr2ML9rQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_2","func":"Execute","args":["0","3"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"LvKUbcLEU5A4XhD/BE2YInLwsK39xL4mQb3UD6q/5K9+f2UacRcd+WNXYfSXTRNXOsDzlol0ZGudEDUvtNOaiQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_2","func":"Propose","args":["0","UI Proposal The Fourth aka The Unwanted","..."]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"SIj70d6fpRa5y3TKG4+I0iYqb267DwZ0XYFFCE3JE7xMvm6IS2EWgraWbNY8jcpRS75Nr3nO73kO0dE9kdDgSg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_2","func":"Vote","args":["0","5","0","I like it"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"ZiXpPdMsw8/IslGKaNHKBV2y+282Hy1G6bOVXrDaYUx0K1bVArs/EPpaoOyTU6k3a0KIkWMJnvO/SVtrTONTfQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_2","func":"Propose","args":["0","Oh nonono","..."]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"fcQBjvthYGcSMFNREFdT7AdhUntF90q8tdj63YCulvo6ZdNTdxVG1JlnWfZGXvI8qLLmejdp6kD6yhdqCef13A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_2","func":"Vote","args":["0","6","1","Me like it"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"tAoj/NKIoGNxhBgYa347cZMGbyxJNkLOzvZFAaCXbi0Wbxhy+7pnhcAUi9Uu06EH2W8YsvUkogGqsaOYFfC9aw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_3","func":"Vote","args":["0","0","1","Me like it"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"cOWYprku2q6fqIr7DnAwwitYXv6lGg6eTGLWgt0f+hAxBY85hG1oSXZIvUesB7hc5F488GfVgun3ug7P1FHOUQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_3","func":"Propose","args":["0","UI",""]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"3l5rSaQ+DZBfEQde8FVyQqZD1CTcWU3L9U3wVfTafkYinyOTQE91rDe/Poe+QUdC+ETXxjrPCaJMAznmwX00mA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_3","func":"Vote","args":["0","0","1","Me like it"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"U3G4U5xQ1AN+J+siyzKMf50HdAlK2cUQoUUyF4jgsRoXZPeo5iuLcXnJ8wS0j7OOoc/BdZpmpmnZISshYDUJag=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_3","func":"Vote","args":["0","0","1","Me like it"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"79m3V+GuzpABwKGwdYSCnfoUMUAudhOHBvSWxvD2pioZs1RL/YaLYSXoZaKciDQ+Eh1IzqAr6xqNpZC6Li0Nbg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_3","func":"Vote","args":["0","0","1","Me like it"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"zGef29BNL5fv1UFbFA1DoKQti3q4B3kst3zI7AAYtpxj4a4/SLPr4lx7hBne4U74M5zG+dCUFAVFG7QdInVk1g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","to_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","amount":"22130034566ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"oXHeM+ak5P7StSKTT+RSItOzEoHDUQzrC0njYF4h9FEFlu7y6yAHMP62RncB8c1u2ZYlT/lrYfTNucZnxpM/pw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","amount":"12000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"OuSK+vqR5cbvQnJUVpT+kVlefP2unlAhn4uE/EMpMzhZ8Wz2ic2q5C6N2RiBpVrjs0HHHl6MwQ5eulC6OSzr+Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"hello","Path":"gno.land/r/demo/hello","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"jdcvtsU1TSOcGhIrl86haDNTL1zVjMUwnigjn5t7bYthqFK7EksPegHlnxSYdFONTSWb4HwZMZZASWQupBX0oQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"hello","Path":"gno.land/r/demo/hello_sample2","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"f8eHSuUa6nTILSu5G/PH17S2IDN6SFpCm9PMJYZIKesiEGrhsL7l1DEJQzf0a/bHHHSmNMmWHKJTaKDDK95RYw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"hello","Path":"gno.land/r/demo/hello_sample2","Files":[{"Name":"hello.gno","Body":"package hello_sample2\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"e0/b+/NsvqvEDjMKN64TTiMtSjS99mx6MNNM/18mUmJ+oF6MqP9WeLgey5p4PcoyERM8u6Z3XH2wVj7zyTcJkg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"Cwg6NwYflMlXmsxDNJhSqIHoVkBxVIj/zTV8esiYrXYPX3XlgMgTLC965EKqFzhBMIdP2mQdjEjanpGZP4fuDQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"Ev9Yk5YpEUCL/nzUP8+iO5cXekB3Cul2zZWtf9rYH7g8V5wG8xswEJyUmIGfV55p2ccQbK90Rfn93roXvl4nFw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"hello","Path":"gno.land/r/demo/hello_sample3","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"L99ghpVyJjW4QcPLePAuZedoxPUbp8/knAQu0Ug2454LRSkmvcUdfLzB1Fs2GdCAOQYGbfJyic8X4JzdhoH+fQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"hello","Path":"gno.land/r/demo/hello_sample4","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"tcyiJy5Uo19zrjgDltEKCxgxJf7va20YPdk+ROh6NX8WfIerYTW2V0pm5uupuWhNlmSDCsF7fXzisG+YsHdsTg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12s3p0rreg5ashpmrmc607hx35zvy0vx7mec600","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Ba3ftqA7W/qZvBWW8spAxWe33lXO3z+NPDS/bTRujWoeL7djt6yPoD7YBC0jgklbzEGXONmsABkg/HDS/QfYmg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1y00a6w0t893yldq6e2karpwqwzh29cz3e0tkah","to_address":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","amount":"250000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aus4efhyOq6IQOIxHPOJrATpDwNGdPQnWN2fM290X4C/"},"signature":"aSL+Og0ntFl5mT/enkRZ7Si+NtnojtEODSw8evCByJZk43TVrJfVGPXZwJ4YSkIqzKxxm1+HrkhUNw62Zybo5A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qdahqtyjj7dnanfm80ugpq9u8srux8hqdzr4vq","send":"","pkg_path":"gno.land/r/demo/users","func":"Register","args":["\"\"","\"mouse_worrier\"","\"\""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A357BkcEZnchB7F1F54yjBgBnb8tquR/4KFyKtwthMRF"},"signature":"+Mwi6cJYZXmllmtEvWcDnpOaYvS5pSJkqRVsAczL3I1UcsPDjc6RmUmfe529it2EI2SLZgwcBhO4TZR7MeXr8Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qdahqtyjj7dnanfm80ugpq9u8srux8hqdzr4vq","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","mouse_worrier",""]}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A357BkcEZnchB7F1F54yjBgBnb8tquR/4KFyKtwthMRF"},"signature":"P/xB0OPHUGtN2k6PAlcEoWKhj3dNpOYGP22G3tSTK8cbG45Go0U/CsXmc26A4coLxQNi33qk/MVpNCbnbuoNNQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","to_address":"g1qv3dqyw46fut94z9t90jka58saw2e7l99nzqtr","amount":"11000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"ctTEFsyl5YbYJKWewN1I5EUyuCsMJgUJr4NJWIPAzi9mO1770IwvVcRTk4/qEAmnWXvJJsmTCLWQt8DqwujAIA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1","5","5","Hello 👋"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"FeZENPHmhHcojUSeT4ux4QfK7uRQonrQ/PgB9J/KHd8uYASAS6jY8ZC8sUHAA/wVYbt69sglExm3CvatDnXbpg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1","5","5","Hello2 👋"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"8MOJ4brPRqE2y1onCHknIG+PqhLkBuSLPPkSzoKXz4IRvZ0zj/LhdFPmy3HMjwl+2ib2F6icjcf30LHxjgBldw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/demo/banktest","func":"Deposit","args":["ugnot","1000"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"S1/RjAsQUkLURTIwJGPMjivsuPVj6Ecq182nc/sokMtApqaGVBENi+EKGURi4vLIHQBx6xboVItL4fHitmjy9w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"1ugnot","pkg_path":"gno.land/r/demo/banktest","func":"Deposit","args":["ugnot","1000"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"BS2BaXxqFSkohfnAoLQ3+DsVKzAPEXA57B6+/lSa2Vs9LioaUcfqKR6uzlgfpTckiBpWyFR/DoA7rDzuR3B3nQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"1ugnot","pkg_path":"gno.land/r/demo/banktest","func":"Deposit","args":["",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"OgYDHpTWIJ6mMVQbT3GlYxTwow3tVqwHi46Ckv0zNDtNxgfU/ruafxXfh2kGWtlLxnMsO8a0WpsmL7FbY63yxA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1tzdfqdc3jcl9laqzls5sd6ukaqsrh43decfcd8","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"VmHDKoMWkZHOMtor2yYoGLyUcYuTCUz/wR1m5wafgwo0kq/Gqi6UqkTpxM3q97KlgoU+ms7mhOLwwqD6ddo7+w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tzdfqdc3jcl9laqzls5sd6ukaqsrh43decfcd8","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","chelpressed",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8bQRNGT4oW2scgd3K5hb7t9O6a2rGkvylmFVZFro7ki"},"signature":"jYTbTq4RQVRj0WKLPTX5HxBxGrUd8U7oKamoR5lI2zIkEIXxvTnyj+sayfUjHLaPbQZ7R9QV0u7x5SU5LEKR3A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tzdfqdc3jcl9laqzls5sd6ukaqsrh43decfcd8","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["chelpressed"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8bQRNGT4oW2scgd3K5hb7t9O6a2rGkvylmFVZFro7ki"},"signature":"0ITqDolx51k3Bp2OmdUthQmhWxFsMGjS/h6EPYxuUSghlfDh5cL7WTOAjydBYNZoOpWuTnCv0YmHSjGN1GY6lg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1mzg8lp962tuygdmn8p6qk9wm3r7df3rr0ju9n6","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"mJGpJ+HkEGgtuxtpF3tb1l686VUASI+SDzt5p0r9IudlzqsqvnIlHwIGcdIUUoMinEkE0MPOF8DDx+fR9CYVTQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mzg8lp962tuygdmn8p6qk9wm3r7df3rr0ju9n6","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","soucray",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ao9d9Bbrcaz3TIkU42S020W4mYDTflXNIw4iNetMb4hf"},"signature":"azdlak4cxy5zvXit0/1N1HJ5UkIv4N+iU6H7uIWePSUdPVSjzEie0mQeT+rhpEWUaXLhcoYzPdrRgCGJvxdsYw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mzg8lp962tuygdmn8p6qk9wm3r7df3rr0ju9n6","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["soucray"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ao9d9Bbrcaz3TIkU42S020W4mYDTflXNIw4iNetMb4hf"},"signature":"+NUrWU6rdZVdoKCVAMloeoLSCNQPofzbWdhaCAIVbDFf+F76vRY0N4jKh4IgbNlBlxWiZmhmEsLyTS3MOdwLpA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g157lqhmmefwjjgsd32z68s077nx44h0h04h6usp","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"PtT6+kh3zsk/AgYzc8s2nucbPMStyTUN3JRwDjLSHZtXxRhLgxAwMGYkyT4qBaDXv7Kt5+/rI/B9bgiDR1y1Xw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g157lqhmmefwjjgsd32z68s077nx44h0h04h6usp","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","pacefrau",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A06PC8q/yAZ5QEFll3OOj1Uj9xYL3Eg6yQRPSoTL8KGN"},"signature":"6tnXOkUEVTY6c22EdasH+0XAx7VB4egzx5UmuWx8bdAta2DZkQrIvDhieWPqXQdR9Kcr7nSf6W8bS+aLUp+vkQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g157lqhmmefwjjgsd32z68s077nx44h0h04h6usp","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["pacefrau"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A06PC8q/yAZ5QEFll3OOj1Uj9xYL3Eg6yQRPSoTL8KGN"},"signature":"l8s/z34LhyBZnOsoxKC3NNEQc0FzSp361+ZaUOaYnywWRP5hK2NjrdK7tGepH2HEIz/toPwiX+3sWSr5IK2A9g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1gx7evqc8p99xjmaan0xccll9kw6ug8v89dersk","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"SUyMsSoj0DeQoq9zBRQoH3KcBKJB3EvUTxpnUstezrZZ+pQIofW5vca06Ltf4l2nEioaTfihEjqdDFIVgRUVMA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gx7evqc8p99xjmaan0xccll9kw6ug8v89dersk","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","cuichomp",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Alc6FFz6lCnIEXWmAJpe+UrfsyGSkSMgk6J0HzBRSwKS"},"signature":"qfhI9+SlQnaJ+nF3646gLHflC0fwBy9qEWwJA/z4BEZDiSAooFKtwX5CASx2haQOmGji8yknrzCU/95NLdM8Tw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gx7evqc8p99xjmaan0xccll9kw6ug8v89dersk","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["cuichomp"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Alc6FFz6lCnIEXWmAJpe+UrfsyGSkSMgk6J0HzBRSwKS"},"signature":"BuqG3crRY6pN92/hznhxipxGGApIQg0hmjrsxOzfymAl+ZEfRamYZpSYqJNKJ6ds8hIUPBKUfTEmfDeg/qRalQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g107sw3dysjd7rwacl9a6upl6gykrxg3y462awyc","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"UlhHHxPrBF2U3924k5OtTMK5krCdpBpicRSH9VkUjNlGk8DmQBIG7cPfRRpb8eyzuMM7d3k5QPqzn2SMoeSuwA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g107sw3dysjd7rwacl9a6upl6gykrxg3y462awyc","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","memclys",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Asm91M+GHirYQFZWGQvPNdso+I9WF0qh/oOrxl69MK2u"},"signature":"9PSFCfShsfEagymy2g9rf7sS7OOzHIg0P/Pw7dizcxZML9Xa3w0DGo7iB9+Hzes0LaXXo6yYSRL+QONFsIAVdA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g107sw3dysjd7rwacl9a6upl6gykrxg3y462awyc","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["memclys"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Asm91M+GHirYQFZWGQvPNdso+I9WF0qh/oOrxl69MK2u"},"signature":"RNnWVjbV7IPJKOK6ZZtJ4/nwqqzXRyjh1Yo9QGtQguR+XlD0VeyhXNB8FiV8fLgs3t9lhxf/TSlTB7gJ/91PlQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1fvfd62zg0nzrnhjfjd9nhzh8sf7gfzufslf6de","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"TK72t9W15lIUvibAani5oH01VLODK8YNMFkZ4IzdeocIQca1JsXcXYS8rmetInpojLpAvSWVuX5orvyW3gMN7Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fvfd62zg0nzrnhjfjd9nhzh8sf7gfzufslf6de","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","leechrou",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq+6ZVi5Knr8N9ECPduVlORAhtjTgSumNh5jiYt1243d"},"signature":"kH/3I5hDILhfNDULf/iNWc2aLJoz5rKSDz6f9bM9MhkJbyoVoF9wb+oj4LNWg2CBKn/5ZiFu8vBsnUUWGmfueQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fvfd62zg0nzrnhjfjd9nhzh8sf7gfzufslf6de","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["leechrou"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq+6ZVi5Knr8N9ECPduVlORAhtjTgSumNh5jiYt1243d"},"signature":"Wsekt/lOfGNQfPoZ5VObtpNjn0WV4NlQOe9cNHYLLm1P9rtvVwtUwQzO5Id4ZgBcf/Z9umrIuJ3DhsFKxws9ig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1wnt20ulmkkxf4rlq4cazhqzlykdtqzk3lrc39t","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"5P3inUgV5qScDeKEYSe+MWNq8iKM9j0oQfvI62Wo7hswYkNGNEcCFACZSO8BmKUI4fy1kKUydEWEBXHtgvIXQA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wnt20ulmkkxf4rlq4cazhqzlykdtqzk3lrc39t","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","jackcleans",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ay00af6YP8jmRufaawDkhK7ar1LP9u+Pt7uBCGJxFOa6"},"signature":"OK91BBtS7hofdUZ3yiPEMEWm9micRvIcZXm1++Xf3U0SjGhym8QGP/7b+Pf+lqAKfatHhHlDFKv8f/MpQYTApg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wnt20ulmkkxf4rlq4cazhqzlykdtqzk3lrc39t","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["jackcleans"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ay00af6YP8jmRufaawDkhK7ar1LP9u+Pt7uBCGJxFOa6"},"signature":"2XE0t6dJLH0ydzeaaprT+Gi9yyTxfjvVLmPdzYJwMPp2hYyxpaDqqdZ7k78ohlABAn+UVUabuZnG9OmjQUgL2A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1f5kyq7ad8c9kn0dnavghdhfhgr38uwnj7f83uq","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"kyvwpdc9cwYfLqy74buup1bZVErUJn8/4PTDqFPjmhh8I5FV/dEYa49U5ulKWUXOzN+MRjf8B5H/nNVaX4xT8Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1f5kyq7ad8c9kn0dnavghdhfhgr38uwnj7f83uq","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","crookesst",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhNkVdJIFl2e/Lg77ADaiyukGSicRcy0doz46bBfuTn0"},"signature":"JWPE1A6FtGSXXANzglaM4uAL9jdcHGFy7GhPbeN9MLE7ezJp4keeiNCIBcFSlTInNzKY0xvmAqS+mq6Gs9+c5w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1f5kyq7ad8c9kn0dnavghdhfhgr38uwnj7f83uq","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["crookesst"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhNkVdJIFl2e/Lg77ADaiyukGSicRcy0doz46bBfuTn0"},"signature":"1CAnM1Fu/3fmVU4Uc58PW4exWoe1AtwFcCI6OLXOwrMb9Wl2x9/TNWU5BfvzmDm67ZFF1564FCpEXzVwVP+8vA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12h9lvxrukn7nmrc004kr64uvarxpmfdx7z23xr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"FrjWza5yvmtzJZcjPTBfVtNY/ySd82B/2FFLywPPOiMfUXd/qqXR7tBBxcevp9RKCJ0DGoB4yebgZaL/C22sXQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12h9lvxrukn7nmrc004kr64uvarxpmfdx7z23xr","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","coptspap",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Azgo9vpOaM4AuCKpJYlbfENk391PYM0S16jcGlaHq8JW"},"signature":"0dMrpOBX62d4nd2eSueLW96SZTEGiWp+9dj87j7cxXo4ZJU2z3FjP5aOQfQ+kQHBLecRxSqMoZo/dAZhM0/PMQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12h9lvxrukn7nmrc004kr64uvarxpmfdx7z23xr","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["coptspap"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Azgo9vpOaM4AuCKpJYlbfENk391PYM0S16jcGlaHq8JW"},"signature":"Vtvquo7NFDxU3NQnCH72HfTmf5hobo0rsbXdGv9MtM5kxEel8rWFDkE5SOZdsrUnW9RWD+0vDFeJ6kM94eX0EQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1uczajrdlpsv47gnd5eg2zcqwjmzfl5sulm2rel","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"aUxmOFICb8B7tzPr9INPf+e6Cr8VsEQBx6M7m7TbCrg+rTdTyjF8H1akGRyod+Yio8Ul/ICeXf1x4ShgbdxIrg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uczajrdlpsv47gnd5eg2zcqwjmzfl5sulm2rel","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","hodpace",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5Abgn0zE04npG3/ukvZpoHsSQjQaT+isMtNpL3NVmS0"},"signature":"N2MjlHZtCvKoWVuIn6BkVPlHH5gwfpaWhC26N/MAmqAhLk7MOJROet0j995+g/X4ltdzkAwfKB73HMEzyXfb2Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uczajrdlpsv47gnd5eg2zcqwjmzfl5sulm2rel","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["hodpace"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5Abgn0zE04npG3/ukvZpoHsSQjQaT+isMtNpL3NVmS0"},"signature":"cLuDrlnrRdcrdQUmBIaJTeSixr/z62WflrDLEIZF1v942GvvHB5aKDhakWvTgsu89GjfD/yXj49zapAY04PULQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1yqg9vxgwczaxnw24zjss8l8tut7lvqvuakdthn","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"1H2kwRJglr+jvjkfKNyHRtS/oNeaCP9CONP/pUk7P44VWgkxagFMRgfXxtkE9niM/V7IIDO3DiuOYIJHEVAFFA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yqg9vxgwczaxnw24zjss8l8tut7lvqvuakdthn","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","draldawk",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsypZUL80A6YxVU68/9Hu9eblRVVg8RGupSYvr8z8eRc"},"signature":"swyIorI8F+saHusg3chyui9HCM/YBgDdyTrZvY/MhcUTycuSzTPup0kGiXLoVYC90dAa5uoeSHvJ1L7Mh0l1MA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yqg9vxgwczaxnw24zjss8l8tut7lvqvuakdthn","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["draldawk"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsypZUL80A6YxVU68/9Hu9eblRVVg8RGupSYvr8z8eRc"},"signature":"qaLasFJOXe8vrmUQymWLP5QSFiD4foDPVx+3CyAqtVNuD3uky4QRaRbOyXWi2CBM/bqbFgcVv+4ovDuMPuNe1g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1cy2cz7l0xyc5vlr59rqn25c4kqa83fjd0prehn","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"2o4VoX1evO9Ye7AcsypWaURxVN4UOUIhb/+uYeOHKdgdAwGdJXb4tgWr6H4+B3n2OHXfwB/y9Ww7QNOrg/gcJw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cy2cz7l0xyc5vlr59rqn25c4kqa83fjd0prehn","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","creeppaz",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Azuo4WEVzGOq0nraoUELL0YKvrC25yBYS8kylbUisA8A"},"signature":"qCqjllz6iMWSImL0EGG7lTWMt65P7Z9x8NLqmicmT0RROaSp3m5ue5/JHlALQTn72SGxKpqN1O0onGS6r0k+lg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cy2cz7l0xyc5vlr59rqn25c4kqa83fjd0prehn","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["creeppaz"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Azuo4WEVzGOq0nraoUELL0YKvrC25yBYS8kylbUisA8A"},"signature":"mCujZ80OFW3AnSru3+eP5glugvzTNRIXZDdpEIH283EdhBXPq1qX5/V1d2PTDLZeyfAaIhKd4Q/ovxbcmZkGUg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1wrxu6p2ywzn74d0dn8u25x32jpq49zmv6g4xvy","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"TLpk/RLf3P+h0Fzlf6HzMb41jXHPDHYAJ+sBURcwBsZy6+pIdWEawZQdi6MNjWKW2v/VhCXvXZHWYFb/ssw2kw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wrxu6p2ywzn74d0dn8u25x32jpq49zmv6g4xvy","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","croischlor",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/hW8fiF7l2ra8irI6ki7pM1oUWl6w+uKWyEWqC6k3IF"},"signature":"vZHxCTz2e+cbWy20rGXqdc+ekTSfqXW168NPSoQ1sio7BTNaaicVUoNHkhWQjVsdmS7ahfZGJOOyqx9FUxTRig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wrxu6p2ywzn74d0dn8u25x32jpq49zmv6g4xvy","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["croischlor"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/hW8fiF7l2ra8irI6ki7pM1oUWl6w+uKWyEWqC6k3IF"},"signature":"2PWicNJtrGYd0ko6uv1rFeegHXo+oQPj0PqfsaSvFNQrJOvqlp5CosyYR5Kc6h4QV4KLMqX8h5C/wHYWeBGgrQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1z67e26yg9amlx8258qzgxy3mehplxmmu370jj2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"3hJxlHbjTrf+iFesH/dqEjkzsbdEBLk2oJ1N8vt2/Q0tkYdSJkR7F5RCWy+R4TNVn68qUFwZESHCwjDr+/SEdg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1z67e26yg9amlx8258qzgxy3mehplxmmu370jj2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","tintstere",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6NtfcSQQ/rlxP5IBIJprs3MDGCFhRnhc+3KJaBzMj5o"},"signature":"YOjJXUfaiIErt+J9IGRYnqgRSJtg2rGVLX2KG6PnJXVkGFs6UL4iQbWKX+mRPHKzsVXV+Az1d5aYuDf/uLj2yA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1z67e26yg9amlx8258qzgxy3mehplxmmu370jj2","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["tintstere"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6NtfcSQQ/rlxP5IBIJprs3MDGCFhRnhc+3KJaBzMj5o"},"signature":"C2+aXr59ue6qRHVrQtZel0KLDqEjglcP9URAcGJIHTAha8HBniy1iI3zsA4rYEI6gpRoM9t/YE059wvO/ZgD0Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1xjwc6rzzj0rkgmqtn79v5ruqcw8p7tqwsw45aj","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"qhbalR3WmRjuniNF2vPvlWMpBN+1dn7uAA6eNmv2tvMOZBZ+dae6imP+orr/D1bkbjxaEzBEV7PaWyqulQk+tA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xjwc6rzzj0rkgmqtn79v5ruqcw8p7tqwsw45aj","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","downred",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsTbasGVpdrDQT5iefYGj0cD4/x439ZNHuOizspRzZyb"},"signature":"+bxWDCPHMEpWe4aYCXK+4mPNJ28ZDLE/7W7Zq2Gat+BiJ9uKicztGQ2oelLFLpqnE9JSAVfqWRtv27W5k4GgUw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xjwc6rzzj0rkgmqtn79v5ruqcw8p7tqwsw45aj","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["downred"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsTbasGVpdrDQT5iefYGj0cD4/x439ZNHuOizspRzZyb"},"signature":"eX2U0FIJ3wyepMeLzIKbiqetqzBrQDhziG3SWBws3yc2Ug29eKhbQkaCsS5WxfonxO7nQh8Hp5AfiI1OBZPWgA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1lnasp9e03muq4z8g9ntzlzjmuugrru4c6dm5ht","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"C8+ZRWVwLCWOd4wjdlyc6rPH18jvc3WWFVkWZRtbA+90sU4Lwxs3XGALxjQdg3ZJse8QZ+Ih+HBBOzbV+6LT1w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lnasp9e03muq4z8g9ntzlzjmuugrru4c6dm5ht","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","wicbark",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5dAxEibC5NGG5jUS61cZ09Rdyq5MMYey5JouWO5Ac0d"},"signature":"oE/EL5NXQ6DHS3WycjNrMd2h5wN6rrdEY0/s5AicgusBVaa8HZBC7rygRFds7t7OpEiJdBjt61N8RMQqTFDzrQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lnasp9e03muq4z8g9ntzlzjmuugrru4c6dm5ht","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["wicbark"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5dAxEibC5NGG5jUS61cZ09Rdyq5MMYey5JouWO5Ac0d"},"signature":"jNoPaZ9pNNaC70oCyuOij3ipzZmxbvG2ONKhJ2+l9zw0okmLScMmYjw368GtMlGbMGyH83Zy89mQbusVopbFgQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1rm23jwy6f4ffnw9w747nssx220rm38mjc2m9jw","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"sGvdwcxmFuMuJ/zMGeUcxK/3eslBqZFhqYTwuDZFQH8ln/q9TS3gx/bebtaqX4FrSpYCtFzoE7UGyiat929fDA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1aryfmlacptetvklgsjem6cwahgsxt00je55fxn","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"WZ6A/mzPnXVQMRJY0WpVixDzDUafZHDT0rhtEJ6VdJpQUW44bAUEC/d/lLguWVKrsHaUzq+Q3UGFeAZ1Zjqadg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1aryfmlacptetvklgsjem6cwahgsxt00je55fxn","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","dumpresce",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3daS05iFU5Cq36x4PH9nfmY3DaEqosFZfsrg1UuaHMq"},"signature":"S80rU7YpI1UgZVrTF8xK8amT9nnrMp70Tk2D+6SgXDN+zDnoA9iI9NQAz/diuN4yV7G8icDfDYm4TqT0mNFq+Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1aryfmlacptetvklgsjem6cwahgsxt00je55fxn","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["dumpresce"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3daS05iFU5Cq36x4PH9nfmY3DaEqosFZfsrg1UuaHMq"},"signature":"zfc8SrykbVu3n2yCxCnOzd6ddpBixToFva6ufR2aQrNiPpEVLGm2WM46X4rVT1b9KJHrT/lfthz4hFTblMb+OQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1kf76cgy7d6qjpqeynu9wfps5fdn7ew9pl59ezf","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"91GR2P/agHy2OMULJzqeyDUylTq1pV7pV5LAhLsob8JBvkW9hU0C/NUQJRsGLlOEeRtVhgP0qdNA/7up5z+EJA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kf76cgy7d6qjpqeynu9wfps5fdn7ew9pl59ezf","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","quencrine",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiQlgUR6FGqgwRGjyPDNIou9uODosyxi+BA+7Hko0SZd"},"signature":"I0x3nBNScE2JkDeSSsnTxp5NweEwRd2AcJ7KoxMPrAE+SopsNUe9JYsdtrJ7Ejo8Qc12iDVmzXw5ZW4nIjpwGQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kf76cgy7d6qjpqeynu9wfps5fdn7ew9pl59ezf","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["quencrine"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiQlgUR6FGqgwRGjyPDNIou9uODosyxi+BA+7Hko0SZd"},"signature":"LteIR7dOUMooeiGiSAo5XnJSApolHLJQRxRVJpU27e8Hk9LB9Lu2XNt/wQfTkinPO+mecY73fszGLEADH1+F5w=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ckn395mpttp0vupgtratyufdaakgh8jgkmr3ym","to_address":"g1yk2x0g8fnmy85scnte9lswada8gng58u4zvsw7","amount":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aszr4WZZtoqvpWfpKQFXAT8Bx/fH234W2oIq4eQnTnbI"},"signature":"ChvfLBSaWJ/xAe5R1rTMnLZZJVxvsE/bJRlGiHkzAUg2nWXv9OVQo29APw3B9yBZAvbJ/xTWDbk3odGcwhC2jw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ckn395mpttp0vupgtratyufdaakgh8jgkmr3ym","to_address":"g1yk2x0g8fnmy85scnte9lswada8gng58u4zvsw7","amount":"10000ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aszr4WZZtoqvpWfpKQFXAT8Bx/fH234W2oIq4eQnTnbI"},"signature":"hdEwCjT6ncFUTDCZ5miM5KCjXh1Ntqjy4D1R6BjxZ29c+7hF3/bhwvpr4nueeHY1PieCV+CPHtqwv3Bhz00FPg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ckn395mpttp0vupgtratyufdaakgh8jgkmr3ym","to_address":"g1yk2x0g8fnmy85scnte9lswada8gng58u4zvsw7","amount":"10000000ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aszr4WZZtoqvpWfpKQFXAT8Bx/fH234W2oIq4eQnTnbI"},"signature":"mFPi0mWgFgThaP2o9pHfIS5JZh0+ASbibtoy6AwzyScaBIQ1BJg4JGgsi9zmu0POOyY0OON/QpqNkUeCePsH5A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tzdfqdc3jcl9laqzls5sd6ukaqsrh43decfcd8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1456","Gnoland incorporates a novel programming called gnorang","https://medium.com/@tsibadaniiie/gnoland-incorporates-a-novel-programming-language-called-gnorang-which-is-derived-from-golang-aa0ffc88b2dd"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8bQRNGT4oW2scgd3K5hb7t9O6a2rGkvylmFVZFro7ki"},"signature":"hL7FivwO9nKU29UQeHG/QvECESEjzJbAwOx5OwutWdVshG/1ShuyAQqtTsZ6wKs1dylRX+9SM6VwXbENhcbsfA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g157lqhmmefwjjgsd32z68s077nx44h0h04h6usp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1458","Golang and modern computer hardware","https://medium.com/@oleksandrcoinn/gnoland-utilizes-a-novel-language-called-gnorang-which-is-derived-from-golang-caa627c781ae"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A06PC8q/yAZ5QEFll3OOj1Uj9xYL3Eg6yQRPSoTL8KGN"},"signature":"AGKeR7iMdcvA5VXF0jZfkxBNZutnFIeuFYyssmmDKpxgilx76QbbO3gLUrqvOnRZ7s2lYCp3vuvhpwJ+voc1Og=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mzg8lp962tuygdmn8p6qk9wm3r7df3rr0ju9n6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1457","gno-land-functions-as-a-platform","https://medium.com/@brianmisterchemb/gno-land-functions-as-a-platform-designed-specifically-for-the-creation-of-smart-contracts-using-3009cf94909"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ao9d9Bbrcaz3TIkU42S020W4mYDTflXNIw4iNetMb4hf"},"signature":"GjJ48JNxAHH6Qk9WO12QrMCAJ8jGXRHMInDXGZuK5mB5dp9HLMgiwdM/GvEc/nuclbfK4G0jykXzdWrnRD1gmQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gx7evqc8p99xjmaan0xccll9kw6ug8v89dersk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1459","gno-land-functions-as-a-specialized-platform","https://medium.com/@tolchkov.danya/gno-land-functions-as-a-specialized-platform-designed-for-the-creation-of-smart-contracts-using-the-be412462af26"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Alc6FFz6lCnIEXWmAJpe+UrfsyGSkSMgk6J0HzBRSwKS"},"signature":"fRBkYFf+wxFUmosLjUyI/aB0ZUwxfJa9B3ccw5IPpdYSjHe1GmLcfeUfwKu7WmcTy+2UMZ4KnzyIwZJJ2ApXyg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g107sw3dysjd7rwacl9a6upl6gykrxg3y462awyc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1460","Gno-land-functions","https://medium.com/@samojlov.levo/gno-land-functions-as-a-platform-dedicated-to-facilitating-the-creation-of-smart-contracts-using-bc13fed40b34"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Asm91M+GHirYQFZWGQvPNdso+I9WF0qh/oOrxl69MK2u"},"signature":"y9u+h5NPktol5Zi/pcwMRBD2xIuSUuJ97Zz+NHcPjPteQOeEEKWmYFhrrPlKHvHQSEymyjH4OBlHLZy5z50yzA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1aryfmlacptetvklgsjem6cwahgsxt00je55fxn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1472","gno-land-serves","https://medium.com/@banuchyan.aramm/gno-land-serves-as-a-platform-for-writing-smart-contracts-using-gnolang-gno-an-interpreted-846d34073277"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3daS05iFU5Cq36x4PH9nfmY3DaEqosFZfsrg1UuaHMq"},"signature":"XthA5w5w4hY1f6cz4YPC52muXZ03TwA1JAj6RYVchVgG9PXDCvIakVFll2rNPihy4cg3Rg4Tivv//QQaNpBvRA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fvfd62zg0nzrnhjfjd9nhzh8sf7gfzufslf6de","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1461","gno-eliminating-the-need","https://medium.com/@leonid.kkutergin/gno-land-serves-as-a-platform-for-writing-smart-contracts-in-gnolang-gno-eliminating-the-need-1af3eb07c1f8"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq+6ZVi5Knr8N9ECPduVlORAhtjTgSumNh5jiYt1243d"},"signature":"WT/SID311RM8279fIV0j79gvm6TXJrU3QV51mQ3OLLcfJIeD5mPsVv99q1LjJ88n8bWuWHxMiuRDtCfma4Dg1w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wnt20ulmkkxf4rlq4cazhqzlykdtqzk3lrc39t","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1462","specifically-designed-for-writing-smart-contracts-in-gnolang","https://medium.com/@antonioobentoos/gno-land-functions-as-a-platform-specifically-designed-for-writing-smart-contracts-in-gnolang-gno-4d9b32438826"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ay00af6YP8jmRufaawDkhK7ar1LP9u+Pt7uBCGJxFOa6"},"signature":"WVJwNrFQqkmPsGWnAZS6cuLa3vVvUg2ZRXUzIzBL8YgPBel33wGVEQ99h0AtAG4RauS1iWr5Z7l/qEUTF0bwWQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1f5kyq7ad8c9kn0dnavghdhfhgr38uwnj7f83uq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1463","GNOT","https://medium.com/@elenakammel/gno-land-serves-as-a-platform-for-writing-smart-contracts-using-gnolang-gno-which-is-an-3c8b0595d9b6"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhNkVdJIFl2e/Lg77ADaiyukGSicRcy0doz46bBfuTn0"},"signature":"D4ULvK7alCEFKAyhcUrohlMRktJW4LPUK/Sda4gfkF1Xm7lyp50Q3zidxWkFdXB9iJj+YvEcVareE/SuPf3x3w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uczajrdlpsv47gnd5eg2zcqwjmzfl5sulm2rel","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1465","GNOT serves as a medium of exchange","https://medium.com/@annetanii178/gno-land-functions-as-a-platform-specifically-designed-for-writing-smart-contracts-using-gnolang-c5f7b4d73f06"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5Abgn0zE04npG3/ukvZpoHsSQjQaT+isMtNpL3NVmS0"},"signature":"DEKW/vL6Ud/kg2A4SwvDDjxzZK/AoF2vTcOPoJWA2doMSWSrQ2SYbPIsQypfuLbFCdBHGh+ywoNlboe481MdXw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yqg9vxgwczaxnw24zjss8l8tut7lvqvuakdthn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1466","Operated on a modified version of the Proof of Stake protocol","https://medium.com/@katepavvlleennkkoo/gno-land-functions-as-a-platform-specifically-designed-for-writing-smart-contracts-using-gnolang-4145d5e41dbd"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsypZUL80A6YxVU68/9Hu9eblRVVg8RGupSYvr8z8eRc"},"signature":"BKYhIpFU39sGhiRYOk0N0FYFiA0NwOk7ixkrKJkG+ZQ+JJwb/H3NbvioBAWtKGlDoryzleaMhEXlzM3iC/s7iA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12h9lvxrukn7nmrc004kr64uvarxpmfdx7z23xr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1464","web2 developers can seamlessly contribute","https://medium.com/@igorek0077d/gno-land-functions-as-a-platform-designed-for-writing-smart-contracts-in-gnolang-gno-which-b8737b552c10"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Azgo9vpOaM4AuCKpJYlbfENk391PYM0S16jcGlaHq8JW"},"signature":"A8+tliaTSorCQJ4AcIuitSXWNN2BaWT7lFRPHch9KyMI0/VTavAKLoOJm4ThBd2t2LfNAvAzqs6lQLZAEgeIwQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lnasp9e03muq4z8g9ntzlzjmuugrru4c6dm5ht","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1471","web2 developers can effortlessly contribute to web3 ","https://medium.com/@ilya.smirnov.ilyaa/gno-land-provides-a-platform-for-writing-smart-contracts-using-gnolang-gno-which-is-an-d2d9050f3c36"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5dAxEibC5NGG5jUS61cZ09Rdyq5MMYey5JouWO5Ac0d"},"signature":"vRqKCKreBnBkTKfBs2VCdXt8Q1XVM7TzmCbMJ57fHLss0fj5qO9vfDZCrYMUU/o1aQFzVddAdnIK0NC2innDlg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cy2cz7l0xyc5vlr59rqn25c4kqa83fjd0prehn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1467","Gno transaction token, known as GNOT","https://medium.com/@kozlov.markus/gno-land-functions-as-a-platform-dedicated-to-facilitating-the-creation-of-smart-contracts-using-aeb86d7523ac"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Azuo4WEVzGOq0nraoUELL0YKvrC25yBYS8kylbUisA8A"},"signature":"eNPsXs08ZL6PJIhPzY3PbGJrpg/o+K80w407Vxla23c1qV/35dbhuS40mlZxrBrjHt5W8rsBxiE0xnTQK9Cw7A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wrxu6p2ywzn74d0dn8u25x32jpq49zmv6g4xvy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1468","Gnolang empowers any blockchain","https://medium.com/@allavolsh190/gno-land-serves-as-a-platform-that-enables-the-creation-of-smart-contracts-in-gnolang-gno-c51e6481899f"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/hW8fiF7l2ra8irI6ki7pM1oUWl6w+uKWyEWqC6k3IF"},"signature":"10TN1dibzws4WqsWjoL4YkekoCBEN4+bfoq/6vyw9+sar3AapiYSDaIr3yyKCM6IOwYlQa6QfPKI1wSZjUARaw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xjwc6rzzj0rkgmqtn79v5ruqcw8p7tqwsw45aj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1470","gno-land","https://medium.com/@olenkaivanka190/gno-land-serves-as-a-platform-that-enables-the-creation-of-smart-contracts-using-gnolang-gno-725f4e43dd76?postPublishedType=initial"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsTbasGVpdrDQT5iefYGj0cD4/x439ZNHuOizspRzZyb"},"signature":"7kfwj/jOr6IdTSSa93wnMPxTtcuEzfpUNQu96gOrKK8qrWWnPgHaj7Xp6mOS2nsE2XItybrpS3SexAV3e0c8iw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1z67e26yg9amlx8258qzgxy3mehplxmmu370jj2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1469","Proof of Contribution","https://medium.com/@youlichkashomm/gno-land-provides-a-platform-for-writing-smart-contracts-in-gnolang-gno-utilizing-an-interpreted-df35283cb4cb"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6NtfcSQQ/rlxP5IBIJprs3MDGCFhRnhc+3KJaBzMj5o"},"signature":"tIvnz4CrEOy2JbkKpbsNf6RmaQb6ahqBBXIUPbzGWf8BAksxYJyh2LWGOuIv26RPjnhXEoXLH9tmR+M8CUrdsg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18t62346y0ue7l7k5p2h9darn9pne06ufg2uja3","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"wOP4iC1v+wgDVfeuecgLB5RLFN1S6csaVkZcYSbOpW0w5jik7dQ1+r80uVp6ccTSiBSwibHdFVd91W2yOIJYqw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g18t62346y0ue7l7k5p2h9darn9pne06ufg2uja3","to_address":"g1vjrx0lks65yefnsz4xk92vugda2z25esh8g8q9","amount":"1000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq7fI7nLgnfl5EOylG9O4MSVG4VqIZmpbNb4HoS0F2kH"},"signature":"VcOHyexPUZIjCyggFfiWaC5a0+moKkuxW7ecH+54U1FDTXI32i9DKsaDSNI6BQWhAPj1VTg4C6UAQa9h4QEheA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g18t62346y0ue7l7k5p2h9darn9pne06ufg2uja3","to_address":"g1vjrx0lks65yefnsz4xk92vugda2z25esh8g8q9","amount":"308999999ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq7fI7nLgnfl5EOylG9O4MSVG4VqIZmpbNb4HoS0F2kH"},"signature":"kWmqRndiZFkAls4NOxEB2V6ejj0SGMozdauYUcrogHAfShVQ29TRcSHeQxVkoWTQ5WBn7njk7mmPpltXAtN3Ew=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g18t62346y0ue7l7k5p2h9darn9pne06ufg2uja3","to_address":"g1vjrx0lks65yefnsz4xk92vugda2z25esh8g8q9","amount":"308999999ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq7fI7nLgnfl5EOylG9O4MSVG4VqIZmpbNb4HoS0F2kH"},"signature":"EMsSYhkmQmE4ce+9i8cjbFepa/gxvKWblv95TDUOek43C/jJZMjzBCTL6TfIWVZKs6OqQeJOj0P/an808GXoyw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g18t62346y0ue7l7k5p2h9darn9pne06ufg2uja3","to_address":"g1vjrx0lks65yefnsz4xk92vugda2z25esh8g8q9","amount":"308999999ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq7fI7nLgnfl5EOylG9O4MSVG4VqIZmpbNb4HoS0F2kH"},"signature":"6s6ENmW8uT/T5PMD1HSdQhAnXiZduw4uzHJRQdxZG605SbrZT6WGiU+U/NgRNl1lhx+7q+vbGqZ9OhjVxMew0A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g18t62346y0ue7l7k5p2h9darn9pne06ufg2uja3","to_address":"g1vjrx0lks65yefnsz4xk92vugda2z25esh8g8q9","amount":"308999996ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq7fI7nLgnfl5EOylG9O4MSVG4VqIZmpbNb4HoS0F2kH"},"signature":"gZvomVEsk+IaheD/ths1m1On3n1j/Pl1rOpzhTywBxok450PNLfLK0JPPRa8gWlXc+LLiMCaimI71sQY0jsw8A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g18t62346y0ue7l7k5p2h9darn9pne06ufg2uja3","to_address":"g1vjrx0lks65yefnsz4xk92vugda2z25esh8g8q9","amount":"308999900ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq7fI7nLgnfl5EOylG9O4MSVG4VqIZmpbNb4HoS0F2kH"},"signature":"ddwkDShlkAQhYZmr5pInfuT4RX192RmMh/20j7eikP1LsZUxa9CDudYB5u6scOKTse8BvECveSNEhJAl66mu5Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g18t62346y0ue7l7k5p2h9darn9pne06ufg2uja3","to_address":"g1vjrx0lks65yefnsz4xk92vugda2z25esh8g8q9","amount":"308999900ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq7fI7nLgnfl5EOylG9O4MSVG4VqIZmpbNb4HoS0F2kH"},"signature":"Q+IuvQ05niue+mVOCKDS0+XpeLHHey1FAxBQpsYk7BgneLamw7N7rZTK1zsm/yFSdDMHo4VoWtJzeKTtEfTwFQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g18t62346y0ue7l7k5p2h9darn9pne06ufg2uja3","to_address":"g1vjrx0lks65yefnsz4xk92vugda2z25esh8g8q9","amount":"90ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq7fI7nLgnfl5EOylG9O4MSVG4VqIZmpbNb4HoS0F2kH"},"signature":"dfD+6X30KWN+ZfzqOYa+BKCmXDjBc0D2slQF7rcZj3p+pL5cbTNedom/duwQAidh0RtuhGmJETLr12f3SiybYg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g18t62346y0ue7l7k5p2h9darn9pne06ufg2uja3","to_address":"g1vjrx0lks65yefnsz4xk92vugda2z25esh8g8q9","amount":"90ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq7fI7nLgnfl5EOylG9O4MSVG4VqIZmpbNb4HoS0F2kH"},"signature":"JTA6rA+YgWlRO2C+9jh5DIz4bCCNyhrkkt1poS97+sRzx71ZUIEwOGOanqM+Dfo/QfTMU6rab2PctY2qsB/Gmg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g18t62346y0ue7l7k5p2h9darn9pne06ufg2uja3","to_address":"g1vjrx0lks65yefnsz4xk92vugda2z25esh8g8q9","amount":"90ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq7fI7nLgnfl5EOylG9O4MSVG4VqIZmpbNb4HoS0F2kH"},"signature":"1KoXflzKvAAGzG/ZEG8KZ+JC6U5Q3Uf1LL3RDsePUwgG7lav/WJz/Mm8/ykME1bp6zsbUSKs1A0uYI7e6mAFhA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18t62346y0ue7l7k5p2h9darn9pne06ufg2uja3","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"dvxkMK9X7+Zp6p2m0nk+Vx6Pnp2lQ8E2Fk937Oaue2gGhE7FxkDfKqHZrNC5RxRDkcq8QqH9SWJ+iPVaDfjamw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g18t62346y0ue7l7k5p2h9darn9pne06ufg2uja3","to_address":"g1vjrx0lks65yefnsz4xk92vugda2z25esh8g8q9","amount":"1000000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq7fI7nLgnfl5EOylG9O4MSVG4VqIZmpbNb4HoS0F2kH"},"signature":"ysJz02nu22kdv8ixyiA2j+3sI04ix48rh4ijJr2xzblO296/5e3/olVlV6DcrTT/FdMxDjBio7sa8Lh1qDllMg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g18t62346y0ue7l7k5p2h9darn9pne06ufg2uja3","to_address":"g1vjrx0lks65yefnsz4xk92vugda2z25esh8g8q9","amount":"1000000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq7fI7nLgnfl5EOylG9O4MSVG4VqIZmpbNb4HoS0F2kH"},"signature":"fUaRrP5UbesxinTmh4vFa4KvsLfqoCufsgDNzUiQZlBmX/3BsPWP7jU59ALdLN8We/MFMAz4jJm9K4qr0gX6CQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g18t62346y0ue7l7k5p2h9darn9pne06ufg2uja3","to_address":"g1vjrx0lks65yefnsz4xk92vugda2z25esh8g8q9","amount":"309999997ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq7fI7nLgnfl5EOylG9O4MSVG4VqIZmpbNb4HoS0F2kH"},"signature":"VGs166CD4B5/ONWItltGzIhfISuYPyYjTAGYRQSdGYUHe5J9DEQT3nMCnUZvfWhZEOg7tKzf/yiqZvUzIMBkWA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18t62346y0ue7l7k5p2h9darn9pne06ufg2uja3","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"dup5BmlGd2kq6sbcaG75S4cHTPxspErLhbG8AVsEoz5WzY3rQ6Go87SxkU5JuYp76gfSYPj9hCPK9wKbBWNkbQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g14dkdcfczr4r8chgdae6rs7w9gxnukq3x506h0x","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"XE6ZUMt9/MYUUzx7aCzfLPlQ3rwNaVzFSPB4N1JEdqVYmHGh9VfxSfTj/dXKT4to2bWeuMGw52uIMzRPJIITwg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14dkdcfczr4r8chgdae6rs7w9gxnukq3x506h0x","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","panelhgdae6rs7",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1NpWFzGD3ZvGANuIPtzSmYgYE/lEh5CPb4dVsYw5brk"},"signature":"akhpwg9uIG+St4dSBSQXCVWZtHHWyo3PYxypEi1K+dJD3zNkyk4r9vLpQiMQ+BJybFLHHepa8ja1FyLSdVfLcg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14dkdcfczr4r8chgdae6rs7w9gxnukq3x506h0x","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["panelhgdae6rs7"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1NpWFzGD3ZvGANuIPtzSmYgYE/lEh5CPb4dVsYw5brk"},"signature":"QqP3ZaOX6joK7Nzi8SEerbW9MgxmzNEusQCaUp6lRSY5p675rzkqVjj8qg8n69hGNjoBKo0rUf/bL06AoQkOjg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14dkdcfczr4r8chgdae6rs7w9gxnukq3x506h0x","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1474","panelhgdae6rs7","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1NpWFzGD3ZvGANuIPtzSmYgYE/lEh5CPb4dVsYw5brk"},"signature":"YmCl7DDVnue+6dQaDdq0UrQof1yRMU1wmo91uxCRpNQXTDRjTXeEWqx6eJODspv59rfb/9qfli6FFm4VFphc4g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14dkdcfczr4r8chgdae6rs7w9gxnukq3x506h0x","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1474","1","1","g14dkdcfczr4r8chgdae6rs7w9gxnukq3x506h0x"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1NpWFzGD3ZvGANuIPtzSmYgYE/lEh5CPb4dVsYw5brk"},"signature":"qFy1tjXf4Aj9E9DSciNZeovuDgiEcGE3sy0gFTC6jwldqSYArEkaLKnk+0ALpWyJQsaZShQmTVUXITzlqp6nbQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1m606cp8rsumh275wz8s43q3apz6eprtxrrcqcw","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"stvb2KGMei4WRrlJ1YB0Rm+EibXg7PEwkg1ZGe3DL7J/7JgUdHoN4mOpaI+pxh3vXgMc0vIXQRODEpmBvxkFhA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m606cp8rsumh275wz8s43q3apz6eprtxrrcqcw","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","ideaevolveh2",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A13roA9UOhxIIZtTMzK1M6Ebi6gunRkIebKebSeV431l"},"signature":"+HcRSdmnL0C+Hd65F3U1XpS6VG4J/kXVAVRuBecqiWc+tNZc3M/JO1gwluLmczOff7rL3r8r4WfvHkv8FWoAbg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m606cp8rsumh275wz8s43q3apz6eprtxrrcqcw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["ideaevolveh2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A13roA9UOhxIIZtTMzK1M6Ebi6gunRkIebKebSeV431l"},"signature":"qxtUdD9vv5pgyneg/jD5ChY4CdxrpKHOizdWiobmRPsvBDozthX3ZG+m0xHB+DhhAxjfap7J4GL5oxSBg9fWIQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m606cp8rsumh275wz8s43q3apz6eprtxrrcqcw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1475","ideaevolveh2","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A13roA9UOhxIIZtTMzK1M6Ebi6gunRkIebKebSeV431l"},"signature":"rwyd68xd4mdCrNnG0lQ8HQWqao3mQ34wc1k/kJiOzIp5Tt22qD91oA9W3LahxCwa2tT1bo+WOXRTCBbSDu9YMw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m606cp8rsumh275wz8s43q3apz6eprtxrrcqcw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1475","1","1","g1m606cp8rsumh275wz8s43q3apz6eprtxrrcqcw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A13roA9UOhxIIZtTMzK1M6Ebi6gunRkIebKebSeV431l"},"signature":"NRKQqcwDPl0xocnqDvlcoGdI+tztjDfwGKCAoMvlxGUDjmqkbHNCY8oSvNsGE91eZeHGs3uFOCjB0ocMfJb/cQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1avug4uy33akhec2952v0kvjp88z3na3fnga2j9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"PnxXBJxz47SflKe0cJLNB2SlNhLaZk5DWkTnvq9xLE8Z9/N3xLjsextQDmoS+ha7nv9KwEgtlNwzGy/pU0GIKg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1avug4uy33akhec2952v0kvjp88z3na3fnga2j9","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","provideneutralhe",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap2uGE1zAsY1Wvxyvm08E41lwZvlJGeUgmab6j9EroJJ"},"signature":"jHDOEyGHQepyuyADz63QLNNsJreTqGtuXIXh8LPsj+Mzg/AdPWRTihaG2YIH1DAxxScaB8P7PpkumvKAuEDNtQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1avug4uy33akhec2952v0kvjp88z3na3fnga2j9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["provideneutralhe"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap2uGE1zAsY1Wvxyvm08E41lwZvlJGeUgmab6j9EroJJ"},"signature":"+yXLEG6VGLmYwq4vtqm6XOMQzJL3qx/UtmRqO9J/2dsd9DtHDDs5ds/L1AX6leVPO1PPMioZl6b/zjohgqzNnw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1avug4uy33akhec2952v0kvjp88z3na3fnga2j9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1476","provideneutralhe","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap2uGE1zAsY1Wvxyvm08E41lwZvlJGeUgmab6j9EroJJ"},"signature":"1d3plMmR+Q8ZJ2QS+EpYvDXAaNXq5ifO6ESYBBYcvMUvJFD0nL0W7A0VtcrT10ytse1oBJfUUERIZWGnx3SsMw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1avug4uy33akhec2952v0kvjp88z3na3fnga2j9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1476","1","1","g1avug4uy33akhec2952v0kvjp88z3na3fnga2j9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap2uGE1zAsY1Wvxyvm08E41lwZvlJGeUgmab6j9EroJJ"},"signature":"aBnYF9JWfgApyfgKoGfk6YN5dagjloJo5jhCCx5cpaACkpF4NnkaK+k/ggEt39qJldVpPo3d9zKOziDkpa2Zrw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1sgf89macve5zg8j36qd5e6u005yfg5rtrtv2gm","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"RAGkK+SoRNN9q5wCdfPbioDtzqKcJcQ77Sw1xYe4XQF98NR836PsH5KUqhBrGkpoqdUtViHFOyhWJdZx4VqHkQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sgf89macve5zg8j36qd5e6u005yfg5rtrtv2gm","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","beltgymzg",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8ZZMC9GHXwbYujJ7M3n2QbRBzBhAHkIi/AKVBDqPsce"},"signature":"2/oRb8xQLIFM4WDcR6ohKPnVZW5ut8Jt2xzZXy4DIulr54WnWYiN7vCEGgDBbs0RYOWe6WQcjTH46w2pZCRX8g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sgf89macve5zg8j36qd5e6u005yfg5rtrtv2gm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["beltgymzg"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8ZZMC9GHXwbYujJ7M3n2QbRBzBhAHkIi/AKVBDqPsce"},"signature":"JliX7PZ5j2w1ryyRnBSq0WRSuLQcLrDOQuKsPLTNULEfRMNeAMRmmVkqmzAf4wHHimZqkWIUYOs3EblpK3Ve2w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sgf89macve5zg8j36qd5e6u005yfg5rtrtv2gm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1477","beltgymzg","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8ZZMC9GHXwbYujJ7M3n2QbRBzBhAHkIi/AKVBDqPsce"},"signature":"PD2CHWUnfBN/lvTFRYzANwl5oee0qFhxiJ9CjpFZELVXENQusnDGTUTANoN1jMVM7Qk2UyBpg3cD+/3fMWPsuw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sgf89macve5zg8j36qd5e6u005yfg5rtrtv2gm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1477","1","1","g1sgf89macve5zg8j36qd5e6u005yfg5rtrtv2gm"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8ZZMC9GHXwbYujJ7M3n2QbRBzBhAHkIi/AKVBDqPsce"},"signature":"qAOEDWSBtqp8jflZGjiu6J+65R+vNhAp7lieFMnb7eo7zL0SkN6TxLLitW1rnEWI/4Z2pcIhxlmAPevcXedUxQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g10l4hzu8zfc5mcwn65zj94vjpfrn2t9jcq6v9ft","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"RUHEhZuVPrghqUc8wO8yshVbxvksytCzCQGp5B0SdvVgNmnpFw/U4OOI3wBssIx91YXYKwk/0UgoANzmm+fC/Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10l4hzu8zfc5mcwn65zj94vjpfrn2t9jcq6v9ft","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","vastframemc",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1WmFnCkp1VZifejtbe4OrrsZMTkwSHKygK6OmHSuUWm"},"signature":"LqLRcNqSiCdHCdeJ+CibQt7j8k1k8YGIusKQS1nGJIs0AQOhLsbF7Y7JsELfwSpY2SIE+XlxoFcMyPQCoOmCgA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10l4hzu8zfc5mcwn65zj94vjpfrn2t9jcq6v9ft","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["vastframemc"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1WmFnCkp1VZifejtbe4OrrsZMTkwSHKygK6OmHSuUWm"},"signature":"0eyFpEC3pNRrXA8hSGLaVzBvMhTH5gAXDzhKh206Nbo3eU4GENu0jB7kcioSisQbnxsw+CTh2pKj4q1Hn1Zc2A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10l4hzu8zfc5mcwn65zj94vjpfrn2t9jcq6v9ft","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1478","vastframemc","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1WmFnCkp1VZifejtbe4OrrsZMTkwSHKygK6OmHSuUWm"},"signature":"I9qlHUdCCAkOEGnG5rfQBBZvT6K0bdzRejE+p5IqZ7c6k1erBQ2//iXy+iP3Jj6R+owKsnbGXh5gnoEXjDtdAg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10l4hzu8zfc5mcwn65zj94vjpfrn2t9jcq6v9ft","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1478","1","1","g10l4hzu8zfc5mcwn65zj94vjpfrn2t9jcq6v9ft"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1WmFnCkp1VZifejtbe4OrrsZMTkwSHKygK6OmHSuUWm"},"signature":"ti/+97h/P6vVzKlKRoaQua7fa66FRr8TrkpJsExPqXZV4Is5OALwrSDEQnDsIZj9lTakN5QgqD1yUw+PNug0SQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g105a6th25ke9jnkz4yy46kzkhm069gp6ecjqq86","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"nwZU5l0pkzmsQuTBJWnhF+MslsZOKQ0cZf+hOpc0j+9/RLAOeiY/0n8W65ym67Gz4T1EaI1OR/VZMHwPd+y2cw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g105a6th25ke9jnkz4yy46kzkhm069gp6ecjqq86","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","masterfanjn",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+A8LKAdNphOyHrvSNMSaD9xo8CpbBcKeyme6ROGwSm3"},"signature":"kgBUt225fX37WhEIs1IOO1P8snVJqgF4nbKFr6oYYykja+ShR71OsSMiOTmiVR2tyCt+gwrZT3z0hsW5mEEN+Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g105a6th25ke9jnkz4yy46kzkhm069gp6ecjqq86","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["masterfanjn"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+A8LKAdNphOyHrvSNMSaD9xo8CpbBcKeyme6ROGwSm3"},"signature":"SjoLZPvy5NMIl5suuOEsvHhUH0JwhJzNAuMwZGkxLW8s8E1L9py2FLMsDlaZEzLFhgHUuRFA385ttIZE/UfnZQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g105a6th25ke9jnkz4yy46kzkhm069gp6ecjqq86","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1479","masterfanjn","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+A8LKAdNphOyHrvSNMSaD9xo8CpbBcKeyme6ROGwSm3"},"signature":"Mzgag5UYz37/Nxr86frJHkoBXy4AgkJzPggBdORUBysabTdHN/QWBBpGoA5ob2nDFQaL2xdRR6HPM4lWpxaS0A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g105a6th25ke9jnkz4yy46kzkhm069gp6ecjqq86","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1479","1","1","g105a6th25ke9jnkz4yy46kzkhm069gp6ecjqq86"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+A8LKAdNphOyHrvSNMSaD9xo8CpbBcKeyme6ROGwSm3"},"signature":"qvq0RQuuSUikV5J4dwT6Az4ujPVYnJoFiDkrNj7UvZBBsRq2wsvKzMnCdGSbGu7xzCAKzQOcO1fMcfhxbA796Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1m8twyzdc3xhg6huw57m4g5j4qjtp8su73gshlk","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"G6+mSjH7wPiwo31uVNgQhgSGFA9J/Mwm7vPfhDZmhuBqybIQm+9OsprYaJymdPJUk87W50MQgSp2IMLcob1FMQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m8twyzdc3xhg6huw57m4g5j4qjtp8su73gshlk","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","pantherridgeg6",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au2iw73sJNq1yGTwGNQF53VgH+/T8Hbonlrqj8dNglN0"},"signature":"SGWMU75zCpgUuftiPgylyQTl/yF6Z7BSLIUdsiO4FLliF14PJ6CZH2UN5jPjdKARdqBFz3HVMmae5xwSc0ndiw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m8twyzdc3xhg6huw57m4g5j4qjtp8su73gshlk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["pantherridgeg6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au2iw73sJNq1yGTwGNQF53VgH+/T8Hbonlrqj8dNglN0"},"signature":"wWx4ee4dUsHfYHT6I0xHEp7QuIIY5rJCnav5nJ50hog0DPMvzWFAZ/hQIMVuXrUue1IrR3EWGugdRV86r9PvaQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m8twyzdc3xhg6huw57m4g5j4qjtp8su73gshlk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1480","pantherridgeg6","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au2iw73sJNq1yGTwGNQF53VgH+/T8Hbonlrqj8dNglN0"},"signature":"Cc8TWZBgfVqFvBYqDiCqP6lYupbRKUe1rs/PgHdUHJ0+1xe35C0uiAm5ixiEDm4AVIkMtJC7e3ZXgp7ydPM3Hg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m8twyzdc3xhg6huw57m4g5j4qjtp8su73gshlk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1480","1","1","g1m8twyzdc3xhg6huw57m4g5j4qjtp8su73gshlk"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au2iw73sJNq1yGTwGNQF53VgH+/T8Hbonlrqj8dNglN0"},"signature":"A9ym+Y9pMxQVncTJIayq/oS6hEa6CxsJD1Ux6cSA5zk8SMyycmvPcHdQ779vuFud9/IAivP9RJsoLcIvQKLBJQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1j3drf5pl5smn2527adsa7ef94kthuyn8s4ygua","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"8S1ZLorgKI6jpwOQcrevs8BvoJbCexpyVGnL17bnlqFn5z7cfkwqMhKwISPwgFP0WYYbUeKR4BDVqV/smxQzPw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j3drf5pl5smn2527adsa7ef94kthuyn8s4ygua","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","clinicsupplyn2",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/RlHBnFd3F6EVS79r3scYBBjsP5GrPPHjLd40m+9TC0"},"signature":"N9pRn7005kLaABH5JJ3rBT2MXD/Ai7gWs42ujzWTkKxW3XY/0pwCJ3wtVY9383ZeTFwipHFIm5kZ1KWUD5QJvw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j3drf5pl5smn2527adsa7ef94kthuyn8s4ygua","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["clinicsupplyn2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/RlHBnFd3F6EVS79r3scYBBjsP5GrPPHjLd40m+9TC0"},"signature":"5SiteO6vrqDw1mq/Z1iM0CoNUdz1wmqlX9IPppAN5UE43HU1HnEpHZWIk3W6aoxmblzt9LmUhPDx5c/28HEllQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j3drf5pl5smn2527adsa7ef94kthuyn8s4ygua","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1481","clinicsupplyn2","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/RlHBnFd3F6EVS79r3scYBBjsP5GrPPHjLd40m+9TC0"},"signature":"5AFLmHmL/t+bPK1uPkt4pRbOPJaewQ4Loo3JUtNCoqgJHKXSYL1sEzq+tjz99AT+oqXsDJmD31YmYo4X4l8ztg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j3drf5pl5smn2527adsa7ef94kthuyn8s4ygua","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1481","1","1","g1j3drf5pl5smn2527adsa7ef94kthuyn8s4ygua"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/RlHBnFd3F6EVS79r3scYBBjsP5GrPPHjLd40m+9TC0"},"signature":"sfbVvQf38/x9jWQ65w8CXYfS63vrf1EoEHWbxsw0BowHJRhV2h8ENwzAOwsvBS5e6ip0kJyS9u4lO5iX+GdDXw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1xpsjt2yptmxge5jk9vef3kw95dwx3xclp9dwwk","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"4QWLOemtaIOaWiMUPYBuKgCzj43HktXIHlHVGuq8pmwfrFLyEd0khzOV53eiibH9RMOqc6mLT+/F42OoIyd8QQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xpsjt2yptmxge5jk9vef3kw95dwx3xclp9dwwk","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","ownercatalog5j",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ay60PSkswmaMKnS49+36Hsyjmqpl2mMn68urgWJm4/Rp"},"signature":"JSKpeksiRX0KvyoyuXhe1HT8/fy2UJCbGjrkfbWGAAQ/uKvrDEiPFYiQgdTHQwZKM/mnoJNJ76eyR6CLfz4IMw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xpsjt2yptmxge5jk9vef3kw95dwx3xclp9dwwk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["ownercatalog5j"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ay60PSkswmaMKnS49+36Hsyjmqpl2mMn68urgWJm4/Rp"},"signature":"nIlT76ECUWDJvbYNcIUVjbkh4Wobaz2h9CW1duglKLZxJnTFQbp7RSU1PUOAcYwFWGmre9fSm7KGfHmCDBnZig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xpsjt2yptmxge5jk9vef3kw95dwx3xclp9dwwk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1482","ownercatalog5j","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ay60PSkswmaMKnS49+36Hsyjmqpl2mMn68urgWJm4/Rp"},"signature":"Q3mTQKvWps/pGlbQ2a6Q6DB+O1FJ2P2O6/YUMExulJJyfuQK6fBv2t+6rrQ/5AgS/cotWlma8Qv+OLSu2XemkA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xpsjt2yptmxge5jk9vef3kw95dwx3xclp9dwwk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1482","1","1","g1xpsjt2yptmxge5jk9vef3kw95dwx3xclp9dwwk"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ay60PSkswmaMKnS49+36Hsyjmqpl2mMn68urgWJm4/Rp"},"signature":"AIYp+bFtNj9UUOpugWrFQBS3FkAAQwOEzszQIP4gC2tT05v6xuVUY2bf94dpT4OclGMHLiFAq3Qrah9QL2Z3AQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g14yvjrhak5q54v3hrlj0evpr85q6vgrsyrmmujd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Ib/PmRPy5vZcTlL9tspJbWbVoW+cUy90wLKgNGYYf49Ozc6uhUPb30M2hlTWss+KCIWDdzNzOn79T8/gr25CyA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14yvjrhak5q54v3hrlj0evpr85q6vgrsyrmmujd","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","clogroast4v",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah/KxfoT/cSUdgnmCW+MtS/taHdMAZBEc08pFJ6UIiZ9"},"signature":"7VLglMVRTUmMyjcoe1xqLIpqEAEGec0mymai8cMPG2kyrOK1FXS/IgDzTkTONOw5C6bWcJZaDSsO58XY2LKLVw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14yvjrhak5q54v3hrlj0evpr85q6vgrsyrmmujd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["clogroast4v"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah/KxfoT/cSUdgnmCW+MtS/taHdMAZBEc08pFJ6UIiZ9"},"signature":"pH71WedbysBZoEE9kTaMcxYRHDlfE8pX8P67VDmnWykWCA9QQRd8aqy5DpC5h6qOdV32wZIbuCDsXaVfNBw66w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14yvjrhak5q54v3hrlj0evpr85q6vgrsyrmmujd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1483","clogroast4v","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah/KxfoT/cSUdgnmCW+MtS/taHdMAZBEc08pFJ6UIiZ9"},"signature":"1sDDLO95TynU4MEuA8N8U1TDFu+gLso7asufjU/AvEJffyOaknD+dQwbQ/gyJptzGCAsYTnREcdwZCLdKc+Q7g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14yvjrhak5q54v3hrlj0evpr85q6vgrsyrmmujd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1483","1","1","g14yvjrhak5q54v3hrlj0evpr85q6vgrsyrmmujd"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah/KxfoT/cSUdgnmCW+MtS/taHdMAZBEc08pFJ6UIiZ9"},"signature":"OmYbv172phjSpk6j8imb1gxa/NARQh6V53bYsOwwHSAGAD+m0R5CErO/cR3mdlFLd5b4H2fC4ehSnOHyfFYQSQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g16j7cadg2v3x6ev8e2vj5efuhyz2fkps3v3gxdt","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"p25ZsaFlQoL0AFBA3dsxj11Y87jMsoofuRYFMB+M8N1xRcl/1A1OzYM+WPz7hv60eOrRewruoRpWHAEs04tq0g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16j7cadg2v3x6ev8e2vj5efuhyz2fkps3v3gxdt","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","tonightmesh6e",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzxBi6aC4dELUaj9Fed4cdco0ftbjebaTmGs7R5CN6RA"},"signature":"Cqkk/KTu5jqjqQgX4B9PiHlTVioM4bVqD8vUO379aTEwSUQYy7vu4PuqkK1WNxWHVd7U7UEFAZx7Wj5kNTIFyQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16j7cadg2v3x6ev8e2vj5efuhyz2fkps3v3gxdt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["tonightmesh6e"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzxBi6aC4dELUaj9Fed4cdco0ftbjebaTmGs7R5CN6RA"},"signature":"tDnJEAFmQ5V+p/aylpDR42RPhYM+SQ5AZiPDuUqR9PRV3sM9cDu0utoH+R6uyZcpxiP7k5t37TzM+2WLgfC2/A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16j7cadg2v3x6ev8e2vj5efuhyz2fkps3v3gxdt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1484","tonightmesh6e","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzxBi6aC4dELUaj9Fed4cdco0ftbjebaTmGs7R5CN6RA"},"signature":"33uFfNT0JwAprqXnGhuix/+tFPeb6qeuwtUO/ZMnwwJ/0sjNJCuXgN4vdtSMtoJ7l+/MFuNkySKJQPuWJ7T9/Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16j7cadg2v3x6ev8e2vj5efuhyz2fkps3v3gxdt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1484","1","1","g16j7cadg2v3x6ev8e2vj5efuhyz2fkps3v3gxdt"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzxBi6aC4dELUaj9Fed4cdco0ftbjebaTmGs7R5CN6RA"},"signature":"95QBJxmEzNlVqFd2VmsHt1I0jgZTFRcg4QXQ50Sjuz0zq20oqJ/xux1/HKyYdIiR9XWYSCsL4Fmjn+lKuW2iYQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1g3tqqd7r8njy2apc86vyxc0rjnykwq9q6feqjj","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"59Vc2PuMNC7TEXyAvgC4dDX14CGwvXfXXohvT94faiZ6jDTd1Amu9qGBvvD/+TRIIU/k++jd66XDS5yT1ups9w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g3tqqd7r8njy2apc86vyxc0rjnykwq9q6feqjj","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","cracksolutiony2",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuVz6UDUogv1wv56Vlf4D+E40FoSabEFm+8W1261vNnp"},"signature":"PENeWVvrPOKi3fVNXSLYU4XkhCYg1QmlqdecywAarM5VgYelVqSuxe69hG0X+aMoHuj2/iKkB98LV2iZcyuabQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g3tqqd7r8njy2apc86vyxc0rjnykwq9q6feqjj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["cracksolutiony2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuVz6UDUogv1wv56Vlf4D+E40FoSabEFm+8W1261vNnp"},"signature":"URJeOfOa2XyPBycv6NoWPjzeVJ3GM0oW8pOcnOUmJUxbWfahusgb5nGP0a2xDbUSmaAecvlFZQhBExXlqrdCBw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g3tqqd7r8njy2apc86vyxc0rjnykwq9q6feqjj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1485","cracksolutiony2","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuVz6UDUogv1wv56Vlf4D+E40FoSabEFm+8W1261vNnp"},"signature":"VaeiVW8/ajEvm2CpD0otvHff2BahFt8RAKiQaUOfr0ZNXymYPYJmZUradWkRV0+GZvMvb2qJw9rxdwQnhgXSXA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g3tqqd7r8njy2apc86vyxc0rjnykwq9q6feqjj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1485","1","1","g1g3tqqd7r8njy2apc86vyxc0rjnykwq9q6feqjj"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuVz6UDUogv1wv56Vlf4D+E40FoSabEFm+8W1261vNnp"},"signature":"TJFHFq5YGjyCVDqsD1j5F14QCcGHPs2tcKojaJiamjVd6J7QPm+fC/lkg6KNfAAzfSyYq7n0pAhSpUFGcagVZw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1yxpfwcx8aaujjfqaz2nu8hl5hzpes2xh0lw5m9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"q189Z/npj1uTAdrg9JHzfI82y2/JmD6vX9eIiM/b5AFR80Qh1E7d5OMkBQ8ttgHPhXiG8vvSFKU8ABL55fY4sw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yxpfwcx8aaujjfqaz2nu8hl5hzpes2xh0lw5m9","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","machinetypejj",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwDar5sDtOtGxKbSzM5sNQSMpDsFH2yiHuD/GD+enC0z"},"signature":"0V16HAQ9KL0TfYa5/pFeCIw6+wiN4+xTI4C4CSr6/P8P62Bmb4yv8AJy05JmrThF2H0y/ZnSw585npMDr1AVhA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yxpfwcx8aaujjfqaz2nu8hl5hzpes2xh0lw5m9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["machinetypejj"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwDar5sDtOtGxKbSzM5sNQSMpDsFH2yiHuD/GD+enC0z"},"signature":"5yCzfYt89s0D1C0h5frF3yonrh0kRbvAs5wl4ZXBhogqpgqpyk4XK9spbvaS5clsqXq3GQpNBphHB7sJfwJoWg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yxpfwcx8aaujjfqaz2nu8hl5hzpes2xh0lw5m9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1486","machinetypejj","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwDar5sDtOtGxKbSzM5sNQSMpDsFH2yiHuD/GD+enC0z"},"signature":"Sxwy6VZzbwKm6ngPoR8trblP1aWG+xnJzenh4xGUP+9hLZOct2hfJSjunFfVKPsYreVZ9SNfgcPIEIsdENTyKA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yxpfwcx8aaujjfqaz2nu8hl5hzpes2xh0lw5m9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1486","1","1","g1yxpfwcx8aaujjfqaz2nu8hl5hzpes2xh0lw5m9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwDar5sDtOtGxKbSzM5sNQSMpDsFH2yiHuD/GD+enC0z"},"signature":"8LfLIsAY100TPsyvq3nXY2a6mpL9rcXK/ExnbnqNIuMY92xWheAbKyX60uYk/cz5zymHx8C3FWN6BSroi4SXKQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1avlwa4ztfy9uxdpqdqautrn4m97067vuwmw4x6","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"aErrTOZyneOHRR9rY65WlQ6TLbku+IprMJqGN9sRajUwVnRemw0yTw+CfjaWCvzm6hSw/RRiH8fOVvr49SIiLw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1avlwa4ztfy9uxdpqdqautrn4m97067vuwmw4x6","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","someonehundredux",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/a3BF6JOjqZj/phPDzjgB+N3LgtOOiwXmWcRhRjrhDV"},"signature":"xubWDtBdnOKdpcBsVSjZhsjBt1EYC98/OJOnSkC2j7w/KKdeg0v1Dw0Lo07xTMTzxleow1QbbrDUOyd5j1s/UQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1avlwa4ztfy9uxdpqdqautrn4m97067vuwmw4x6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["someonehundredux"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/a3BF6JOjqZj/phPDzjgB+N3LgtOOiwXmWcRhRjrhDV"},"signature":"u9tAWqlgZqnkXYpjXDuE/tgyTg1i/fQvASTe6OiVD2gvQUArGfVOkZCLcbeMH+/VvPdevSC+32AbqORCaX4q0w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1avlwa4ztfy9uxdpqdqautrn4m97067vuwmw4x6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1487","someonehundredux","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/a3BF6JOjqZj/phPDzjgB+N3LgtOOiwXmWcRhRjrhDV"},"signature":"TrKXh7Agm0583OvAAP+3bXxNM8qAVHERbNbCkTe1c8oQk+hTfh2MK6EOLBvAMpx7n9YcSQCwy0jNzcWpd3duWg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1avlwa4ztfy9uxdpqdqautrn4m97067vuwmw4x6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1487","1","1","g1avlwa4ztfy9uxdpqdqautrn4m97067vuwmw4x6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/a3BF6JOjqZj/phPDzjgB+N3LgtOOiwXmWcRhRjrhDV"},"signature":"sNBGxTLA3PEukVxSOihosYkn60uAqz+RZwm9DjbwfFYBI7ilUkYL8D4cVNrPMh6yv7brM1o29YxGZnwGHv+uWg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g16q8djveej0wyrmuzmk5x5unxxte86hdzhzpmag","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"XUs3fm8YF4T5cIJXk//A0dnFswHKsl5MX7uF8SB+Rbs2lmcHdlcLeJWZ+yp2/zldF+iDNndmw3+lcnnvcRHW8Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16q8djveej0wyrmuzmk5x5unxxte86hdzhzpmag","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","absurdnervemu",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlVhMABIMHJhgmDV/4CurQ5DHEV8HeCW4f68lG7oTzcu"},"signature":"J5k5Dn+g1TrRD6dlZe84/+DpE+Q8RxkGSpsN/BKjSdxXtY6XPvkP5+wBznQgM0ij+qw67lbnkFrvFxcnr8VBZA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16q8djveej0wyrmuzmk5x5unxxte86hdzhzpmag","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["absurdnervemu"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlVhMABIMHJhgmDV/4CurQ5DHEV8HeCW4f68lG7oTzcu"},"signature":"3uL1YF8tGEdPu7vzjtlU+tnbpuLl4w3XZWhAseOBC4gD137clH+4B4lQuzhlcH96Ml0SzWrlRTfqBpXfu2McsQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16q8djveej0wyrmuzmk5x5unxxte86hdzhzpmag","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1488","absurdnervemu","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlVhMABIMHJhgmDV/4CurQ5DHEV8HeCW4f68lG7oTzcu"},"signature":"VMGTeVCIPxM1SYf0gMFnE1vJyniWRSzxpXm8H67HzgAHrIQNC9A/QKfha3ANw7cQOEttElxEI6ZreiId5Qd5SQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16q8djveej0wyrmuzmk5x5unxxte86hdzhzpmag","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1488","1","1","g16q8djveej0wyrmuzmk5x5unxxte86hdzhzpmag"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlVhMABIMHJhgmDV/4CurQ5DHEV8HeCW4f68lG7oTzcu"},"signature":"qmtTlmbKzf1PNU1OcdW9S1LBkIMQcCYdENTW2LATcvNdFrX/DsDYY7t3tBRaXZwbCaOIcMiuw2VuN5K3u5f3Og=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1yfgj0j9gw0cyraywed5ct7q3jdf327exrwdrx0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Cm8UuwzSuWfSgmkPDx2GOIcxagHuUT8q7ZCnCIWKeyVUGNwwCxz/CHYNYawkjp7fTz13dcwMULzD2tHxnyOVLQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yfgj0j9gw0cyraywed5ct7q3jdf327exrwdrx0","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","uncleportionay",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1kbFgdlK6FxnkFKTpotSDO60+T54PBTAi1rhe/uivXG"},"signature":"yQU0aw3CLNB4iFM/ABTv1smiyTLPHMhy8oGsW4RF0+g0KTR66pN+8vSk49kVwDyvAY/5GZLxkZjinYTPGbraXQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yfgj0j9gw0cyraywed5ct7q3jdf327exrwdrx0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["uncleportionay"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1kbFgdlK6FxnkFKTpotSDO60+T54PBTAi1rhe/uivXG"},"signature":"zuZIpTZ/x4A3J/g9/A54TdNDJ4t8Slj/4F3KpwLrU5xkqKcZEIXswZmKqg1N7EYVGDGarvXmWOBYl+S4z+a93A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yfgj0j9gw0cyraywed5ct7q3jdf327exrwdrx0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1489","uncleportionay","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1kbFgdlK6FxnkFKTpotSDO60+T54PBTAi1rhe/uivXG"},"signature":"GNpBs8M/pJfDeOZLBGuyhscFGyxVo4IC69n/0+jhV9Ruw0xyFAXaUtm1DilMxi3ZePJptHVQdj2/Uf5WRhsD6Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yfgj0j9gw0cyraywed5ct7q3jdf327exrwdrx0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1489","1","1","g1yfgj0j9gw0cyraywed5ct7q3jdf327exrwdrx0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1kbFgdlK6FxnkFKTpotSDO60+T54PBTAi1rhe/uivXG"},"signature":"i5CokfSSVhTtr3c/u6Yd2cYn8LCX3Az1tnnEwuCAG2RCDZ6AkfKAAYfImOH5OioAdCyeanGSKurumLtcuWZeiA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1yn4ug6aupeezmr94ux3mlrxa6683senf75n6ly","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"l3l+bKaGb7Bk43Wfgyi3mlivn5y2XoSDgL2beAuBOgFjsBwIj9J3RUXJfMCk03gYyvTO7RuR8nlO4ZmGHHyjPA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yn4ug6aupeezmr94ux3mlrxa6683senf75n6ly","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","becausepantherzm",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3D91PUc5WcKSs777ry91oz3AOgDSRQK4VO0S2etTxsa"},"signature":"3FZ2HzhrlIeHOrduaioLfFdsn+tPd4GlQSvwECXUzDV5UKDEB9hQz9269JoQ7Q9Jp20NnZBwlExJfpyEVZUe4Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yn4ug6aupeezmr94ux3mlrxa6683senf75n6ly","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["becausepantherzm"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3D91PUc5WcKSs777ry91oz3AOgDSRQK4VO0S2etTxsa"},"signature":"d4cEiuAkx7AX3amTpng4jCbVH5lOwdBSi43zRsNk3jlRRW3kGTcpOS/7nn3wx/FCLv7HfBERwGRrdFQOK7tk7w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yn4ug6aupeezmr94ux3mlrxa6683senf75n6ly","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1490","becausepantherzm","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3D91PUc5WcKSs777ry91oz3AOgDSRQK4VO0S2etTxsa"},"signature":"KFfMyz0GriugEiIETTWLLcKIRJVaov/vmSMcbREc6kBND5NQe35C64GpbgGc7n7eELwVk6F/Ts+y7vGK5gylBQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yn4ug6aupeezmr94ux3mlrxa6683senf75n6ly","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1490","1","1","g1yn4ug6aupeezmr94ux3mlrxa6683senf75n6ly"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3D91PUc5WcKSs777ry91oz3AOgDSRQK4VO0S2etTxsa"},"signature":"T+va6fVnkYH+ycQRussRXVIMmFd8yB1jSWkWzh/+w3Nbh2BYwkqZT8AxmX5SglfNr6ZPEjKdH2MQvLRhQ8PXDA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1tmlqasgprck4e6flkh6trs45lx0nlv877kv2gt","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"MUQ8LcM1GpYv5ciPnyjrZiVoD4+lCr35g0I0cXt574FqGZ0i8l1P7xzkrV0yDuSSIG+I7vkzOhIloRlSNIxQuA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tmlqasgprck4e6flkh6trs45lx0nlv877kv2gt","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","catchrisk6f",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2+WjZ03Ofm7eCwyjmCZqQCtnUy34B3jb89xKcyBY/0g"},"signature":"H3JYdZEARIqKmaPYljIg6wg1GIzZ+QGPtaL30NNV1Q1ZFYRUf1jjhaT+8t02jlf1TNxVYkb4Kvw1sPwm/ISHNA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tmlqasgprck4e6flkh6trs45lx0nlv877kv2gt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["catchrisk6f"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2+WjZ03Ofm7eCwyjmCZqQCtnUy34B3jb89xKcyBY/0g"},"signature":"d0cTQVdErJfKk5Ax3l1B2csdM/eQW48lhsj3/1BUZVsBMyj+h+/uTBKFE+bI3UPV8KNaXf3ptgMtdb/liOn+FQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tmlqasgprck4e6flkh6trs45lx0nlv877kv2gt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1491","catchrisk6f","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2+WjZ03Ofm7eCwyjmCZqQCtnUy34B3jb89xKcyBY/0g"},"signature":"GCgWgrQ8dhqWdr7EY28hh+u+vvuDwTHATopPCjeQ7pUXywL2UHcp7ae8Nce53aWA0je2VyzlZ4sdtBnoUYeSuQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tmlqasgprck4e6flkh6trs45lx0nlv877kv2gt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1491","1","1","g1tmlqasgprck4e6flkh6trs45lx0nlv877kv2gt"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2+WjZ03Ofm7eCwyjmCZqQCtnUy34B3jb89xKcyBY/0g"},"signature":"uIERYa/pjpxcvnGrENPyXL5j+Vjl7Z3vWwDBt6zwDmNclmFtUCOI+ZcKtwddmRiJsa/kTH/eWFThZ6glsLpM9w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1xw06c23frscnh85c9vpy9t9999dtz5h7ms7kt2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"7HtDaz6ExR/1SwB8WHD1N5DeYlu+IK0jgv2Vatb/p7Ux2Uk+NH37BmwAqHlyDTWIzJPZIWSDgdDR4603WsScxg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xw06c23frscnh85c9vpy9t9999dtz5h7ms7kt2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","zonepotato85",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2lxXfAojwSMhKP3mbz8JDNkgvCWdycM8VZesZxuxP7M"},"signature":"qmrI5WXAPBmRE0RZJxBm3MpmcxquIrzToFj+d3GqNU8MbT1VvGiQ862Sk9YU+zaOw5Nv7B7ZDXymDzBt1hqy9Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xw06c23frscnh85c9vpy9t9999dtz5h7ms7kt2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["zonepotato85"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2lxXfAojwSMhKP3mbz8JDNkgvCWdycM8VZesZxuxP7M"},"signature":"M72YjdDb00mzf4sqIjyzXRmKsnthd8r2Hh1LTX+rCTB8WMNUhJ3Ndn2wknsfsUqonHOvGZQdLQhIQEH1pduZJw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xw06c23frscnh85c9vpy9t9999dtz5h7ms7kt2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1492","zonepotato85","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2lxXfAojwSMhKP3mbz8JDNkgvCWdycM8VZesZxuxP7M"},"signature":"nObMVfH/6iiQwnRZg8VUmmEEcFAUpP8trgmXC16XO8w8Fa5GaL0T98eu/I8i1k0iJkLM/KafPRNcrPR9RVYEAQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xw06c23frscnh85c9vpy9t9999dtz5h7ms7kt2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1492","1","1","g1xw06c23frscnh85c9vpy9t9999dtz5h7ms7kt2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2lxXfAojwSMhKP3mbz8JDNkgvCWdycM8VZesZxuxP7M"},"signature":"DuwcM7W3tLeQlFsbabYxY69xypnzuMvcdjq1xOBfzztoIN2k+ReDt4z7aYYZNAXNhgvO4wqpzaEpN8H1wMg88g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g146k5sxduvp2qfll2x02mhy2pd67pv5u54pn8su","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"WZ3oUo0Prq9cdUzr7RZ7+Yk0drqp6XOYp2jk7M7wayhSdbwSU53GFkfQa5ZRjDmU/+qxTws0RuSmboblMQSOYg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1znn320vqx23v370tl25wx8lv9c9ew3p8uh93pd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"9EyS/LGgypLVLJxIZ9RmIr4pluoA+H8xk1uWfCbadrIcG/0udwcr4E41J6hQ3pHSWE33eG9MLXe01sIC7mMLcQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g146k5sxduvp2qfll2x02mhy2pd67pv5u54pn8su","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","tidedefyll",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AquAgDmw/EI3X8BHv+i6ld9beBE7aMplv4uevPDX5rxR"},"signature":"bfhzcdr8piXp4NekRGDI7nQRLVH81kPenc+OgCnitoNol3xN0H6St8y3xDfnZ/FoTuzdSHfhSK0kvs6FVBDicQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1znn320vqx23v370tl25wx8lv9c9ew3p8uh93pd","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","motheralmostv3",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkC/7GOlWPdusRv1ay052gXkvxAaDcXlv9HY3ndissL0"},"signature":"AlMZ9edJiLA/BucrKqijxZmjHDcNgGUYR8ZW/Ov4Kl4sSd9nuOGU/rI4G0dIxVJ6uysfN8fI98jMrCnu7A5KiA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g146k5sxduvp2qfll2x02mhy2pd67pv5u54pn8su","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["tidedefyll"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AquAgDmw/EI3X8BHv+i6ld9beBE7aMplv4uevPDX5rxR"},"signature":"to43aJ6lq6VOE0kOWwMk97zhQbs+01qMqsg1GCu4mr5w5mNjcrG2ArEK7shhlJIbb584bCCJK6kfNc6KfDq7qQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1znn320vqx23v370tl25wx8lv9c9ew3p8uh93pd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["motheralmostv3"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkC/7GOlWPdusRv1ay052gXkvxAaDcXlv9HY3ndissL0"},"signature":"CO6McuZFK+qiYcp93jzjGw+4YAkG24wuXB+KRg3KgsQzpEi1nl1uIVQFB5Yszawk81xyHu5WkaUtYZCOkMIlPg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g146k5sxduvp2qfll2x02mhy2pd67pv5u54pn8su","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1493","tidedefyll","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AquAgDmw/EI3X8BHv+i6ld9beBE7aMplv4uevPDX5rxR"},"signature":"IEJej7Kz1SyTkpBC4Ch1FQPlQ7LO+rTx1LMqlglAhtENMLdmBNkrGxS20vZtUBPHsTK5w0T/hUmuafoVC/YA0A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1znn320vqx23v370tl25wx8lv9c9ew3p8uh93pd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1494","motheralmostv3","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkC/7GOlWPdusRv1ay052gXkvxAaDcXlv9HY3ndissL0"},"signature":"VH3icfR2sxj1UlY2AeXc/aPPtXKA8Mt85lNLEEv9GthKsUb6iskniAprY+EcpqJ6NaI4Wvih2EVLXPfnclmUDA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g146k5sxduvp2qfll2x02mhy2pd67pv5u54pn8su","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1493","1","1","g146k5sxduvp2qfll2x02mhy2pd67pv5u54pn8su"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AquAgDmw/EI3X8BHv+i6ld9beBE7aMplv4uevPDX5rxR"},"signature":"H4PuYi/bjD49RltsBtQGdNwHtBS82pIBTuOT2muFlCoU9zw0bPjufr6IXjHDsT1X793ues8DY968w0FxDCcm/g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1znn320vqx23v370tl25wx8lv9c9ew3p8uh93pd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1494","1","1","g1znn320vqx23v370tl25wx8lv9c9ew3p8uh93pd"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkC/7GOlWPdusRv1ay052gXkvxAaDcXlv9HY3ndissL0"},"signature":"vOpn1pnvKuND6p0/kYxsazcnPQL01dUThNkFv25Sgp5R7fpoBnqtO8zkPLzf0rB3L/RVYTuhgbyNE2ZLKsgKRg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ppetkkgw2pdask9n5e7jtgfhvkrug7dk8rjkvk","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"XeMllT3Yg/nkJkRKZrdsbefd8Tnh7bsdOF3u5pQvZ+hHLUjobCZoh96AzdQoFpK+C3AYBVNiCMthT+LiI2OZPA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ppetkkgw2pdask9n5e7jtgfhvkrug7dk8rjkvk","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","prizebrassk9",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag7W2hqoV+TkhX+B++ic03ctgGrIQzdCjTSsGa9aSw5b"},"signature":"h+ol8dx4Lx3FXHPlWCe7FHFIH5HIGP45EIDH7jtGAg9f7WK3a8hHmlDOwfs0seUy3+zaKHoCAd5nFIdN2Ja+Ow=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ppetkkgw2pdask9n5e7jtgfhvkrug7dk8rjkvk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["prizebrassk9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag7W2hqoV+TkhX+B++ic03ctgGrIQzdCjTSsGa9aSw5b"},"signature":"PIVjQVDKJxRKDYVTejTFEZ+Bg6kgPVb9kJhOiHAwcSA0feizLNRJzia2hhkFJ/e97gWoMfahbKD96G21vfpSEQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ppetkkgw2pdask9n5e7jtgfhvkrug7dk8rjkvk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1495","prizebrassk9","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag7W2hqoV+TkhX+B++ic03ctgGrIQzdCjTSsGa9aSw5b"},"signature":"WcKmkITTKpTa4tPiARzbqzbIH/RYJtbjJtLGLj4mwzklGtHQ+mw79o+CHyQ1jbXwNWTmxBdjSdWJx8b+HLJzLQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ppetkkgw2pdask9n5e7jtgfhvkrug7dk8rjkvk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1495","1","1","g1ppetkkgw2pdask9n5e7jtgfhvkrug7dk8rjkvk"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag7W2hqoV+TkhX+B++ic03ctgGrIQzdCjTSsGa9aSw5b"},"signature":"7FbVdW1TXqbaAc5vPJCl/tto0RLufb1lhCMIHjagrnsVvf6+uN2l5T7dNO0zwfac/ueg4HK6CqgOlj4CiSVBGw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ju839lcwmu2rphye0690w47jz7w2h6z5jjldhz","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"RUIP1H0/nqM4GY0YmYztjgAR3zXTeQwNtMGGIndmWBgKtviCs8wsahIJePl/eblw+77dM0oTZZyBVmxP9FKbJg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ju839lcwmu2rphye0690w47jz7w2h6z5jjldhz","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","erodebalancehy",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApKSlB3zqbIO4P2x+5ssjDegQixdgsJeHN8X2rKvFRdJ"},"signature":"MR6ILNgb8PuBdoQuiC5Luh9j+SxtiKhwlotCEp0LJw0mB3ljtNZOmY2uW3hFqsKgHf75b8od7A/XGnArzG1QHQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ju839lcwmu2rphye0690w47jz7w2h6z5jjldhz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["erodebalancehy"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApKSlB3zqbIO4P2x+5ssjDegQixdgsJeHN8X2rKvFRdJ"},"signature":"X7UFP44Cb5A9HrfhTTbKMCtBOHgXMZWpLGrFsYSowWVZ/HRxMCiR+nLA6bPSRm0ve7GbBjXJBYFIAXwCuvkB4g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ju839lcwmu2rphye0690w47jz7w2h6z5jjldhz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1496","erodebalancehy","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApKSlB3zqbIO4P2x+5ssjDegQixdgsJeHN8X2rKvFRdJ"},"signature":"1xr0pDrHx4yPgXrQDZgA5SvevtkmwC/lrmpy6nybnwEfYuljqBfbVyhOAlGUQrIBP6SeDUeXOq1VaNr5u1krTw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ju839lcwmu2rphye0690w47jz7w2h6z5jjldhz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1496","1","1","g1ju839lcwmu2rphye0690w47jz7w2h6z5jjldhz"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApKSlB3zqbIO4P2x+5ssjDegQixdgsJeHN8X2rKvFRdJ"},"signature":"bKVxH9mD2Odcsamkawn8pv3xUT/BiaCHOOdoLoGBpzoiirudr/ZKkVEZ/ZNH4u2oK4pvRsZaLXd0GjFLE8kHNg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g17v3768n2qsctx834prl6wnw5ltk30yy624h95r","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"h8l1RRt87FTeaX6XyO3d+uFtkNDB+xuv/NXsy9JcqYcPBKrfjq8o/oAtPqy5ZhN4IQUfgFUduz6+h4fJySgpjg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17v3768n2qsctx834prl6wnw5ltk30yy624h95r","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","callvalvetx",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoMqAP+19F8W2OPLK5soocGxAzXVU3Gi9FwAR4dHvKfH"},"signature":"S2agItpeVO77767H6nHNG0uUrdX4oyWMGrTwneYqoYVOoQporccsDuWyfhZPzW5n/qpgaiU+/p/PAZgktb9W2g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17v3768n2qsctx834prl6wnw5ltk30yy624h95r","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["callvalvetx"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoMqAP+19F8W2OPLK5soocGxAzXVU3Gi9FwAR4dHvKfH"},"signature":"cSqamBsNp7mmzUrkBDF4MoGm1mpk8+FeYdcYPxg2DOJD/OVcQF0FCFIYTnpBtcCWHsi34SUwDODIUW+b2f+arg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17v3768n2qsctx834prl6wnw5ltk30yy624h95r","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1497","callvalvetx","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoMqAP+19F8W2OPLK5soocGxAzXVU3Gi9FwAR4dHvKfH"},"signature":"xF7HUIPjdUObJuYcj3QerQnVjBBzoxUDmQIFQFrRrwUFlllji3ChMMoDWCdz2q29YWz39BOSXlgK8JJDpaCLOA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17v3768n2qsctx834prl6wnw5ltk30yy624h95r","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1497","1","1","g17v3768n2qsctx834prl6wnw5ltk30yy624h95r"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoMqAP+19F8W2OPLK5soocGxAzXVU3Gi9FwAR4dHvKfH"},"signature":"bkD5Aoi2IOqwlhEO3wEImftPlun1YFVQdgXsywDhJlk0x8mK99amnp3vhp/vvbWEcG+zNvwgyckeasW/BU4i1g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1xrzczf70c6w4cuwu6glyn7z0rhu26tjhzyqcn9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"b93YwQL+HEIp1+cnSqdgo2pISmrxQkuNuDIgoIoU4lwclnZTK178HcIDXpryo0YBucMRT6zRDjY8gMZqEuHKsw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xrzczf70c6w4cuwu6glyn7z0rhu26tjhzyqcn9","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","wrestlevagueuw",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6qzcOK4mFc1t9H2WoFFe1LMUgGozVQ4GqZnnnRhJ/b6"},"signature":"t7mJvisOM29Hupxh3sk9Nmo1eRP4e+TFdRk2aKc+rrlaC41i4JywK+OXNq6EwkS/5Z0++heozx8VpBSSIpXPWA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xrzczf70c6w4cuwu6glyn7z0rhu26tjhzyqcn9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["wrestlevagueuw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6qzcOK4mFc1t9H2WoFFe1LMUgGozVQ4GqZnnnRhJ/b6"},"signature":"lY7UNg2aH1fnPkPHKsGSA+wwah/+K2rzZT3hNps3NcYdsO6efzzt6P/9fCC5NdRHxK8zrVle+Cb7ViVeYh43nA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xrzczf70c6w4cuwu6glyn7z0rhu26tjhzyqcn9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1498","wrestlevagueuw","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6qzcOK4mFc1t9H2WoFFe1LMUgGozVQ4GqZnnnRhJ/b6"},"signature":"BRFIERFoAQ7OSXDCxCnB5RirSmJzKqrJT7hSl1MdJGALY2nD68+dnXFBMLWybLuaXkdTz33dus0ggIXnG+3V9A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xrzczf70c6w4cuwu6glyn7z0rhu26tjhzyqcn9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1498","1","1","g1xrzczf70c6w4cuwu6glyn7z0rhu26tjhzyqcn9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6qzcOK4mFc1t9H2WoFFe1LMUgGozVQ4GqZnnnRhJ/b6"},"signature":"fVDIz7VLAgVMMSjs/uedsSDL4/fj4M/Sy9gh8WycvX5NKfoo0u+/vXGWPkvlb3FdmnnSpTpPKCcnVQuxhwi4Yg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1sz6et2y0pmgez2klu4lc8wqzn04fdn0wlm9mex","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"WqOl0rH2GY366GgBoDaGpH7Irb3MXY2emJJc988fJ3RZoUURkwEZMzShvloWBOiYNBt0M4+oam5QUCXqQwiDpQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sz6et2y0pmgez2klu4lc8wqzn04fdn0wlm9mex","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","youthmyth2k",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Amd+MTXQ8YIQmW8ffPOc0XPMdywI5zBobTGf6dOLOs6C"},"signature":"Kj/ktI6y70ljQp9elXc3mYIKs/DkP9pgWTV2ZKlt8IFOJUvv+Qefdm/xi9y7SLsTXhr8XwOYlLRXYDBZlU29yQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sz6et2y0pmgez2klu4lc8wqzn04fdn0wlm9mex","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["youthmyth2k"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Amd+MTXQ8YIQmW8ffPOc0XPMdywI5zBobTGf6dOLOs6C"},"signature":"5+B/rFchdzX4dHeH+sH29DS4UtM9TDUKC4UFfUZ5hdsED+Dj+KVQ5xtC2WmAT34b9LMOqXKLEU7NHo/OQjmuVg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sz6et2y0pmgez2klu4lc8wqzn04fdn0wlm9mex","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1499","youthmyth2k","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Amd+MTXQ8YIQmW8ffPOc0XPMdywI5zBobTGf6dOLOs6C"},"signature":"ii4C+WrnYbfp01GBVLfd09vNou0p1qxstZ2b3U1Gr1sfxOLEU3hZdMQLMISqxWBK6xEkgCGWwmUfilmQjA0NJw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sz6et2y0pmgez2klu4lc8wqzn04fdn0wlm9mex","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1499","1","1","g1sz6et2y0pmgez2klu4lc8wqzn04fdn0wlm9mex"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Amd+MTXQ8YIQmW8ffPOc0XPMdywI5zBobTGf6dOLOs6C"},"signature":"EAJ2NpKuUAFG0DlBqXQYYbB2y0TQB9sxeExZCn1S0MNGr9J5FIDUKQda7PuVKsbPtbQIlHPWr3PE29RhySXxUg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1hs7n2x25a24r74j00qsl9v2y4smd89aa4qwjqs","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"kftyxGtctKwXXjkaQGBHOlJG5QXxjuqP0j9qhZxwYgIswLZO8JW6t8WOedJceEP1AJ0QZIa6fSdDQcF8eyhbJw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hs7n2x25a24r74j00qsl9v2y4smd89aa4qwjqs","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","essaylock4j",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoEUN1PxCpSSyZEH9aRxEqb7u/Hbg/54IOvEylx4D9g+"},"signature":"iWPcdeegY8nY9PhjFNNrhI6cHGDGoAefaLim/hFGYX0lUeWtfq5LKRjAojm2AUQv9oaE+Bvju2TaEih46PxvMA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hs7n2x25a24r74j00qsl9v2y4smd89aa4qwjqs","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["essaylock4j"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoEUN1PxCpSSyZEH9aRxEqb7u/Hbg/54IOvEylx4D9g+"},"signature":"cz97nC/kQ+xgakAySQvz/Avl6TsrpDpGeLBuVhgjOAZ3XNclQpc40VYMDn4PqP2yZQZfynJafcoPX+FVJ2o2nw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hs7n2x25a24r74j00qsl9v2y4smd89aa4qwjqs","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1500","essaylock4j","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoEUN1PxCpSSyZEH9aRxEqb7u/Hbg/54IOvEylx4D9g+"},"signature":"9GE/M3nXYwwCUbkYifbUgJCjYm3DUsGt7SR5/oOwlvoSae4O5RxT3eyy+AK/NJ86oiSmWVSQIeY1a7zFgPtgaQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hs7n2x25a24r74j00qsl9v2y4smd89aa4qwjqs","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1500","1","1","g1hs7n2x25a24r74j00qsl9v2y4smd89aa4qwjqs"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoEUN1PxCpSSyZEH9aRxEqb7u/Hbg/54IOvEylx4D9g+"},"signature":"OpcnlZGjv7+y1n3FGORbtuv4iuu+fFpTazA0sV6bR34BPU+0mhW9sUol3Sqewr05mJt1W/2hSIu2G5TrPr1y/Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ttxcmvd5jf7m4c4mjtelq7jntg8auus2jw6rzy","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"snpbvmxryfRu89OEa9H2zi9pD10/hTZhFnkJl/ZTB+cS8OZmtF7YQwsataK98JZTXqjRHnoD+lHrsNebqTSu/g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ttxcmvd5jf7m4c4mjtelq7jntg8auus2jw6rzy","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","pupilturtlem4",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoPGDr7MOPAtuv//huzfpXlq19cpP0DdPSIBgNkmf+Bf"},"signature":"O8iXFZrEUBueoIYUU0LZQsPEB1GLZW//ji9/pj+uW09ZO+HnTfSoSqCigsSkHgCS54gxsxN9y5aLclMj1GRusA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ttxcmvd5jf7m4c4mjtelq7jntg8auus2jw6rzy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["pupilturtlem4"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoPGDr7MOPAtuv//huzfpXlq19cpP0DdPSIBgNkmf+Bf"},"signature":"tjZU2y2DcLCR0RXtbs61Tvu0rdRUU2BVk85dHz/iDjUxusZsXJJZwRMWiJ+RxVznTg0OPY2qa4zdF4gSXAj0WA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ttxcmvd5jf7m4c4mjtelq7jntg8auus2jw6rzy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1501","pupilturtlem4","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoPGDr7MOPAtuv//huzfpXlq19cpP0DdPSIBgNkmf+Bf"},"signature":"SnksxhdIjNEcju1f0Bu+oqWpp8jKrKv5nG5PUalFkJFw9Yxm4W+aRi9PYPzqUXrSi4iWQ7AYffxSiB2YNFNRmw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ttxcmvd5jf7m4c4mjtelq7jntg8auus2jw6rzy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1501","1","1","g1ttxcmvd5jf7m4c4mjtelq7jntg8auus2jw6rzy"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoPGDr7MOPAtuv//huzfpXlq19cpP0DdPSIBgNkmf+Bf"},"signature":"diHVjgK8l/Nyq1xlOrnrJbhSCMdr13McsNkCOtzsWFwNEuIC6pXFXrs0hQ1wlKMH+w1NfJL/hufKfvGDZ6fufg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g155dj7zddzxvk46t4q4yzkrcgv33grrqufrfdm8","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"G/039g2nSAnkgJtqBTT+vQZzqHMaZ723mZgv/ZxDczoB1WAgeuMF51iT81LEsvIeyokaa+stRbEMtVyH7sx5tQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g155dj7zddzxvk46t4q4yzkrcgv33grrqufrfdm8","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","unusualillness6t",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnNs/VhOs7O04vp9uO2e6xXilZwUxdWWL42YGi8vogTb"},"signature":"Is0ZW9TCGrGLmPnuU7NiyVMq67TsWAvd14Gqsbi6snx3cAxgjpoO0OZ+pccpdYfRAXtKFTNh5TgXFuRYPM/5EQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g155dj7zddzxvk46t4q4yzkrcgv33grrqufrfdm8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["unusualillness6t"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnNs/VhOs7O04vp9uO2e6xXilZwUxdWWL42YGi8vogTb"},"signature":"wm0/rtopg82JHCHTYhEzAV518aetWSwzLkDD5yth7QRsvTbaGmOa1+nwB5gFF2ykVVNDb/P9QEQ/ovb1dfc4YA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g155dj7zddzxvk46t4q4yzkrcgv33grrqufrfdm8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1502","unusualillness6t","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnNs/VhOs7O04vp9uO2e6xXilZwUxdWWL42YGi8vogTb"},"signature":"Iz5i7kAvPg7kde4omWdqMXm5xieBLUjm2LHT6ojL15xLBUXCl3O7Yz0Cep4IyjyGslmWK5O8KmjnrOMPkDMV1Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g155dj7zddzxvk46t4q4yzkrcgv33grrqufrfdm8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1502","1","1","g155dj7zddzxvk46t4q4yzkrcgv33grrqufrfdm8"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnNs/VhOs7O04vp9uO2e6xXilZwUxdWWL42YGi8vogTb"},"signature":"f1sckNbwD8Sa085f2ysNRzitJbslAAMLzeJFbitUB9wjZFoV/sPNi6rnVi8UdE64tgRFZptuQO0Fvnf/Clbfeg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1upcpfw7mwklkq3xnewym24hpx42c5tpd0vhuql","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"jMqxuvThjMLYe5Uj6lXUwodeY3W+lm1jnCiYUtgXIycJqzVdkq60GAFXF0LqBAP08k/ApEdAtzXNf/2ouY923Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1upcpfw7mwklkq3xnewym24hpx42c5tpd0vhuql","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","suspectstruggle3x",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/bl5txNdnKJ/Ri4jloKe2QruFNwAQdEG2lHWEjE/035"},"signature":"1EYkGwHxR0tX9BoQrhJyKW1lBIpCVdoBc9UnGGO2fRRwytdZugDtK14auLRmTtZytuNToohJJNSQPrr35w/ajQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1upcpfw7mwklkq3xnewym24hpx42c5tpd0vhuql","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["suspectstruggle3x"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/bl5txNdnKJ/Ri4jloKe2QruFNwAQdEG2lHWEjE/035"},"signature":"ZdPUS+B406Tm3JcEvCfdZkz4Dse57dDE+HJQjZfpXDVvpvSzdnfZHmHdZfwzd1XIbzx65V/43HGgi0631AOmlw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1upcpfw7mwklkq3xnewym24hpx42c5tpd0vhuql","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1503","suspectstruggle3x","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/bl5txNdnKJ/Ri4jloKe2QruFNwAQdEG2lHWEjE/035"},"signature":"eeBtZx0UZ+ddLUTGO3CD5754v6IE9H9JcrMY4ZxgXDNKJJUMWReOhYBp4Tp2n3So/9qeiAfiJnQ8yMkJZk9SHg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1upcpfw7mwklkq3xnewym24hpx42c5tpd0vhuql","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1503","1","1","g1upcpfw7mwklkq3xnewym24hpx42c5tpd0vhuql"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/bl5txNdnKJ/Ri4jloKe2QruFNwAQdEG2lHWEjE/035"},"signature":"7WBp9diE+B78SdEPYE3H2BHteyS72bay2URqAdGsbGM+DWAegAlEl3e50hfWfLuilz5g+LhtpcxTszX4xjNnkg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g149hm7f2wwadue5tcr3pthp0l2d4ektpkqk7unw","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"MKV9MKZfFFXlqDE8DmVhU5vYl0yWLDKQ/jg5LeYz4sM+uWWTsU4vQ9AO35fZJa5FkpunKGr+OsSVzDPylZiUQw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g149hm7f2wwadue5tcr3pthp0l2d4ektpkqk7unw","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","mediawagon5t",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah3nKL20HmWc4+THZTvzm8LHYJe4oX4FBmJ9mZlKBpZT"},"signature":"9cLoXGOjBX7shCB0AL+Zrmx6qBk0KmfMovAmVaSef2s1G7+LiMJx8xKAP2MYvdBrR6o3JTVSRhtnDo/SlqSnMg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g149hm7f2wwadue5tcr3pthp0l2d4ektpkqk7unw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["mediawagon5t"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah3nKL20HmWc4+THZTvzm8LHYJe4oX4FBmJ9mZlKBpZT"},"signature":"hG5kKTkSSgMI5s826J1t4AiRG+5byokZJGgOsQn9E0Rhp/QA/vaiRL0KYsuBe7NvFEovV9ar6KKpmDlkCR39Mg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1nszzaus6uhy7anq36twczd0977l7pwjvxv7uup","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"2DyZs/LlV1tIxc4VsLiCnuc2fiBhOqIFFpCX6zh08LhSn4OH+kJ6wKzJPGnyCTWYi1aJTSE6gSDqCYjX8CejEQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nszzaus6uhy7anq36twczd0977l7pwjvxv7uup","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","tinysustain7a",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2afTHdqHk4Yy199PdUIfOpRrnhBhjh4xCGXE994ua+N"},"signature":"JlTf80NNGPJ6rm1ynii5gv/mqjmGqd9Qm5F4w3QIFEIwmzlZXMCkhZsNwH5edB+75dnB1sy4H7mzTqJt7EMdug=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g149hm7f2wwadue5tcr3pthp0l2d4ektpkqk7unw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1504","mediawagon5t","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah3nKL20HmWc4+THZTvzm8LHYJe4oX4FBmJ9mZlKBpZT"},"signature":"pQN40YwprjCPRk2YaP+VsjTobxkA9q5OOvScX6NAYqoxkyKKOA2qL4/hJWc0ku87gF+baEJk7Qpt+m6pX3ksqg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g149hm7f2wwadue5tcr3pthp0l2d4ektpkqk7unw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1504","1","1","g149hm7f2wwadue5tcr3pthp0l2d4ektpkqk7unw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah3nKL20HmWc4+THZTvzm8LHYJe4oX4FBmJ9mZlKBpZT"},"signature":"AiF6G2JBQY1UeNTzRdyw54CZWwDV/9VzhsgelqFYn3s9Em6Nwq3YHKi8mRVSTYHPQ2CYNX5DTSO/7TPUDuuzxw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nszzaus6uhy7anq36twczd0977l7pwjvxv7uup","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["tinysustain7a"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2afTHdqHk4Yy199PdUIfOpRrnhBhjh4xCGXE994ua+N"},"signature":"iMh0R2U3pR2JJ1cZolDkxytfEQy3p52MEaf7KHzS/kdYp7HYKwlgI4yFwHIw6b5R0EBTP71URa6BoX5KMhd6NQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nszzaus6uhy7anq36twczd0977l7pwjvxv7uup","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1505","tinysustain7a","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2afTHdqHk4Yy199PdUIfOpRrnhBhjh4xCGXE994ua+N"},"signature":"tCEqPhBz6eN8YzWbprNB1ZCScnECMsOJdqJdORYrXJVZVfoMn2/2ALPbhW/9Qtsn5JgJOrL/KlN1iBxrYXFA+w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nszzaus6uhy7anq36twczd0977l7pwjvxv7uup","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1505","1","1","g1nszzaus6uhy7anq36twczd0977l7pwjvxv7uup"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2afTHdqHk4Yy199PdUIfOpRrnhBhjh4xCGXE994ua+N"},"signature":"434G20yrEknIhOlfmNVhmWmVyI1naC+TNNJY/VXT2v0i5o0e+ZXOmEHWyjaScrLjiIBObbvARrwa366fMUcPnA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12d9r9gpw79jtdc6qj25npgwwwlvfv8rseageuw","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"kvIXg2TtFphi+FXP6f+0QYk0ZCdGDba97o9tg58N8eAw/bs9kg47IVaklnfaAp7qh96/VRZxPMHQIj3mP91w7g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12d9r9gpw79jtdc6qj25npgwwwlvfv8rseageuw","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","shovecutec6",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmTQ9ePeotWLCOu0pGerB5/s+Lt+CDrCdX5q4HpAZaK1"},"signature":"6ernAHgPkJ3mhpPxQgcNTYdAglkd7vss8IhLCeqj0blhHHOuyNJoyP2waB+nmK/x2LPF5L3bXu7exH/G9IApog=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12d9r9gpw79jtdc6qj25npgwwwlvfv8rseageuw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["shovecutec6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmTQ9ePeotWLCOu0pGerB5/s+Lt+CDrCdX5q4HpAZaK1"},"signature":"rWLVl9/tojhdsSRJQ7Paj5n44TfyDlPNUH0G5OgjoRs8g1vPtyy7rl1/TLIDq7UTL/Dz2zOH6G3ZtEdDwbzY5g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12d9r9gpw79jtdc6qj25npgwwwlvfv8rseageuw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1506","shovecutec6","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmTQ9ePeotWLCOu0pGerB5/s+Lt+CDrCdX5q4HpAZaK1"},"signature":"2wUPR7lgngjvdMkqPlSARN9EIKHcEIfd5BR78i1JtpkqOyrh25/8f3BbR7B7+pfG7GjWiP/KKZdSVxeHBCG2+A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12d9r9gpw79jtdc6qj25npgwwwlvfv8rseageuw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1506","1","1","g12d9r9gpw79jtdc6qj25npgwwwlvfv8rseageuw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmTQ9ePeotWLCOu0pGerB5/s+Lt+CDrCdX5q4HpAZaK1"},"signature":"H44UYK4vxKrbT+R20K9ZaqC0gZR5Ctj5U88zCFEd9aNFjGsKrIBrm8Aynb3rWh2diME94182ljqGoD1KReEKZQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1j2g0dhvyvvuekn5emrzyh0wvj5gszx2kzjpxps","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"TVEvomZqTq3aCLPN7A0rMysoCFUh/29SnN/L7MT2bM91PMWTlRxkmJX/AcZum32/r499CU1IIlBl3Q4TxIKjDQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j2g0dhvyvvuekn5emrzyh0wvj5gszx2kzjpxps","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","clogtorchn5",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArREba/WT30c0dXRqhQF4Nb16izDclli2jN0mMFziEW5"},"signature":"fNiZ8CkwcEyjhqgJE1XVGwIvDXkf9UrVfJuITjsgtCtwU+EROd9CraKibOouQ5zMDbh/Ntybm2RKUJO3HEUQow=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j2g0dhvyvvuekn5emrzyh0wvj5gszx2kzjpxps","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["clogtorchn5"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArREba/WT30c0dXRqhQF4Nb16izDclli2jN0mMFziEW5"},"signature":"S40vTWG/96RFCKfRjBu6s5sSG39hPChaqk+90VO9uuNLBQVWKY6le6Tr/QHCcinZ/LYqITP7YGyfBQFhvbh5NQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j2g0dhvyvvuekn5emrzyh0wvj5gszx2kzjpxps","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1507","clogtorchn5","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArREba/WT30c0dXRqhQF4Nb16izDclli2jN0mMFziEW5"},"signature":"WrOvwyJAanz6h+O0THPdv9GPZ5aaikgLlC1ScHvZYp8ebgibDqAidPnjgJ2wnv4dmWJ3wJM1BIyIdTYTLD34tQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j2g0dhvyvvuekn5emrzyh0wvj5gszx2kzjpxps","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1507","1","1","g1j2g0dhvyvvuekn5emrzyh0wvj5gszx2kzjpxps"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArREba/WT30c0dXRqhQF4Nb16izDclli2jN0mMFziEW5"},"signature":"FkTOJ8uoMAazTenTK487wjndFMHL1TnbxBsdp1q1545VAiruYtzi0a2lTDCGjOVrN8yUrGHQETwWM5iVDEHBtg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1vyc0zyydky6lur7nrkywj2ge7xlw4x27uz925v","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"7fHEGE/1Za8xwui0xu/YYzvFfYCqveX3o+3+Uu8jnyxInkcpx6EdLLjJi0OkVmSZZHZK4F+eqB9idNqGQg6cBQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vyc0zyydky6lur7nrkywj2ge7xlw4x27uz925v","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","lawsuitsteplu",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvihCDxMdN5ztN2Y0ZWKXP5nKFDKnNU8ShqIhb/HzsvB"},"signature":"LNlFQJndi0AslmPNZUIQC4i6CQjBkEEbe8tqTgXQP6kHXne5ng1WV5k+QPiG6yp+wIifU5xztAqOXUoNNjw1gw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vyc0zyydky6lur7nrkywj2ge7xlw4x27uz925v","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["lawsuitsteplu"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvihCDxMdN5ztN2Y0ZWKXP5nKFDKnNU8ShqIhb/HzsvB"},"signature":"94hYNMjHM1LzYq+bYvhTt8cQHTVsMbZYVsiaMjKwKF4+xC/OkN4ixFa4wKybiy7UQbT2nXdGVlIix7BNqtE75Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vyc0zyydky6lur7nrkywj2ge7xlw4x27uz925v","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1508","lawsuitsteplu","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvihCDxMdN5ztN2Y0ZWKXP5nKFDKnNU8ShqIhb/HzsvB"},"signature":"SbSdhe7GS8109B8ZVGRpLGvdfSwyImDkY/GareroZYVX3BBls3EU05f6bM/n0WrHvr5ket7FJGpXfe4mxCE0uw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vyc0zyydky6lur7nrkywj2ge7xlw4x27uz925v","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1508","1","1","g1vyc0zyydky6lur7nrkywj2ge7xlw4x27uz925v"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvihCDxMdN5ztN2Y0ZWKXP5nKFDKnNU8ShqIhb/HzsvB"},"signature":"2YdjFxOT1Ai6acKorMXrxceUpi2yXrojynOS443mcGVcGW2OwL2JGAaKXga15OCFjteqLrui12cgmUlb13QN6w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1n9z2wkgwt5zn58cr80gtf438d68g6huwprdmyv","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"QMkxOYGy9+pHugMINcZwCViPGZnya2aqJ/8bcyKS+IdWoOhqlsjMAaO6jcU4VKMGRP1ilQCo8xrwoqSM7Veutg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1n9z2wkgwt5zn58cr80gtf438d68g6huwprdmyv","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","copypunch8c",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ay3DGFc9QVvFR4EYM6Dkhi8Mm4sh2ie9GpbkwfRWzLKS"},"signature":"fMF1zMGII+Qb7ca1bdQqvTEHO4w/8u7P6k7obAaoYAggf0W2YpF7Zv5/6LCipVZxXjo+jJ5pVMXMXGDjWx4moA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1n9z2wkgwt5zn58cr80gtf438d68g6huwprdmyv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["copypunch8c"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ay3DGFc9QVvFR4EYM6Dkhi8Mm4sh2ie9GpbkwfRWzLKS"},"signature":"0lBBFRK85chtwKYTBA4Df5jtwc6twMrgtzEEJaWM3XU1tURlbvUaHAZLHB+bvRIiwV1UnM7xeG2+/AojgMQjlg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1n9z2wkgwt5zn58cr80gtf438d68g6huwprdmyv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1509","copypunch8c","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ay3DGFc9QVvFR4EYM6Dkhi8Mm4sh2ie9GpbkwfRWzLKS"},"signature":"yiRs0s23Nvxl0+QQ8jrhJo+rQqnMNiqqPxrHjers6EspmIoDn5nrFxQkDvxoYxdQ1HmSxtt6SQplCLkD+2BhvQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1n9z2wkgwt5zn58cr80gtf438d68g6huwprdmyv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1509","1","1","g1n9z2wkgwt5zn58cr80gtf438d68g6huwprdmyv"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ay3DGFc9QVvFR4EYM6Dkhi8Mm4sh2ie9GpbkwfRWzLKS"},"signature":"LiJNPP+fE0eG5CJdwVv6dxWZpcQ9+tHAmRUwGjS7eLs6ndogJdQtXTZwdsUciD3s+hKdriBkB9BXf1woIQ3ARA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g15gk5kmmzrfja80k5xmk6yrn2p9jkzq5p8sannn","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"yyafGs6CX3i35lKOJNO0CuFMfDuLXUyp4FwcXn5i5twRYOY43+BW2JbwSFsLPiwr327j9Zuf8bWuIMu8JOFDvQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15gk5kmmzrfja80k5xmk6yrn2p9jkzq5p8sannn","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","wavegenre0k",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Alx6YWpyLfzvBQbrAixaiwpTV/IWHQ4Tg8rNj+XUByPM"},"signature":"vs6xPFleou9YQcmub8pJUWYIepiGh6rcghwFVb0ku2s2kg3zAbi3q1MwydHlbe36/IFu7ieuxSH5pZ3GhDALGQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15gk5kmmzrfja80k5xmk6yrn2p9jkzq5p8sannn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["wavegenre0k"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Alx6YWpyLfzvBQbrAixaiwpTV/IWHQ4Tg8rNj+XUByPM"},"signature":"dFBcC7Hf9SSSG5UhqZ6pgPh/NTKDeb2fME73SCGvKh00VDRRjFq7QGYAR/UcJYOOZeA1mv97LGwOKVhSvRQNWA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15gk5kmmzrfja80k5xmk6yrn2p9jkzq5p8sannn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1510","wavegenre0k","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Alx6YWpyLfzvBQbrAixaiwpTV/IWHQ4Tg8rNj+XUByPM"},"signature":"5IcScL4JjPGn79pQLddVEPYHUNkR3UEjRVrQHppq3MwCGW6QLD+B/Ty1aufl+0Legbtj0uVAi4/IgyXxOutOmg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15gk5kmmzrfja80k5xmk6yrn2p9jkzq5p8sannn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1510","1","1","g15gk5kmmzrfja80k5xmk6yrn2p9jkzq5p8sannn"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Alx6YWpyLfzvBQbrAixaiwpTV/IWHQ4Tg8rNj+XUByPM"},"signature":"OMKB35BOI4RV+/9H+CGMSNr/Xjb6PK9bGvUbfxjGMZNiq84H/Bk/gAunm/obPRLw+mEMsDnUU83CPFEOSmL6PQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1s2p6rmqcsqf48s52t3pfrvhnhyp089rg495gaf","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"mRVMHhlFfIzL+Dc9taHIIHBRLkhlKCoLJa7glN4EkRUB5IRRG/EzExuWEh9jKLqX1qs8Ellra8eMoXyOTYQMWQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s2p6rmqcsqf48s52t3pfrvhnhyp089rg495gaf","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","enterbirths5",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8HbPUSP3by3pQaMyjEBWeXEDxWikLovzayImD7E7pls"},"signature":"Ry4tgsO3BLdBAbjt6EDUDWTtondkFwwlN81eyIzwNHwzhG5icRxBDnYSTCR17dwUKmULnIHpxwhtegBiTAqVhA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s2p6rmqcsqf48s52t3pfrvhnhyp089rg495gaf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["enterbirths5"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8HbPUSP3by3pQaMyjEBWeXEDxWikLovzayImD7E7pls"},"signature":"WTjGPlY+r4poHPZpRjmAzJazaUvyxoWNRWRrq9kIKYMbY4fFiwUXrcXZkk5Eibz9wYQZgemZexkdAtDh/j/4gg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s2p6rmqcsqf48s52t3pfrvhnhyp089rg495gaf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1511","enterbirths5","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8HbPUSP3by3pQaMyjEBWeXEDxWikLovzayImD7E7pls"},"signature":"m2amxoFXYrPv4ULzHMRnNCCDOAgDHNiAYTkiTpNzl74Ww+17imdwiZiPnSmqmy+184zYb5nb7AGaWq5iww1g2g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s2p6rmqcsqf48s52t3pfrvhnhyp089rg495gaf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1511","1","1","g1s2p6rmqcsqf48s52t3pfrvhnhyp089rg495gaf"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8HbPUSP3by3pQaMyjEBWeXEDxWikLovzayImD7E7pls"},"signature":"Wm/MGYE6tu2UgoLcCV1I+1K/Dh+cLX0aunFXMBKLKiIRNd/Z93YZgUG1UdArfbX1rAd1PuoH4br8ilIwXAgNVQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1zhc5y6xv2jumgx4x9qtwxkuc5efv6z0w2mzjnc","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"VSdbFIuAfgqEPlcdSiJbYG+FwtIVe+K2FDYXdFq49JlXnrAPljQ/qqvI08bBs3hVf9qjDPrPn3k2e1xuo7uCZQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zhc5y6xv2jumgx4x9qtwxkuc5efv6z0w2mzjnc","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","widthlatermg",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsGQ8kHC4E2maoDOdDYXvXMAnczQVKGZLXsGwKVojSf4"},"signature":"oD4gEO2jusEDKMvc22dZp7RG9uaNEqFe3KxYtLAJTuI80k6Clk7+BjwglmnVGQlh1VlEAXbQQzEuqgBelVpspA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zhc5y6xv2jumgx4x9qtwxkuc5efv6z0w2mzjnc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["widthlatermg"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsGQ8kHC4E2maoDOdDYXvXMAnczQVKGZLXsGwKVojSf4"},"signature":"G5GmpKzm+q5dHBVsF9aDms8rpqC0l5TqDfmcMYWIIPdoxj9EDWDcE4Bm38sN3N8IlvX1ZAJ5/YCj1kAsJ4HCuA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zhc5y6xv2jumgx4x9qtwxkuc5efv6z0w2mzjnc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1512","widthlatermg","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsGQ8kHC4E2maoDOdDYXvXMAnczQVKGZLXsGwKVojSf4"},"signature":"pQVU8+RZfk6TwenSp8GMAVVw62haDQdMeS5mYkA3mLk26gyb3TaS9t8fMu/8KCovtHC8I7HOsw4KY7oH4Wlx7Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zhc5y6xv2jumgx4x9qtwxkuc5efv6z0w2mzjnc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1512","1","1","g1zhc5y6xv2jumgx4x9qtwxkuc5efv6z0w2mzjnc"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsGQ8kHC4E2maoDOdDYXvXMAnczQVKGZLXsGwKVojSf4"},"signature":"JnRi9ReHbjhKLLgARoeC5/NfCcG2386MskaZTI/4d80cnCIaxf1vBOoQfSMBe3dm9QDlVr+tmybGO6DPDSG2rg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1lyvesxy44kgm06cpz7yxrvm9g0clu094e6n8ez","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"r/FucBsBvBX92VO7nEe7CAiobFTHQK8B7wxIIshmSyp6lfu5f85207BwdFiAr8UcbCNGlQp16mo+d4rZhHs/nw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lyvesxy44kgm06cpz7yxrvm9g0clu094e6n8ez","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","actorfantasy6c",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApwksdTK+hQq3nVnfk+646n7vmZikH5pFgk1JVV/39RC"},"signature":"G7PzI+DoNxM8bem3DKgtbzuw1rGwplJflFxsMj/DQrRBTnl3xHDsJvi2n1p0eDbPWFQsPDnoEamwo9a3EBnnhw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lyvesxy44kgm06cpz7yxrvm9g0clu094e6n8ez","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["actorfantasy6c"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApwksdTK+hQq3nVnfk+646n7vmZikH5pFgk1JVV/39RC"},"signature":"TE1ZwJxXeU1eE19zS5N0FUZOmlZCpV2CBUFq8gtEAMcxbmG7L8J6Rii0quXKjzQQzM/HO10c6KeTlaEHqecZrw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lyvesxy44kgm06cpz7yxrvm9g0clu094e6n8ez","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1513","actorfantasy6c","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApwksdTK+hQq3nVnfk+646n7vmZikH5pFgk1JVV/39RC"},"signature":"E7gclPYnUkcOK6SSWbZw1E3fbksY2DTWFMb7BMHX6VQx09Fj8W7b+HZ6OQfzKVy1hcWXbiz0v07+tQWvlTyyBw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lyvesxy44kgm06cpz7yxrvm9g0clu094e6n8ez","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1513","1","1","g1lyvesxy44kgm06cpz7yxrvm9g0clu094e6n8ez"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApwksdTK+hQq3nVnfk+646n7vmZikH5pFgk1JVV/39RC"},"signature":"SdoCQ2qjTIstiNiLx2eG+/WDKqiF7ud7jEuYlvjZUS1MTZ6lpq9KDk5iuMZGJn5DPVo0Rd6wPi3/or7L6qm1OQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1j7epxqrqa8dg7me0wcenzw7afq7sxe30ktxq76","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"WR4S8ostBGMHLOeKUte15mf6PJ188qjG2MFYJ8efIJlEb51w1qpi4QfK33ndg8t4YYe/CZP2/4tTUsz98/bC4g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j7epxqrqa8dg7me0wcenzw7afq7sxe30ktxq76","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","armysoftme",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2q6MX/t581RbbtJMKoCDrDjPTqlNfcKLJDY+26zjqKt"},"signature":"ITCagULxElyxkAqdf24m0lPYO3SNsc5NjKNB6zqFqaYFK1fNhA8k/wfLah5fl1ctY52XuLMSi8aM8zPk5elPVw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j7epxqrqa8dg7me0wcenzw7afq7sxe30ktxq76","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["armysoftme"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2q6MX/t581RbbtJMKoCDrDjPTqlNfcKLJDY+26zjqKt"},"signature":"v+kquyEjRwALhPXtYqVTVNoVsq4eqS6oNKZvYPO0BBBkD5kOV7L1/EJ+1ocAMJkhsbGEvq7fPTeUShmNJ/rJgg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j7epxqrqa8dg7me0wcenzw7afq7sxe30ktxq76","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1514","armysoftme","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2q6MX/t581RbbtJMKoCDrDjPTqlNfcKLJDY+26zjqKt"},"signature":"1qxnTAXRx+w+2Nqtj1Dvht6c5mwG6sgPM4/LrX++KpRPsB0+UQA3WedZXvOgBfLvdxdK/XsfUpg9VAmMxX+J7A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j7epxqrqa8dg7me0wcenzw7afq7sxe30ktxq76","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1514","1","1","g1j7epxqrqa8dg7me0wcenzw7afq7sxe30ktxq76"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2q6MX/t581RbbtJMKoCDrDjPTqlNfcKLJDY+26zjqKt"},"signature":"B8jphoOsronmMGl4e309py8wzpjod6Oo6KopTyWe/bNLfQ+Bl/cyFBEvJIBbWcmMJ27k0eSnGnoMk2EqQj/WHA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1jel3wdylr0thgvrqxfh6lt9nckw2vwjgkyf93g","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"y4sJzhIhhWNyAe1tgPheK7yKxZUU1Zo0Wz1LK4FP/98rOhpkd9LJcT0/vMmuU4b38hkydE/RdFGr8qE8ZT4rEA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jel3wdylr0thgvrqxfh6lt9nckw2vwjgkyf93g","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","wrongalarmvr",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A710GfUwJSqpI9FJW/HkZbYaVKpy5ncY6zIb/UwKtekb"},"signature":"WOanE9D7TM2Iy/RCDgSQRfvq/pmocJsPkoxSmxLcP7FraDO7dQFF17T6sf9MKbEjlB+RQhyXRZGJGdid+GgBVw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jel3wdylr0thgvrqxfh6lt9nckw2vwjgkyf93g","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["wrongalarmvr"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A710GfUwJSqpI9FJW/HkZbYaVKpy5ncY6zIb/UwKtekb"},"signature":"aZJ2gOQ1jtyWkfI7A7AAEBEJowh8C0+1Emck/hcxOWAx1uTof0woNdna9iHkL+tTHLj+SfwPwXPng/3TZNzVRA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jel3wdylr0thgvrqxfh6lt9nckw2vwjgkyf93g","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1515","wrongalarmvr","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A710GfUwJSqpI9FJW/HkZbYaVKpy5ncY6zIb/UwKtekb"},"signature":"N+O7L4S5pmWIs7ncuJikhLqtCZLoTK2QRctFoIvSUjtS0EM9OCMcLYUO8wp27UVSlBh4uEbINDBFh0a0PsLBnA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g19ywk3hzkksnlf6u5jh2u6ynkg88qqz6fgvn766","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"5Wt8BPvGcCkzWV8vAe1sRgPpmXSxd/giSrBTjtntQ7gYeB8ZD6Eqql30jEOu8EGJ/ChRhFC0xf2wAv3yo5j3Vg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jel3wdylr0thgvrqxfh6lt9nckw2vwjgkyf93g","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1515","1","1","g1jel3wdylr0thgvrqxfh6lt9nckw2vwjgkyf93g"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A710GfUwJSqpI9FJW/HkZbYaVKpy5ncY6zIb/UwKtekb"},"signature":"Rqi9/DRTuhlCNsvoSZYYs0QF57Yfz8Ugz66uz6CG+dALUeiNxwZe4YkFDMy5QwRogB+tuZjqmpbwoQKeqplJ+g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19ywk3hzkksnlf6u5jh2u6ynkg88qqz6fgvn766","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","sponsorstandlf",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhSUeCTJOTQ/HZ4l90CTwh2jo9J0B2dskvddupp2O3Se"},"signature":"2JMSkoMfeqMW09Aa48UN7Pi5MnY71QjWDjtwCpz7ykNt2DNOTqdlv/qMQcGEWI6JbxHr01l6nPsZLhc5CL4xgQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19ywk3hzkksnlf6u5jh2u6ynkg88qqz6fgvn766","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["sponsorstandlf"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhSUeCTJOTQ/HZ4l90CTwh2jo9J0B2dskvddupp2O3Se"},"signature":"qJOm4ecIHsHRNLRoF6ll893GTTvegs2TsN76M0XK2Rs0ZZzL85/wDNvgzc5tZA86rgBlBj+ejxgudkW3Z0bvow=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19ywk3hzkksnlf6u5jh2u6ynkg88qqz6fgvn766","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1516","sponsorstandlf","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhSUeCTJOTQ/HZ4l90CTwh2jo9J0B2dskvddupp2O3Se"},"signature":"SCmbalcMzDwN02RiIYF1Ok2qmJEYhZ+CR42XOAjTtRUgFChNVlsACsPp5WLPOEwLyJL3dugNkRBCSR7MDwi4Ww=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19ywk3hzkksnlf6u5jh2u6ynkg88qqz6fgvn766","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1516","1","1","g19ywk3hzkksnlf6u5jh2u6ynkg88qqz6fgvn766"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhSUeCTJOTQ/HZ4l90CTwh2jo9J0B2dskvddupp2O3Se"},"signature":"jPVIIiNSDbZPHaflNshY9EAeg4latt23q4D8gDu7itIp6VfOem18V+NkLbzL1xBrBGHNyJ7uJVgQAEB0FFghaw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1zj8kzdgtte4e7z6p4qsu7hkkdx0mz029tt8fhl","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"KVRMMuvLPu7TAKpGl7hVKqVQWLAN5jgZa17B71h5VL5PhuaAGqnvAWoBHNXqq/bad9O1P741/WbsgWlOB7+OVQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zj8kzdgtte4e7z6p4qsu7hkkdx0mz029tt8fhl","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","honeyparkz6",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2VDpku69weuJ67L27UeHQKnVyUkumlrhZRf2LlBXyjv"},"signature":"2D0gge0vITLcW4QgUHC7KD+52a85LbIvoEgJBCW0muJKF+gkJ7bwu9PA7O6PVcsbbFRpp4AeZ+rFxDlcFi7prQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zj8kzdgtte4e7z6p4qsu7hkkdx0mz029tt8fhl","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["honeyparkz6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2VDpku69weuJ67L27UeHQKnVyUkumlrhZRf2LlBXyjv"},"signature":"ptGJ9eudjqklI7QkLXI4q0Ufw/+MeS5OTq22F4zDfXQwfHTA/sc228RA6iWbKS/ED0xkyfVBkxSTek0lRvkvSw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zj8kzdgtte4e7z6p4qsu7hkkdx0mz029tt8fhl","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1517","honeyparkz6","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2VDpku69weuJ67L27UeHQKnVyUkumlrhZRf2LlBXyjv"},"signature":"WYKN+zluLhPQocNCOJ/p2v9pIpktxNntUUKpByzPOzBRhHSui67ajX1+tveVOdJ+LDrg3eo6uKJusjt7zG8YnA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zj8kzdgtte4e7z6p4qsu7hkkdx0mz029tt8fhl","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1517","1","1","g1zj8kzdgtte4e7z6p4qsu7hkkdx0mz029tt8fhl"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2VDpku69weuJ67L27UeHQKnVyUkumlrhZRf2LlBXyjv"},"signature":"lqu8Aom++OcXsSsNXocB2EqP7k0NqUjGz9NY0bROpHRKhBHPMamPpvPBGlW/IyujwctkPncoHrfEe2gEluc9cg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g15xgw0xf4k2zvyzz53nrpt8n5f29s4fwx88yjy9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"3JCaKSeuIQYjDXZX7TbWvJp0uR59Z0N9sa7whVnl0cF13/AJwjOg1sxgnn9LDSEg85l59UgwjpkP0YSr8fDRbg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15xgw0xf4k2zvyzz53nrpt8n5f29s4fwx88yjy9","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","preventthiszz",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgjAWDu/JGXSzHSuublD97LXXPTRq/5d9JyWVG4DC0hJ"},"signature":"V7NFYIW1329b6YZijYQb4lMdixjVWU1f4r3yySpZHRIPQSQXzHEWUF1AZDpclJOj9AYKi8ejAZaZds9cbHraZw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15xgw0xf4k2zvyzz53nrpt8n5f29s4fwx88yjy9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["preventthiszz"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgjAWDu/JGXSzHSuublD97LXXPTRq/5d9JyWVG4DC0hJ"},"signature":"v/sUHHv3y+/IsDCfmk08klOFm4G0btkwnDNyZuOcB1Mrudd/8LIjYldgbkjBjRARaPuekuq9gP99e2ZmzsikiQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15xgw0xf4k2zvyzz53nrpt8n5f29s4fwx88yjy9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1518","preventthiszz","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgjAWDu/JGXSzHSuublD97LXXPTRq/5d9JyWVG4DC0hJ"},"signature":"mdpT/+NqzFgpF19y7c3Aqb6Qf23S/VNAAIVZZc/W7MMhK6rUIJ/IvckWFleH0uuBahBuwETuZjq9pjABCrDaDw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15xgw0xf4k2zvyzz53nrpt8n5f29s4fwx88yjy9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1518","1","1","g15xgw0xf4k2zvyzz53nrpt8n5f29s4fwx88yjy9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgjAWDu/JGXSzHSuublD97LXXPTRq/5d9JyWVG4DC0hJ"},"signature":"iKyBeA2M9fO4+JHXEsx5oHgn30sGnEleMgV+4aulZ20PnUPON6qCEiYZM7f1aE87FaNMgdFzXc9fqSv5i0UeQA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1cka6vnntj52x2hnfw4cplgw80ja0g9xnwkle4x","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"hHnZLAs/sZ4vfDC9/o3fUC05ZoXp5cFq1e1BwbNfKQF4MLywdr8khmLZhclE33zmagvYSuzRcqNj/Ad0X931Qg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cka6vnntj52x2hnfw4cplgw80ja0g9xnwkle4x","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","awaretouristx2",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A17NJonOJbna8X4f9HQKp8a1Ho3rIgxMNSPKwNG9hyur"},"signature":"QndbzZqeKkR5USdcWtZ2pJKtOrrtKfKLttOthYq4xls9n7NjKVZCvPftlTKtkEDRa7yxgSVE/QCnZOwMICe1OQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cka6vnntj52x2hnfw4cplgw80ja0g9xnwkle4x","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["awaretouristx2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A17NJonOJbna8X4f9HQKp8a1Ho3rIgxMNSPKwNG9hyur"},"signature":"SW+d1r3x81APVKJUeuncQc5owjilPZwYbFiv9qzyXHIDavcC/+G8xIjFHFBV2bN0bZBZjUmSrdnPjmrPk5Armg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cka6vnntj52x2hnfw4cplgw80ja0g9xnwkle4x","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1519","awaretouristx2","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A17NJonOJbna8X4f9HQKp8a1Ho3rIgxMNSPKwNG9hyur"},"signature":"7103bIBeko5WqhGD+T2WV7jWFmCZQrYYA+/3j9+HNdNhby+GuwTKT4Nda69hVPuWe62hyal3SXIZpyWMuRTlzQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cka6vnntj52x2hnfw4cplgw80ja0g9xnwkle4x","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1519","1","1","g1cka6vnntj52x2hnfw4cplgw80ja0g9xnwkle4x"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A17NJonOJbna8X4f9HQKp8a1Ho3rIgxMNSPKwNG9hyur"},"signature":"PmDf0PCOKN7sj/ngizOx+zZKv8pjw1V78aMHij/GGG8rjyTXhSxItCspQvWICsyiKvPB3QKL1BDw/4N6OtX4CA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1v06lee4cendn6sn3lts48uxf8hruu9dl53mard","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"zgIevWEXPhpwh9XRjaaygR55a9ARSNSgKkuEP+fxhl4Wvj6zfZuPgiH6AWstRLR94EvPF6uww2iNHuuJMAXjvg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1v06lee4cendn6sn3lts48uxf8hruu9dl53mard","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","increasedegreesn",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ar1xG+/NXKrf7uv/kqCu2Bss/JS1bZKm+AAFKIKbK3ZB"},"signature":"k0XjIm0xqpxrKXyn30UVHTfItPBYgokYb+UTJbHZy4tR/W+pBCL1CqzNXxg95E7bkhLWsmhXxGo/glSwGf1iUw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1v06lee4cendn6sn3lts48uxf8hruu9dl53mard","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["increasedegreesn"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ar1xG+/NXKrf7uv/kqCu2Bss/JS1bZKm+AAFKIKbK3ZB"},"signature":"Aqi6l93UPQwdHZ/wrYzm4J453aKkR6PjiVKHHGqdrdI+YyffuYbK/x8vlu8vWGbgbjBNVv9fylv7x1w1snuRQw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1v06lee4cendn6sn3lts48uxf8hruu9dl53mard","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1520","increasedegreesn","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ar1xG+/NXKrf7uv/kqCu2Bss/JS1bZKm+AAFKIKbK3ZB"},"signature":"wBHEo6IqKNa7oALmM+mtqQM/a5HotCbgxvSwZUIoI2ZwZoSNEkv+UcaLjub2q3QaPSiRXV+LE1/Ry0iewdCAEg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1v06lee4cendn6sn3lts48uxf8hruu9dl53mard","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1520","1","1","g1v06lee4cendn6sn3lts48uxf8hruu9dl53mard"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ar1xG+/NXKrf7uv/kqCu2Bss/JS1bZKm+AAFKIKbK3ZB"},"signature":"v7gS85sjtjk/PU6o0k0nEmuoODsFi+bAo+zPpNY1DnVqGyaPoq58vQmi8LqevUpnlOHKrlaRvGb0ikl86GQWtw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1vqc5pltwl0p5wl82drkgs0l4pzwdgjvv50djv9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"3zzMfN0wqDlwKRAJQLzNZqQhu7MhqP+c8vWNP4PBCqJuu74fMPC6LSYsQhGElt8WDakztx7rb3TsreXqyfXTaQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vqc5pltwl0p5wl82drkgs0l4pzwdgjvv50djv9","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","vanmulel8",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxrJOGha74XSA3vHDjMRjuriCoAJjB7SMV+fTyBartrE"},"signature":"+GQFvH6lo+F9M6pgiaN1JTFlaWQpUj9Goo7aWYolPIo5wPMILxoFB8/SdGwFtbvuKNKBRjHil88wpv/MZtQUaw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vqc5pltwl0p5wl82drkgs0l4pzwdgjvv50djv9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["vanmulel8"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxrJOGha74XSA3vHDjMRjuriCoAJjB7SMV+fTyBartrE"},"signature":"KhRs9XTky76OofN0WdxUhRs7LaB9Fda15dlxJuLulkZN4a689xapm/3SNc7cw+nZ/6+TAhIv3rFstn8Gt6d1tA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vqc5pltwl0p5wl82drkgs0l4pzwdgjvv50djv9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1521","vanmulel8","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxrJOGha74XSA3vHDjMRjuriCoAJjB7SMV+fTyBartrE"},"signature":"I+879pAOCJbxdGWIT4yM+b355kkRtp4c+xPi5Z1BtDtz7PeVTPXSBRtjNVIyj/R+jMD46Q/P8M/tZuGQStlTOw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vqc5pltwl0p5wl82drkgs0l4pzwdgjvv50djv9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1521","1","1","g1vqc5pltwl0p5wl82drkgs0l4pzwdgjvv50djv9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxrJOGha74XSA3vHDjMRjuriCoAJjB7SMV+fTyBartrE"},"signature":"pb6+sLU6A5lDgY8IrSSh1bRewmzXuumeiCJV/AlaHtRykrN6PT8CMewSpA9FqQrF8otS0anm3m4q84rwGKh+iQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ya40pnzacpq5e2su345zfr2s8q83sm0zgf3daw","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"xlQCJgiHm+qJtAR9iiR5jKnKlyCiw1pUxHUibjszWH0SGAOIvLjMce6jyxlJdozZzYWEa6UZqQwznFUfbDXShw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ya40pnzacpq5e2su345zfr2s8q83sm0zgf3daw","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","dolphinmedia2s",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuyvEt40ryXLksPI9WrlGYcarwIqt3jhqlUwISz3W5oC"},"signature":"sEaU8mQMY1N33cbcEGYXVBTJhQkNQqWTAVlbgWLGrvs0U8kfJ++PaNlC+myNo4fWPbGpS/FDusyBfzfv7dnlrg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ya40pnzacpq5e2su345zfr2s8q83sm0zgf3daw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["dolphinmedia2s"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuyvEt40ryXLksPI9WrlGYcarwIqt3jhqlUwISz3W5oC"},"signature":"+pxAXRcQl6SC2RKMfVqzVHfZqBbWcpAuX0NGQ3ymJTh+tGgRB1lH+kqLxEgf24crlTdRhFf72t17giikTgPPYw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ya40pnzacpq5e2su345zfr2s8q83sm0zgf3daw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1522","dolphinmedia2s","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuyvEt40ryXLksPI9WrlGYcarwIqt3jhqlUwISz3W5oC"},"signature":"4SYCXRIqjnJfr/oyuZr5lMb/8faMWt3ncf/wRQZ83iBxUEQGATnojYxY+yVwmR/wgG+D+7NW5hzryjQsTy4laA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ya40pnzacpq5e2su345zfr2s8q83sm0zgf3daw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1522","1","1","g1ya40pnzacpq5e2su345zfr2s8q83sm0zgf3daw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuyvEt40ryXLksPI9WrlGYcarwIqt3jhqlUwISz3W5oC"},"signature":"0ho0GnpPylfsjg46jH+B5Lu82DZAaYR2HhDkCsTOWgFG/fu/zBzAc+Boz3TCAOu03YF8w5mP4uf/jQ/QdneAbQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1lxlhpch8wsukc94lf8pc3lw9lyzypsruju8vre","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"pZPTH3FSLbQF3EznJKKA6Nat4BYxzJeoKZnfitutRJ10fNg6RrZvBHuriaFA61bGkVHKaU1G16CpW7flsZJsew=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lxlhpch8wsukc94lf8pc3lw9lyzypsruju8vre","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","installunfairkc",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1mLEZhMvEZ/wOov0R8jzmASt1jO9EW7n/QvxC1pSMow"},"signature":"BBEeT+h/KqRMds4gj3PyD6g3GmCCTQCqeNW2M1M1MhJgcMfpbXkdLyIY03Csp+NtbFjmo1D8CxriumInhDL1Sw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lxlhpch8wsukc94lf8pc3lw9lyzypsruju8vre","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["installunfairkc"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1mLEZhMvEZ/wOov0R8jzmASt1jO9EW7n/QvxC1pSMow"},"signature":"L0SL++lVUYzrea7F19THMF8RDXnyXuZVWUlq2XUg9+B9Bz3moPSWZK3DW6wwlDZOj6dE3eKbGH7x8I2CVwO2TQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lxlhpch8wsukc94lf8pc3lw9lyzypsruju8vre","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1523","installunfairkc","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1mLEZhMvEZ/wOov0R8jzmASt1jO9EW7n/QvxC1pSMow"},"signature":"aHtba/lzIUMMkwz+tdfwv1KSM8VEVRHhIjapbFCymYl/jQYQ3yJHAeZy+o61EobpyxUUAVLzVQmCkh7Bk8Gc1A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lxlhpch8wsukc94lf8pc3lw9lyzypsruju8vre","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1523","1","1","g1lxlhpch8wsukc94lf8pc3lw9lyzypsruju8vre"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1mLEZhMvEZ/wOov0R8jzmASt1jO9EW7n/QvxC1pSMow"},"signature":"tVub06JcpG6yynk7fDg3+D6M+wCyAr6DrFobGkimqVlD908+Ewod3Bq/i4UJt1BvdUgDtT475I8tGW8+71yKuA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1e0kutjx8y6w0u4hsgrlrgf9sf4esu9r7y8g8h7","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"fUewS51NrHPPHv5dq4D1RWfQEwBpAsICIMuXkbpyn41wEYd/TNgRa5O7VAqyFWR8cVGxbXzHuXrv7WrSgpU+lw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e0kutjx8y6w0u4hsgrlrgf9sf4esu9r7y8g8h7","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","skifile4h",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApErujtwRp9Hm5lm1GYI2fwo6HVIlGTs2rqW18353OeW"},"signature":"yBt4URXFpDngJVVZZIv51/73EmPsoizulb/3b63L7BJC5MicUn7fcTkFMa1BZuTJaXugxUoaC8nITFBskwyy8Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e0kutjx8y6w0u4hsgrlrgf9sf4esu9r7y8g8h7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["skifile4h"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApErujtwRp9Hm5lm1GYI2fwo6HVIlGTs2rqW18353OeW"},"signature":"XVRnsSCZDKmRsrJx9yUT9fVI5Z6s907wG4pyhnS6MpxuAAZOkkUhbflgN5CLvIuHxVpDUK1e1du9jxp2z9tf+w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e0kutjx8y6w0u4hsgrlrgf9sf4esu9r7y8g8h7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1524","skifile4h","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApErujtwRp9Hm5lm1GYI2fwo6HVIlGTs2rqW18353OeW"},"signature":"V1+MOcKz1toQGaOTPeEYX/Smij7RPWLQfTzl0VOrIBUl2HUSqRukkoCluZAH+YMyQdB2YF+o8aRKWnk/SjNMJA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e0kutjx8y6w0u4hsgrlrgf9sf4esu9r7y8g8h7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1524","1","1","g1e0kutjx8y6w0u4hsgrlrgf9sf4esu9r7y8g8h7"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApErujtwRp9Hm5lm1GYI2fwo6HVIlGTs2rqW18353OeW"},"signature":"0Uurm5wfQ7Q4AGDuO96PuvBuzzlKrsLb9ErXem2BedxykDLovygdXcORAItY4i3p5iBeX5V6Fc3V9J7F0GNn+Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1s54gt2e53pzpa5rx9kglws0d02lk56qeheh2sf","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"gDoTauFxBVdIRubT9SgMqS1p3Y/yOcB6Ik+nWuoA/CVQYl3L4lLcIgn2E/BrsY4oVXABXkggd+n8SfuwzEqBqw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s54gt2e53pzpa5rx9kglws0d02lk56qeheh2sf","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","luxuryarmor5r",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al3UTyRtr4UGavGshMM36Cq9FRuQe27UmJ70qUji8HZk"},"signature":"82TF8ndQ3HlaFSwpzI2DHThMDqwCZw13LOv2BFIvpysSPoAHA1cLWIfKQDsFMFbvdrT7aewjaDPszwEk1drOuw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s54gt2e53pzpa5rx9kglws0d02lk56qeheh2sf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["luxuryarmor5r"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al3UTyRtr4UGavGshMM36Cq9FRuQe27UmJ70qUji8HZk"},"signature":"AfBZuvLyd0S6haxHJaLUBCZaSMZXiI/yFjUmin2rsGxX2KaDNsaKp4J6ld9/g0lUXrLZcC+ZvwcAnx5ncJo3EA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s54gt2e53pzpa5rx9kglws0d02lk56qeheh2sf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1525","luxuryarmor5r","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al3UTyRtr4UGavGshMM36Cq9FRuQe27UmJ70qUji8HZk"},"signature":"uAWCVN2x8PrQHY+ywcHs2IDFcqnoK2CVTIxarxwtyqEVVSANnvWJcXvJG/oW13G1FmPyjWCjDL/2lKiTkBCzUg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s54gt2e53pzpa5rx9kglws0d02lk56qeheh2sf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1525","1","1","g1s54gt2e53pzpa5rx9kglws0d02lk56qeheh2sf"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al3UTyRtr4UGavGshMM36Cq9FRuQe27UmJ70qUji8HZk"},"signature":"FOrUl9QhKYj+gkmE9Y067kP82NkNDSCMsfufc3Or//o0DeCrynukDHuqo1BhQrbgfXSj9qTOJovSR3GN/j254w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1kdra9ctrumt7a08snc86hcv8tms4j5kyhl2jm7","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Ijo8dRHb6GQtrS0JIlh+9arVgaa3rWxpJzIIADOEbD5m2sOVbuw6b6BxxdF9eia93isnlzBZ4cmTLLjoTi27RA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kdra9ctrumt7a08snc86hcv8tms4j5kyhl2jm7","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","smallankle08",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7Ms2uR+0axhTvAGpxOJs7CErA/I3Z+bopRGXilWRDGu"},"signature":"s38nN/DtT1xLXM3KiQI15+B/AD/mUVHqNkhrFOW+VGE0VdumTwaE2uwsX5jfBURJPPADU+23NUI/G6DGR5puiA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kdra9ctrumt7a08snc86hcv8tms4j5kyhl2jm7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["smallankle08"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7Ms2uR+0axhTvAGpxOJs7CErA/I3Z+bopRGXilWRDGu"},"signature":"wtd5sc4bcfkpE8cS42Lt0IBrz7lWuu5A03fUZLTXTncSk1AxTOa7LWKtciKPceQFb4EvtBTORHYUFttRQNhWKg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kdra9ctrumt7a08snc86hcv8tms4j5kyhl2jm7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1526","smallankle08","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7Ms2uR+0axhTvAGpxOJs7CErA/I3Z+bopRGXilWRDGu"},"signature":"DcCdWGeTt5lFMvzzMfdXeddf3BMf4dp11qtRCPTfVG5a/vfiaUZqV1CPrpbAArMs4LR/RMstG5y6K4zEhyToBg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kdra9ctrumt7a08snc86hcv8tms4j5kyhl2jm7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1526","1","1","g1kdra9ctrumt7a08snc86hcv8tms4j5kyhl2jm7"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7Ms2uR+0axhTvAGpxOJs7CErA/I3Z+bopRGXilWRDGu"},"signature":"ZQ8RyOjnMfBfdgADVdG+2JUM6kJQlI6Ssje8/dTmhn0rTykUyiLcGQgoJjmZl4fi43M37b0dLqXf9cabR9TYKw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1vxq2x9khwaqtdmy0r8uwl8lltvlzm7uwv52kan","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"tsYHk1v3UdHqy7ygZTI/i1cgm7ElN2JZNYGk3hDj7U1RzpJbE8fF5/GZi62hu/iDO5V+E5KzcoFA3SpMFs5V1g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vxq2x9khwaqtdmy0r8uwl8lltvlzm7uwv52kan","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","jumpprovidemy",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/f/rjQNKekiA0kWZAo7U/oSaQziLmgOjIZP78c154QU"},"signature":"gso8YyxnAJ9h07znu4AWapAbL6hgA7drpgqdBq1EUoENnWjk5Bm8ep1aMrAMXXC+EKI9JgmObUJYsLQJ0ssWow=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vxq2x9khwaqtdmy0r8uwl8lltvlzm7uwv52kan","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["jumpprovidemy"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/f/rjQNKekiA0kWZAo7U/oSaQziLmgOjIZP78c154QU"},"signature":"xY4AhVDEu0GhbSwC1o39VVMntkqZr7quzP0PVTn690QO3LTT8Gb0IE0kp2j4pfQEwy4DBmEs9KRZ+SDO2bhOtg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vxq2x9khwaqtdmy0r8uwl8lltvlzm7uwv52kan","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1527","jumpprovidemy","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/f/rjQNKekiA0kWZAo7U/oSaQziLmgOjIZP78c154QU"},"signature":"l9x0A2+w9TmG0gp7VvtAvZ0ojdJxMS0W7+ZorWLYFygNVxPO39UcSbflQxmayNvGzIfdru3HM0FWEiZ0N7iO1A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vxq2x9khwaqtdmy0r8uwl8lltvlzm7uwv52kan","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1527","1","1","g1vxq2x9khwaqtdmy0r8uwl8lltvlzm7uwv52kan"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/f/rjQNKekiA0kWZAo7U/oSaQziLmgOjIZP78c154QU"},"signature":"QivkVh9dHU4PC7hFVBv9kb5dBXVCXFXyEJ7CgWQOffFXNV1MRIZOIeO9xkLHPKsx+QrW2fYb9B8rRUWU2mCIyw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1zzjylxlce33m7q0n7hu2cas8fwnt7uyj73a29n","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"/Ht7NDKX1F5zbyMVoNWwS6VO09JCiRrx6YcN7RnclAtcmUgw8ayDjlFRrdvUqYTe6b2F/JUbjBvHcR9JzWkxDA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zzjylxlce33m7q0n7hu2cas8fwnt7uyj73a29n","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","isolatebrokenq0",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwjUfYtWD1VNYPfiW7jMtwB3szK2ABtA5nOlJoUT3pTS"},"signature":"+fl8Ch+S1XM0DTGJJ6pp+mKnpfVdDzWbyOxRSrJWEklAFyd8bubEd1AophCNwBv484gi2qPpn5XQxQ+J8Lxd2g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zzjylxlce33m7q0n7hu2cas8fwnt7uyj73a29n","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["isolatebrokenq0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwjUfYtWD1VNYPfiW7jMtwB3szK2ABtA5nOlJoUT3pTS"},"signature":"W+mtqzicstOQOYLvOC3y4puYVISYZ3mXKS2dlBDom2Fh4Yhfw09pQa+DAp2PSchnDPKcxvvj8GtZnTBx5epY4g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zzjylxlce33m7q0n7hu2cas8fwnt7uyj73a29n","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1528","isolatebrokenq0","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwjUfYtWD1VNYPfiW7jMtwB3szK2ABtA5nOlJoUT3pTS"},"signature":"faUVIORgeUZAx80uqeWsaGux89vXjYCgFDQPqMXfBeAqVjB0NMcWZayiQU3c/tPjAyPZaekwoAhGOclUHk7SAQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zzjylxlce33m7q0n7hu2cas8fwnt7uyj73a29n","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1528","1","1","g1zzjylxlce33m7q0n7hu2cas8fwnt7uyj73a29n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwjUfYtWD1VNYPfiW7jMtwB3szK2ABtA5nOlJoUT3pTS"},"signature":"D9TC2RDjjQQ6IcCH0lpErwsohKw0EQM3CdrH8XmDMb8RyjokaMTRy2gbm3aDkBcjnQvY/zZr8+6F1gUx8SM1gQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1kdj3g5q6r7gx6cpexk0849eldkh2ws3w5h5dh8","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"sxdkGdhg5u15KwICLjH2ljgYmNGJD3GCey2PBCwmDDBYCG8oJeTHxI6+R4/G4/XuGBPraUQSk87RGhZIkDTjFg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kdj3g5q6r7gx6cpexk0849eldkh2ws3w5h5dh8","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","reduceunfairx6",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1NrVUbY8aggAYtJKW0GZMgLxsFNUhszevsZ37x2N9T9"},"signature":"0snZKr8nxYaB5kh1htW+IsKscnVG2TT/IA8NkpkJmeRKEg3g/Oe2NVLeBNcm6jdotAYBcPlvK2NcJV/0sDAxTQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kdj3g5q6r7gx6cpexk0849eldkh2ws3w5h5dh8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["reduceunfairx6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1NrVUbY8aggAYtJKW0GZMgLxsFNUhszevsZ37x2N9T9"},"signature":"N5GYycvP/n/WEetORfTacaSl8MDz0YDbce8AujMqHKQACqapPvlXy517JN/duNwDeuYAVukB14AV/PxUPAgQjw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kdj3g5q6r7gx6cpexk0849eldkh2ws3w5h5dh8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1529","reduceunfairx6","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1NrVUbY8aggAYtJKW0GZMgLxsFNUhszevsZ37x2N9T9"},"signature":"Mie1WZnGMCZhnCGUaElvAbZgGxV9uvSp7ubELCAAZ11S/xSaO7CxIB+NT4Hflyhdew3sjJeFOjZRF5CfE6lsmQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ytdu33fn0pawu5p6z0eg4xkcnc6xwakhmautzg","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"MTT69jPKLPxp3KSZlUX0uxKGf59vj1+hJCvvsBUtr1wT6UcDE7eoKDIB6ogSkoaErA5769SeZYiCkhNnmuYhxw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kdj3g5q6r7gx6cpexk0849eldkh2ws3w5h5dh8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1529","1","1","g1kdj3g5q6r7gx6cpexk0849eldkh2ws3w5h5dh8"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1NrVUbY8aggAYtJKW0GZMgLxsFNUhszevsZ37x2N9T9"},"signature":"xPjBvF0GH4kT3gCX0iMHKETI7drhrcwwEti5lVN7MBIarnRijtY4bCZtTs9lKtfHWVHVBT7X42Ah9IeefbxpoA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ytdu33fn0pawu5p6z0eg4xkcnc6xwakhmautzg","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","gladgorilla5p",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyKNHDIcfnXYZ/9Q//DJ2GCLtcbiUbNOxXr5BeqON1Fl"},"signature":"9QbqcY0hB5fTjopc88NA+YII9FtqOE8Q+z24hVJzU4sfMzVKf/f2G0MQatVXbv8sILML9DgpSV2yTDvLcQuYUw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ytdu33fn0pawu5p6z0eg4xkcnc6xwakhmautzg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["gladgorilla5p"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyKNHDIcfnXYZ/9Q//DJ2GCLtcbiUbNOxXr5BeqON1Fl"},"signature":"pxwDyu1vHUx0rIWn/ueeOKgXWMVGpRuCPXvLbYU5Pm5KIKK8M0bdoxvlmAYfhRTPUXwXNHI9aERCHZHmafteRA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ytdu33fn0pawu5p6z0eg4xkcnc6xwakhmautzg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1530","gladgorilla5p","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyKNHDIcfnXYZ/9Q//DJ2GCLtcbiUbNOxXr5BeqON1Fl"},"signature":"8JIXDHKDFcM6+Z8ph5WEIb0krCrI5Ay5RptsJHDIcqALJ1fpY9X5R4TWWwRKQU5Mp8owzVuq41PI0I9MxZWfDQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ytdu33fn0pawu5p6z0eg4xkcnc6xwakhmautzg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1530","1","1","g1ytdu33fn0pawu5p6z0eg4xkcnc6xwakhmautzg"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyKNHDIcfnXYZ/9Q//DJ2GCLtcbiUbNOxXr5BeqON1Fl"},"signature":"a31SiBvRIJKDcEkqrWCzLTtuzwl3WvqXFpqYWY5CuNljrW+zbeq95vhs7m6g8P43D7e3EyeYCv6+yBb6sAej+Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1x2l62hpsks6k8lpt3vja3y46ck86wp03uxjkuq","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"I/vR13e8b4On0Gkimvgmq1hBpG6+N9vZGQF4tIBIfQlw2LtCVw1Yvhbh7lwN7yVcaODu510unVd9zEftoFziDw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2l62hpsks6k8lpt3vja3y46ck86wp03uxjkuq","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","categoryglobelp",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6yF8TpQHBFkpSHyuW0IvYOnZBMov5JwqKcSLjr1kp9n"},"signature":"n8L2jKzM5mcs7a43wmZgkR84p5SO6FwOAd33ynyry50Sq+Zk3sVKvisXZPrrGdyyGD0EpvF7J7ARNsT2du+JTQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2l62hpsks6k8lpt3vja3y46ck86wp03uxjkuq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["categoryglobelp"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6yF8TpQHBFkpSHyuW0IvYOnZBMov5JwqKcSLjr1kp9n"},"signature":"FjbbfEf0Qns30qDXMwAv8DRfX+11cBYj/0IhEmgd1K5tbN2BmYbrJON+CFNl9ohGgNUQAwi8ms3fmpum6kJ5wQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2l62hpsks6k8lpt3vja3y46ck86wp03uxjkuq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1531","categoryglobelp","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6yF8TpQHBFkpSHyuW0IvYOnZBMov5JwqKcSLjr1kp9n"},"signature":"mKiZr9j7uFS2sHCs6fst9ZF3nHZcDsHQBmIDYG4S9xMtkoj1ydq9ZZO1phfW/yzOy8N2c4RADYPbcrrokirOjA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2l62hpsks6k8lpt3vja3y46ck86wp03uxjkuq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1531","1","1","g1x2l62hpsks6k8lpt3vja3y46ck86wp03uxjkuq"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6yF8TpQHBFkpSHyuW0IvYOnZBMov5JwqKcSLjr1kp9n"},"signature":"13rvRgqDrxT4Jz0THdrz0YtRtqIQRhdUX1Jz0X4o3P9fAGtCjyRMuRJ8z+rJrgCvZdtY0dS7SvR1rmR2inZBHA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g153jzd4rx8f4nypghr3vmqmcra0llxxjpp7ehhc","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"FaAJw5mOYRNRwufWR9zbDdHXRKfuN80mGI3e38gr4xMkpLVXKmYMnB0OmYBu1TILHN7KGsJ5A8zh0z6dLxCZuw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g153jzd4rx8f4nypghr3vmqmcra0llxxjpp7ehhc","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","amonggorillapg",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkEGvnRacNutSiGd9fZgPXg4SIHpSW3Z5UhVJQ8SmUvN"},"signature":"qXmd4Y0p8UuLR0dNFTYcP1AGjGOc2Q9O+a4BXAx60SVn/oXyEZ43478z2ss/EQ/xM7opOUQWVdQf4Sf9WNPB9Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g153jzd4rx8f4nypghr3vmqmcra0llxxjpp7ehhc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["amonggorillapg"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkEGvnRacNutSiGd9fZgPXg4SIHpSW3Z5UhVJQ8SmUvN"},"signature":"HWGw3iTHBqQhO1ote8wPZdF45kscPo9uVxU89mEG3/I7T/ISo7drWNF7Pn4ag1Dk6CLcrlLA71Qd4LhxTKJzIg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g153jzd4rx8f4nypghr3vmqmcra0llxxjpp7ehhc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1532","amonggorillapg","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkEGvnRacNutSiGd9fZgPXg4SIHpSW3Z5UhVJQ8SmUvN"},"signature":"MMNunP2vTJ/FW0YWxrkWM7tGrlZ+aWbSeNaqUgxtTbxoeLEbx40Ldod+6wrBjL1XlzWdcV3BbvuKX8EdxjwPGA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g153jzd4rx8f4nypghr3vmqmcra0llxxjpp7ehhc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1532","1","1","g153jzd4rx8f4nypghr3vmqmcra0llxxjpp7ehhc"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkEGvnRacNutSiGd9fZgPXg4SIHpSW3Z5UhVJQ8SmUvN"},"signature":"RFUvFZZWupSO/YPNMqRMdmO4AAhRsDy86pzkRc5g0WMCMXIIt5aT2CIjHF5hUULs5jaa/r5V7i52wJcpdv5oyQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g17pef0fuzhujy9ktfampytxqeh5vuw3zvemsytr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"kgowVI2+3e8R7SbBe1NQ6ohPVsBgw/RgEsQOGGH9pg94GGfsgfqfQ0Zrn025EHT7YVZET3KQ9ydbgu4xVplc+g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17pef0fuzhujy9ktfampytxqeh5vuw3zvemsytr","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","travelanxietyy9",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3OMymgrCfDTyLOZS66TnSypwY8twMGAM2VF95ok5BLH"},"signature":"0/63g+PdmSfCyyEoPIuKiQawM12muBuYGOScuGfct/tvgcm9UfNucryZ60DKzUzWgLijkJo69xSTzGYHgCrU6g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17pef0fuzhujy9ktfampytxqeh5vuw3zvemsytr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["travelanxietyy9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3OMymgrCfDTyLOZS66TnSypwY8twMGAM2VF95ok5BLH"},"signature":"xD2epSHms2Smjptj9zKNkUOE/+/tHpDXqtV5gwLjN6l/sjyZQfqrIvNsxa/GjnLv6ZGGZ4zCLPa0Bnr1a6gwmQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17pef0fuzhujy9ktfampytxqeh5vuw3zvemsytr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1533","travelanxietyy9","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3OMymgrCfDTyLOZS66TnSypwY8twMGAM2VF95ok5BLH"},"signature":"V10ywk7mU1xYQqmePCgtZCEhaTCa+hocqdysj7xs0tJ83bjyChHKvjNFoT/YSeX0Ppi+3weFGKAjStd0UJ9xdg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17pef0fuzhujy9ktfampytxqeh5vuw3zvemsytr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1533","1","1","g17pef0fuzhujy9ktfampytxqeh5vuw3zvemsytr"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3OMymgrCfDTyLOZS66TnSypwY8twMGAM2VF95ok5BLH"},"signature":"zuYtUfC9pcK+HJ+YT8DCqsirZJLbOutSFCgjVngs6J9dg4eXKAjG7jUAe7c5vwYXRVS8jKfCU8VHxIkw3zRnLA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18r9vex8flwt8h522a4gz5wd24xv4g4c8sd9gaw","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"TjQ9U1qWXEZIJEneUG7uwxdiUr6HCUYbZ0odrBqRbZsLwpww4VS1MjzJdAKE1t/9HZA3AhMGfk+b3qWxYFyltA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18r9vex8flwt8h522a4gz5wd24xv4g4c8sd9gaw","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","braveweird52",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmqsDPj3g5Q7i3h69DcIg7dIta+htXWCFoZWWRMxFE/t"},"signature":"7SLESzXHVNyzFXWTbVdV+OvwD026Vpf49C/bJCIZZmo3Dvp++wWo3Pv7ygZH/O8wlHLQcDxKYCnRY7FbSBHvxQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18r9vex8flwt8h522a4gz5wd24xv4g4c8sd9gaw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["braveweird52"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmqsDPj3g5Q7i3h69DcIg7dIta+htXWCFoZWWRMxFE/t"},"signature":"CD4TMSwTQs5gz/dLWqWioW3++bNUlk9VZEMt5l2dzgFpypVd3QtchGhKp0nuUcvmiXXONgXM4wd3k4P5L9Z+Yw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18r9vex8flwt8h522a4gz5wd24xv4g4c8sd9gaw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1534","braveweird52","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmqsDPj3g5Q7i3h69DcIg7dIta+htXWCFoZWWRMxFE/t"},"signature":"kliXEu1tfU5BSav2nY6hGwU6IXT7oQ/Wez15nxbna9glNE1Ubtoae5DYtpaU27ZGX37ouUT3YWOgyyK/ouF7iQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18r9vex8flwt8h522a4gz5wd24xv4g4c8sd9gaw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1534","1","1","g18r9vex8flwt8h522a4gz5wd24xv4g4c8sd9gaw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmqsDPj3g5Q7i3h69DcIg7dIta+htXWCFoZWWRMxFE/t"},"signature":"V8bY7iEtLfK11GfOcqaz9i1hUl+37SoVpQJthckh13kLuy3FId2bnKmWIKxycmS2lPKcchILzqfWTgjBPZxGOA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g19hhwqt5aulfpnkpu0s755zp9jq3e0sfw5utdmg","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"wXh8eGBU8JvAmMmv0sbsBKB8BvDs/+vcm1GdIP0Y/OhPFzT280QqDOvxis4q+N0pRC7w1h082OGidWgBKBv5zA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19hhwqt5aulfpnkpu0s755zp9jq3e0sfw5utdmg","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","drillbestkp",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjT7StZKOi9XlY8/2UuXkG00RKV1cShIgJga4sWnuaEC"},"signature":"eO8aY7nelOGOGLmtjgyTNUoD3PpcRMnKrkJdITZxNTYVk5giYv2+cvgQQ7gxKtng71UXmsPrGISHHBAYzUWuEA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19hhwqt5aulfpnkpu0s755zp9jq3e0sfw5utdmg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["drillbestkp"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjT7StZKOi9XlY8/2UuXkG00RKV1cShIgJga4sWnuaEC"},"signature":"QLm3tjoVceISoGsmBiCHHKVtD+bhXFcDE+MomOQA1X0fhfPMq/6bddqSXXJPm6l1oMYdV6jUNi4lFw7DyR/rWA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19hhwqt5aulfpnkpu0s755zp9jq3e0sfw5utdmg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1535","drillbestkp","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjT7StZKOi9XlY8/2UuXkG00RKV1cShIgJga4sWnuaEC"},"signature":"uXAL2jz0rZ0IYm11ccDCrKVm5ikFM2jxMuKRgJIqXiAI+nEGITRHlq6Y3L1bh9KDBf22gF/Jpqe4QSRj93UUtA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19hhwqt5aulfpnkpu0s755zp9jq3e0sfw5utdmg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1535","1","1","g19hhwqt5aulfpnkpu0s755zp9jq3e0sfw5utdmg"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjT7StZKOi9XlY8/2UuXkG00RKV1cShIgJga4sWnuaEC"},"signature":"Nw7KSTOeTrs4Ct7tiYHoQyjcSBYi8lanYu7EhK9OsKV/x2ZWF96vMHRYxHMPmtVr3ReT8HE7qhh1oqaET8Vt3Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g10au7az93z69tu9t0qntelkd4hck0cqtxw97tuy","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"E9jk2xI2rhOk/8qRMdklbTqxW/tuzFP8Ca6mk+0BK3IGBF4tg9hEWhltmLCiLOHRhSM0mDna6/kwWESOU5I6Rw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10au7az93z69tu9t0qntelkd4hck0cqtxw97tuy","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","incomerenew9t",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoYM7SnSDQtHKgtvqdvM2qC6Z3mrsiFg7d+kYmJbvn1n"},"signature":"nQOa3spyr8v9k4nR9eC8Keo6rHVRpUt0zsbu5N9vha1xhrj4BpTPgy549+GQ+7YGFQvsAWiNXcrumJOKZucQmg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10au7az93z69tu9t0qntelkd4hck0cqtxw97tuy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["incomerenew9t"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoYM7SnSDQtHKgtvqdvM2qC6Z3mrsiFg7d+kYmJbvn1n"},"signature":"NqYu/SUbmaZ0stqorw983Cgg1LLnb1aSzUXTQmeyTghb5huLIvNvTq2jDo1p25X8z0yhgmKNmKocnmUA2MtMoQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10au7az93z69tu9t0qntelkd4hck0cqtxw97tuy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1536","incomerenew9t","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoYM7SnSDQtHKgtvqdvM2qC6Z3mrsiFg7d+kYmJbvn1n"},"signature":"k9e18auFetk/YcJUWBrqJQCWoTNK2dNccl5kxVrE/vRvDKtzRT1LBLU3AQUaNuooeS68jO813O4EIODbU6KazQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10au7az93z69tu9t0qntelkd4hck0cqtxw97tuy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1536","1","1","g10au7az93z69tu9t0qntelkd4hck0cqtxw97tuy"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoYM7SnSDQtHKgtvqdvM2qC6Z3mrsiFg7d+kYmJbvn1n"},"signature":"fnS8reiZkcaouylkanQZE0KVYgnLG6w4WLuk8L+0JCsZrwFFkjbTpq9c8tYknfy8DGS6hBj7yDZU1L9hgcD/Gw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1nxsdqd4g5za4pc4lqgpm6ageml97wklezazcjv","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"5DCjcXMFOKK6aAgyvxKNEuSMyRBun5sF6Ens7h3rOgU/Q7E8y+52Npc5CzUzX5RzEKSjB1jq5g4LQHkh6ZPA5w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nxsdqd4g5za4pc4lqgpm6ageml97wklezazcjv","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","platecheese4p",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuRUkLD3OELmxr+cK1qX1/kZddeQVzEiTXIY52HSSjkH"},"signature":"GSDPMu2YYU/13J64ItJMiLJTuDo2hGHjRW2DaBKThMAhesCIjUvP5E1hSPk8CPeKEYbkIqKpTEwRQ9NAgn64oA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nxsdqd4g5za4pc4lqgpm6ageml97wklezazcjv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["platecheese4p"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuRUkLD3OELmxr+cK1qX1/kZddeQVzEiTXIY52HSSjkH"},"signature":"E3Z2MVmdo0Ck+wrUEPD5ANY9+2pMHLpG+os2kASzzEoVT9JStzvufHNuGhSo4HDXoiPnDdNAVo4BK6Yv62s32Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nxsdqd4g5za4pc4lqgpm6ageml97wklezazcjv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1537","platecheese4p","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuRUkLD3OELmxr+cK1qX1/kZddeQVzEiTXIY52HSSjkH"},"signature":"gZ9XVox3ePxU0UFzcW094Bu7UuzNLFSHJR02Y8gYuUJFXe474ZovIe0XL4fu85xgsg5RswDAzBmqPAVb1GuaPw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nxsdqd4g5za4pc4lqgpm6ageml97wklezazcjv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1537","1","1","g1nxsdqd4g5za4pc4lqgpm6ageml97wklezazcjv"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuRUkLD3OELmxr+cK1qX1/kZddeQVzEiTXIY52HSSjkH"},"signature":"VZBAxwvpa8JNkLWRip8JfQ/kSl5qJX4bAQ1+5ltVvdkLdXGfplCKkBtl15Im4Bhtj/4lqmrl6RmsBMq8og2lBQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1nxwm8ctefxmymp38laqlfvn70d4e5ks6hc7jlt","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"T3m9QzMREe4kjJRyVwPgSA7YK6iPOG0zahBvOxBwUvVkM93i0cl0P9GRD6aHY7Uofjl2Sr6beLVkkWAw4Xt9SQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nxwm8ctefxmymp38laqlfvn70d4e5ks6hc7jlt","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","gridapprovep3",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7Eg41Q6Cm6kA7tAhXqdh4fC5Nbc1idqAZ3K7QfwKFKy"},"signature":"xc7iU8DVWaS9IGyn1WVfkOtwWrVn4168znnvF15KsGZQz0XYVS2DPRAKZKwTGPNMRKu9drpBgiyWQJxJQtr/tA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nxwm8ctefxmymp38laqlfvn70d4e5ks6hc7jlt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["gridapprovep3"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7Eg41Q6Cm6kA7tAhXqdh4fC5Nbc1idqAZ3K7QfwKFKy"},"signature":"ddwsc7XjdgEsi2vlRpqsULV718Xtm5c77U/7a4WbnCVGqt9g+eDJZWbOrQxEDr2X5wUD6QXXfeIYhpaTlwNjWg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nxwm8ctefxmymp38laqlfvn70d4e5ks6hc7jlt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1538","gridapprovep3","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7Eg41Q6Cm6kA7tAhXqdh4fC5Nbc1idqAZ3K7QfwKFKy"},"signature":"cEnXMqdL+paRi3cNaevR7m0Da5brPNbBNFj7QUeCdUANquqsYWt3DC7Z13BH+mJtdy08q/YEVKy6ddKdipYgxQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nxwm8ctefxmymp38laqlfvn70d4e5ks6hc7jlt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1538","1","1","g1nxwm8ctefxmymp38laqlfvn70d4e5ks6hc7jlt"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7Eg41Q6Cm6kA7tAhXqdh4fC5Nbc1idqAZ3K7QfwKFKy"},"signature":"Uja/yvmogTd3LQw86PIlruvRxFoaaAgZJfQuL58CeXJx4fiSXDSdluZpCkjBBlA5vHwbj+ZHec2Nq9tnXrFbjg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1rtkf0ey0sfhlsnnz2tz5lwjcp6lc9g5c7t8lgy","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"WDewCsW1fLUv6kbr1HfSLzUiu7jcUum5Ym15+0VjREVTN6o5vuzMOa2wV524p1hsDbQwNPj2yVjzmG/zSd6oUw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rtkf0ey0sfhlsnnz2tz5lwjcp6lc9g5c7t8lgy","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","mixedinspirenn",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Awy24J5+9liwjV3N7OI4JGDp4bOAmTOeNwvdyQVIbRLf"},"signature":"eag9uxn3fR3jABvTPGGu8TSe+2FxqBB06Y6JqHkme/9GPYQ9IXuYS0kIoYibWVcFBJI7vA4OQgDnEqYj73+jeA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rtkf0ey0sfhlsnnz2tz5lwjcp6lc9g5c7t8lgy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["mixedinspirenn"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Awy24J5+9liwjV3N7OI4JGDp4bOAmTOeNwvdyQVIbRLf"},"signature":"DTXH7AeEd1oB3aLArAk+OodhZBJBEu9tLxFgqmSdHvlKVU+GIOnpQnIf766uKO2LwSg7BCqUN+6jgiECxtCN9Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rtkf0ey0sfhlsnnz2tz5lwjcp6lc9g5c7t8lgy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1539","mixedinspirenn","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Awy24J5+9liwjV3N7OI4JGDp4bOAmTOeNwvdyQVIbRLf"},"signature":"PQ4dqLkK9mvd9hPveZNzhxoMYlsAwM3xqcO0aSUcCA0Mm0c9DTqdfOzFMLI6vzYd2qujuv5H4mqwIau2g8ZE1g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rtkf0ey0sfhlsnnz2tz5lwjcp6lc9g5c7t8lgy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1539","1","1","g1rtkf0ey0sfhlsnnz2tz5lwjcp6lc9g5c7t8lgy"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Awy24J5+9liwjV3N7OI4JGDp4bOAmTOeNwvdyQVIbRLf"},"signature":"+KQW6lQrO/lI2HkKdZ0ZTnGfiN5PFFdXO/p16eo3wZArJUztEWSUMvpageYiPcQxjA4Qcs/BFafZ0eUywV9Q0A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ygqrhpckk4mh2jx2ekt4t8a2stcdvdh8eaufjp","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"iM7WMRKv6oziWD3Dip6YU++SiY0OMNyNMCFNg87GQ1I3ysmWtXreVdnovE9Epl/3zJ5bTJVvPM2DptVNLuT1Fg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ygqrhpckk4mh2jx2ekt4t8a2stcdvdh8eaufjp","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","tailenhanceh2",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxYEmwdqTAwJG7fDzZBcfxvlon85yS/zP3KIytttZfVm"},"signature":"rdymOnPC57n6/tp+yFpUE0J3ldjcJwGIhMviFQUEDKAK9bCkPZGpHIhVgbTEMAKuPcEXNURT1M46ba3RMp4kIA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ygqrhpckk4mh2jx2ekt4t8a2stcdvdh8eaufjp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["tailenhanceh2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxYEmwdqTAwJG7fDzZBcfxvlon85yS/zP3KIytttZfVm"},"signature":"7DwBuWvr645Mh5XuJ1k3CkJypfR+9LF5M2gboZ7eJCNsm3IMUchdOX16yyLfOnvd9vwE+E8w+q9Wh0rBm//T9Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1t6d3k0gzqq53tpw6l3wjgps4jnr8tf86ez9flf","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"+3B4PTBWDdYQZJPiz2wx1ARaNEuHMF6L3Kc6sYCic8p1LJP62fjtAKQf8ex1irwrvKVOWTSz/wv5Sw4FOULe5A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t6d3k0gzqq53tpw6l3wjgps4jnr8tf86ez9flf","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","elevatorelevatorpw",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtYLB/cmO5HfCAFo0f3Sz9jZPF+VJ0rKU4ZpS2CXGPZX"},"signature":"JbzAM8Lmtpo3YY+QrhN4yOdkgMLlQzlwHxlQ6puWhuIHSoCAIod4i33Qc9+F2A9gcJht+SLy5wSaNKnjSQmgYg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ygqrhpckk4mh2jx2ekt4t8a2stcdvdh8eaufjp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1540","tailenhanceh2","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxYEmwdqTAwJG7fDzZBcfxvlon85yS/zP3KIytttZfVm"},"signature":"Vx2cVyHuc3Siq5vCTULLR3WkbNLqJ4IPwI3xU4HC5XowQo7KbIy2KkjV85WyUDsgcyXomrpxSEkDnB5dTU7RKA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ygqrhpckk4mh2jx2ekt4t8a2stcdvdh8eaufjp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1540","1","1","g1ygqrhpckk4mh2jx2ekt4t8a2stcdvdh8eaufjp"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxYEmwdqTAwJG7fDzZBcfxvlon85yS/zP3KIytttZfVm"},"signature":"8RRzHtLgP6qFgQ8HB77x7HyEHh3O6XIJY8OBAKolYdMttmbloR3wOX8gF9QXxxVP5WY7+K9XVJatwXZ9zDoIHQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t6d3k0gzqq53tpw6l3wjgps4jnr8tf86ez9flf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["elevatorelevatorpw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtYLB/cmO5HfCAFo0f3Sz9jZPF+VJ0rKU4ZpS2CXGPZX"},"signature":"wpRds2qB7HMxmZ5W7PSDNhMJVE+U0Ipjedk71kTYqoVDFSU7e71Zl4CtmZ4iY9DXW7cxHj89j/PPBmGXkzM9BA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t6d3k0gzqq53tpw6l3wjgps4jnr8tf86ez9flf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1541","elevatorelevatorpw","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtYLB/cmO5HfCAFo0f3Sz9jZPF+VJ0rKU4ZpS2CXGPZX"},"signature":"HcBmpu/kFcOlOC7Ve4qoXx1fra1uS6MVjd15tuDO1skyTIW8Dk/08XZez8tHYgpSVwR5lPN77Me6kzCl6jcm3Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t6d3k0gzqq53tpw6l3wjgps4jnr8tf86ez9flf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1541","1","1","g1t6d3k0gzqq53tpw6l3wjgps4jnr8tf86ez9flf"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtYLB/cmO5HfCAFo0f3Sz9jZPF+VJ0rKU4ZpS2CXGPZX"},"signature":"6a3pOsKywvNEjoaJl08a8TAOms+/Wd2GVF/zENIV7zRtC+ZRdL3LOW5e5rvbPdjD/vHNwzgzfuRuqWmg7aEPEA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1t6k0rhf583yf9xjpvwtvefsftkxuhvpahhm78c","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"wgDZbR+L6HkAhAdKYFGFFZyNwXrMZeynEVqa6ZOWZpRT5KkqQw1kZYwcDo1NmFXD4mSn7kfxDUjhpDTWw5IcTw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t6k0rhf583yf9xjpvwtvefsftkxuhvpahhm78c","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","hybridcatalogxj",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqFQguB7r9Ttzl7W6p+eoEijJWcZs5373elMoO4mxFIQ"},"signature":"PU481a+Q5TD8vIYb6kTZH7U4JFFO3I23g9cBzPhloos+7IR+tib+gMvOMcsX3oXdKY1KRl2nj7qHvJRseVp1tg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t6k0rhf583yf9xjpvwtvefsftkxuhvpahhm78c","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["hybridcatalogxj"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqFQguB7r9Ttzl7W6p+eoEijJWcZs5373elMoO4mxFIQ"},"signature":"k0sLR1zMo4nHDNSR21u3W7PxinDl1qyJIbPUO17z1ZB1yilPse3Vx+4G35uArr4w196UnBI+A0dh8OqERh5kvw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t6k0rhf583yf9xjpvwtvefsftkxuhvpahhm78c","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1542","hybridcatalogxj","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqFQguB7r9Ttzl7W6p+eoEijJWcZs5373elMoO4mxFIQ"},"signature":"kyGvbklCYkwOb2/XbiYpgOq12tnV/DJnJaPnXWeVe44yXTID+ilxlbvt2FBZHk6sziLDQK1Etr9WZap+FfX3Xg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t6k0rhf583yf9xjpvwtvefsftkxuhvpahhm78c","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1542","1","1","g1t6k0rhf583yf9xjpvwtvefsftkxuhvpahhm78c"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqFQguB7r9Ttzl7W6p+eoEijJWcZs5373elMoO4mxFIQ"},"signature":"t1CYvNKZq2nFZagISIV2R7gdgi5knudP7pDVQ/uBmuQ3yCfW/qyzftcq3v/WXuEYw+dYKTPCVjYC5MU7ZCTJkQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g103at4s65vcusat98ucl7q8r08h9cy7yj4lfsne","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"kUA91Nko3TnZOR0ND06qMaGwl5lyV+XgS2Flf7V+YjUxP1gLGgyxDRgLJlBNK/2IgdRKm4jIgwW8Mq/L3W335Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g103at4s65vcusat98ucl7q8r08h9cy7yj4lfsne","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","beautyarenat9",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkD9Wk1AKTTd7NkRNGFNy8xCavXLpQ4L56ichEeYlsdY"},"signature":"NyDzAE0mJ/wCKTG7LwEDg4lovao41zFnIdJLhspmAnwwUb2Q6GpQ+ZYTAQqBEUjINEUaNf990IMr/iyryR2pTw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g103at4s65vcusat98ucl7q8r08h9cy7yj4lfsne","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["beautyarenat9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkD9Wk1AKTTd7NkRNGFNy8xCavXLpQ4L56ichEeYlsdY"},"signature":"9HL4pDXOqEr8tzQZ/ODndfy/qUXLpnR9K/uogLPhPooXFp+yGojk6xkip7GABs1sHAtl6YIwmlryhcJFg28KVQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g103at4s65vcusat98ucl7q8r08h9cy7yj4lfsne","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1543","beautyarenat9","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkD9Wk1AKTTd7NkRNGFNy8xCavXLpQ4L56ichEeYlsdY"},"signature":"YEGcFlbS4GXWL1lW/GrCrKhu2XXeJtEzoHus7/ecynsqWpHI5gd5W01MB9H+IFGesNUMhI6K9uMr/68xkg/HYw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g103at4s65vcusat98ucl7q8r08h9cy7yj4lfsne","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1543","1","1","g103at4s65vcusat98ucl7q8r08h9cy7yj4lfsne"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkD9Wk1AKTTd7NkRNGFNy8xCavXLpQ4L56ichEeYlsdY"},"signature":"lVnxzneTz5LN5TQ8YscP9u/Cl2Af95WOwemfjg1ClXkAclPuCU5tikQFNyY9982+6JzbFkVYbMI8bxziXWgBLw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1jkw963grzdfm0uw6fwruqtw9qy3xgf3wngh4jq","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"2PGhtVVyZZA0YlhyQO5awxkQWMs2Ewgli/SDrDDKOEEAi2xJNztn28u62EmLZ8lW8H0qUnfxMa6nR7MK4uMmpA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jkw963grzdfm0uw6fwruqtw9qy3xgf3wngh4jq","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","hugebananam0",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+CjU1YFy4RbbAQeMpBiUFztu3Eyeszpuh4zBBTUpzD+"},"signature":"K4RGIItml67jdcUhei5Eavux27AifAKVTnHS71fIE/955ElnuRusUbhDghGGspcjs3Hff81Q5R3YuPEBx4eurQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jkw963grzdfm0uw6fwruqtw9qy3xgf3wngh4jq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["hugebananam0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+CjU1YFy4RbbAQeMpBiUFztu3Eyeszpuh4zBBTUpzD+"},"signature":"VaPZoDv7/3J6f+1CSHTfLxbCiNMmKC/07Rdxr4N2aFJyhdhi6u8nVTuX/ySYVCEdT0I7eHRZLQ+dHMHk2McPIg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jkw963grzdfm0uw6fwruqtw9qy3xgf3wngh4jq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1544","hugebananam0","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+CjU1YFy4RbbAQeMpBiUFztu3Eyeszpuh4zBBTUpzD+"},"signature":"Yre9JOJjtDuMUHp18/rEbVX43/oq5ybwFIVgn3keSYcKRZYicNM88qN0nAzCXO4rNWUMCJTK4wzfwPa6jD4Ohg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jkw963grzdfm0uw6fwruqtw9qy3xgf3wngh4jq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1544","1","1","g1jkw963grzdfm0uw6fwruqtw9qy3xgf3wngh4jq"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+CjU1YFy4RbbAQeMpBiUFztu3Eyeszpuh4zBBTUpzD+"},"signature":"BIaXHs7CeR9WUeOWhvzuNGgnxUizF+lp8RO2pnJ7kNELIBtFaeQ+g0jXvRkcwfPPSQolc4dY54DhFoqE2QWWeQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1hyr57qpsn5n6j4hfhu4e6uqreruusw2ca5gvz0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"J6+QmBVSqq4BM2bT53rNtSFMYTCxilwiJrj5iF417RV0tG9FWcIgu9yaMMlfmIvxHfnssT3x/IkS+htG11ASYw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hyr57qpsn5n6j4hfhu4e6uqreruusw2ca5gvz0","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","depositsound4h",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AltyIPt1Pb5KWHfr4rcg8VSvyMw4XTqMcH4W7uuVl1k3"},"signature":"ZeJ8k3pNKjTwdYJQeALgeadyfwU5yZlWikoqf/V4S6AVeSiPTzujpLzA2fUeW3jOmnhhDfZiq/LjH7q36dBwVg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hyr57qpsn5n6j4hfhu4e6uqreruusw2ca5gvz0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["depositsound4h"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AltyIPt1Pb5KWHfr4rcg8VSvyMw4XTqMcH4W7uuVl1k3"},"signature":"cQy/Fz7ZX3tJwUtzu2yg/dkSwZAyA+Apxa3UYcvhKndQCjOGsHtm5gt0kvAiUdpBkvw4yN7PYHA7g8E0KHDlgw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hyr57qpsn5n6j4hfhu4e6uqreruusw2ca5gvz0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1545","depositsound4h","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AltyIPt1Pb5KWHfr4rcg8VSvyMw4XTqMcH4W7uuVl1k3"},"signature":"KdJen+9pa4EiRuNY6aLLSlqrCCakUMvuve1X9+xu7215gXmuUKefeg9Rlf4HSKNuGrgBqpV1UXFT7V00++q6Wg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hyr57qpsn5n6j4hfhu4e6uqreruusw2ca5gvz0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1545","1","1","g1hyr57qpsn5n6j4hfhu4e6uqreruusw2ca5gvz0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AltyIPt1Pb5KWHfr4rcg8VSvyMw4XTqMcH4W7uuVl1k3"},"signature":"eoDTbKlNCyBl/L0hQ6QqzkndbTrpmOAOh7oj7F597m5izLd75CceEOv2rmNr15UvzQ+sFtXwEuEhNB4uD3BPmg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g16xcgc0nwse09zzs90wtysjev6dspw6nvsghtc9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"g55ctFYrCzi8WTfMuQY++L+XXC+xq07uGna6gAMx1sAnU4zl18swsKMXl9tMvwRBt7Mr5UrMeDzBc7Ru7rTCCg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16xcgc0nwse09zzs90wtysjev6dspw6nvsghtc9","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","healthmotionzs",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+KxRtuNuSKUD/EqakbNlgU994madYHNTvpFB9EaTSsB"},"signature":"lyfjpIub4cK3DoX+J8X6oeJvJatsWBczG7LNYFsJk/RJEbVFbJzfK1J1VpymDAGoKdmy9UpNEHTHxsrKb9bKXw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16xcgc0nwse09zzs90wtysjev6dspw6nvsghtc9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["healthmotionzs"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+KxRtuNuSKUD/EqakbNlgU994madYHNTvpFB9EaTSsB"},"signature":"6JkVvKtMXxaRgmCTC4yadZxvYr3gfjTqjoe6/2kErARz8Ew+PowX4liagL0Iy88FzBEHypnQR9KrbWlmSFicig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16xcgc0nwse09zzs90wtysjev6dspw6nvsghtc9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1546","healthmotionzs","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+KxRtuNuSKUD/EqakbNlgU994madYHNTvpFB9EaTSsB"},"signature":"qfGTHkNsWi46uIdo9CClAUU5U+2WIUlRAu76Cauk4QR9RyRUOPFImdsEMmbrEhD5pfXLo9SPmLbTRfrtyAxhOg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16xcgc0nwse09zzs90wtysjev6dspw6nvsghtc9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1546","1","1","g16xcgc0nwse09zzs90wtysjev6dspw6nvsghtc9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+KxRtuNuSKUD/EqakbNlgU994madYHNTvpFB9EaTSsB"},"signature":"KooVf3VCLIJ4TeDV7aC11KVouydiDPh+1u7qvhFXVpkmwVN60sxJlgqPkkqa/7ClpmcVI3MgCwir0lAP4H3/pA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1g3tzjvtjlvara8xz5m85fnznhg6jpkgmlxsqcg","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"tS4Rse5RQ1pNCK3VISBK8Q/QJtFdYZD4E+yT0feVlDB1fdWOItC56Vo2wQcIslH5vR7F0RIOwQ0G4vkQ2s0ilg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g3tzjvtjlvara8xz5m85fnznhg6jpkgmlxsqcg","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","designmelody8x",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Auj9nvPjJqKxKwo5aODKk8iM/GaS1lKCm7iuS786IADA"},"signature":"Z6n6px8Rb/ifzvoybc/QZMx0b9Ot2I68L6qvEMz10QcMCjKmjfoMqeleYVB4zpnhYR9LWCVKLQeovtt8JXX4Fw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g3tzjvtjlvara8xz5m85fnznhg6jpkgmlxsqcg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["designmelody8x"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Auj9nvPjJqKxKwo5aODKk8iM/GaS1lKCm7iuS786IADA"},"signature":"/Qw1fu9ZeBSzxIItdFoEuxb5vNapFxfbwg4HfQEo3GoNEUGXD7n3WrPjnVHIWBJfHIPKqm6T8UZH9+JwIIL1PQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g3tzjvtjlvara8xz5m85fnznhg6jpkgmlxsqcg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1547","designmelody8x","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Auj9nvPjJqKxKwo5aODKk8iM/GaS1lKCm7iuS786IADA"},"signature":"ky2KQiFtdbelFssXqG0/MWy1I6pzkeePu8Y69YqSOlUteaa2pyETN3iy2ptqerKyrEPcybi5vBSOBGKZBHPQWg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g3tzjvtjlvara8xz5m85fnznhg6jpkgmlxsqcg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1547","1","1","g1g3tzjvtjlvara8xz5m85fnznhg6jpkgmlxsqcg"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Auj9nvPjJqKxKwo5aODKk8iM/GaS1lKCm7iuS786IADA"},"signature":"YhrmGsmMK+fC4r5ysyaHkvGT9cY5VSBVQM7KJGK1n703kzcGGRIT+AUzmCyxWGWQBnmKkcv8N93n6j+uQsOH0g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1nf3hcvpcephdttqt3xa7clp07zpay6dehhgceh","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"0wfMCfIVcKrSL5bdpNz/SnE/TYJzRZICXM3QY+E40NVEOBruTgF0vpFdzaIjc3i2i999y5i9wnkXb1Tvl/5n7g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nf3hcvpcephdttqt3xa7clp07zpay6dehhgceh","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","despairhiredt",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoHS6xm+LQoFhgkq6EKo7ux2zX87b6hmBc6SmT/ZS/+q"},"signature":"GZcJqWhKWQ570CsBa+OH0xeZWnS4CsCUKrCR01ftMyovb36Jq5yN5dzlxyxLlcJr5J0uEY3jKXrOys4zheuA4Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nf3hcvpcephdttqt3xa7clp07zpay6dehhgceh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["despairhiredt"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoHS6xm+LQoFhgkq6EKo7ux2zX87b6hmBc6SmT/ZS/+q"},"signature":"Tc1etFTHy7sD6pqrXZWAReYYei+WHgnbwbnNNY/AAmM2Zf3mbBxkfMgRRcoNx1QpP49Am+ZYKVJAt4M2+RgEEw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nf3hcvpcephdttqt3xa7clp07zpay6dehhgceh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1548","despairhiredt","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoHS6xm+LQoFhgkq6EKo7ux2zX87b6hmBc6SmT/ZS/+q"},"signature":"9P+UuH+W6vewJyndiFFGF8Z331hR7pw3B5Dk4KVgw9go+eXT6+0/Hcd6AYZGzn4VMZox7BP/de7IYPzsUHivcw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nf3hcvpcephdttqt3xa7clp07zpay6dehhgceh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1548","1","1","g1nf3hcvpcephdttqt3xa7clp07zpay6dehhgceh"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoHS6xm+LQoFhgkq6EKo7ux2zX87b6hmBc6SmT/ZS/+q"},"signature":"qKez+mtauQ8BCtOIc+Pm+xmD2ARXhWP7szKwH1kTVxo742qZjqpnPuwIM3pr4AzJ/RtzA9V6D+jSoCu94Kj/xA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1vlrp6kfx8mlsg9w29g2dclt0dxxx59e7tgrpmt","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"3ZeSVoI5P0kNRBuuiWfDmzDqcDVbtIqHF5KR7CZDDyFdbLJyWrFnYevoD2DPH0XV8oKBzODSQV30fgnDGNj8iQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vlrp6kfx8mlsg9w29g2dclt0dxxx59e7tgrpmt","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","layerarmed9w",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtZh5Nntrk9Bj3OP0FKAofcFvnmGytnpUChFRvVRi21r"},"signature":"sBlQxldrMkoF8wPB+wo0B6qxXnHFLWJkuypBjI/iJmEcdgVk+g8uvzq4xdIEmKnCvL+jmcFaHvo6FHOQ8+lYYg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vlrp6kfx8mlsg9w29g2dclt0dxxx59e7tgrpmt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["layerarmed9w"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtZh5Nntrk9Bj3OP0FKAofcFvnmGytnpUChFRvVRi21r"},"signature":"8YvP3OPeu+M6HUPL/GLpjV/hm6/tQNP4uo2M8Pr7RJ9uHhIrXD+tWjFCmFt9o99ChASK1HilHB/nSijBH8TfBw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vlrp6kfx8mlsg9w29g2dclt0dxxx59e7tgrpmt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1549","layerarmed9w","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtZh5Nntrk9Bj3OP0FKAofcFvnmGytnpUChFRvVRi21r"},"signature":"zZdqg86aFQ6jIj/fRKGgj3CdNgIoQN6369WECzJwJzAzlQvh2CTCDFcWiPQmU7T62nl3JM4teFE2WvrihTrJfQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vlrp6kfx8mlsg9w29g2dclt0dxxx59e7tgrpmt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1549","1","1","g1vlrp6kfx8mlsg9w29g2dclt0dxxx59e7tgrpmt"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtZh5Nntrk9Bj3OP0FKAofcFvnmGytnpUChFRvVRi21r"},"signature":"hETi+JtDKqvK7RDtwosYcIu/n836OgXZ1C/SOw2o96ZDSDuYsXVdb6lclENhdeGtN9gGwe1FtLQRbZCI7Sa/3g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g15yzscr0kmqmyflt97wk24r64nutrr6d8hq35qt","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"OdUrHCmVltrWgd69gSgglkNSZgacvG+WBD15GQPZj/VGbmqXlEIp4Z7ZHzYiBzGK/SVSMmbDSj94jCNhs4+LCg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15yzscr0kmqmyflt97wk24r64nutrr6d8hq35qt","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","frozenketchuplt",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/re5nBpB+Yr4VskslcRumGMdOf1LUp78Fr9bz88xTrx"},"signature":"Xhny8p6w4hcF9ipZoJ6L1dzezXwcB7aVwTcSmuJIR+AIVOv9JSBs97/CmaW+qp5+QL9r5Tq5+r5jLL3e9dH7Cg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15yzscr0kmqmyflt97wk24r64nutrr6d8hq35qt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["frozenketchuplt"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/re5nBpB+Yr4VskslcRumGMdOf1LUp78Fr9bz88xTrx"},"signature":"a7E/HSTiLS+vETcESKqAYsN1sg2MTD6ipr38GTpX9gp92i7iTptr5YGYLigTE2DwEcbNMw96e1CjFgB/E7LZ7g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15yzscr0kmqmyflt97wk24r64nutrr6d8hq35qt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1550","frozenketchuplt","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/re5nBpB+Yr4VskslcRumGMdOf1LUp78Fr9bz88xTrx"},"signature":"0ZAgHev1l0XVOHSYrYdXcnfHI16oFjcWRg3kerUENj0VeCGYaOEEK+1QGhBYk35QTgOYOF0Oo1Z0MN8A6md2/A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15yzscr0kmqmyflt97wk24r64nutrr6d8hq35qt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1550","1","1","g15yzscr0kmqmyflt97wk24r64nutrr6d8hq35qt"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/re5nBpB+Yr4VskslcRumGMdOf1LUp78Fr9bz88xTrx"},"signature":"v7ENlP1nJysRa241Vx8ymb+go6qnqKf9NRxQaTt4WAwKTmBPIRbiNRe1zRbtUu/hPXO1ezMedHpigTA0uFPvlQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1jfnmnwr30346pcl38wafgh9c08zsftn5l3w7jn","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"kG47pU9PXbgMf8aBXKy4Zvto4Rgz9t2dfK/Til0gt8UMjVmUe16f+yuF+EtURZzwqeekSSH8CGsjOcdOMNmcLQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jfnmnwr30346pcl38wafgh9c08zsftn5l3w7jn","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","detectslush6p",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AznMmFEjdc+5+oObmOQuzNGndVJ51LlkoAOeBEwobF7K"},"signature":"JaGhAj1EiLbNT5JV1izYi2WD+MZUNQS84KB7QZOrfqg0iL5PGx16BS0rfV6bubQ3H0ZYvqvWzNNFZEQNA6yo9w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g16ttjt8pvdtt8v49uqhsewfvz5zm83utpxhv2u3","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"gLss6I0p5B+JpawImaOXafN5WomOy7U+JKxHJm9KrBUZmp4MIXCvu7+hGRjVyrYt2wjJvVyWZ1+OfkqTPIMTkQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16ttjt8pvdtt8v49uqhsewfvz5zm83utpxhv2u3","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","elementattend49",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiBPEFukzVq1LUGDuI6B1E9Zoroh0B2ZzzBAedGeI7rW"},"signature":"XGgBU/ic9c8WrhIwEns0TyKJroBy3JZZJRGiJ7EYbcxkz2vX3f0/lI4dLXtC6aX5PDijYUS+FTkSOjiql86dZQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jfnmnwr30346pcl38wafgh9c08zsftn5l3w7jn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["detectslush6p"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AznMmFEjdc+5+oObmOQuzNGndVJ51LlkoAOeBEwobF7K"},"signature":"HZFXThFAzGzR1s080Gbb/wmkUvWXnVC8rk9JHugHEmp8tfp3HbIXG1EFpz8zzdJAzrCXqzXt5nN8ZJ6JSxTKBw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16ttjt8pvdtt8v49uqhsewfvz5zm83utpxhv2u3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["elementattend49"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiBPEFukzVq1LUGDuI6B1E9Zoroh0B2ZzzBAedGeI7rW"},"signature":"T8Pi0Fmzp1//eTszqh1K9x5AOxIwUsp1vnmzj9FDc+YVxyMUkqmKPJaAuFktquSpR2NWHFLZtcY6qhnHer4jnw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jfnmnwr30346pcl38wafgh9c08zsftn5l3w7jn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1551","detectslush6p","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AznMmFEjdc+5+oObmOQuzNGndVJ51LlkoAOeBEwobF7K"},"signature":"9tGHsDKq3+GetgkfDPY5qTztDJyuO7uhqaHPiDP0oU0vGJb1YNPom4WmRwdLFBu/FekYfF4etksPY5b8GwXycA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jfnmnwr30346pcl38wafgh9c08zsftn5l3w7jn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1551","1","1","g1jfnmnwr30346pcl38wafgh9c08zsftn5l3w7jn"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AznMmFEjdc+5+oObmOQuzNGndVJ51LlkoAOeBEwobF7K"},"signature":"MiPu2yFougKROVOZouq8Iav48iizR1o74x6E5PSofLpzhAwr2Z6q1Zp+/gLzKUnuXGDvOVxmcIWHm+43pfTZTQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16ttjt8pvdtt8v49uqhsewfvz5zm83utpxhv2u3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1552","elementattend49","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiBPEFukzVq1LUGDuI6B1E9Zoroh0B2ZzzBAedGeI7rW"},"signature":"LrfNQGscCvzaEcYeResWiQmlOS51YajvVk7nTDSTHPA+sTuJJg7si9A78YhdOyPq6cetykV6HM4yJ3ARIEkYqQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16ttjt8pvdtt8v49uqhsewfvz5zm83utpxhv2u3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1552","1","1","g16ttjt8pvdtt8v49uqhsewfvz5zm83utpxhv2u3"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiBPEFukzVq1LUGDuI6B1E9Zoroh0B2ZzzBAedGeI7rW"},"signature":"H2g0+J+URdM+ow9ojCy0+o7mBqSaRi7a/A7AdIeberlBcYS7xi0ZE3lJZUx3efQ4igs57QYBx71YFznvldW3ew=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1fn5gvmmqx663r05u995y74427jv5sjeev05fww","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"J0afVeJDQxBkhoI+pGA3yQn1TKy0LomxtWo7veQfZ8YkKaRnKtpURHbPbcDUtexaQ+nbH/n3CAVR1HACGLlvzA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fn5gvmmqx663r05u995y74427jv5sjeev05fww","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","grocerywait05",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvyK8sdKxBRNOQ0pJGsZS+yNyQ8Sh9lS+nOLTHyrALZe"},"signature":"P/aO1883g7mQiKvM1Qs3DxoeznLIXXWJjjANzxvtuvFK3ZExVqDLFmpKWEDsiHVv1DdzZM4PFYlUEsEDnm6B5Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fn5gvmmqx663r05u995y74427jv5sjeev05fww","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["grocerywait05"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvyK8sdKxBRNOQ0pJGsZS+yNyQ8Sh9lS+nOLTHyrALZe"},"signature":"i32Q7nrWHjhENMLuyTqsOOJjN+9ur1eLzEyk1FjeVNIu6lHpNvJg2PxxtGpLOVuFSmdlxf5GcGVIHEYiimw2IA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fn5gvmmqx663r05u995y74427jv5sjeev05fww","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1553","grocerywait05","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvyK8sdKxBRNOQ0pJGsZS+yNyQ8Sh9lS+nOLTHyrALZe"},"signature":"olxyBkTm0MW9EaQoA5fqIM+M2JUhNSjG7Fd/N1v8sfo/fYdtlEfzH4oCaIMQGzTsBy2MD1TC9Ug56l71WXf6hA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fn5gvmmqx663r05u995y74427jv5sjeev05fww","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1553","1","1","g1fn5gvmmqx663r05u995y74427jv5sjeev05fww"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvyK8sdKxBRNOQ0pJGsZS+yNyQ8Sh9lS+nOLTHyrALZe"},"signature":"wJd7iUO2704X/foMkhgR23tdBh+rAr0l5xH6PD68Ecg2fU2WK/Flx62jOLhH5YOBMHXtqiE6gAFxGTrlRMlDSA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1kvk5puysmhg5xzswqfyf3f38vjgmk2qtdum789","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"lO7nwgtQjotuHAfofDakh4R+cqtt5giQzjOvhSp92jBmcShADPgRacwz/QBr8eQNettlxkyz7/T3VWM1nT4HNQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kvk5puysmhg5xzswqfyf3f38vjgmk2qtdum789","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","spysoldierzs",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1QtqLykf6B+mMD46uAAQSedgggDe0Xz+WtA4iWTL07A"},"signature":"Z1TpCpZJSS/P4P9D9U1j1ajOSvNP9/qB+kmn8rMHD0hNoqmEDmcWLuiU85LsPX2Vmr8ryrCNqqnr6iwIyM3zsA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kvk5puysmhg5xzswqfyf3f38vjgmk2qtdum789","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["spysoldierzs"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1QtqLykf6B+mMD46uAAQSedgggDe0Xz+WtA4iWTL07A"},"signature":"04uzgyn2QGInJUZtVmmo2er7gYquMEKyXKsQWuuUeb8q4Si+XNZThAXjPR8Theb5wjKoklkypJkFPLgx180E2g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kvk5puysmhg5xzswqfyf3f38vjgmk2qtdum789","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1554","spysoldierzs","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1QtqLykf6B+mMD46uAAQSedgggDe0Xz+WtA4iWTL07A"},"signature":"7Zkcz23vvKSUSNMJhkwecnK6oftevlEfn4smwyytLRVGybi+kgxnFjosO5usFENBBtfsgZjG0bNkEcxan3OdTw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kvk5puysmhg5xzswqfyf3f38vjgmk2qtdum789","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1554","1","1","g1kvk5puysmhg5xzswqfyf3f38vjgmk2qtdum789"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1QtqLykf6B+mMD46uAAQSedgggDe0Xz+WtA4iWTL07A"},"signature":"Arn9Mu36xFb9FhrYC28yY4TCWgkL2pHiFYsUATmsh480eIZV9fpMKlIumz4/2T4MldsjisLYaroglsVMwemfZA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1wtrzr4mrackev5a9emvym2cvfctprvvxtntpzq","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"aLlI8KUA7cT8Jgtvx6lJQGCq2VR8NtmnQj0jd4VXZdg7LBlwAXOo3T1UnQ1RGCMA6mlOtSu0pF2j1/RCSWxn6Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wtrzr4mrackev5a9emvym2cvfctprvvxtntpzq","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","vanishsquirrelev",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag1t2U63NgbNBKmfzVbpiTcY3TsyXpgLq/zoBqtrUZmZ"},"signature":"USUVKvg7P4gsXrVQFRFaKZ7NbjmL+dd5xw4me4Ja2P0bdE5z1orcyjy7IaXpVaDIKblZwh3HYHB05UCJ7dliCQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wtrzr4mrackev5a9emvym2cvfctprvvxtntpzq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["vanishsquirrelev"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag1t2U63NgbNBKmfzVbpiTcY3TsyXpgLq/zoBqtrUZmZ"},"signature":"z54hYomxIpWsdkmaIsExbmlL/agjK/nZT2Tx01yuoEV3yK2RWSxNeTrgYiTdme5lGrGsR0xTELFXz9+vi9qp7w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wtrzr4mrackev5a9emvym2cvfctprvvxtntpzq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1555","vanishsquirrelev","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag1t2U63NgbNBKmfzVbpiTcY3TsyXpgLq/zoBqtrUZmZ"},"signature":"keHC83/5/CVdpJEGfM58CUbJXpWnln41izCGbcctsst8Kzz6IKtvsEKqSf15dT9DrZ+X8qZyY2zLAJl1ggnZ0g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wtrzr4mrackev5a9emvym2cvfctprvvxtntpzq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1555","1","1","g1wtrzr4mrackev5a9emvym2cvfctprvvxtntpzq"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag1t2U63NgbNBKmfzVbpiTcY3TsyXpgLq/zoBqtrUZmZ"},"signature":"Gr29+TeQz0FnkzSrWtWXxPKyAL/z4Tpw9ci7fIKm13Jaf1qMI5Hso7h+/gwqtcQzCH2+ngpvBM+XHQAdBDD/hg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g17dcjwap8ncqwvgxxdt6jf30ss3mqnmvukefczg","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"XmOLGqD8yTC6qI8jQoEyEqnaImy6i4MZKTQoCLvJ8u9wlheaOYvabVVX9S2o35UyvrIy0eiYnESrnLhyUbVgnQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17dcjwap8ncqwvgxxdt6jf30ss3mqnmvukefczg","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","glorydwarfgx",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnnxyN0n/+WvzfZpIauRG8koR7iAk5APeo+8wV2hnuyP"},"signature":"Zj7KfUnefLEeHNkzMlIBkHSmojcaznVY2TNooAEZD/koMd6tK7bGCCqbzGEGrnPZC3bTd3U7oU5O1W9QXdg5ow=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17dcjwap8ncqwvgxxdt6jf30ss3mqnmvukefczg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["glorydwarfgx"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnnxyN0n/+WvzfZpIauRG8koR7iAk5APeo+8wV2hnuyP"},"signature":"ZWh1cawODhTdMrbTiiassCGS3VY4WTSQu8L+iTasTXB3z3gLcGNS4JLIxTA6RU1w9a+CIxZmMHQEw1OtpVxqOg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17dcjwap8ncqwvgxxdt6jf30ss3mqnmvukefczg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1556","glorydwarfgx","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnnxyN0n/+WvzfZpIauRG8koR7iAk5APeo+8wV2hnuyP"},"signature":"ud3+hXvzupurObQzAYJqP/18SML4y/MiHRKxBYEnnzglIu2U7E1aHJKzsDrHM2NgcVrZO9eXbNByQZx/30jkNg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17dcjwap8ncqwvgxxdt6jf30ss3mqnmvukefczg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1556","1","1","g17dcjwap8ncqwvgxxdt6jf30ss3mqnmvukefczg"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnnxyN0n/+WvzfZpIauRG8koR7iAk5APeo+8wV2hnuyP"},"signature":"fNMB7HDV0XeWzJOu2t8MV6a7rgT2L2OhaFAtcYtZHYImbrx/lq4FgguLnfSoeP93jarY6FreIm+Py9V07BiRbA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1j5wyjly5s8n7qtdh8xjv7lsykxnh8rs6z45wdr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"F7gSoN/fJsX5tArcyGsWC6P0cpc/RkRY/2OTYQAUKp0U5XUvQ4SZ3R/IoKnxQvVC4mhij51oLYD07H6Wmwc5Kw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j5wyjly5s8n7qtdh8xjv7lsykxnh8rs6z45wdr","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","proudefforttd",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmQN8SXQOqXNG4LCOpj/Jv/eKE/im6HMwzBGVZNH0YhN"},"signature":"Rawt79RiuqD2PX8lyBoo02kIlmAe5UhQ5e2nehW5xOgm8fEa2+GbqPXVwIeqv3ZKg9OA4Uvt5dsAvlzfz08l0w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j5wyjly5s8n7qtdh8xjv7lsykxnh8rs6z45wdr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["proudefforttd"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmQN8SXQOqXNG4LCOpj/Jv/eKE/im6HMwzBGVZNH0YhN"},"signature":"bSbfW/d7QWS/PdO8m6dLnMHBf43clt083v01+GmaENhpfw4PgzCydBx4vi1CquFJ/DR2ObC5AmH00WxbsyH1aQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j5wyjly5s8n7qtdh8xjv7lsykxnh8rs6z45wdr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1557","proudefforttd","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmQN8SXQOqXNG4LCOpj/Jv/eKE/im6HMwzBGVZNH0YhN"},"signature":"WzT0tDXETmgqT6Whcb9BaPjTl1cwV0uqlGCzCQw0OKQcf8yQM++g55b21zmg29DYhtenOj99gHrm8RUjZwMEig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j5wyjly5s8n7qtdh8xjv7lsykxnh8rs6z45wdr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1557","1","1","g1j5wyjly5s8n7qtdh8xjv7lsykxnh8rs6z45wdr"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmQN8SXQOqXNG4LCOpj/Jv/eKE/im6HMwzBGVZNH0YhN"},"signature":"MImLxxgQ1YrO2ouv0fQ0iwmixqB92Kimoco2QjBMvCgvk99jTYoZSpZh3BjLeOffbTHyHiwXLN9ArzU3tl69EQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g19rxe9x2m6mmute6yql5q8zqyd386m6hpua6ta2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"aTdeOjioKtAx3l8lUErlo7OrGwLfWduWl5WYfrP6yosN3FT0SFCmhxeSmLD4Il0KKOpRTT+E4ScPaXral9AvdQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19rxe9x2m6mmute6yql5q8zqyd386m6hpua6ta2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","victoryriote6",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8tkEIXFB6vCU4eyDbiqcDVRywy1D3Umdd57D6EUtKKA"},"signature":"6ARPHhSTPB67fUUxtapZpuSmJz4PiTbya6VNRvJbK8k4wuwjoPdRWiGqZ8KdWdXVntHdaDi7evrIv/lNUACJmQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19rxe9x2m6mmute6yql5q8zqyd386m6hpua6ta2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["victoryriote6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8tkEIXFB6vCU4eyDbiqcDVRywy1D3Umdd57D6EUtKKA"},"signature":"JEAUu0R6BqS4YY2g+vkLZeqjb0ZG/p6g92QVgdEtW8A47+AkYJqOVDyKadSQElpBBqjwBmnWVVaT7wdu7+dZmg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19rxe9x2m6mmute6yql5q8zqyd386m6hpua6ta2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1558","victoryriote6","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8tkEIXFB6vCU4eyDbiqcDVRywy1D3Umdd57D6EUtKKA"},"signature":"irgdk2lFGqZ9WCQa46l+twFi081RkEqoibzs5sCb1PZE33cwUVSbqrXLbGnVt7YqPC+SqlUFT12FBPtB7oRi2A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19rxe9x2m6mmute6yql5q8zqyd386m6hpua6ta2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1558","1","1","g19rxe9x2m6mmute6yql5q8zqyd386m6hpua6ta2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8tkEIXFB6vCU4eyDbiqcDVRywy1D3Umdd57D6EUtKKA"},"signature":"u8nUfuLrx8BOHMsPO6qSnQn957zH1LSZT6j5sWucEIo780YxNx8v/qI7wI4nnhgqhH26xIvxCy2K+PAn8jie+w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1kdjdzts3a043s4t2wx5wfu0j4lhj7xml4r8pe0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"AlZuoe/eIleHA3kJeqz74JueqiRhpfJIA30i3H8vh0Yws9VKOaX3Pke/MG524GDG7SvzdEa4YOMutT2Zq7t41w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kdjdzts3a043s4t2wx5wfu0j4lhj7xml4r8pe0","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","correctfalse3s",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5anPgcTwCwbsNrKcELPmDFuwCTZEih0mJFPlZHdbWoV"},"signature":"CRjzhDYdniVoo5rTzKXaHZnbcyY8qrA8ybBtVNuAf9E4KmQivJRdaRbrVo7QNnp/8dvFaZQuXL8+1ti1UFsYoA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kdjdzts3a043s4t2wx5wfu0j4lhj7xml4r8pe0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["correctfalse3s"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5anPgcTwCwbsNrKcELPmDFuwCTZEih0mJFPlZHdbWoV"},"signature":"cUfGYh9RWstBlr3Vr2igLlTXxsIMR3E6hQonqYNVQ2snXg2toEIL0ymv/kDxYZnJA8sOYSA9S7zM4J7EXcDkRg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kdjdzts3a043s4t2wx5wfu0j4lhj7xml4r8pe0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1559","correctfalse3s","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5anPgcTwCwbsNrKcELPmDFuwCTZEih0mJFPlZHdbWoV"},"signature":"P4l8fbqKEvz2odtzt0Bs3bd3pW1qSfUjv/gJBRTSaZYghM+JeBX+MD0tpXLAcCr1doKQrFQgoeX2zPZ1tPQ/DQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kdjdzts3a043s4t2wx5wfu0j4lhj7xml4r8pe0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1559","1","1","g1kdjdzts3a043s4t2wx5wfu0j4lhj7xml4r8pe0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5anPgcTwCwbsNrKcELPmDFuwCTZEih0mJFPlZHdbWoV"},"signature":"LZabpDBbzctv2B2a51GXGdylXQWEzpgpnTGNYPDrJdMNRAH5LU+YrzU72GzSVXnZOT4Bz4cM5gx+TGqiMzkT6g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1j0adg5wsa2q4qwf87xqtn83rmhsperz6nfza7l","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"wem8qWm1VgfcGsewcklX7p0hOY2R5D+tzbCq2L3Tg5ZzSfvD1VOm5gJZKEyvJKHcSL0E5xThBxwHDE1rqM912g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j0adg5wsa2q4qwf87xqtn83rmhsperz6nfza7l","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","helpslowwf",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AytqcAJe0ojMz20PYoeKGgOVD2t0BEpu+8PiZd03IxHv"},"signature":"KXOI/gI7GrexfhHMo9EQpgkNrrCwHBVvQtVgxM+UJxkPCKxx2LGp0h34ECjKEun+kOFnFi8yHPyH4deSihDkIw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j0adg5wsa2q4qwf87xqtn83rmhsperz6nfza7l","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["helpslowwf"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AytqcAJe0ojMz20PYoeKGgOVD2t0BEpu+8PiZd03IxHv"},"signature":"ql+69ZwmaxTC5CXll26i3pPDTLMDDWoGkwuwrHlToUYfeXIOHc31nL5YF/BGBKC/KgqLzr9lWyKbkCEDRnKjoQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j0adg5wsa2q4qwf87xqtn83rmhsperz6nfza7l","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1560","helpslowwf","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AytqcAJe0ojMz20PYoeKGgOVD2t0BEpu+8PiZd03IxHv"},"signature":"UM4TmgC0xz08FZLY7t3XbGP8szAS9Fv7FaFfhl36PXQ0V3mYxSopvWNWybuw6uI8mzxWPyCJkeAl6FG/eHmriA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j0adg5wsa2q4qwf87xqtn83rmhsperz6nfza7l","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1560","1","1","g1j0adg5wsa2q4qwf87xqtn83rmhsperz6nfza7l"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AytqcAJe0ojMz20PYoeKGgOVD2t0BEpu+8PiZd03IxHv"},"signature":"jxJuvZWe8zkb39HwYrqA0pkoX08WUubfTUyXBfAxrlA09bzZSnzRqnpQ/VMJEZU5EnBsI4tAk+1eFl27nCfNJw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1sj8feyevsm8685e8fef9us9nukvwaq9egjcxmz","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ZA+ngGxq9fGyeb5dPpf+GsRN5PfwYDDCYU4qmOw+XJxn5NXAPdCd1qwxkAnLl2RMAZafRL/rz48zoWa/8LyVug=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sj8feyevsm8685e8fef9us9nukvwaq9egjcxmz","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","voyagegarment5e",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap8od9P4l6+sl4YfmAO6HTu9BLTvl8XaUJXswwP+9aqw"},"signature":"Qg7+3BUa1Yev2qX90d9QaOWMgEztVZI+/mRsFo94xJ0+uiK17Lm7j93tTjBSLed9Qv++PpHE4pKrCW3xhesC4Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sj8feyevsm8685e8fef9us9nukvwaq9egjcxmz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["voyagegarment5e"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap8od9P4l6+sl4YfmAO6HTu9BLTvl8XaUJXswwP+9aqw"},"signature":"dBKCB2OUyCCiOrK7TCTDYRsbdZReryeiUbTBCLlBqztZeGswjRa+vcjjjZDAHF16vz/omuKBuOAZcfB4Fp3B1A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sj8feyevsm8685e8fef9us9nukvwaq9egjcxmz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1561","voyagegarment5e","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap8od9P4l6+sl4YfmAO6HTu9BLTvl8XaUJXswwP+9aqw"},"signature":"NzzeWm9NH9yYcW+xNc7cUHRdgvboH7jxRY696CDeeUA9T653LyMmQGO8V/23bwqlsBYFD0PvM1U09sjSHmfc9w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sj8feyevsm8685e8fef9us9nukvwaq9egjcxmz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1561","1","1","g1sj8feyevsm8685e8fef9us9nukvwaq9egjcxmz"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap8od9P4l6+sl4YfmAO6HTu9BLTvl8XaUJXswwP+9aqw"},"signature":"0na1WPhpXoVtdMvMi70E7MQ7zY244oO88ih8cyPuzz1duE6GyDWqO03gw4NbAvJFZbIRdK2WLZppI7gKaxB6WQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1yls3lsu9hny32xa0yakk0w0dtttp2h0p654v70","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"J592k3RtMPHbiJzxlf8eNnaqolKHyyKJbTM5KKUHA+AhPLgnYd383vWPNLgnPUppZWvs6qzSAGrmWrKJuR4vEQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1yg6stsy766md5u8jea70qtwc98lxgj6pyekg24","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"iexoyHt6fYgedCcW/Ku6XHl/cBSyG6693QLZpENP1wdpc5T7/Y2Bbgr55HNXj67+59ex1PX2uo838dBgOiOIIQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yls3lsu9hny32xa0yakk0w0dtttp2h0p654v70","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","letterfosterxa",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4PIrdOQnqG+Fg0VnR9I8m+FAu/tWoEgnIN1fLM4EBdz"},"signature":"K/nVcmmZjF4UEnMiY5SFDVqvKWLEoWqaWEpM67TU7Mpha0QuabM+ladGLdtvAtqDnMiap4+9OZqyrt3nXi27TA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yg6stsy766md5u8jea70qtwc98lxgj6pyekg24","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","savepactd5",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Av57SIz+1m8cjlJQs9KrkFJKFfiBQjzB7y3utqFBcsJe"},"signature":"Rz5S0rtYoat1KRyxOhwcmlpjZPAvz9dpxMggrZ8LRwZ+YZWz0Dfx//xzQAJJATNVoLSZiPfne1ZSEsAwjnS3Fw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yls3lsu9hny32xa0yakk0w0dtttp2h0p654v70","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["letterfosterxa"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4PIrdOQnqG+Fg0VnR9I8m+FAu/tWoEgnIN1fLM4EBdz"},"signature":"nrGFyw4YLRodPk1e53j70u05kfGHRXbK/qf0sP7z4k9a++zO1otziFnrai+6DQ0w7y4nLUEEF/NGTbFieYvKRQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yg6stsy766md5u8jea70qtwc98lxgj6pyekg24","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["savepactd5"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Av57SIz+1m8cjlJQs9KrkFJKFfiBQjzB7y3utqFBcsJe"},"signature":"4BQC7FTSeOctL+i9HtbDwTaSWWyIHChwrP1zlZOhe4gwl8JzJ/EeV+W/CuYUoPjkuhtN4Rd2qCIYrof0DJ4bMA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yls3lsu9hny32xa0yakk0w0dtttp2h0p654v70","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1562","letterfosterxa","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4PIrdOQnqG+Fg0VnR9I8m+FAu/tWoEgnIN1fLM4EBdz"},"signature":"qorngaxFgLwRr/T7zhL7kbK6KbiQtgATHhljQF9nHXQXuRHxFL4UuUn/iyWfc15n9ZZNRdAGhxhHBlF/I2BR2A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yg6stsy766md5u8jea70qtwc98lxgj6pyekg24","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1563","savepactd5","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Av57SIz+1m8cjlJQs9KrkFJKFfiBQjzB7y3utqFBcsJe"},"signature":"/OTyIw3lFe44xs3OPGkVXgiUG1LdEkc3qd0l6bO+yuh3HXBpCI9FiZx8wxlgHr8+2e33zaacsAfoPBsfJHtKZQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yls3lsu9hny32xa0yakk0w0dtttp2h0p654v70","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1562","1","1","g1yls3lsu9hny32xa0yakk0w0dtttp2h0p654v70"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4PIrdOQnqG+Fg0VnR9I8m+FAu/tWoEgnIN1fLM4EBdz"},"signature":"z85OHD6CXql2vZTvKbvLGGfr2mP3x4rnLUlCgUyOjwJFHWohr0sAwiv4b94wsokBzuwhY9Knrc0ms+7XR4/QLA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yg6stsy766md5u8jea70qtwc98lxgj6pyekg24","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1563","1","1","g1yg6stsy766md5u8jea70qtwc98lxgj6pyekg24"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Av57SIz+1m8cjlJQs9KrkFJKFfiBQjzB7y3utqFBcsJe"},"signature":"ldrJNhqU7VM+lNEUw90DsAivq+SUYC9rQ1Sh9Q5tLOQ5PTxJGK5eZk49AcoRDcL3Xl2F6uO1M+hDAA1VP8GA7g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1kcf53vlrxp6wagf774ntkx9xw3syujfzukmccc","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"1Tf5+Lejlmir3LmsSTWP5yu8CKlCGEv1OrdUeJXSLL8jdCoYis3AXdYw3XlwgXzzHIw5kvMmXVzNBylY/iapYQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kcf53vlrxp6wagf774ntkx9xw3syujfzukmccc","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","ladysirengf",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8S5ufDK3s1DIoFyhfs/p0kuGIKLEmsvioFO4wBT+Bsp"},"signature":"hDE0TyybsoMb++/q8enOAaz+ifvAd8UOO1lnICa9Miph34A4KB8XQ74MZ1oScms9u1xOSHEQE35YBqpLl7KzZw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kcf53vlrxp6wagf774ntkx9xw3syujfzukmccc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["ladysirengf"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8S5ufDK3s1DIoFyhfs/p0kuGIKLEmsvioFO4wBT+Bsp"},"signature":"ZL+aoR3WFci+nYnm7/5xTqXR1/A7RCRYdNj4r/9edfdO1dgcRYX6YSuxZtuM0H90eXXpu2/78sRr54btllYy3A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kcf53vlrxp6wagf774ntkx9xw3syujfzukmccc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1564","ladysirengf","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8S5ufDK3s1DIoFyhfs/p0kuGIKLEmsvioFO4wBT+Bsp"},"signature":"gr2WAlxQHokGv1aR0p9RjHNG1zsz5sf0XvwAgUkaZ9Zj2EtcoJ4GBl4FY+zsusPsy9229GjdhKQTSkcgsfvYOg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kcf53vlrxp6wagf774ntkx9xw3syujfzukmccc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1564","1","1","g1kcf53vlrxp6wagf774ntkx9xw3syujfzukmccc"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8S5ufDK3s1DIoFyhfs/p0kuGIKLEmsvioFO4wBT+Bsp"},"signature":"fz8X+t9gY5C1Zr1UAcugW7UGDZmgjwVQSXVanI4Y+6ZLqjFw7nrfGBdpDkAnEnbFqQQ7w1YLBzynZYyWSTN8fQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1fs96actyjt3yjy5lyz5tht90ng3e4ft5v0ajsr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"4ILV9irYd1dPVRAbef8yIGSiPvqvTeIWxLGymvwKzXxNDP0M4VQpHHKJGkJ0qz7WtZ2x7KsxCc31kK3h9WX1Rg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fs96actyjt3yjy5lyz5tht90ng3e4ft5v0ajsr","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","onlyhirey5",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiZXvgCKePKWfXXa7XGVCkO5d9+uiUGE1V8nEWQWMbW4"},"signature":"M29aZX1YxPDJADoU/lTbjmh8UhuWpPNyQZ2z0R0RgXR2P3vJMP0NmAjNcSFLr31Xiii8kQs6kC+jqxrL7+HlXw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fs96actyjt3yjy5lyz5tht90ng3e4ft5v0ajsr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["onlyhirey5"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiZXvgCKePKWfXXa7XGVCkO5d9+uiUGE1V8nEWQWMbW4"},"signature":"x4Kmj0qd5iNQgibsUaTsy7Ih9SGEkQ/MxcEB8qCbLmtxESJWbY9umUvev6iGsq4ZIZtQ4RilBWcCaBFsPi0PIw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fs96actyjt3yjy5lyz5tht90ng3e4ft5v0ajsr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1565","onlyhirey5","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiZXvgCKePKWfXXa7XGVCkO5d9+uiUGE1V8nEWQWMbW4"},"signature":"bKfYih0/XfXunGLFzL+6RfgKTuCSAPxaLOZPIv2EsetF0KFmu3r3/Wh28Dra6zrTCXyw60AvB1PYde4koAMHIw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fs96actyjt3yjy5lyz5tht90ng3e4ft5v0ajsr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1565","1","1","g1fs96actyjt3yjy5lyz5tht90ng3e4ft5v0ajsr"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiZXvgCKePKWfXXa7XGVCkO5d9+uiUGE1V8nEWQWMbW4"},"signature":"x0BIv+CxdeeD/vRiGSnhzVLeuKRl6fF/3MSA23yhLPENZ/lOLhKLqxuz0rc0/ooO5d9b2ZeT4DJK9rzzUO2Nig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1mr0fpyf76rdk0wakrvj4q6gnt6p06uu3686uyp","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"AmWID/a6OrmHoQkvE2J1HChSti1tVNqwd7PbzAu/o7wvjVDCZL+AIXkuaYC9knwRKy78v6QLxH3BLMOoiZT5cQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mr0fpyf76rdk0wakrvj4q6gnt6p06uu3686uyp","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","auntsketchk0",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzMtEvwJhWNPqpabK/bM+e5KJz34VvxJ3FCqBpybxxQs"},"signature":"xWdxFCoYR0JPdQsdgKLGv4Vg8LgmWAaX5TWYztM9UNQ12fgl7TmDg3eHa68xRCa7578PQ9SGyOJ9bjTwHWQJUw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mr0fpyf76rdk0wakrvj4q6gnt6p06uu3686uyp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["auntsketchk0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzMtEvwJhWNPqpabK/bM+e5KJz34VvxJ3FCqBpybxxQs"},"signature":"JL1ZD/RqoEP50aOsnEiHYsBiTnUYrBKL8HlI82ADz0R+AcE3Qnnb6lafvpKhEMhNafd6Pk+lIJNLuPk/7wELUQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mr0fpyf76rdk0wakrvj4q6gnt6p06uu3686uyp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1566","auntsketchk0","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzMtEvwJhWNPqpabK/bM+e5KJz34VvxJ3FCqBpybxxQs"},"signature":"+3tnhfWDEhlDGoHml9yXh3ZkZIEwBvWAZyuA82xkt6gpKT92KeMrf0mQStIVSVW6FQRDbMuRvvkWy0PV9YZckQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mr0fpyf76rdk0wakrvj4q6gnt6p06uu3686uyp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1566","1","1","g1mr0fpyf76rdk0wakrvj4q6gnt6p06uu3686uyp"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzMtEvwJhWNPqpabK/bM+e5KJz34VvxJ3FCqBpybxxQs"},"signature":"MKgCRje+zCJsWx887C642RSbKu1t5ihK9Ps4GMIqwpUdVdVbxdU0ANxHFATQ+dvMw8/9vZVR+w0tv1MW26HghQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1k0j6gc9assjq3kfs2c49wy0erwes8ypk835229","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"WmIFRTdOPEmkqrLbjxKQisuzAIMkVT0AlsPwwKfQtogh2ZpiYDFcLXdfPC9dKYN/nnijhW0clb56uoQEm8vaLA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1k0j6gc9assjq3kfs2c49wy0erwes8ypk835229","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","funnysolvekf",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmAsnrgLxcvKY2QI1MjhoDeUIUUDiHwADqUcifqrqlTQ"},"signature":"57r528aWj5E0F4BbSvZKc0RSZjEhgQkp0a3vDk427QAXEPRAHU+zyz8VW89XfkX0t9ljvS3Sn63So3YQeukykA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1k0j6gc9assjq3kfs2c49wy0erwes8ypk835229","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["funnysolvekf"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmAsnrgLxcvKY2QI1MjhoDeUIUUDiHwADqUcifqrqlTQ"},"signature":"kkouzQdv98D2BUNDqe3AeITWhJ8UMWWRVzoo1WSzywIYhXke+c7E0w6QurdPm3NjtAiuqBEZiVT51r+ke2t1jA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1k0j6gc9assjq3kfs2c49wy0erwes8ypk835229","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1567","funnysolvekf","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmAsnrgLxcvKY2QI1MjhoDeUIUUDiHwADqUcifqrqlTQ"},"signature":"eMfmIO0SjWrMwq+MkfHpfFU5vBiaVVUbtoD9DkxioKIOeAamVW2pYlPQLY5E+HqTLsxp62D5O6XLSsefDHsMRw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1k0j6gc9assjq3kfs2c49wy0erwes8ypk835229","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1567","1","1","g1k0j6gc9assjq3kfs2c49wy0erwes8ypk835229"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmAsnrgLxcvKY2QI1MjhoDeUIUUDiHwADqUcifqrqlTQ"},"signature":"J6Y6l/owMWNkZWMcaiF1Q7RBq9cA8swGy6XBXUqD29labWPzranR1NtjSLILX0w+HUq7pXFCcu6yrGLrZTL34Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1m27g4zjz42w9hthm2hg5t4t5vrkyqfe4qz8jlp","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Zx1aRxFWBeSRYXBgcGJkEj5qtH7p1U29k4GLcrFikYw87v+YtG+mt0LazmWxCJqYx+Gk6JHC2Ru38Md90fuUNg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m27g4zjz42w9hthm2hg5t4t5vrkyqfe4qz8jlp","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","ostrichdadth",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AohhxQ/fZkgKN2i5cZL6x2lEmc9GxSJEuD5K4SLdKlxk"},"signature":"zaSFtqJhStFl21rJJ6MSkNdL68/SMGOB+ONuCSZHd1gQGnbNm2de+aNGFy3d0cWJTdZh0EIbiFYyIBiHu+1ZJg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m27g4zjz42w9hthm2hg5t4t5vrkyqfe4qz8jlp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["ostrichdadth"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AohhxQ/fZkgKN2i5cZL6x2lEmc9GxSJEuD5K4SLdKlxk"},"signature":"b8svaGNIzafFOcF8zvcY/pl5bDbMUBTCp+292yBDDVlUapttonnDyMMp23T8iG+lzFJZkHyaRZhZ88WBbH6Kxw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m27g4zjz42w9hthm2hg5t4t5vrkyqfe4qz8jlp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1568","ostrichdadth","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AohhxQ/fZkgKN2i5cZL6x2lEmc9GxSJEuD5K4SLdKlxk"},"signature":"N3eA4IvPzwpgK9hWVEog0FT3PfVjh09wwMZMybqN3+0xyITZFhdL48/f1wIWKN7JG4gLBQdwAQpQq1qahZgivw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m27g4zjz42w9hthm2hg5t4t5vrkyqfe4qz8jlp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1568","1","1","g1m27g4zjz42w9hthm2hg5t4t5vrkyqfe4qz8jlp"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AohhxQ/fZkgKN2i5cZL6x2lEmc9GxSJEuD5K4SLdKlxk"},"signature":"rQ3Qz0ewY2CEUGRS40LQnxf06kIdFNGiitMXD7EOArJsji51PhM8UB/a7DQLvFAUZz87BcyOuEd53Oyeq/0C6A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1xq0757z7g4dsg282l3jdpfhkutxx6sa065apdr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"QElFX82t2T4nApTQua8HDwFWWz38OFvjXM7CgyvYyO0HdLn1eIQsCH8ozTanshuo5g5sHLONmZCvKGSe9GpWvg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xq0757z7g4dsg282l3jdpfhkutxx6sa065apdr","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","newscat28",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArgHA6HYtwlybHVmp2OYmDvb+mnSNJ7eQB6pCwDpxkIv"},"signature":"DjZVUuyMxZBy0p37bKzhZ968XDyPtgoURlx6xaGV1no6vNwOBSEEpyeePseYVg/4lU2V0Y6bYf+b8gJ4UkJ0Mg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xq0757z7g4dsg282l3jdpfhkutxx6sa065apdr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["newscat28"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArgHA6HYtwlybHVmp2OYmDvb+mnSNJ7eQB6pCwDpxkIv"},"signature":"fr0irestwemVIrKX+7EOgSkguGjY/d51gQa/YdmPGKYTFo6FgRkTKAVwPkwT7KGf+vD3qPqxoaL/Bp2adnreUA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xq0757z7g4dsg282l3jdpfhkutxx6sa065apdr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1569","newscat28","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArgHA6HYtwlybHVmp2OYmDvb+mnSNJ7eQB6pCwDpxkIv"},"signature":"SxkeDh3KYd/CLaopR155sS4cdwdZoLoN0Kj66YlCWMx/Ep3dzN+A4XlnfMl574h/INT3HbJnQ+y19fVA60i4EQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xq0757z7g4dsg282l3jdpfhkutxx6sa065apdr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1569","1","1","g1xq0757z7g4dsg282l3jdpfhkutxx6sa065apdr"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArgHA6HYtwlybHVmp2OYmDvb+mnSNJ7eQB6pCwDpxkIv"},"signature":"pB2BuuhDlB3rTj6csd/o3lHR3azYTxRMLN7YAOrU0HZtHBv7B/8Ux6kdU8GxdYiYWZI2AxWmPyD3/h12IUSV4g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1a22x6h3vc260z4nfhrwtgz0xxre0ln2lkqr43j","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"pypJwogx/hF8lmbVB7YYTSWmMqXbDBQs/+9Itsv8HvAQuxmThJJeiohTBktDUwXV+mXGCShoTtzobt8ykqIzSg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a22x6h3vc260z4nfhrwtgz0xxre0ln2lkqr43j","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","turkeyweasel0z",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1WhAb52pFhC6xD3X8moFNRBvf3knkcHwQ0thA/wlKJL"},"signature":"EDcv0hc5TRH6RPU1eFSAa6J9esGr7/jRbpNcnGU1oaALSerOaNtIiWrmXzoKKzMHg+Ygmd1svXEb1BWv71tGWQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a22x6h3vc260z4nfhrwtgz0xxre0ln2lkqr43j","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["turkeyweasel0z"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1WhAb52pFhC6xD3X8moFNRBvf3knkcHwQ0thA/wlKJL"},"signature":"TUeiNPquMQ9g7hpbLDAYDqr209fNRs7LZv0E+IVKkv0YpGzmEolWY7ITewqWPs4PxJCXy09c+d+s0/3zeT8IRw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a22x6h3vc260z4nfhrwtgz0xxre0ln2lkqr43j","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1570","turkeyweasel0z","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1WhAb52pFhC6xD3X8moFNRBvf3knkcHwQ0thA/wlKJL"},"signature":"GkRSWrKOtRK1wHVUSSraAcCTnhtqk3FVRMVtsPlq+nUDMPkN36Ntzjzwxt+e54xSItzxa/AMvC3/xEBcGiY/gg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a22x6h3vc260z4nfhrwtgz0xxre0ln2lkqr43j","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1570","1","1","g1a22x6h3vc260z4nfhrwtgz0xxre0ln2lkqr43j"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1WhAb52pFhC6xD3X8moFNRBvf3knkcHwQ0thA/wlKJL"},"signature":"BmcYGjhFoFyAdnOYWJsxiciv0hK8nm+Wxykc3lOLj+0UX3rgAqifyVDQ4dH19BxXwNEUTz1ekWk//v6vCC8H+g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1q28ffjpc0j962792v7mpckuhll5rj2gp35dyy6","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"50haKtACdTcEOOe7ylMmTLFgpgUAaGy6MMzMWc8msfQ82bxbKin3ZLSyFOOOXLuys/EfgvB9cNxTJIs6NICIbg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1q28ffjpc0j962792v7mpckuhll5rj2gp35dyy6","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","signreturn79",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4kOY7qyndbvr2dhNp2OrjBmW7kEJwZqt9TqktdMa9FG"},"signature":"mA7AOwKz4P3AANt+X9DyhJFwGHioiG18iF8+54N0cywNRB+OdjDTYtaLhjCGkFFKluiLgGYKTMk0vrZz4n3Kaw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1q28ffjpc0j962792v7mpckuhll5rj2gp35dyy6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["signreturn79"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4kOY7qyndbvr2dhNp2OrjBmW7kEJwZqt9TqktdMa9FG"},"signature":"1efZ5IvVbELQz7YMFjWSX0Qb/TEZdBgguAQIaRiNMCZrA7ZSiqrZqjZsq+qbDCoiqMkK0VihQvqhcFGS93qM5g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1q28ffjpc0j962792v7mpckuhll5rj2gp35dyy6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1571","signreturn79","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4kOY7qyndbvr2dhNp2OrjBmW7kEJwZqt9TqktdMa9FG"},"signature":"tuzgCglgFGBw9/Joq20VvSYZz7bTq83x3rLJF32ti218TzamhURhQi3kYqJE819C7x8ic1BS2Z1whqw8lxUaKg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1q28ffjpc0j962792v7mpckuhll5rj2gp35dyy6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1571","1","1","g1q28ffjpc0j962792v7mpckuhll5rj2gp35dyy6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4kOY7qyndbvr2dhNp2OrjBmW7kEJwZqt9TqktdMa9FG"},"signature":"iYFmi03JaJT9wgxuABOOduwRxp6sN+lOLHSX01j16jwxy1Etc7PSYVks/Nuf3bwmmVtwCTSiTdWIiTlUcdHUdQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1c6042k8w9wsh9r093s0ukxxhuu96lu2jmys3v8","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"WhJKqiGrol15oh+YoqOBDNluwhk54fHKiDmBvOuL/1Vt8+mCuGzRIkgTA0Hs3zTDXHKYg2gi+9CRnDoE3V0BHA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c6042k8w9wsh9r093s0ukxxhuu96lu2jmys3v8","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","carpetlibertyr0",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3GPt5pBtw7fr/P/SE8HQ9ogz4MpogvAFVIrkLVI0/gD"},"signature":"CIdSBRWdD+AaNrP/AbBJmAijbXS1rbMH3hEtrxU3R8IYWOhIs6UXHQvXsqtrd3AbHzUcueCVgK3HhDn89aS7cQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c6042k8w9wsh9r093s0ukxxhuu96lu2jmys3v8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["carpetlibertyr0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3GPt5pBtw7fr/P/SE8HQ9ogz4MpogvAFVIrkLVI0/gD"},"signature":"KEHDjHCY8VVfwaCEGCsRJRplQQp2exfUOh/nqYdCXAhb34oZ8KAzI9Wzxjoxx6xgO/J/tpcMRVZDagVs4CtI8w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c6042k8w9wsh9r093s0ukxxhuu96lu2jmys3v8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1572","carpetlibertyr0","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3GPt5pBtw7fr/P/SE8HQ9ogz4MpogvAFVIrkLVI0/gD"},"signature":"txtH9FvejGii3X16NjDHdpEpNFFxt5vJ/8rizm5TWgg5JHY+ww1JHdo2HeAG8XcDgWOlL3o5D10YN+xQWt6+8g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c6042k8w9wsh9r093s0ukxxhuu96lu2jmys3v8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1572","1","1","g1c6042k8w9wsh9r093s0ukxxhuu96lu2jmys3v8"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3GPt5pBtw7fr/P/SE8HQ9ogz4MpogvAFVIrkLVI0/gD"},"signature":"RfjSis/BcSSYuYM1MqL1TCQm+0IcmsOlyVw+q2MStO0gexn0702srSSLkpBQ3niDoRAxaJQsxQtUreSRaJ6kAQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1608qdvjzazrew0vzadpvfshz53qysfg8hve2p2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"IXs+pS3ovGZxFR5AaHbbYN7xqXs98qkHOb7mgw+2ic4VIhZTnYEnsEF1uLr6+YMGSFyljwkZl7saTC3X4C8R8g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1608qdvjzazrew0vzadpvfshz53qysfg8hve2p2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","notablemention0v",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5fYJW4Vz2Z2W3Ig1P0CmSLa0Wp8YfEDT4yYt5eY6PP+"},"signature":"PdpbGN2J5g18QgMGPA15x1rYdXu4LR16kP3m93YJ4/9vkY/pFgfOJMmBk7rLuShDIhm28QpLAbMdlroozVGhuQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1608qdvjzazrew0vzadpvfshz53qysfg8hve2p2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["notablemention0v"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5fYJW4Vz2Z2W3Ig1P0CmSLa0Wp8YfEDT4yYt5eY6PP+"},"signature":"bpFj8oDiI9/tmc+zJD1Ds9RBxF0T3iMAeKRvEaQk2DVAHhcywsAyokqHZYNn/ZD7OoqgEfsjAkQElIbSPQsUjA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g16g3spwn89s2t9h6fv70gdmn7qmsvr45gmvvtg2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"EdkeZoTT+iLSmkcp2CECFAfrP+CTcCQTQlYvR/17Wep1Y3eraN2SxdANYPUHeeVA7p4ZK34QNgrhz+6o+0ykgA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16g3spwn89s2t9h6fv70gdmn7qmsvr45gmvvtg2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","imageprisont9",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A13U1d5DLw6pxrsSXIdrYNywjrMwlHeIawaHlVLe6lS9"},"signature":"/U+VBPZV4nQIbuCevvLOB2z8xJ/OeDvt0j6ZXcVaUzBfSzWd6jWdiG2xemeK3l+NFDCqE4vBre1gXJOilE8Yrg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1608qdvjzazrew0vzadpvfshz53qysfg8hve2p2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1573","notablemention0v","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5fYJW4Vz2Z2W3Ig1P0CmSLa0Wp8YfEDT4yYt5eY6PP+"},"signature":"kvatIMO93yjq8Je7dILdk/fs2lmFzfruOV2+omfU8qVrphr4iaqqw4tEJfh3EDNtUXmhqFlfshG7PuFIMDS9uw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1608qdvjzazrew0vzadpvfshz53qysfg8hve2p2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1573","1","1","g1608qdvjzazrew0vzadpvfshz53qysfg8hve2p2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5fYJW4Vz2Z2W3Ig1P0CmSLa0Wp8YfEDT4yYt5eY6PP+"},"signature":"dwY92598S08MIeEZQbwIKih14nVUbeXGZMw2Dkja+pwmfwkifWGIzjL39k6tIKbpUaRBPdXj41Li9EtJVpovxQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16g3spwn89s2t9h6fv70gdmn7qmsvr45gmvvtg2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["imageprisont9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A13U1d5DLw6pxrsSXIdrYNywjrMwlHeIawaHlVLe6lS9"},"signature":"UsyYZ3qwZScPRT6BbnZLea+afCvVAyghqya6LE3Z9RUcIiqNzdNdJDZIfCl2ooDSrcVcR0RBUo2d2HHyrvm60A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16g3spwn89s2t9h6fv70gdmn7qmsvr45gmvvtg2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1574","imageprisont9","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A13U1d5DLw6pxrsSXIdrYNywjrMwlHeIawaHlVLe6lS9"},"signature":"AwTGBH/eyBXm67cwXBCV8NxlawgMN6kKJam1968uDth7bcPjNy9TVvPZzgGURnb2Y9c+Yb6n7e4OiJEJEGXY3Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16g3spwn89s2t9h6fv70gdmn7qmsvr45gmvvtg2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1574","1","1","g16g3spwn89s2t9h6fv70gdmn7qmsvr45gmvvtg2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A13U1d5DLw6pxrsSXIdrYNywjrMwlHeIawaHlVLe6lS9"},"signature":"5bll9Dlg2PvUPQ7HhJv2boA6tQOrYjNIpN2dmrG25bIbipPN1anP+ZCjDMETf2U0jTkz3dVhjmGV63ClFWrDZg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g19udl7e0nj2674aptjfw5kz30uxu80ejk85sck0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"gHvnbN+vkxooJvr0nQ55igXDQEFFSlt4DZKGPeGkG0BQRgLTsRJIa4KXE4FhDzXaSmhzzX2dMFCQ6qH6tZNjgA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19udl7e0nj2674aptjfw5kz30uxu80ejk85sck0","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","denyautoap",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApZbM8fmS7BU3f5qOcMZZP1igA2IltC0CeN8glu24B2C"},"signature":"ZA0u6Ijan+q/ohEsiiao0BJ+/0l3mBfppbJUz5c6jy1Dggce8i8HNXP2jZUiU2+xx+M3e6kR0+fButyuoX0OJQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19udl7e0nj2674aptjfw5kz30uxu80ejk85sck0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["denyautoap"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApZbM8fmS7BU3f5qOcMZZP1igA2IltC0CeN8glu24B2C"},"signature":"00PG9Oa0Z9u0UHsj9c+r9koRx+QsM/ouBvW71EpxprU0SBdwXXMCr4YUyUZ+9nsCkwFRuFW1vm65qnQ5ZMkv3g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19udl7e0nj2674aptjfw5kz30uxu80ejk85sck0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1575","denyautoap","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApZbM8fmS7BU3f5qOcMZZP1igA2IltC0CeN8glu24B2C"},"signature":"NAGxFH3AOuHbIFLLL3U1fwi489aXrgPgOCu7f0Y/aX9szT8eZkmGs6cRRmDbfS1tGR+NY/Mmuk8ieg5OeBg91w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19udl7e0nj2674aptjfw5kz30uxu80ejk85sck0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1575","1","1","g19udl7e0nj2674aptjfw5kz30uxu80ejk85sck0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApZbM8fmS7BU3f5qOcMZZP1igA2IltC0CeN8glu24B2C"},"signature":"lWD/7/VIQoSM9FxEl082as9IAAarXKn/6pw7qUPJHNlpsh7uaUcjcbZ66vLACpIJkkAV3AwL5o7dEBVm918ERg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1qs79hg7q2afe365ut0yaruz8zrh08l4hueztv0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"164jYuH5aIxPM1bfXelamI0BCxzdbkFXyDS1tZpvmRYX5BYh4jOnuchdjAnYbmaxzAb/WQ+f8KlBOtzQrBIH7w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qs79hg7q2afe365ut0yaruz8zrh08l4hueztv0","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","cementenjoy65",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnBf60V+YIL456evGZNGCYvPPqO7ouY3+fn2a1gz/anj"},"signature":"myZHltWiD62Ppcqb9M3XohsR+xvTVPb8cAvsu731LUN92+c6UC9ZFK6AgzOM0rNXrYqrvZVrCGTiXD7yBCVF1A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qs79hg7q2afe365ut0yaruz8zrh08l4hueztv0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["cementenjoy65"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnBf60V+YIL456evGZNGCYvPPqO7ouY3+fn2a1gz/anj"},"signature":"H4DwTVkVGv0VHbFxe/Klg3tTzg36FUfOcr8gNgKBdm1eFV3NRLB1Caqn5kwOKEbhsrmk2XGFHfjx6ECoIJaCNw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qs79hg7q2afe365ut0yaruz8zrh08l4hueztv0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1576","cementenjoy65","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnBf60V+YIL456evGZNGCYvPPqO7ouY3+fn2a1gz/anj"},"signature":"mKfCSUXqp7WNyycKj8wUbFtavJ2x94glmSuSN/WA/Dt+e9fyJoqV6d0/xrkbO55j7A1FDwYaDzE32E3axkuw1A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qs79hg7q2afe365ut0yaruz8zrh08l4hueztv0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1576","1","1","g1qs79hg7q2afe365ut0yaruz8zrh08l4hueztv0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnBf60V+YIL456evGZNGCYvPPqO7ouY3+fn2a1gz/anj"},"signature":"PfEXR7yqu1/cp5bhBLBaCTpnkg74ToKiye0JW/ce+9soIuAcu5+71s36L204w20YQDvb2pphHLakcK/ReqHHQg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ac526y47tr33446y6dcgw8rfd89ca9vhe3gghl","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"gKEhC8NZpabrsOGdLKJHE48aIQEDJYReDrPVoI2v/ZYRXzvNeuY4WmqxGirMgRIwqo0SCQtjuDNZ9fnK/jimvg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ac526y47tr33446y6dcgw8rfd89ca9vhe3gghl","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","scorpioncoconut34",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhFq3+zfiPLyN+u/wojNbR1NAm2UAXZfX/xmsXoeb9Qg"},"signature":"lLY38FLMy59xdjFWYAWoha5l12PunmqJ/yeAUd8Z6I1LYoWZYlqhAtza3M2/p+CyEHHSqNntarDIj4Iz2lBhsA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ac526y47tr33446y6dcgw8rfd89ca9vhe3gghl","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["scorpioncoconut34"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhFq3+zfiPLyN+u/wojNbR1NAm2UAXZfX/xmsXoeb9Qg"},"signature":"zjNZgR4Mdn40HNenMPiJfPve0kEq8y8cpbmGeXVGnppC4IlXHc+WoyWY6PiNDToK72lkNHzTO/Kx1fKa02DPbw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ac526y47tr33446y6dcgw8rfd89ca9vhe3gghl","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1577","scorpioncoconut34","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhFq3+zfiPLyN+u/wojNbR1NAm2UAXZfX/xmsXoeb9Qg"},"signature":"srfDLveJQSPVtic2u2fetn1wwpLQHwFmMG0ruCP7ftFkib2NwsZxJnt0kvIIbDGXPGqgG4tXJr8PfijCck8DhQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ac526y47tr33446y6dcgw8rfd89ca9vhe3gghl","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1577","1","1","g1ac526y47tr33446y6dcgw8rfd89ca9vhe3gghl"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhFq3+zfiPLyN+u/wojNbR1NAm2UAXZfX/xmsXoeb9Qg"},"signature":"mf1OixW9xSPGSbt3FGCK/uU0YEI4kD4qruCDH2akgDcwCsXJGnUYV4ILfT2wfyo/3kIohs1RT9bBfKO03uVT1g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ef7lwzhwz98dprya2uuqr2z3v0etn8urayzrde","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Xj7wuTjtFJMjkHKzWTQFzXVqzb/IGOywOnsdvc9Hlwp3gjlRmu6GGQ6S42kMjxu5MSudJGmJHjpMkDfU9fanqg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ef7lwzhwz98dprya2uuqr2z3v0etn8urayzrde","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","wayhammerry",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah9EKhz+xyBrawtO7c3PO3I3B2XY8XnuKQ3Q1/gyBWW9"},"signature":"ztnqs+r39GX0bYYHcq/gXvTSlnpRpYW3qr354aF2+VkI9wVNYoBXulLpYxaK7xrw2f1DWV79FepJxr+ftEib3A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ef7lwzhwz98dprya2uuqr2z3v0etn8urayzrde","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["wayhammerry"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah9EKhz+xyBrawtO7c3PO3I3B2XY8XnuKQ3Q1/gyBWW9"},"signature":"+9bUb1T98hb1mDAPV2To5y+X9bWcfymTdVYL8848jiVpQvPMzKSPOea/ldHgNd8D5I5OYRT88F2ZjQb9/37BPQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ef7lwzhwz98dprya2uuqr2z3v0etn8urayzrde","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1578","wayhammerry","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah9EKhz+xyBrawtO7c3PO3I3B2XY8XnuKQ3Q1/gyBWW9"},"signature":"4ZuGsjTdcEdet4OVj6S02KTWgino7yLkP+u+3/EnpUpJKCmQo1rdOLnkxNJhXU4J+RseG813l6gEgxYWkq5uCQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ef7lwzhwz98dprya2uuqr2z3v0etn8urayzrde","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1578","1","1","g1ef7lwzhwz98dprya2uuqr2z3v0etn8urayzrde"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah9EKhz+xyBrawtO7c3PO3I3B2XY8XnuKQ3Q1/gyBWW9"},"signature":"HqCOOWKrvhdD0mIP5gY9LJU+gUffJ973wzL6Pm3lcrUAWNfNRMTPHP2oJ6wxC3Bkpj6MJTfHhWd+W0nKJsqOUg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g14m8mzalp7x7ydx90tla2an94xe2svtn005atd9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"NFPKoZVubnxsKKXe2kRNY2pU46lKOdDk9kct9CjI8LpoOiXk+oFyGhffj9uVI9dkyqYVxmuoe57ojsevEa+Q7g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14m8mzalp7x7ydx90tla2an94xe2svtn005atd9","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","domainidentifyx9",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/ZvVcTgrYBhg+wQfm79fAfkcg0NQQRw7HZXTWSTonC7"},"signature":"tNdoV/GwtNfgQk4x/JdrVqthb+g+M2amznp9jZ6dHcsE8CdNZxlv7T0SNXXOGC2N2xmOJcnxgf8RN6cB/HWCLg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14m8mzalp7x7ydx90tla2an94xe2svtn005atd9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["domainidentifyx9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/ZvVcTgrYBhg+wQfm79fAfkcg0NQQRw7HZXTWSTonC7"},"signature":"MJ7PqHA2O2WvYBOxVCTPCiYazbnwhh3feGFhyjbWnMoA0KN3j+gKqx0liwXcnhmpu19dTAqLaXETdE132c5iqA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14m8mzalp7x7ydx90tla2an94xe2svtn005atd9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1579","domainidentifyx9","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/ZvVcTgrYBhg+wQfm79fAfkcg0NQQRw7HZXTWSTonC7"},"signature":"hkLpGiB7jzNB+Ge3lDyqwUdwdP6GRn4dc4viz6IQqxN6W2eU3wMLAZE3EMBEtqUFNHBNQeltwdTuvt4mL0+EVA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14m8mzalp7x7ydx90tla2an94xe2svtn005atd9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1579","1","1","g14m8mzalp7x7ydx90tla2an94xe2svtn005atd9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/ZvVcTgrYBhg+wQfm79fAfkcg0NQQRw7HZXTWSTonC7"},"signature":"qfubTrqqOSHW1hPFNTm3WvTeVJU/+SUfD9NUL9I5WuVTZpmaJOoHUNeYuczpj1cWCA6GzilcwPVOcvi6T7DJqw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1rw73gtvzcudk6zcu5c7922jw3a97hxpf9ylzwv","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"h/KjzaNOOCx6PfKBLlFR6VfI5mpLl+rOumT+n+slRdpS75ARGSs3cDDnGEchXHfNRzvSGuaVmTWwIQYsvBkGuA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rw73gtvzcudk6zcu5c7922jw3a97hxpf9ylzwv","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","islandspikezc",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5fD65azyy5buzVqlMu/FiUFy7Aaki3ukcaFCY21tNwx"},"signature":"OFmdyD3qm7cX99TThdDoqopV9ojV+d2U5KXccPTxR4ANGLrhlTqCcoSuFdnFXVYhgLwhrH/Nupoc5d8cgodAyg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rw73gtvzcudk6zcu5c7922jw3a97hxpf9ylzwv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["islandspikezc"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5fD65azyy5buzVqlMu/FiUFy7Aaki3ukcaFCY21tNwx"},"signature":"KsmD+FFZTvPnJ/o9OLFMv/8kCupzG1cfj3k7rZd2zL1qF/Q9THvIX3UywsuGOt3g8CDnDMzKg5U7PlhFHB2Nrw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rw73gtvzcudk6zcu5c7922jw3a97hxpf9ylzwv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1580","islandspikezc","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5fD65azyy5buzVqlMu/FiUFy7Aaki3ukcaFCY21tNwx"},"signature":"+yOh39Glzh5yA8DLNkFC+5nRzVD35lHx0JKOIRXKpnM0V5QjbiPKGkW4vLj2iR1D52FnW+xaP6KPMDNRmBSiGQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rw73gtvzcudk6zcu5c7922jw3a97hxpf9ylzwv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1580","1","1","g1rw73gtvzcudk6zcu5c7922jw3a97hxpf9ylzwv"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5fD65azyy5buzVqlMu/FiUFy7Aaki3ukcaFCY21tNwx"},"signature":"O5o5mFK6yDI9O+8rIre34q3wJGkKpkO9mGS+PRJ+hj5AhWlPY1bfK8oJPd0CKEMoXIT+vaztf9VXieIIM5H8yw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12rusv2y70dnl7xngqsp3hx8e7jp64nners4e5k","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"HOZJjfq5DNUelwzResBsLWhOaqE9bfkEk/DeffVGJHctl2PsJ5CHxUa+XtnRlhz7dU+50rlKvuC89Xw5W5tHDA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12rusv2y70dnl7xngqsp3hx8e7jp64nners4e5k","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","cropelevatorl7",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Agf2KWKhlKn6HvkU1tAOMtUtNyi7L+sNfR168tar+HH2"},"signature":"aZWkfH/ny+eWaCrDtF1PVtcRtKqPzf4DiAP1BydPX4A3/XoLXxl04IYN7I1gg1pUU7j2hWMlvOj8+8gPbUCLmQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12rusv2y70dnl7xngqsp3hx8e7jp64nners4e5k","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["cropelevatorl7"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Agf2KWKhlKn6HvkU1tAOMtUtNyi7L+sNfR168tar+HH2"},"signature":"pqgqjj/icOsyaW4Hry0fcZzSy1dRLtHpvpsIaop6Vn5nzyHH/UCyGAaa0mKt+mVqygbqAQP5uxVsAD/CsVDpkA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12rusv2y70dnl7xngqsp3hx8e7jp64nners4e5k","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1581","cropelevatorl7","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Agf2KWKhlKn6HvkU1tAOMtUtNyi7L+sNfR168tar+HH2"},"signature":"k3mGO4hLQ8CrFSUBqzibS13aiIZEoQy4DIZa3DVPk65rzGvTZe1heDeUdf9YZqMjU3eU1d24W0FIkrZznLOuGg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12rusv2y70dnl7xngqsp3hx8e7jp64nners4e5k","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1581","1","1","g12rusv2y70dnl7xngqsp3hx8e7jp64nners4e5k"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Agf2KWKhlKn6HvkU1tAOMtUtNyi7L+sNfR168tar+HH2"},"signature":"9gi66uzcZwml1PdMCKD60sZQezOxw068hrwGqXuieRJwcdNs9QW+pqLPp87csZL8hACchUvUDcwL1bKwBvFJBA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ekantahjkj6ngt48p3322spenwewf0ludnc8mk","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"BFarGua7RZaPDmsbL9XXSBqhdXXM/LmMftHxQpbDhG1bXSuDT1otXsQ1+u8bLTegwRQY/WsqVovJqd1KZu4QwA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ekantahjkj6ngt48p3322spenwewf0ludnc8mk","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","twinindoort4",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2M1M+DHFPP+oi6E8rgn2GjVOHKkb/QniRuzZLHjwHAl"},"signature":"u/Tlp5AD0VtpTKjU92FSxlQp6oUOftCiTLZhKnNe9oNwBIeNMZtHWlWs4Tr8Ed/bF5Z1FCfMXOMqSGT/YRAocQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ekantahjkj6ngt48p3322spenwewf0ludnc8mk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["twinindoort4"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2M1M+DHFPP+oi6E8rgn2GjVOHKkb/QniRuzZLHjwHAl"},"signature":"D+08HTQS1bV4V+g/yAa6JW/yZA8+Pygg2t3pr2riy8hV+6liC0TRZP1ac99Wa4ihY7oXt4APT+3Ym7ZgNav9fA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ekantahjkj6ngt48p3322spenwewf0ludnc8mk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1582","twinindoort4","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2M1M+DHFPP+oi6E8rgn2GjVOHKkb/QniRuzZLHjwHAl"},"signature":"QWt4bhXlZ4Pq+XC+ktrHpIuP/bvxYcVuSu9YDA+FFtoBKVIrCQvHBsJUT3p6CfV2y9EG0Bl+T4JHnn6iECBhTA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ekantahjkj6ngt48p3322spenwewf0ludnc8mk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1582","1","1","g1ekantahjkj6ngt48p3322spenwewf0ludnc8mk"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2M1M+DHFPP+oi6E8rgn2GjVOHKkb/QniRuzZLHjwHAl"},"signature":"LVG31f01Vz735dMVnGrV2ujWBh8s5m2pOU65BmrVdSFQxz82q1ne47f8b6iBUEg1x22sjVJ5QbUi6fq5WoC8lg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1g50twd0rqhdgqsdj6q0p3040q3aun2ln3ttmsz","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"54ytEXp+52yBQ/0OWWZo2eEchSeTj3krANtMULqaUvprhBY8CqUlhFC9WEIiMeDyTCnSo52gma6yLrNErpIJhg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g50twd0rqhdgqsdj6q0p3040q3aun2ln3ttmsz","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","extendechosd",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ajzcn9PqWntZFUAQSS+DJiWCuckF2B2s5kQTFIR5I4xf"},"signature":"0ouJ6Qn9F7kZgaYyvK4a8Rz0oo2RvKibV8vV7dZosDBYu6nhp87TxMnnwba0Mx1osDceaSLDO7S2+vLbOb29ng=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g50twd0rqhdgqsdj6q0p3040q3aun2ln3ttmsz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["extendechosd"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ajzcn9PqWntZFUAQSS+DJiWCuckF2B2s5kQTFIR5I4xf"},"signature":"xUdiIxfa+CYbs8kpuSmvzYHVS1+czaSfWC07CvsN9Ac4Zi5isL1P5fDSniKLl3BRjl6qEAkv/RyIAGD/pk0a7g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g50twd0rqhdgqsdj6q0p3040q3aun2ln3ttmsz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1583","extendechosd","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ajzcn9PqWntZFUAQSS+DJiWCuckF2B2s5kQTFIR5I4xf"},"signature":"5FBP/2UDrF54H4mn9qk5IbKKXSTI0H/OLdNpuRFhIOBS3XoEA2iL6k7gKwNN1eu6Q26wPJtmYY/FaFLCn4BlcA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g50twd0rqhdgqsdj6q0p3040q3aun2ln3ttmsz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1583","1","1","g1g50twd0rqhdgqsdj6q0p3040q3aun2ln3ttmsz"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ajzcn9PqWntZFUAQSS+DJiWCuckF2B2s5kQTFIR5I4xf"},"signature":"PUyLQJv5Taftzj5/QbJAxtPwWcWMFQzkHSY3FYR3VrluhaObGef8G0pnLUiKBjqBzsn3io9FqTkxPXUjLh9NvA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1fjt89lut6al5h2ejaaugu3p8pxu9znz2rgd7ce","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"UsMFGzPdDtXslYJopZ8nXxlvURc3Cvum4520IaDHbLopuFP9XA80YMnHp8hYchYY5I7e4p/IErHXClmS+kow1w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fjt89lut6al5h2ejaaugu3p8pxu9znz2rgd7ce","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","silentguilt2e",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1e0NrTAPAUfyL6SRWxdiT54hp9qOHtHMpZfg4ZICmY1"},"signature":"MXahOnZXWnfXII7945XwwQRSjn6N/kdQTs3G++HvHqIrNFyFUQPnYQF7figI6mIaCz5TUqT7lWi72UcIp3+AWw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fjt89lut6al5h2ejaaugu3p8pxu9znz2rgd7ce","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["silentguilt2e"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1e0NrTAPAUfyL6SRWxdiT54hp9qOHtHMpZfg4ZICmY1"},"signature":"iHyZzPGVOmYMiMAZ/BMO8/JXcrkJyGxDQTXvtpPhbp867m/l23XuwHkk4YWWuC587WIpoiTTrJGEcLCUgr9ASg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fjt89lut6al5h2ejaaugu3p8pxu9znz2rgd7ce","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1584","silentguilt2e","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1e0NrTAPAUfyL6SRWxdiT54hp9qOHtHMpZfg4ZICmY1"},"signature":"fNfyVQLshUWJx7U3iv7U7zYiMalwzpDumyO6q/pqXgMQeJFRjFGXOrmJRc9Qo3ymQeYZ9K/EnfekxwJxq3hPOg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ka4yxgwtjgfy2kj6lycm5mll6ak3a7jc7lch5u","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Rb+g9Rk4xrr3T7ie8gyNdlbXwJnjY5p1t+FNu0HW9ugNFS+OhJA/2osq24J1FwbCJZErZ9xMhubpDgwdxvnIEQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fjt89lut6al5h2ejaaugu3p8pxu9znz2rgd7ce","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1584","1","1","g1fjt89lut6al5h2ejaaugu3p8pxu9znz2rgd7ce"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1e0NrTAPAUfyL6SRWxdiT54hp9qOHtHMpZfg4ZICmY1"},"signature":"D5/OFhavq0i7vp3X5tGdsIfAneST6a3fTiSGrInniI0jar3IIpZ/+DBfs65TM1PrWj/HYArgNpfolfM5DLAz7g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ka4yxgwtjgfy2kj6lycm5mll6ak3a7jc7lch5u","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","parklocky2",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax0Yp2A/2SprJK1dDscfERsQntQaG/nEXfC7x7Ow6uDx"},"signature":"PFhBFilNWNSWqLX2DZx693j+2eJYcYGqki7iLQPjUkIq80KkPwqSteEQ7u2W1+XNWYADn3RKV8I1VVGEUxOobA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ka4yxgwtjgfy2kj6lycm5mll6ak3a7jc7lch5u","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["parklocky2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax0Yp2A/2SprJK1dDscfERsQntQaG/nEXfC7x7Ow6uDx"},"signature":"CBIXd7xx4R4/3kKSL5T5Falv49dsE/Wm9Jm5U0t3H2AFZPmWsUQkCAxrhug/K3SnW9gcqX0EqqSZzxQwwhSZmg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ka4yxgwtjgfy2kj6lycm5mll6ak3a7jc7lch5u","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1585","parklocky2","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax0Yp2A/2SprJK1dDscfERsQntQaG/nEXfC7x7Ow6uDx"},"signature":"tBP+gXQGer+IgZX5PvkyhvzXfSLbPYHD3WpNiyv+s3sxcNi8avvJ0hZdUPCaBc2jNZPM7ownmcGOA/Tr6k0HpA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ka4yxgwtjgfy2kj6lycm5mll6ak3a7jc7lch5u","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1585","1","1","g1ka4yxgwtjgfy2kj6lycm5mll6ak3a7jc7lch5u"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax0Yp2A/2SprJK1dDscfERsQntQaG/nEXfC7x7Ow6uDx"},"signature":"6zS289xAnSwpUjlsJSpAIVwAhBnUAkQgIiSqQGBe6MJ8Ywksa4okXTU9IgZ1L606UzCzqjKNzNs5gl1j/e2v8A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1d44970fcp38jztpwzwetp5n86g47g2aaudf0v2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"zzgA6zGRfa715C0Cnbr8OXd/lGumxTkJXLPJi3sP8ZJ0a63eDzYCa5EkYpOhDnKRjnIzH8SV/305S8kzLZxhRA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1d44970fcp38jztpwzwetp5n86g47g2aaudf0v2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","beltpulptp",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmgfRiwNakF9V81uIPDxWBSQiTJEHnbz7j9o73AW+MaZ"},"signature":"PwILRtv6TNYoXUu5Firu6tCwR2wUrY5vgTBPSHSih1dXEV44tCOHQJ9Qv8aaZGJTCrXQKzLDYlIEQSmy+eJpgg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1d44970fcp38jztpwzwetp5n86g47g2aaudf0v2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["beltpulptp"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmgfRiwNakF9V81uIPDxWBSQiTJEHnbz7j9o73AW+MaZ"},"signature":"7P6RquX7La/cwnQkCOREvmyjm0b/irxeFQfLiR6UMUQuDkYIssRhdZfNi+dvfyvpO3ozP9XXtYJO1vTZwQHncA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1d44970fcp38jztpwzwetp5n86g47g2aaudf0v2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1586","beltpulptp","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmgfRiwNakF9V81uIPDxWBSQiTJEHnbz7j9o73AW+MaZ"},"signature":"t2Lb4ZbBEKHxmfc3gi6d/X2EBxOiukCyRLcYggSUrAgQUXg38OZn8FKIqF4jEjYb08rk+3tRa+PIWFXo+OM3/w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1d44970fcp38jztpwzwetp5n86g47g2aaudf0v2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1586","1","1","g1d44970fcp38jztpwzwetp5n86g47g2aaudf0v2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmgfRiwNakF9V81uIPDxWBSQiTJEHnbz7j9o73AW+MaZ"},"signature":"F6oVXtT8PW1s8vLfC7Z4Pm853sefj5hraJkyMhOZUbNQfdF1VfK29C9pL5KJz4se6UbZ/Q90NaKtX/vRQx4mGQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1r3he9hvxkdth8gjw9kxnhj857qwmdwntumjvje","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"dHDiWinEseTOMXgKAOkGNO6qcFXXaBgPexmCti6ZlRt5V+BLYQLa5nE2Qj2lqST14dlH3HRWJGJsxwDM4F1UMg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1r3he9hvxkdth8gjw9kxnhj857qwmdwntumjvje","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","crimediscovergj",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4sDms81Wt958D5kXwkp8IYvOki31MXUPBDgm+EX23kI"},"signature":"3rUs6UMenfIb+vAAbukr8xek5+zO9grPvY5Yz9lSyMJrhGkQZH9RBXg6Zi3WrWbwAb1V4KsYFB1/Jz1mLGenyw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1r3he9hvxkdth8gjw9kxnhj857qwmdwntumjvje","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["crimediscovergj"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4sDms81Wt958D5kXwkp8IYvOki31MXUPBDgm+EX23kI"},"signature":"w1LSkISEk1ihOY25SR89OnpUwHzTMwouObmbF42cnIBo2bMf1aPW7LXWHo84FYDlCH/2dDnzc+yX/WABCP7fsQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1r3he9hvxkdth8gjw9kxnhj857qwmdwntumjvje","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1587","crimediscovergj","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4sDms81Wt958D5kXwkp8IYvOki31MXUPBDgm+EX23kI"},"signature":"TGiIqq2Qd7dHoVNcjGQSoHa+f4j8lwR55s/IMqcJYess1gYyeBrS5xywDuRrFggKLz2yxyB2bDcEpWnQj2kytQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1r3he9hvxkdth8gjw9kxnhj857qwmdwntumjvje","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1587","1","1","g1r3he9hvxkdth8gjw9kxnhj857qwmdwntumjvje"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4sDms81Wt958D5kXwkp8IYvOki31MXUPBDgm+EX23kI"},"signature":"M2m7TLbk3SNsjSbQ9Rd/jF0u/0BqXLP8tldCaCB7yQdhBzpvKbaWjbDgZLggvidm2I2TPnJA9DZbcWKqqfgq2g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1tlrasgmvvfxrgfuf87cugq3aqvzvdqv3sjuqgl","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"NS75N+6jOqroAlVq7wepbR+62A4JIeKylp4Rcwa1B/5xvAx339JWVGupL+rPSxungU9Ket63tbuhjdwL48+QMA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tlrasgmvvfxrgfuf87cugq3aqvzvdqv3sjuqgl","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","linkminorrg",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Anhu1pczlBqxgQUG5D3rPaRLr1CRJxE2FIriLtOF8WR2"},"signature":"dPH8oNiFiWmNFizEyI73OFDxEKwYZtJTT584w5vAA+s/8Y+cHlQqPgQrSdroTvPv3GRa6i6yiTeBob8gupDh2A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tlrasgmvvfxrgfuf87cugq3aqvzvdqv3sjuqgl","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["linkminorrg"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Anhu1pczlBqxgQUG5D3rPaRLr1CRJxE2FIriLtOF8WR2"},"signature":"mISghwv8bKkcesVGPu0EVaErfaj0QxPWLwwyFnBQIrB1tmUz4gUBqMTSTF9QSkPCk/xUL51+zo5JO/9dCEGZiA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tlrasgmvvfxrgfuf87cugq3aqvzvdqv3sjuqgl","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1588","linkminorrg","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Anhu1pczlBqxgQUG5D3rPaRLr1CRJxE2FIriLtOF8WR2"},"signature":"9j6J8lS0sHUSMMUhZ9PTtlzDwsqq51fWzmRyMZmNpB0u0OxCtt3FibL6fhK3+GtEDrIsi8ktgbrNqxkOhnrtKg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tlrasgmvvfxrgfuf87cugq3aqvzvdqv3sjuqgl","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1588","1","1","g1tlrasgmvvfxrgfuf87cugq3aqvzvdqv3sjuqgl"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Anhu1pczlBqxgQUG5D3rPaRLr1CRJxE2FIriLtOF8WR2"},"signature":"UxLxxZ3AF+moTXxID39QRrMhbqlWsQ+0HfFY+pwZ7dh2UKsy2fgeG/b0gMwkwx/yo6aNV3Dw9Uijk6pdfwmfFA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g196kxky6cs6my295s7p487ncavkcrks7nvtg79t","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"n+ENxoYr7n42BLbxCIJsreWT3PfNvSkHrBHYMqW+h4Bc/d1KT0TJYfImzamh7MTtTJ9jOuzhRNdplvrWYIe7FQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g196kxky6cs6my295s7p487ncavkcrks7nvtg79t","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","loungefrost95",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzMQTRihE84kB8Q3VtNHkdC4ljaW207xZ6Y+84az0iG4"},"signature":"gykhgGNDwG4nAJJL8qI1y74bV42rgZVOwg2Vhot1OUk8EGcZ6mgIA2a6c/yMVdWoFoECOhthURtD5b6uORbr2w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g196kxky6cs6my295s7p487ncavkcrks7nvtg79t","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["loungefrost95"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzMQTRihE84kB8Q3VtNHkdC4ljaW207xZ6Y+84az0iG4"},"signature":"sxjDu+5OzRxRd4kSKBh562qFfrsdWdQE1t6ZESrtrndAPsrxkWuUA2x3WGRE9aGIJE80ObPO2GTad45/rQYTag=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g196kxky6cs6my295s7p487ncavkcrks7nvtg79t","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1589","loungefrost95","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzMQTRihE84kB8Q3VtNHkdC4ljaW207xZ6Y+84az0iG4"},"signature":"a1xHh4Fa784CX2982mlVN8D9R67NkuzDMwByieEJ8XA91f+sJrm1T7p5j2wdc2xC91GKM8Q7BfTTipzvm24QXw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g196kxky6cs6my295s7p487ncavkcrks7nvtg79t","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1589","1","1","g196kxky6cs6my295s7p487ncavkcrks7nvtg79t"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzMQTRihE84kB8Q3VtNHkdC4ljaW207xZ6Y+84az0iG4"},"signature":"xwj9VR/CWPnZdk5w2IhQJ3dzlZ/j22Sjnm/dq4TS9ko2Q80eUpQ8WXFr2ZyGsp0vzw+hp647/5GtRvPji4VTcw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g10hekmqnle0yndzkm9zjtzz3xfwu3d2nn56l564","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"H8EGfjLkicviV1cY5L/g4zgeJyXF2CSiBwITM4NwOk9GbQ5CJBG15f//Ab6QyNRWSZvVYxqaP0JQrelx6RqZKg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10hekmqnle0yndzkm9zjtzz3xfwu3d2nn56l564","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","volcanoreunionzk",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvM4y+VPMl//yfOym6HUwE/iT31NvB1jb05X+IaKVd0j"},"signature":"JofFdKg08COq2McR+At3ScUOQOW3YZYna5laJM/bAEpkPSZaOIDtAz+iBMvllb+9IBvG31k+ukNPJTEoV6E7VA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10hekmqnle0yndzkm9zjtzz3xfwu3d2nn56l564","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["volcanoreunionzk"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvM4y+VPMl//yfOym6HUwE/iT31NvB1jb05X+IaKVd0j"},"signature":"ylHs58Ia4kEHx5z2AvJX9nQy4VOXQvYXCTZDOjsm2LwBCHqGxMY2eMWiTT+3W+V1/C64mHIhKNBmklKUBHFY6A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10hekmqnle0yndzkm9zjtzz3xfwu3d2nn56l564","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1590","volcanoreunionzk","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvM4y+VPMl//yfOym6HUwE/iT31NvB1jb05X+IaKVd0j"},"signature":"gcvQH3CVm3UAtLBaZm4MZENFuzkLJ2AXs0gBz5lAB1h8WqsYovRrcvZ4Y/sBFCthRHo+fC/21u1Zi34S7vz3rQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10hekmqnle0yndzkm9zjtzz3xfwu3d2nn56l564","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1590","1","1","g10hekmqnle0yndzkm9zjtzz3xfwu3d2nn56l564"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvM4y+VPMl//yfOym6HUwE/iT31NvB1jb05X+IaKVd0j"},"signature":"wHW6jtZMshK0w5R91l5ZBIbaWilcU968in/auJdWFMICIHa7rDrIuUOqfIEnOw+EbgP2TxI0EOL8X7Oer2OjMQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1enntqqql8ew5sfxkz20je4zn6syjdxvpx7fct6","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"VSxAuaLG/Bhk+vgtfO8orrHp26nV7uC55KnlmcalHqFOw6CcpkmYS/UWjQcifUXRR40tco/iKWiNI1CXbeaiLA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1enntqqql8ew5sfxkz20je4zn6syjdxvpx7fct6","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","tracksoulfx",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ak+rT/Omada4rMs4fKEWWNt0+NBRSiPw+GEWGc2/3jp6"},"signature":"NpqvlF9Lt/FI7lqTqlNb8b2jmKZamrB7HMqPw98/YXtRdQfpUk5gaXI+CPG2gmp+8uCx0nHcqjCsb9B9rBEfFw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1enntqqql8ew5sfxkz20je4zn6syjdxvpx7fct6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["tracksoulfx"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ak+rT/Omada4rMs4fKEWWNt0+NBRSiPw+GEWGc2/3jp6"},"signature":"nZV5zNT57s9Vek8I94/BgGpZumZrMBGNoDvs+gMDJOExK6zBH6vCn6mJJgM95lp7J9AeZwJJXqlgeKva5cg8dw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1enntqqql8ew5sfxkz20je4zn6syjdxvpx7fct6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1591","tracksoulfx","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ak+rT/Omada4rMs4fKEWWNt0+NBRSiPw+GEWGc2/3jp6"},"signature":"mDiljSG5Q5pO6uILOusWY2qbisSK5UIEzKUvUhc0AwxuA0NbwdH9PCpolbdc3DEgzDONROR1JZhMRRte0kucPg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1enntqqql8ew5sfxkz20je4zn6syjdxvpx7fct6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1591","1","1","g1enntqqql8ew5sfxkz20je4zn6syjdxvpx7fct6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ak+rT/Omada4rMs4fKEWWNt0+NBRSiPw+GEWGc2/3jp6"},"signature":"wiGerwbon9e8nEitoFPVz9zMF4bF64C780i/+cTzJG4RG+ziMChDbUsF4nTgUDYOAg52ZZpX3CujgKHwjZjrmQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g17yghlhtqnhmxjalgcuep5f39chek2gaangnwhx","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"1dJY7n5n9y0fLPmOieHxxl4k+WUKQA8YRiw79UbJx7tn/ydJgmvMl8Qv3+TwP4TgmdyV+b54w9cr6G46rpb+mQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17yghlhtqnhmxjalgcuep5f39chek2gaangnwhx","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","tuberetreatxj",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkIFfggSQp/26ZuJQUWNFl8DMV06vAvtx1t36zA+bMzy"},"signature":"pfQb79n0bPyERazL17Fa/zEF0pJHHM+io6jFW/44r1BX5Z6di+NYgJHy+lf8TnV1t6tHodyShMVcAxZm+7mSRw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17yghlhtqnhmxjalgcuep5f39chek2gaangnwhx","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["tuberetreatxj"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkIFfggSQp/26ZuJQUWNFl8DMV06vAvtx1t36zA+bMzy"},"signature":"bKkJLsekA9gaYJKYZb4+909Ag19JlgWEj4j2aeb3jP51kofYjlQAxWJAy5zptuYHo6hTMqtevxKpqDLGuVng9w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17yghlhtqnhmxjalgcuep5f39chek2gaangnwhx","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1592","tuberetreatxj","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkIFfggSQp/26ZuJQUWNFl8DMV06vAvtx1t36zA+bMzy"},"signature":"F2aeOWSvsrdIAkiP5vVmtdNeNf0MD0mW+faqeK0BEhNRSD6aOLz/E+BkFfXZ4qspwua0zuvVWYvwrxEegkaA4A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17yghlhtqnhmxjalgcuep5f39chek2gaangnwhx","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1592","1","1","g17yghlhtqnhmxjalgcuep5f39chek2gaangnwhx"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkIFfggSQp/26ZuJQUWNFl8DMV06vAvtx1t36zA+bMzy"},"signature":"RCwwbwtmJP3368z3yCF0dcjTC8xH4hq+3D1lJFzFCrtH6T58AWWEAU2IT08/kPypdhKr54pORuK/GzPIcgTBiw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1u4g0ls4wqucyrj9qzg27wpehazycpu53gmrtnz","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"o+C1DoCjVZ+fIuSGMEvlrlcpvaVxCwdIPC2OTVyWzrpdDwaYUwQKTEgZ/CooP8ZrqyJ7qRBWpVD+52ZUal9xiQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u4g0ls4wqucyrj9qzg27wpehazycpu53gmrtnz","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","roadfaintj9",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aw52KQ1y4ea5sL1DZuH5D+/sRKnqouZVh1k9dEoY+3aS"},"signature":"eSZaSzoR5Uh9uvdKSHIqZJgVsUVsgXExEaPrLkMf1wktMFebAwi8ch8zQQnaAY5xJysgLcK3ssahTFbNpp7jsA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u4g0ls4wqucyrj9qzg27wpehazycpu53gmrtnz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["roadfaintj9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aw52KQ1y4ea5sL1DZuH5D+/sRKnqouZVh1k9dEoY+3aS"},"signature":"tiCdu6sY10v0vC0amIpwxk+hEutNku7M8BS3FZ26uo1VZFauj910rIok7B30fVoai/XS5YEF4N2MbmOFBKi6FQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u4g0ls4wqucyrj9qzg27wpehazycpu53gmrtnz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1593","roadfaintj9","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aw52KQ1y4ea5sL1DZuH5D+/sRKnqouZVh1k9dEoY+3aS"},"signature":"FtKgB6JNROnS46mvdcF9ma66k5eYq/3F1UfAmt5keXRJlZU40VA4le6h9wct11MDRb0wGcsqYFsfxQmvBGiXcA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u4g0ls4wqucyrj9qzg27wpehazycpu53gmrtnz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1593","1","1","g1u4g0ls4wqucyrj9qzg27wpehazycpu53gmrtnz"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aw52KQ1y4ea5sL1DZuH5D+/sRKnqouZVh1k9dEoY+3aS"},"signature":"oi8D9J83LGa62fJeqWbNAUVGFtFlQN9Zni4DQRvwKSFPgdgKnZteedTTioGoKYmFR47jzNA4RFJQgu9weKd/uQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1e3mu25nmdpd6a4zn3xtautalw9j609sxg877ck","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"m/cTmE51tpt23MbaobJ2fw+gKZezwHRPhIYGVhJnXfpKzEag40+nae31Sgt1mDW9CWEA7cNC5y/qa/Ul0LEGQg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e3mu25nmdpd6a4zn3xtautalw9j609sxg877ck","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","fuelfloor4z",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"An07rFNV9qT7v8Lgd86UjL1DPWvsX5RR5JboBU9Qe5eC"},"signature":"DNm+XJKGWJMAHODvxHfa/MEFvxGttQkfqr8PQV+RJAxspXoSM0ZDYhz6TniHffPxLUBPz3KeTuukX7CGBjiSLw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e3mu25nmdpd6a4zn3xtautalw9j609sxg877ck","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["fuelfloor4z"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"An07rFNV9qT7v8Lgd86UjL1DPWvsX5RR5JboBU9Qe5eC"},"signature":"xKT++8SQ3ZfUL/hgyRHU/ds0ZHPAQdPzv/3KHM9DCWAAcFBrsADuKvmZnkVZR5ENY5oS+KDulRXL+Uia310jDg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e3mu25nmdpd6a4zn3xtautalw9j609sxg877ck","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1594","fuelfloor4z","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"An07rFNV9qT7v8Lgd86UjL1DPWvsX5RR5JboBU9Qe5eC"},"signature":"w4LAdZtCOHcyX3xvnF1vm8qP6SghkyCq0USxqfpYfBtj7x0lv3Z3UVfHpy/4D8J8+qQkeFia7AWnzWvzzoMGHw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e3mu25nmdpd6a4zn3xtautalw9j609sxg877ck","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1594","1","1","g1e3mu25nmdpd6a4zn3xtautalw9j609sxg877ck"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"An07rFNV9qT7v8Lgd86UjL1DPWvsX5RR5JboBU9Qe5eC"},"signature":"AHRzlmF/wJbjTIv5LhWHR/L0KAAzZIKdhTDBF0RBOE5DUAKVXUNJDRD+Z3GSlKJjX+mp9YsGCbdN76rcg1ly2w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1na75zmrw3nx8dl7mk0p7hntnj96kmn3mn9dht5","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"f7X4rCmOgyXPTPI8W7yTkCYgczDLijndrPiBDO1RKyZlZDee1YsKxxfRyjgWMxQKgGVxIsAfqqsjcZ5VxtP/tw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1na75zmrw3nx8dl7mk0p7hntnj96kmn3mn9dht5","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","spenddecreasel7",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsevkcrjwNa/5TJLNHcGw1Cp5e3On4yOunkOE02dLVWE"},"signature":"gyUWhBiAfzF/mrSYmV8utJJEgLRaMafjCswdE6LETxxg9MHfVYde9/HabybP9KFTFdZXVTPi8BGy5EL8jetd8w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1na75zmrw3nx8dl7mk0p7hntnj96kmn3mn9dht5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["spenddecreasel7"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsevkcrjwNa/5TJLNHcGw1Cp5e3On4yOunkOE02dLVWE"},"signature":"d63Xeg02NSsokZdhQBVWvXkFgmPWnrnzZ73PlB0CQnwtx1k0MsHc+CZoKcnWUOXiq5L9boanWPljOouz0GEThA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1na75zmrw3nx8dl7mk0p7hntnj96kmn3mn9dht5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1595","spenddecreasel7","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsevkcrjwNa/5TJLNHcGw1Cp5e3On4yOunkOE02dLVWE"},"signature":"PW1Hb+wQrMecpWir3u7hNxd/zinhfkEGSyZ+UF8JbqoWdGIXbT9jYHJfxBumFD0/hpaOVZBHJ8ECn4jhgoVb2Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1na75zmrw3nx8dl7mk0p7hntnj96kmn3mn9dht5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1595","1","1","g1na75zmrw3nx8dl7mk0p7hntnj96kmn3mn9dht5"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsevkcrjwNa/5TJLNHcGw1Cp5e3On4yOunkOE02dLVWE"},"signature":"BHr3+giqTIHt/uGrMOb59HPOMdMj7hvQh8q+YwuqWzANihCT7q+2794Se8UlkifrIDNS+uxLvcrQ+LiRapWZWA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g169x8przs2nadvnnuz8p05200swptpcune4x7ar","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"so5kJ2vTYeRczOM2tDECUzkFZYkEImHs3MScVL+yaudo70DT+/uWbInZxWvEwg/gvNePHGUXq2AWvQ3tq/IGDQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g169x8przs2nadvnnuz8p05200swptpcune4x7ar","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","outermixdv",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApP7tpn384AFcdBp2WnLtEgQ/3TLNCvRDqhEROvBrNzB"},"signature":"MhOlDyeckf02q/YX9k5ec+SLsBaAFGQ+USgmH1FPyn92sA0w3EeJRd2udZNNpkmR5WJty51bss2zcBwbtDUDUQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g169x8przs2nadvnnuz8p05200swptpcune4x7ar","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["outermixdv"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApP7tpn384AFcdBp2WnLtEgQ/3TLNCvRDqhEROvBrNzB"},"signature":"mWjK7b7aOvGHuxQxH7hB2JQ7wIJnVCbvMyJTXR0+uE43oRjzX2JWCcdtr5GOk2ixfxWubUFb+3EJWXmTpnDVJA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g169x8przs2nadvnnuz8p05200swptpcune4x7ar","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1596","outermixdv","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApP7tpn384AFcdBp2WnLtEgQ/3TLNCvRDqhEROvBrNzB"},"signature":"OldmPIhUQKnsT6LAuX6fFCZK2E0t/3Op693SvVD71mBXJJg+j/5fpAiYxCgOV5ZSU4YLvpP9m8jza0UbC7xSmQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g169x8przs2nadvnnuz8p05200swptpcune4x7ar","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1596","1","1","g169x8przs2nadvnnuz8p05200swptpcune4x7ar"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApP7tpn384AFcdBp2WnLtEgQ/3TLNCvRDqhEROvBrNzB"},"signature":"P9JUxKt6Sicq51YDTJ49bZF4DNjDMVtka4ItxBl6vJBMBaE7G3i0FDBnlX1BFZDgZ8eKsmWa3TGmyJ4uI9IidQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12m7sqeymezkegflwxmmc24lvsme8faya2pq4cp","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"yiM5Xm37dm9m9kra7um7+iuqBe8RbdYmCDuDm0FKkWREdL+DxE8rqoLzfJxehkxYf7AARuF6A0vlF1NsPAyoLQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12m7sqeymezkegflwxmmc24lvsme8faya2pq4cp","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","amusedvintagefl",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmgqPKxT7JKTWnlTl3Q+5U1H8g1eMS5FhjZ6ft/2wJ5Q"},"signature":"nVCWsdrQpBOqivlA1jHzZ++oM9Q9JOpB2xUD639XtK8WOr/TNeYYO8O9mPVY5PRInSgTnGTKDGsrEUFGAquSQw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12m7sqeymezkegflwxmmc24lvsme8faya2pq4cp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["amusedvintagefl"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmgqPKxT7JKTWnlTl3Q+5U1H8g1eMS5FhjZ6ft/2wJ5Q"},"signature":"Slk9uxB9mXpIMaQBzEqatWil45NIG37leMl7NjkFggIsx44pX5ED5v7EIdba8yfJMmXVslscWcs4wFiKDREzMg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12m7sqeymezkegflwxmmc24lvsme8faya2pq4cp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1597","amusedvintagefl","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmgqPKxT7JKTWnlTl3Q+5U1H8g1eMS5FhjZ6ft/2wJ5Q"},"signature":"wiRaIW9wqQHM/JY3kR6ouGg9HdvzOjU1gy0uWhdWyzh9Ixe6TfcFD4SBdGbeu0byzDdNfVgwfp/lfloS0IXYnQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12m7sqeymezkegflwxmmc24lvsme8faya2pq4cp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1597","1","1","g12m7sqeymezkegflwxmmc24lvsme8faya2pq4cp"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmgqPKxT7JKTWnlTl3Q+5U1H8g1eMS5FhjZ6ft/2wJ5Q"},"signature":"PfksrCxEfSZkPxeC92lkjviyHqVarpGNJNawbfhYxk1GPta/4/u1HCimuIuxGtVPgqCuUjQD2dpn68x9aVsByQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1na20eq4nju0uum9spwfcpesnqacjdl2esy8lrz","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"u4t9pDSkxpB8CJQWokpODVsYyxi+525d0f4Koq0Ms30fSq5+YhlcEzup6s1y5z4YFLK59NkXkO+Vd7hfUxpzrA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1na20eq4nju0uum9spwfcpesnqacjdl2esy8lrz","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","needdovem9",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8oJU4fqRZWyC/F16lJL5q4yCQjgC8/CnkMxaV43yaLM"},"signature":"1TIX3NzofEvVvdmhxuiLUnlT/NVpkcBA5tzO5qr/NRIhPyjncdHjFDnigxYqzBnpZSMNeEzGJR5kPB3WFFnvgg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1na20eq4nju0uum9spwfcpesnqacjdl2esy8lrz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["needdovem9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8oJU4fqRZWyC/F16lJL5q4yCQjgC8/CnkMxaV43yaLM"},"signature":"DTXvnaMcu/sj8p0vCIIjUMYxi8GbuEMKVlg69Z+So2IIRatrNaAtdnoxHb7aCOwJBH3WrhwT/BRFS8VHIguTWA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1na20eq4nju0uum9spwfcpesnqacjdl2esy8lrz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1598","needdovem9","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8oJU4fqRZWyC/F16lJL5q4yCQjgC8/CnkMxaV43yaLM"},"signature":"Nu0W6j/BclisCHSGJ2RIgeP2w4dD4/nnEEvlfn2BILhKEuXAQTsF3ca+KZn9j96TVwBHyJP9o3jhdsKf0D4TDw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1na20eq4nju0uum9spwfcpesnqacjdl2esy8lrz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1598","1","1","g1na20eq4nju0uum9spwfcpesnqacjdl2esy8lrz"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8oJU4fqRZWyC/F16lJL5q4yCQjgC8/CnkMxaV43yaLM"},"signature":"NPDlcnyG8wRSrIGr+mGNjzBX8QFgNhszwGkZAfBsAnhecm7z9GCqQO0bMTOE90qUeYK9fpyCyQICvm9Z4bsVQQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1d7x4huwrrktw7a4ae4le5hjs398amlugz2hhf6","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"fP9v8H4HICB7B1YMLZHijEqQufOLr2WQV6pLgrkpjP5KYAf3+HdVVtDQm2yeaeXUq43dGlgiyN3jRaPhgDNFmQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1d7x4huwrrktw7a4ae4le5hjs398amlugz2hhf6","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","todayartworkw7",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqbYqNxffx8Sb1mJIJy31x03OtjCb4IvsIyid6cyJcX+"},"signature":"UaRibVIySrSQuDmUTkh9QV2l39wX8dB3sIue1Kk3vno0X0ZLVwNSZWE9BL3bBmn80gZXvxf0+JHt/2fBHv1cqw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1d7x4huwrrktw7a4ae4le5hjs398amlugz2hhf6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["todayartworkw7"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqbYqNxffx8Sb1mJIJy31x03OtjCb4IvsIyid6cyJcX+"},"signature":"PMHtTJY87UpaX0U+Lga/WENGg+k366M/t6yqT67iGqcfwqzlo3z5ASF8474F/SH5o2nQFq1iZiUMUYv5bqDp9A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1d7x4huwrrktw7a4ae4le5hjs398amlugz2hhf6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1599","todayartworkw7","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqbYqNxffx8Sb1mJIJy31x03OtjCb4IvsIyid6cyJcX+"},"signature":"b6RAddnzqDUa29WkAHzjxWdlWC16au6oiaFyy58+ZtlStUNYganKuq/+BXsriXTqJhU9lRfiY+nIeCxdj0Erag=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1q6rkkgnmaav60np6hlc33sdte4xec8tgk2fhct","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"9+Bwz4rzIk7FeY9WijBufDVAjC+6LlXGjwkgug8hQKcN3s8MYDmL3PQXqSl8c2KHeMLPTfUpnOI7fJX+dzAAXQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1d7x4huwrrktw7a4ae4le5hjs398amlugz2hhf6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1599","1","1","g1d7x4huwrrktw7a4ae4le5hjs398amlugz2hhf6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqbYqNxffx8Sb1mJIJy31x03OtjCb4IvsIyid6cyJcX+"},"signature":"RxKrDanOP9ILnhELqcR8+3UIhov9N9/U6GY7lWp/ndweR5FJB4kDRKNyEI7OVrMhXJNrOlMz/fEl0vZRlHvs0Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1q6rkkgnmaav60np6hlc33sdte4xec8tgk2fhct","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","wheatchucklenp",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoL0br19WqQrE6VC+5rLyxLGrMWOxMjNzUrmUXeoPT5k"},"signature":"4xMG3rO77hajw9NWiihJ0JgWALExA+NfpQIwoObrR1Z6NnXtzHgWGYM2NyYBoHs4Rdh4yQpEcQLtEbNLC1jKWg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1q6rkkgnmaav60np6hlc33sdte4xec8tgk2fhct","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["wheatchucklenp"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoL0br19WqQrE6VC+5rLyxLGrMWOxMjNzUrmUXeoPT5k"},"signature":"pZitypeFrukqLGUM3UFsXYX98FUX44GFDCI9zP6uCP8+PIXzMr5/0q/GIiRPjjOGLot6w8n+5Ab4s16CLMHAAg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1q6rkkgnmaav60np6hlc33sdte4xec8tgk2fhct","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1600","wheatchucklenp","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoL0br19WqQrE6VC+5rLyxLGrMWOxMjNzUrmUXeoPT5k"},"signature":"Nb90frAtRo02n2HvJ0oYDlmv31GD9VDdjgYsV1sc9GkzWEnni4E9tjH23p3o0bg+6Bv/UXVl3L9b4p6sMhd9Sw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1q6rkkgnmaav60np6hlc33sdte4xec8tgk2fhct","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1600","1","1","g1q6rkkgnmaav60np6hlc33sdte4xec8tgk2fhct"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoL0br19WqQrE6VC+5rLyxLGrMWOxMjNzUrmUXeoPT5k"},"signature":"YZ6FewZ9jqjVScdjYC11tEmhxoypujkUOAPwh1PJJPEJr4gpcDOaDvmaDjRzXyrbM0MiBCyEELU0aeOTG2FIrg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g14n3qkleaqhtyagvnswujyxv8rjtjcp2qedls4c","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"5mBlxfuhqQy51xl20Af1BL6zJ7m8ZGsFg6fYjyiCHIFlcWCK+t3i3aT3XX06AK5fB9wHsVi4zqn7aeuEQKxd5g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14n3qkleaqhtyagvnswujyxv8rjtjcp2qedls4c","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","punchpupilgv",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4l+W8WdgRy+kpWJWbHZj+gxAbCI8I7LOiTFZAQT0d+5"},"signature":"jWL3tyhp3lJYHunfpZhQGQN7Rte1iEjYC3Egj4jHAuB50h8ElAW+5bhnmTQTLT3d89lwBCbKJtPjva1AW0XkUg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14n3qkleaqhtyagvnswujyxv8rjtjcp2qedls4c","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["punchpupilgv"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4l+W8WdgRy+kpWJWbHZj+gxAbCI8I7LOiTFZAQT0d+5"},"signature":"ShOAzKna1Z/ZMbm4wkPDoDdWZi82jVXkqIzxoMyn7HIwc8oOVFyK7x2V+pWkUA2KdTiwQfhMtYJs8wS+gvPLjQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14n3qkleaqhtyagvnswujyxv8rjtjcp2qedls4c","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1601","punchpupilgv","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4l+W8WdgRy+kpWJWbHZj+gxAbCI8I7LOiTFZAQT0d+5"},"signature":"Vz7KekLmp0SKH+uDlz+BGwnONybHFBuQEgyDg0pxvMchqs3Bw2VhS9PaE84fM5IgRjoRnTSjzZJRnoG0vuzRQw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14n3qkleaqhtyagvnswujyxv8rjtjcp2qedls4c","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1601","1","1","g14n3qkleaqhtyagvnswujyxv8rjtjcp2qedls4c"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4l+W8WdgRy+kpWJWbHZj+gxAbCI8I7LOiTFZAQT0d+5"},"signature":"pxtL9ceDhHwVFcIsHnlf8OkTZV5ccRTTkzdeP2ZB+awt1hjImcQazINAJbwQwCWctP6fPHC5wqBdxagpGGYvOA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1eftqwze6023f7tkleadaj4nzqkz99j6ac5afkt","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"krvkxFPiB2FzIAbbyZY8UzKA7Ws86sXzucrBvrUHz8ZwDJ5Ka2qq4XAIiwwntacnfBnLlI8NV7imJknWkbB2xA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1eftqwze6023f7tkleadaj4nzqkz99j6ac5afkt","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","cousinsametk",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A50rkjSoVC0j5LtUxBmbu0SbDLWMSX3NbeqhnNy3mk9Y"},"signature":"8zgn02fsjWs6ZE7CqMkMgnMTw3RDe/TAQyjA0gMJCeMDDSCl0JeOhZFoq8vLUykiX0smmWe9/Iy8aGgt1exW2w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1eftqwze6023f7tkleadaj4nzqkz99j6ac5afkt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["cousinsametk"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A50rkjSoVC0j5LtUxBmbu0SbDLWMSX3NbeqhnNy3mk9Y"},"signature":"15AeqEu5yLMclAW7IegvRAxGW1Bgk7DdG/iMBvUFVo1X/4/GfyBKsbWL59XXDJ90uBGrtFW+P+/7nlEXZPRsaA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1eftqwze6023f7tkleadaj4nzqkz99j6ac5afkt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1602","cousinsametk","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A50rkjSoVC0j5LtUxBmbu0SbDLWMSX3NbeqhnNy3mk9Y"},"signature":"/G+CG8X0TF0+HMCfq13uvG0m5lYmA8NLnlcmmjPa4rRXYLOGP24Yc0FaxzxNo/GTENivKhAJFOsnX9q/1cBYLw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1eftqwze6023f7tkleadaj4nzqkz99j6ac5afkt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1602","1","1","g1eftqwze6023f7tkleadaj4nzqkz99j6ac5afkt"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A50rkjSoVC0j5LtUxBmbu0SbDLWMSX3NbeqhnNy3mk9Y"},"signature":"vK9VqFKCg3ZEXklKOWlLfcBdTdie9s7b+bHEUjZPxO4GB6NWCD3AKAlDQnRYnYzIuMcbLlC31ZkHV0UdAfROeA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1j6u7hdcdkdnf20k3uvh4933cfx59y98utl9n9g","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"/HgmkzsWNrSfA/KfCwuAGdEDfxcr3AeFfRWcHNFTeDd+mb+l/DGAScgdE5XZi2RztU8rj3hQ0MZrjxTEb5wwKw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j6u7hdcdkdnf20k3uvh4933cfx59y98utl9n9g","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","pointgloryf2",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4FUL9q95wfVHBUfcTUI4mRLO++C7kvba+7YjaS227ZE"},"signature":"QEWQY34MGnKJtS6uRHF0X4eZFPcfxADb09Wkq74pkMpgsRdZL+mlPN2joKxJFy/TNojwJHhk1nGaZ+A5fCh4Jg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j6u7hdcdkdnf20k3uvh4933cfx59y98utl9n9g","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["pointgloryf2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4FUL9q95wfVHBUfcTUI4mRLO++C7kvba+7YjaS227ZE"},"signature":"j5QcDHuES9BlDBZjrT/Cy+5E9rReRPtov+Sul7zk8jQhuqeccqPl8rpVo3MuVEmun+KL6na0Sm7dS21qSpatoQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j6u7hdcdkdnf20k3uvh4933cfx59y98utl9n9g","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1603","pointgloryf2","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4FUL9q95wfVHBUfcTUI4mRLO++C7kvba+7YjaS227ZE"},"signature":"s5spGN1dEDx2y8Rs2qM4ag8rEM3EztEJUXvYTDEnxrNiqSbgRQvuZ5fEUGUCu79hI9FkkB/HDZ/rxid9RL3E7Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j6u7hdcdkdnf20k3uvh4933cfx59y98utl9n9g","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1603","1","1","g1j6u7hdcdkdnf20k3uvh4933cfx59y98utl9n9g"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4FUL9q95wfVHBUfcTUI4mRLO++C7kvba+7YjaS227ZE"},"signature":"Gh5c69MvwOhel+Th/OluY28qnzUOljtJDAiFq4LHpRwue0nvfqsIEIloMq0iTqy1+f/Vxjrh55xz7s7cIDTtiA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1w4y6mareurf4whdq37d708gmm4dmfhklnj07h7","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"YzcA4PlsujMHxHayFMUD7rB+JGiaLOy2eiEQivs7ricWi83+8Gxw0AbrkuPpe0aIg522/aO2FY+vGxJWYRkXpg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1w4y6mareurf4whdq37d708gmm4dmfhklnj07h7","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","awkwardsiblinghd",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AouoxLHFE2wnjuLpUjF4iCTY24iMG+S4xfTkg+Ysl72+"},"signature":"pLbwkW2/k9dersYH+YIrhpnzhtf85QYowRPdL6uwfGZKrM7ajJ0X9NXgMIhRuqGIT7yjJyW6vxor5wua5r2Luw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1w4y6mareurf4whdq37d708gmm4dmfhklnj07h7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["awkwardsiblinghd"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AouoxLHFE2wnjuLpUjF4iCTY24iMG+S4xfTkg+Ysl72+"},"signature":"Zqr/z9BOPX5vobC4x/NT0DxKHOdorVkqIP5AQV0508BzW+c8B6/6K7f5nMH3UXJs8Pm9nDERrglCV777ifYumA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1w4y6mareurf4whdq37d708gmm4dmfhklnj07h7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1604","awkwardsiblinghd","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AouoxLHFE2wnjuLpUjF4iCTY24iMG+S4xfTkg+Ysl72+"},"signature":"7OCqJBYJkv+iUpGTNozl8RlZ5wytme/MT7kD2MDsW0RDQkjfGYq9ON3SMH91jVyAjCPYO5V+0DIr3fDGlmu2bg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1w4y6mareurf4whdq37d708gmm4dmfhklnj07h7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1604","1","1","g1w4y6mareurf4whdq37d708gmm4dmfhklnj07h7"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AouoxLHFE2wnjuLpUjF4iCTY24iMG+S4xfTkg+Ysl72+"},"signature":"wekvmrmdb5dkdNsX5UjUjgtiql73gPwYxsuQKo46uyESFl2zzViSFPpEWzuXcSOh8TSlBTa5Y12Rd0ipEHAkIA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1q33p649u8ruqmyrth2wlmy2p3qwd5s8lv98zrd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"L6BUSqum2s6l++Xn1x7kR7ZkAKrO/aA+Lgqozn/53u5O0AQ9KzHawQPxLCcGMMMkiuW30KP3WuX4MX/LndhDSQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1q33p649u8ruqmyrth2wlmy2p3qwd5s8lv98zrd","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","learnmanualyr",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AweTy8SRwIlmztqOO/v3kajiQLlbS23E7wqQWy1ASDfx"},"signature":"m75TosLiOgD0W6AbPGCSPdcA/FgSM0G998PqhccRQ7hnvjb9PcmchnMdm5q1LaTdYEIcn3a/HQM3UHjWIto3HQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1q33p649u8ruqmyrth2wlmy2p3qwd5s8lv98zrd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["learnmanualyr"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AweTy8SRwIlmztqOO/v3kajiQLlbS23E7wqQWy1ASDfx"},"signature":"KsIx9RPrJMd2xg1y/nk3qP+BLMgbIJ7inJ0og2H0lYhBBygbiK0BuOWA3j+/jo76hT4/8AAVfNz0mc+gM3GZdg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1q33p649u8ruqmyrth2wlmy2p3qwd5s8lv98zrd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1605","learnmanualyr","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AweTy8SRwIlmztqOO/v3kajiQLlbS23E7wqQWy1ASDfx"},"signature":"n0eJlO1I/ia+87vuto6QNY0zaxR7LlpHFt+Z/sTajwtSVrFsE+76lAkKiCGM4P4eXymqudjkdoliei7IJ0YJjQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1q33p649u8ruqmyrth2wlmy2p3qwd5s8lv98zrd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1605","1","1","g1q33p649u8ruqmyrth2wlmy2p3qwd5s8lv98zrd"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AweTy8SRwIlmztqOO/v3kajiQLlbS23E7wqQWy1ASDfx"},"signature":"CsZnXyO3pC8sXfgq0W/r+MoQulSpiYXdP9RKzkeNnDhCCjbgc7ql1p1P/EkzaDkVCbZ2/D4fkCbjpAlQXBy+pA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1pn4yxghaams3h330jf89uxhjcgca7rk7vz3l0g","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"1piD2BLlehV2QXclkrIfVLXE0PHH8JrylO4fNH1obWluYpIKmvAjYhMJ6+3ymOU/T526tPQA7FYVW4wM0LMjmA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pn4yxghaams3h330jf89uxhjcgca7rk7vz3l0g","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","fallhazard33",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzptpFR1Ie9zR3OmXEnlJQwAYZEMcpXhgOj4NMIhEHgB"},"signature":"pRVmaVNTaNr490S9WkHVQ+ERuMvqTJrIRJPNBRpgQqksoBmWjVHHeiEqk/OBcPBktK/Y91X9UOrWO1wkvl01ig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pn4yxghaams3h330jf89uxhjcgca7rk7vz3l0g","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["fallhazard33"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzptpFR1Ie9zR3OmXEnlJQwAYZEMcpXhgOj4NMIhEHgB"},"signature":"2oa8VYYfX7thlD7lrMcc99Js9fOxNBiweHmvqx6H/OhDhf+FItEtPW/n6yQrFG4P/+1rOTmKUO2Ay/fthUUpoA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pn4yxghaams3h330jf89uxhjcgca7rk7vz3l0g","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1606","fallhazard33","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzptpFR1Ie9zR3OmXEnlJQwAYZEMcpXhgOj4NMIhEHgB"},"signature":"4GCa4QkCNiJUF38qlhGr57S4XR3uvnhWnAxRNEOiaPcREiDX/I0THLGH30c8N98R/0HEDgUOhhngIJZe230nTw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pn4yxghaams3h330jf89uxhjcgca7rk7vz3l0g","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1606","1","1","g1pn4yxghaams3h330jf89uxhjcgca7rk7vz3l0g"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzptpFR1Ie9zR3OmXEnlJQwAYZEMcpXhgOj4NMIhEHgB"},"signature":"P0ECq3aiUZKRUsZ7c3ZK3jyjcVVd6QBYkMLN9GHwr5BvfcyeGPBSZ2RD9E4uc4btl2mzNbuDeh9JBCut3Ku3jw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1jly4z5y5mur5z044u532hj75gxg9qjpx3vgdsw","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"UJN2oAjszafniwErZoqOZ8ueJFCJmsFUGD9o5EFaefloubBRNBcIVKaY5m/C3A9+StDSZ8oHNORzh1Hb7ccOiw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jly4z5y5mur5z044u532hj75gxg9qjpx3vgdsw","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","detecteconomy5z",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7ABA2fjRiZ0wm6PL6nrn0DVArEtNsgTxa5+BRL33GVl"},"signature":"/HFqFOoRY/fS065g28759K6+m/qRiffnqfgD6r9CrwNSxD2ZX3+UNnP1XenS57hYQCBnaOJQoRckrvjYs7jSYw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jly4z5y5mur5z044u532hj75gxg9qjpx3vgdsw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["detecteconomy5z"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7ABA2fjRiZ0wm6PL6nrn0DVArEtNsgTxa5+BRL33GVl"},"signature":"usCPnPhShgy/Sk/kdk1luc04V4U2HBCdpgPEw16aaoRi8lPzgWXx27rwjT5fBUaa1uPB/WfxD3vsaZDdBPFl3g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jly4z5y5mur5z044u532hj75gxg9qjpx3vgdsw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1607","detecteconomy5z","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7ABA2fjRiZ0wm6PL6nrn0DVArEtNsgTxa5+BRL33GVl"},"signature":"iqCgLI6ZdtYaEPChUdEwAZU2oPFJcIYwOFYFZiENbSdNjJULvfr8UY1PghHam6VBM8CrKXzq8+/MBLLiYmf2tA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jly4z5y5mur5z044u532hj75gxg9qjpx3vgdsw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1607","1","1","g1jly4z5y5mur5z044u532hj75gxg9qjpx3vgdsw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7ABA2fjRiZ0wm6PL6nrn0DVArEtNsgTxa5+BRL33GVl"},"signature":"zHnNo5326qAYTy/HCo2cTRn2Dc3Np3wIi+GFJclSHbceRzEr0NT7q372cDlG+Ame3eeeAs83weCugyyHYwtqEg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ycrhnsfp55xps5u8kcfe9ahv46sl5ydfafd43c","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"645a4SsYYR0yHaeGRmH5H9YF8sPifKeCa7z6pgeCGL9e7FLN7EuKr8fOqSs+TPwyHLHxUWJfFVDMT+GU+sxsUg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ycrhnsfp55xps5u8kcfe9ahv46sl5ydfafd43c","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","voidfabric5u",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjeDWSerDI8txd6Wfn8L1Za4JUwsYh3xfHSIQ+42wILl"},"signature":"M3C0r9ebp1QWTzlxsUnoQjvUhaDUcMvzcZ2+CjkZcI1HoY5iRQcTgBUSJWhzR+Ge1aW+PfDG9hiiy1AfRa/vwQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ycrhnsfp55xps5u8kcfe9ahv46sl5ydfafd43c","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["voidfabric5u"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjeDWSerDI8txd6Wfn8L1Za4JUwsYh3xfHSIQ+42wILl"},"signature":"ANuywzvn5DsHjZleSavtxZSduHZQiOWbxFtSDd/M9Skyv0D70zaOrK5+9B1xkJfXme+JuLm0YtKcYAHyEDfMRg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ycrhnsfp55xps5u8kcfe9ahv46sl5ydfafd43c","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1608","voidfabric5u","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjeDWSerDI8txd6Wfn8L1Za4JUwsYh3xfHSIQ+42wILl"},"signature":"eSlJ/IVXukKdPzFL5Go2YlJnLBLxlZMsWJrkzj34x8JxrQYe8hnAwv/HTimfECw/TZ4w4IBLtScGVICsQYxgWA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ycrhnsfp55xps5u8kcfe9ahv46sl5ydfafd43c","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1608","1","1","g1ycrhnsfp55xps5u8kcfe9ahv46sl5ydfafd43c"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjeDWSerDI8txd6Wfn8L1Za4JUwsYh3xfHSIQ+42wILl"},"signature":"AuQ9DQMY7tER5X6OTMFCcr5AePbcTWTtZz/k0vO/3FlmnCyGv0rSD7XYXn6ENLOMhMIoq5qB48osnQz687XTRw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1fjxp676307jpktzzm5yf2egppdnkh58n0jjc43","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"xSjMOido0jeeNFY6eObn737azQqOoXGGe9m3EhjnNe4AgbZjwEQ6039ujY8kmgwW/0mI33DHGwqdCjJwQRLvwA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fjxp676307jpktzzm5yf2egppdnkh58n0jjc43","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","brassdenialtz",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgWJFPrY1zRSnyaYG57Ah4kV+5SqFMSohJomtpwbW2Gh"},"signature":"h1oorxI3mpGwznwjm5O1OGvcUJuHpgTngGlVjTMmEtdT7r+gPQFZMqg+806eg0fQHyt+ItnZkDLan5VrmL68DA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fjxp676307jpktzzm5yf2egppdnkh58n0jjc43","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["brassdenialtz"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgWJFPrY1zRSnyaYG57Ah4kV+5SqFMSohJomtpwbW2Gh"},"signature":"t3UpGsJx84XSaUP1OGcmnh6AyCY1aBccFopksSZxiWJbtkHpZuyGqoYZHhF9hhL0b77jHLlDXk8oCY/1qI/jmw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fjxp676307jpktzzm5yf2egppdnkh58n0jjc43","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1609","brassdenialtz","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgWJFPrY1zRSnyaYG57Ah4kV+5SqFMSohJomtpwbW2Gh"},"signature":"GQGn+XuqziMtMzn2IbKdj0+WMPUQY6Rz+O7XxbB8kllxlh+5mx5vpq5n67MIbrXns27V/yd9MSb/HfQDCoRF0Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fjxp676307jpktzzm5yf2egppdnkh58n0jjc43","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1609","1","1","g1fjxp676307jpktzzm5yf2egppdnkh58n0jjc43"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgWJFPrY1zRSnyaYG57Ah4kV+5SqFMSohJomtpwbW2Gh"},"signature":"pkKu8Css/4msHnuF0b1Dws3C/+Ab2IzzOlyUmBqE7hkZ+FmS/piHj+5g9Jui+yNKEpeCQeUijZ1Rf9JevMjvkQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1kt46p727gp53t5g9psmw79mprazrdtz4gflf8y","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"LzU/Kr0CgIvMWzNT1a2q7V1PplbHJmtDY01VOrCQRRE9vXfycp4NJVaXpLGfMckK2Eoog7D5IpTwiZCO8SfFqQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kt46p727gp53t5g9psmw79mprazrdtz4gflf8y","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","croppicnic3t",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Awoy7UTr04PShk7+nL33O3c7cSEnXf3ic4z3j6JADNmp"},"signature":"1dWfexjnBFal7/Uh5L5Y5GvGBB6O9Ql1mzpMjoAMJcJirIdIt0Pt9m9X7G7beFlLJGktyP6zrgRFgxVtXeMu7A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g15fvynw9v990yq4vu77napaz5q32qwyrkt32fhd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"hmkSbmnqaF/PJ0V8DBI5U5FWYP9F3PNMlW9JKJSp9RYP22oWnwDpy53Chv6eZIeW84nw79sn5DBqcpGOIag4kw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kt46p727gp53t5g9psmw79mprazrdtz4gflf8y","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["croppicnic3t"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Awoy7UTr04PShk7+nL33O3c7cSEnXf3ic4z3j6JADNmp"},"signature":"pTHQHnhN6Ga9MEJEiqzvlqC3a9NVZ1+/hMPbpKAl4iU4tN+a4KqGzVGMenleiYkoiRrosb8vrD5WFSIosFKv7A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15fvynw9v990yq4vu77napaz5q32qwyrkt32fhd","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","garbagemargin4v",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtOA2CLRkdchy3mHGWSgRwN+DfUTKbYDtb9JDG2QkNf2"},"signature":"VWm21C4V61H349mnsuQl58KZwp9B+o4HqgWQslu+YiZiEntCzpoRgmQk0BakYfU11pY+6hsbBXKFhm0YD9ri0w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kt46p727gp53t5g9psmw79mprazrdtz4gflf8y","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1610","croppicnic3t","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Awoy7UTr04PShk7+nL33O3c7cSEnXf3ic4z3j6JADNmp"},"signature":"7e03coiK+UMOWuDnIvRd+f6qclYrCfzd0SPNtOxXmqhfV/ZLnDEPL/Ke4ldmbin3vqfk3apJbRvqkXnqRkmWiA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15fvynw9v990yq4vu77napaz5q32qwyrkt32fhd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["garbagemargin4v"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtOA2CLRkdchy3mHGWSgRwN+DfUTKbYDtb9JDG2QkNf2"},"signature":"npQ42yZTit7T6Dm8nSjzVHbGYKrCQ9H0+kMzsb4Q/HsXhNZbKEWxK79yadxj1LBXBrBHF1hKbOp1ID7W33PT0Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kt46p727gp53t5g9psmw79mprazrdtz4gflf8y","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1610","1","1","g1kt46p727gp53t5g9psmw79mprazrdtz4gflf8y"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Awoy7UTr04PShk7+nL33O3c7cSEnXf3ic4z3j6JADNmp"},"signature":"ughm/KbxwO5TxY3Vu8S6o5bTJfMPF3bRjM547ck2xRwpwpc2O9W3gDkHdn3XlycYU7xOjVu4MSNPCaG6UtSQlA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15fvynw9v990yq4vu77napaz5q32qwyrkt32fhd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1611","garbagemargin4v","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtOA2CLRkdchy3mHGWSgRwN+DfUTKbYDtb9JDG2QkNf2"},"signature":"EQklZB5vbQc+9+IhaaBPMyrS+QNixOOj/v9lWnoODjo3RHYgjihvgO/blpUlOCYJQUZM9lxQjy29JVHbons40w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15fvynw9v990yq4vu77napaz5q32qwyrkt32fhd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1611","1","1","g15fvynw9v990yq4vu77napaz5q32qwyrkt32fhd"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtOA2CLRkdchy3mHGWSgRwN+DfUTKbYDtb9JDG2QkNf2"},"signature":"TCFwKYy3riC4cR7oSpsFE2ee1qFEcbyAVpc7cR9YiTUFodmO0uTlrraRPcpPTQ8QiKSizR/gvPKyk3/8eSFOdA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1j692y7pxeln3zt7xxcug9lcttgezh2v74kv7q7","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"K13Nv0t/KL10d2yGoX0OCMwlWF5gXHYne8FdwDH53T84ZHVGkVG8URkq5F43+P2zEaYCVHOIjhIqbDqhTnF08g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j692y7pxeln3zt7xxcug9lcttgezh2v74kv7q7","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","actualcherryt7",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmsQFNHE7r5vGm3HfLlKJti5Jr1nbKb2e6RyR2aXat9T"},"signature":"cwYhcyQCs0ReieO+xgudC4b0uFJAZsQGLoNFuaXjLh15sYGrM726/tKtZIvFg4m21qSUVEaFQON2noJufzbq4Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j692y7pxeln3zt7xxcug9lcttgezh2v74kv7q7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["actualcherryt7"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmsQFNHE7r5vGm3HfLlKJti5Jr1nbKb2e6RyR2aXat9T"},"signature":"pft3URXB7zqoE7gTjjBj014HxYcLBLsheU2EwdxhUndITgaF9/xvnjfaRhtxL8DwBgddUmUZiTYHbIjZvK1Owg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j692y7pxeln3zt7xxcug9lcttgezh2v74kv7q7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1612","actualcherryt7","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmsQFNHE7r5vGm3HfLlKJti5Jr1nbKb2e6RyR2aXat9T"},"signature":"SfiJZJP8lYHlzPbqDXG/50lDFgGqHZ8NrPyHN4NpYJdpmYMklPjvvSx1Gdzpr3yr5+5S2x2RuAq8Xewi761aeA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j692y7pxeln3zt7xxcug9lcttgezh2v74kv7q7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1612","1","1","g1j692y7pxeln3zt7xxcug9lcttgezh2v74kv7q7"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmsQFNHE7r5vGm3HfLlKJti5Jr1nbKb2e6RyR2aXat9T"},"signature":"rA18mCZt+CoXbdoQ+uLyauUp2hUWVTSNKEmGSvRFgjAXCMHTU9u07CzTOv3Fb5oq7OyahCp4bgvopVQALdbt7A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1nzm4ce8yt7mq5n055elj2hfus4c09vlap933g9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"MayNEAcRDAA6GvYgB8ccSQ6XxKMdIdgOTjtOYT7ktF9CJl/zbJNSWNh7IBptqG6XNW5xWM26/61MzsttXzzvoA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nzm4ce8yt7mq5n055elj2hfus4c09vlap933g9","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","rhythmvalleyn0",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqjLcTpmmica6QKS0bkc8yE+Y8CkSSyT8RNQF1TcvQGA"},"signature":"N6BUtNIh2GnQepGseYbr+TkooeR/nsWD0Mn4R0VI1zUvL1Y2n7+ahv3euq7clmuR9uY8lrsa4VnU4k65XrxjqA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nzm4ce8yt7mq5n055elj2hfus4c09vlap933g9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["rhythmvalleyn0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqjLcTpmmica6QKS0bkc8yE+Y8CkSSyT8RNQF1TcvQGA"},"signature":"XFb4VCBkTcB8amYDRiy1bM3+HAd3ciw8knTPHeOarf5OnGWK5CREygrt27mx/jN7ZrAMKTJkXKVLPjbIpQCElw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nzm4ce8yt7mq5n055elj2hfus4c09vlap933g9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1613","rhythmvalleyn0","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqjLcTpmmica6QKS0bkc8yE+Y8CkSSyT8RNQF1TcvQGA"},"signature":"YkFHH7kjoBELMfIs0Gqcqd8QtwPoVsR2aTGc3ZDoAPwTIxGmRunNCIKB1j1w+0SKGjDb4l2mzvu6F9F8QOaFQg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nzm4ce8yt7mq5n055elj2hfus4c09vlap933g9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1613","1","1","g1nzm4ce8yt7mq5n055elj2hfus4c09vlap933g9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqjLcTpmmica6QKS0bkc8yE+Y8CkSSyT8RNQF1TcvQGA"},"signature":"GBkFHdMD6sOOyhAeXZxb03ZuLfEyYUFWtgv5id55bn8xHas6L/2XQUgVUjSX98Kw6YnBjBVNqXwuV+QNqtSDfw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1daanux4sp2erwx7mylv664m4qezxx9lcrn25j2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"IsuLdk/5KX9XIxJQJrBP3zVxnke5aOKtRj4rK5iW9AITcg4cJaXD0n1Rmvvc23WZhzuJpbN6T/jD9UQ39SaUKw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1daanux4sp2erwx7mylv664m4qezxx9lcrn25j2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","kittenvoterw",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApJ9uFll7pZy5RzhTh61VztnEVLeif3G3EEIHtyeDYgb"},"signature":"jXEg2Auja65yQDPJHsKcQUZqetogMWog6GsmUNFkDGp/8ngKAuCjDK5G490ppBxXD+IqLwwSLI2ILd3a/QRrnw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1daanux4sp2erwx7mylv664m4qezxx9lcrn25j2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["kittenvoterw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApJ9uFll7pZy5RzhTh61VztnEVLeif3G3EEIHtyeDYgb"},"signature":"1fqjYvmucTsf1isc0YYcWCAq4naWteBIVk4hBLMV8ddx7r767LRy+mm3f814jo+Eo4doUu9U7SRFG8BBnkWauw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1daanux4sp2erwx7mylv664m4qezxx9lcrn25j2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1614","kittenvoterw","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApJ9uFll7pZy5RzhTh61VztnEVLeif3G3EEIHtyeDYgb"},"signature":"HzfaykOzBh4yDAEr11lfvFTvGc7pJos9BWo8UutDrW4aun/23cjjfjxKByYtVbTbEUKFVB2KYmZBc9wXfGgWjA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1daanux4sp2erwx7mylv664m4qezxx9lcrn25j2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1614","1","1","g1daanux4sp2erwx7mylv664m4qezxx9lcrn25j2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApJ9uFll7pZy5RzhTh61VztnEVLeif3G3EEIHtyeDYgb"},"signature":"G2i/ixiyZU+Ax/jhEdxW5DuECHgEGXrfgsPKEl5+NP5ea1QKPfrfGVmmWfqgURl+uAK5KHauTNXF9CeXk6PwdQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1zvsyavfm4rcsqufpnye20kqwnd38tunryve44v","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"MBqxN36dIbZZMXU9AyL2DnR7jRWY2JvNlE5NAmePbEE9KLpvwGSqPBHHsv/g+R1UajrXpiFhmQTVXRmrCtQUsw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zvsyavfm4rcsqufpnye20kqwnd38tunryve44v","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","responsebriskuf",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aro7rLZZE5jp2HGGVsAhqm/Z1rvcheTi7jOXJsMDaBQX"},"signature":"RueGCFK0hV/1LHUje27zFSZmLOOrveM6gVZrcO54/l43vDf98bCLPjW9gdnRxsNvp4yTww3lyJMK83rx1NK7Ow=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zvsyavfm4rcsqufpnye20kqwnd38tunryve44v","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["responsebriskuf"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aro7rLZZE5jp2HGGVsAhqm/Z1rvcheTi7jOXJsMDaBQX"},"signature":"vYnRU2yybCJFX88sxdz0x1cVM+p9Q1yStij5N4M6P20PXn5mvCmGut+Ih2i2e33vntccepI4tqAhVHt/n2FVLg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zvsyavfm4rcsqufpnye20kqwnd38tunryve44v","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1615","responsebriskuf","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aro7rLZZE5jp2HGGVsAhqm/Z1rvcheTi7jOXJsMDaBQX"},"signature":"Y8+qJJjsP/ymRo2WQLT05VjVB8G/4W0ozaF91WKvHep3sBvTvBFNMYDylnsLBdn65Wzb9tJEN3COrX4Ih4USQQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zvsyavfm4rcsqufpnye20kqwnd38tunryve44v","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1615","1","1","g1zvsyavfm4rcsqufpnye20kqwnd38tunryve44v"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aro7rLZZE5jp2HGGVsAhqm/Z1rvcheTi7jOXJsMDaBQX"},"signature":"Bjxg3Hw86MzINVjqBtZY6C0IW0Bos7i/IP+BwdxGBmdkVNETANMWDKAgjoccDxY9dJ//bdqQOee/3WPx7s5GIA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g150rtxn683w4h9euq940gawzfuzfa4ad5rs7pc7","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"TcTwX1s4OFCzvm2wShmjVgZOuUahmIF00CnJ34oIblok/+7vOO8ynszY9gRxmDHVhGhNP2xR9mhLiwY9whpjGw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g150rtxn683w4h9euq940gawzfuzfa4ad5rs7pc7","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","cheappubliceu",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4qMWROfa+/WWH45lU+G/RyfEuWpDGMQegsWme3fV4ha"},"signature":"iGQdCeUPhZkyTHVplBAJDGQQIlgUNYrW/ReHu+5hthAwWj4ALXiuD5ZH1kNjUi5O1A+lGqlmFJybxdZwSyt/UQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g150rtxn683w4h9euq940gawzfuzfa4ad5rs7pc7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["cheappubliceu"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4qMWROfa+/WWH45lU+G/RyfEuWpDGMQegsWme3fV4ha"},"signature":"0vYrx1K1qX4HMRz0hbwXhHBATfI9QAHHm/4pHboEfLQbHwr1FS7GVpEJrZtPj0/jWLVxuXSXmBPsnXAgIFjOVQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g150rtxn683w4h9euq940gawzfuzfa4ad5rs7pc7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1616","cheappubliceu","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4qMWROfa+/WWH45lU+G/RyfEuWpDGMQegsWme3fV4ha"},"signature":"FMysz1eep7YcJmSsiFO7O/UezDIDnNIuh/p4ClF36ahOAQm4mSLpNxwG3KLMfs451mGIFDOlLhoxvf1LS5eJyw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g150rtxn683w4h9euq940gawzfuzfa4ad5rs7pc7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1616","1","1","g150rtxn683w4h9euq940gawzfuzfa4ad5rs7pc7"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4qMWROfa+/WWH45lU+G/RyfEuWpDGMQegsWme3fV4ha"},"signature":"Tnsjhn5gNJXHi9HRwNhZkQl9Pv8n4B51yPxYcu+AfltLsIK/fcyAnKl0BXe/jBv0BlVbh2onT+zGvwzUme8t4Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g14kz0mz58v4uepl7eav98gc52hp9dlvh40df784","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"MISLHwkcVLZHgvUNuPPseZxbARmz3+UBkQo1kobFmSUeQNZ/G5mi2BnUCt9kZix3BiNsDBkjBbnxDVgwy6vZ4Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14kz0mz58v4uepl7eav98gc52hp9dlvh40df784","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","repairdonatel7",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyvdZA6tlEis+ubwd76FKdkwzUU3JDpnDZRAtc931DC8"},"signature":"MhDJRj0VbvoGZBTlHJyCHoam4gENX7URnpvqp4nCy4tK6nt+0sn5acmAFPclhzNIbZcp4uTyH7LsPFmqbiI4yQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14kz0mz58v4uepl7eav98gc52hp9dlvh40df784","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["repairdonatel7"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyvdZA6tlEis+ubwd76FKdkwzUU3JDpnDZRAtc931DC8"},"signature":"wxvCIKZT+zfDMUAUGuJhYRGqQjs/NR1L6pDXsktTJgAh45Xy5nt7kvT/dIRWbFwMovI3421z1FXEv2vnTiGuBw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14kz0mz58v4uepl7eav98gc52hp9dlvh40df784","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1617","repairdonatel7","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyvdZA6tlEis+ubwd76FKdkwzUU3JDpnDZRAtc931DC8"},"signature":"mFk9S7xPKnInaHfXyGgGOkgy+Mffc2NuAftXsbTWNQFommR7cnlvv6T8UzoR9afOibgEwTGamiVVyR06dQ4bwg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14kz0mz58v4uepl7eav98gc52hp9dlvh40df784","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1617","1","1","g14kz0mz58v4uepl7eav98gc52hp9dlvh40df784"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyvdZA6tlEis+ubwd76FKdkwzUU3JDpnDZRAtc931DC8"},"signature":"dd8nAfp8G0XKkXTBlCdZEcZu1Qa5G4U3+vK+DOKOvodUIPfGsJaCZk+pVlbjGy51KLDZ/Jk2XsNhP+eg1pRE8w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1n0fwc00wpjvc6mr5rg9qq5a5kd4cvv0gk38cyy","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"7lUH7+nFgDYToVIMJVImQu5zvWDQWcFPkNnd96BzPHcnTTbnXnC+fO0mFYWRPiXY9M3MskGwN0ppRz8W5U7q8Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1n0fwc00wpjvc6mr5rg9qq5a5kd4cvv0gk38cyy","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","buyerwashc6",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhM8RYcRCPPWQlJwwX7ViLROlBgJDgQntI9NktJg5DWI"},"signature":"Rqdox+Y/S+DcI6VSvAt3VwrQm77ytOXVvoPDWy4fEMtE1libxII/gJ3HkdPkU/I+vy/RwjRs96h7pkC2hgqUbw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1n0fwc00wpjvc6mr5rg9qq5a5kd4cvv0gk38cyy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["buyerwashc6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhM8RYcRCPPWQlJwwX7ViLROlBgJDgQntI9NktJg5DWI"},"signature":"Kt1VMiJfTW3BJPolTRciDe5KReJXcqcDXfU4xST2uGppJG3NBZaNzw3SmUvOLxuJUYV+G+a5w+EGhteqt/avMw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1n0fwc00wpjvc6mr5rg9qq5a5kd4cvv0gk38cyy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1618","buyerwashc6","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhM8RYcRCPPWQlJwwX7ViLROlBgJDgQntI9NktJg5DWI"},"signature":"eJCF0V+owg8gmQLEq3LFbzrFdZ43lJU8eEFW24sEdlErYCaIqdoKh6CttTNotR+NsAb8A8tSR9ZMb6ODgOyo4Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1n0fwc00wpjvc6mr5rg9qq5a5kd4cvv0gk38cyy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1618","1","1","g1n0fwc00wpjvc6mr5rg9qq5a5kd4cvv0gk38cyy"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhM8RYcRCPPWQlJwwX7ViLROlBgJDgQntI9NktJg5DWI"},"signature":"eOqxFfQ3JyiZUAkwZ03/LQsc1l6nXt2QX/XjR172JKcVdN1SVxgasRcD85X3KlA6dX+LbteOsXH8Z24WSTfQmg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12fsq7pav7qr2k3r2rch9z0fh8t64ess8khxhvs","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"oso/cJtuNvrorNmC9pZqu7OsDStqk4eXIppPhDGM+gcGgAB3PKgZTkpFk+6OLKBj/xVzpdkMckCxIvl2ST9Fkw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12fsq7pav7qr2k3r2rch9z0fh8t64ess8khxhvs","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","indicateadapt3r",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/2QFJ8AN+E9mAsl7q5WCPi6pGcuysmy90QliT7BSLWD"},"signature":"FDo7qeEw5XQz40MvTdRQ8EtN1PtJlOGlsh7q3MFEEDJB36+R3oozB0LI23QHuZifJHYCoiiWg2/N1a6dgoTUmg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12fsq7pav7qr2k3r2rch9z0fh8t64ess8khxhvs","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["indicateadapt3r"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/2QFJ8AN+E9mAsl7q5WCPi6pGcuysmy90QliT7BSLWD"},"signature":"Dx/GJ/Lb4pY0i1xclGCXMyrehyR6LOaOezlliQt4kElSabXqQS0YaNQif34R48YR+Fw9QTbPKLG2Y65e43hY0w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12fsq7pav7qr2k3r2rch9z0fh8t64ess8khxhvs","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1619","indicateadapt3r","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/2QFJ8AN+E9mAsl7q5WCPi6pGcuysmy90QliT7BSLWD"},"signature":"sW9VKNGiuTeNl6r7xQ5gw/gSjnNiPBdpSmoLPJhnrUsLHGW93kJo6s9DhrYjQtlUnZ8AYphLSBSlM8bMcnNaDw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12fsq7pav7qr2k3r2rch9z0fh8t64ess8khxhvs","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1619","1","1","g12fsq7pav7qr2k3r2rch9z0fh8t64ess8khxhvs"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/2QFJ8AN+E9mAsl7q5WCPi6pGcuysmy90QliT7BSLWD"},"signature":"yYReBhfzRerwlFS1GUlQ1HWeoifYiFTcSXhr7Mytf5c8jbOv9PK0PT7VjIIS0yVqu6aHGtTx/Fidk+Gv1S0Q2w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g15pur6t0tw63mwerullkwdgnm74t7ytud0z6dmq","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"cFqvjpjWPh/CRBtbrZz1bae09EHVK90dXstvKp8x13obagvarBRi9ZAgaaLU6OxKbZyZ+WIVhnWRZMfXu5bdEQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15pur6t0tw63mwerullkwdgnm74t7ytud0z6dmq","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","patrolfroster",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzIhOkdKv2xggAzvZu0wnEFURTlbwi1lb33uLvtO/fG2"},"signature":"ih8AAcwv3XTN7qrKXr40NntIX1dNGCh+bf/SGP/tJc0S1C9Zwn51RoB7AbCOOlBjWsicZm91rV1cbvBBH7pSXA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15pur6t0tw63mwerullkwdgnm74t7ytud0z6dmq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["patrolfroster"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzIhOkdKv2xggAzvZu0wnEFURTlbwi1lb33uLvtO/fG2"},"signature":"Ui29ZG1pdSXtkUbkIVm7LWs4SnxZ3adl1EheDDwMwQM1R/Sn3cxLRDq3JSVbhTSF4AGQhjbzGhrtEj0VS6OAvg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15pur6t0tw63mwerullkwdgnm74t7ytud0z6dmq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1620","patrolfroster","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzIhOkdKv2xggAzvZu0wnEFURTlbwi1lb33uLvtO/fG2"},"signature":"XrqBRznUOKMPVT3ceT4PD0CCWEjjs5uRtPxBDpn/F254wL+CxvNQOrIUouLZ1PU5o9rXWVL3dYYpq3jLQijIeQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15pur6t0tw63mwerullkwdgnm74t7ytud0z6dmq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1620","1","1","g15pur6t0tw63mwerullkwdgnm74t7ytud0z6dmq"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzIhOkdKv2xggAzvZu0wnEFURTlbwi1lb33uLvtO/fG2"},"signature":"7aIbSuRm/Bx2/jUdRkpIXJWcJXrqNb0iX8nutf8H0582/LPAbBzsiKdXv+2l4bpdYPwPLh05+LTEbEYJZQhiyw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1jy32t7ed4kd26jgxwrna5w7ray3a8rn4slrrhr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Kwf/TWqEfqXP9p+6Zkrx4/CF13ll6VAXdm+o9WIm3yIqz3i2+5QfSKsV7UV4DeWFR5/uW01sLACYZI2xLTK5RA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1fy4hfhw8w6jt627d9yqvaxy9fmfkq3045hxltd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"skyygvEElnR0mC4E8Lc5xIKjZp5zlCDw4+bxOVss0YUeZ/Mv5qD5Gzv6AN4S+nxUoOhS7lonUZqXUuId/UIiPw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jy32t7ed4kd26jgxwrna5w7ray3a8rn4slrrhr","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","bracketcelery26",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5QdyuhmNMOKJogz/GJaUXYw2n5jWXkRHhPjdU7gYffU"},"signature":"rbX9uY1R6CWcwK+w6BDne+PIs2vmiNPq00Liolq6Ha5fCK0wSfaSdINV5mw7+mUWPl7AubMiGq9YL8uSTcHLUQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fy4hfhw8w6jt627d9yqvaxy9fmfkq3045hxltd","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","rotatecannon27",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aw0SJlzuXL26HSlBZofBI967nsmfWYD80PwUJQfHxrWS"},"signature":"jbq9TStw1+ViKGjtV+RCEsZjz/UfT9+Uit5uNbWUZZ0CQ+/umIeiadseiKL1OHExHCoUkPuCbs3DFazDuY0jhA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jy32t7ed4kd26jgxwrna5w7ray3a8rn4slrrhr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["bracketcelery26"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5QdyuhmNMOKJogz/GJaUXYw2n5jWXkRHhPjdU7gYffU"},"signature":"YLUl0jk6+V7v5zhulHAGiGoBAGj+W1mspDbHkxCCSOJslSE9Wmm1xq/EDZhnaRjSUJE6Mq5vwYgpUf/j+JjqVQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fy4hfhw8w6jt627d9yqvaxy9fmfkq3045hxltd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["rotatecannon27"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aw0SJlzuXL26HSlBZofBI967nsmfWYD80PwUJQfHxrWS"},"signature":"FSF1/Wp63+dx62s9vdXOgXR6AjqDn0j0MmVp+KRauGIysY3X9X8IG7egaTRCN7fgjlCYGcKMdbv7Wyy++QUWOA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jy32t7ed4kd26jgxwrna5w7ray3a8rn4slrrhr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1621","bracketcelery26","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5QdyuhmNMOKJogz/GJaUXYw2n5jWXkRHhPjdU7gYffU"},"signature":"A0qwnEXnC753xhqqYz1fSIVsUoU7Ejc4nPOpWdRzKdkUkga5dzMwobfEzbOhy50GyDBSiTcHdcdXCmpl0IGf2w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fy4hfhw8w6jt627d9yqvaxy9fmfkq3045hxltd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1622","rotatecannon27","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aw0SJlzuXL26HSlBZofBI967nsmfWYD80PwUJQfHxrWS"},"signature":"4UrmDUjzta37biAOa4ipgMuXBKF1KbLBt/vi0ZcCn5QUG6fNx+FakH632hqKpbB5y2eW7IwfPoIzmRV+AvskTg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jy32t7ed4kd26jgxwrna5w7ray3a8rn4slrrhr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1621","1","1","g1jy32t7ed4kd26jgxwrna5w7ray3a8rn4slrrhr"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5QdyuhmNMOKJogz/GJaUXYw2n5jWXkRHhPjdU7gYffU"},"signature":"SWG11lRHQnlfJ0Z9tRmDgBS6qKhe4IDFQzfWFD8vckEMGWJ5Yon1/M1+21qssIbTSOeGm7rF8WmZMNUuv0KUFg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fy4hfhw8w6jt627d9yqvaxy9fmfkq3045hxltd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1622","1","1","g1fy4hfhw8w6jt627d9yqvaxy9fmfkq3045hxltd"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aw0SJlzuXL26HSlBZofBI967nsmfWYD80PwUJQfHxrWS"},"signature":"GDbf3LzRuBdZYtd76vzVZYNiw6GEG5C+dDFEqrvxnuoN4BqYbqrIUuNmErkvoi0lj7WQAZEGRTnz6NOqd/bTcA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1rxv2kkqp9ff83wajdprmhmwecgg2zernld982w","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"qwGsxPU/5/bWACGKdwcD04uCwZfDjoKKBL3tfSIS358ScuduU4bm+QuCSuqcYzS9Am0Ow5JcMcFoIcKYJB4vDg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rxv2kkqp9ff83wajdprmhmwecgg2zernld982w","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","webvolcanowa",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A22SP05+6qvVAJ9jc3CSrtcFDmIUNjUtWSwdfH6HUy1U"},"signature":"SOZWa/EnOOUdyxoMyrbE6XxrSQwwy4hOs8in3AQCqERemUAMhWFQDDizUm2CvjmNdSj2pb3Xpxht0TFO+GNURg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rxv2kkqp9ff83wajdprmhmwecgg2zernld982w","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["webvolcanowa"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A22SP05+6qvVAJ9jc3CSrtcFDmIUNjUtWSwdfH6HUy1U"},"signature":"gtpKj4k1ndlAQ4sqzr5urwOBiV5wVQUkZiD9qvPHoXJP2zkyyNrUV5FaLu6J77uLniTK4eZZkuUk9/6aobYkDg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rxv2kkqp9ff83wajdprmhmwecgg2zernld982w","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1623","webvolcanowa","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A22SP05+6qvVAJ9jc3CSrtcFDmIUNjUtWSwdfH6HUy1U"},"signature":"Ackx+CmnRwoBOFCqODj60aQ7odRq5tT9OUO17xbDvhRjXaxisgdDwYsHEyj201c0fV/DVLi1r3lQnnuj+fwmDw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rxv2kkqp9ff83wajdprmhmwecgg2zernld982w","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1623","1","1","g1rxv2kkqp9ff83wajdprmhmwecgg2zernld982w"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A22SP05+6qvVAJ9jc3CSrtcFDmIUNjUtWSwdfH6HUy1U"},"signature":"5RW70idPDwCdscVe41i9R0WnviYoDqdvuDKwQNLrxukvQt5IxY0xjajM0sgZ2EEb/vvFV0jcDW32EIkYTnuu6g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g13mcg950363xdtek8te62z87vde93vrsy49frqa","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"LoBAA0QjjWQ8xsz4BE/pPK5L6LFiVqtnyWmd4nyQtw4wLzyQVG0kzv6CUeHAu4ZCW4I6MWRSF5dzfeDbMZTWlw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13mcg950363xdtek8te62z87vde93vrsy49frqa","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","junioranswerek",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjUpobXRNZGKGN3rOvFDR9K3I/2r9Zfpznr9Kx65zPM4"},"signature":"K71zgNlAZip6uiICzwpR7XqfPHmbrSfT4OOPJDpoWjoSGUkr1xgSHyKNAtiafY9StmiYJ97JCEsNI8HaMyRebQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13mcg950363xdtek8te62z87vde93vrsy49frqa","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["junioranswerek"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjUpobXRNZGKGN3rOvFDR9K3I/2r9Zfpznr9Kx65zPM4"},"signature":"YSnqcTDDZsVu1iA1YgKTcaWaOFJ3zcaXGTzaQBXE9tV0mdJ0k2ffm3g1s7cM4iNg4jatrKai6lwTsW9sesXdoA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13mcg950363xdtek8te62z87vde93vrsy49frqa","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1624","junioranswerek","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjUpobXRNZGKGN3rOvFDR9K3I/2r9Zfpznr9Kx65zPM4"},"signature":"08+19iNNuniQQCv0pkENWR6RXG/DQstbIqjFpefAgJ46OuEE6mmkIwDZjulNU6bWupRRDeHRwvJYd408YbgGKg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13mcg950363xdtek8te62z87vde93vrsy49frqa","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1624","1","1","g13mcg950363xdtek8te62z87vde93vrsy49frqa"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjUpobXRNZGKGN3rOvFDR9K3I/2r9Zfpznr9Kx65zPM4"},"signature":"hM7UuIjOCxPC8nTt+kOyrpHz6EeX3z6vmBIz252nlchh9LdL+X2HaJSVl/P0mMxYDESf1OK6t1Zmm5ilrNo4ug=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18ez3v3c7ghtdrdny6e0pzx04hc0f0na9rkrn7e","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ZO8KF6AdBXxkozKSlnH1MP62WzB3zPLzQS2XzI9EOGQ0jBSINBwMvu2StqetGLwj5rn92jsmzvZpoC/O/nNAnQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18ez3v3c7ghtdrdny6e0pzx04hc0f0na9rkrn7e","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","flyannualdr",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A91iGdUdljqs9BPVDNRc9A9Z2I7j2rfuv5NcnA6xEa/3"},"signature":"9geQS852zi/odgXoXBtSGm6R7mEl7GKEBWn0xhuJu7hSUl2ySKTussIzc0rot8hllM3I9PZ1VMEsWZ+oU2Lmzw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18ez3v3c7ghtdrdny6e0pzx04hc0f0na9rkrn7e","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["flyannualdr"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A91iGdUdljqs9BPVDNRc9A9Z2I7j2rfuv5NcnA6xEa/3"},"signature":"4nJL9wHZKZAU7io1+4PomF7SUPU732YLGAlEHUNaQbQj8Sf8L/rng3gr4NEqvmIXLSPlpbjPKkHvMUKGt0u5HA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18ez3v3c7ghtdrdny6e0pzx04hc0f0na9rkrn7e","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1625","flyannualdr","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A91iGdUdljqs9BPVDNRc9A9Z2I7j2rfuv5NcnA6xEa/3"},"signature":"TboOrCxFpNP0Vqv1+c0SivaA9srlcr6exscuk8hPC3dHGJRCJN4KFVZ3LzDQYeHWnb09ylDO8yT/aTVOnYBKPw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18ez3v3c7ghtdrdny6e0pzx04hc0f0na9rkrn7e","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1625","1","1","g18ez3v3c7ghtdrdny6e0pzx04hc0f0na9rkrn7e"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A91iGdUdljqs9BPVDNRc9A9Z2I7j2rfuv5NcnA6xEa/3"},"signature":"WAzc0LJluWEYC7KSEegL0S610OZsqKVkGrOHJQCfhFBWJasStqFaqXv95WaOd3o2Q8dwXue4KE/uXoE47QsAew=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1uvv6h8jcmn06km6kfynhusvycwzhv7vvh03guj","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"sU2U9VdBhJpX6vPve/XZ68b6aPZJDaw/FK+ISRmBzPFPiJX2YaakT+FlS6GiClad88GVI388R2/JVBJp/0Vnsw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uvv6h8jcmn06km6kfynhusvycwzhv7vvh03guj","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","followbrandm6",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5dXZEwLyMM0/s4yx46nv29gKAU49ZDNidR0xRGMfZgK"},"signature":"9D0vDMGdNlo81XtkLhTpJ5LFDX19fiFHgS1VCy2LatILdKavmrDxIbcg4kTrdbPhd+eBnqknDPD6jrwnaWDYBQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uvv6h8jcmn06km6kfynhusvycwzhv7vvh03guj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["followbrandm6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5dXZEwLyMM0/s4yx46nv29gKAU49ZDNidR0xRGMfZgK"},"signature":"PQEKKku37Gp9mXb9KPRhXUHZYjU19Y2qVWuAARffv7tlwtDhxVzvBXnQE2EKs36VDi0rJK9m7X3yrsM4VpphsQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uvv6h8jcmn06km6kfynhusvycwzhv7vvh03guj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1626","followbrandm6","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5dXZEwLyMM0/s4yx46nv29gKAU49ZDNidR0xRGMfZgK"},"signature":"o7WujA+gl/4utNPcs8wvyHULHhckiFIV7yMG1CCgp/UJbVnzzSAtQNLs7N9cBrYVRZa8HgyBVTkhGqghLH24cw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uvv6h8jcmn06km6kfynhusvycwzhv7vvh03guj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1626","1","1","g1uvv6h8jcmn06km6kfynhusvycwzhv7vvh03guj"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5dXZEwLyMM0/s4yx46nv29gKAU49ZDNidR0xRGMfZgK"},"signature":"I8jAB3JvMPEBtuzb6pw5c0TALpr0IIwWr1OB3Z2X2MBoV8Yn5EiQMaMU5SfnbHfuRkjd4KrWX0dDDSwQ+LHfYg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ssl8wc3g0nj4slkz4mv0rcev6rppwrasnt8kp7","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"dPtGcTgIObTgYSvBHm4GRrqOuKCBHZWlKJ99CE74yE5UXc+qWExeVVFxhd+8xXItJP/2/FgGcvf2zQTl8ZOSXg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ssl8wc3g0nj4slkz4mv0rcev6rppwrasnt8kp7","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","voyagelittlelk",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtcpFizxWBfgKK8+uS8n6oWFnu+A/RrQNDkfYkwaaqfj"},"signature":"ijki6sCGIF2bK8GQLecmBAblg5rEjlKvDyDC6k04bCw9W6VDOIbEEPUwnhgN4X/dtowwZIsFkyiC2i7UQsI6bg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ssl8wc3g0nj4slkz4mv0rcev6rppwrasnt8kp7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["voyagelittlelk"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtcpFizxWBfgKK8+uS8n6oWFnu+A/RrQNDkfYkwaaqfj"},"signature":"/liYE1jdP5HCKujRI3X4uNr5OH9rk5ZzCbZRvjrhmQwRJ63Y9ZRyygaLdtSkFUSnnPJcxw3cXrFayRGj2trwCA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ssl8wc3g0nj4slkz4mv0rcev6rppwrasnt8kp7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1627","voyagelittlelk","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtcpFizxWBfgKK8+uS8n6oWFnu+A/RrQNDkfYkwaaqfj"},"signature":"WrA+TNwVliA/u6IvAJd2wGc3VhzeZJ/MZDidThmoIiB3YqkZ4QMGKDfpdXDJJ8gyRkAc8JxcXZX+mZgFbJtLrQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ssl8wc3g0nj4slkz4mv0rcev6rppwrasnt8kp7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1627","1","1","g1ssl8wc3g0nj4slkz4mv0rcev6rppwrasnt8kp7"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtcpFizxWBfgKK8+uS8n6oWFnu+A/RrQNDkfYkwaaqfj"},"signature":"MEUWtV7QcQ7sWWDSRA8wzk6OLkx47M5i+ZADhepaMxZHb9RzCVhwHKxuqUmJZZJkuzymfLcYjJaBLBn/0beO0A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1h9lp3tgkd4srjz8f00g79ld5q656lxlcrsusfg","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"iMdGwwgxAYXP+dPEChiENGtsqGCyIeJM3MJ6Evl61X4jIVNbAl2KtFTYT4JLN2/GqsNMO+bidxySX5slATpFJg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1h9lp3tgkd4srjz8f00g79ld5q656lxlcrsusfg","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","bracketsavez8",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ao8Qg6xpK9ftlwEwkDlqpPDCK8ry09trR1wCw6VGNJDX"},"signature":"sYP5OE4WMkBa1Z7vLNVxzq+i98ZepuUk5c8/KJ3lyu9GrFE4YGYV3DZhJCMfO6HJI6cpVyEWsYD/MV+BMbNWIg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1h9lp3tgkd4srjz8f00g79ld5q656lxlcrsusfg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["bracketsavez8"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ao8Qg6xpK9ftlwEwkDlqpPDCK8ry09trR1wCw6VGNJDX"},"signature":"2nfTwNr5SdZYqkKsDfr3IyvC+S0I8pInvFE5xaRWoVBSI7mXM2PkETOpDjewJmGxeCAheXlFK4sWu2Gr1fHeRA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1h9lp3tgkd4srjz8f00g79ld5q656lxlcrsusfg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1628","bracketsavez8","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ao8Qg6xpK9ftlwEwkDlqpPDCK8ry09trR1wCw6VGNJDX"},"signature":"3sJ79lpf9dlIwMohB+s37cx2gP9z1iPBm4AaWzdeufNvaPkS9HLfS6Ugy7th+tG+x0ifiDR51kFHlbDGnj5nSA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1h9lp3tgkd4srjz8f00g79ld5q656lxlcrsusfg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1628","1","1","g1h9lp3tgkd4srjz8f00g79ld5q656lxlcrsusfg"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ao8Qg6xpK9ftlwEwkDlqpPDCK8ry09trR1wCw6VGNJDX"},"signature":"SKGIK5DgTkh8NGghCzP1cqDsMCxJA9JUgO99xhuLRnpyt7/+6DuItmvvj93IMpqJoWXBoxMD24Fn/n4AA+vtqQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1jzl2myrquhdcwptnyg9yx7vkduv60ndthx86ks","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"f0eB9ORvRkyVfyLRgcMXve0N6b+nzIgdClvg1Jmoo2ZepKeZt6x5LyP2mLB4AcbFJK/+edzvi1bosgsapkZVbQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jzl2myrquhdcwptnyg9yx7vkduv60ndthx86ks","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","policepolecw",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiCMZRupU1ero1Osz+IC2lQKHS208dqF+L4tH3PuGJ8T"},"signature":"ZxPqQdoYapiUlLo9B7IE3OwUd0EYtPnxcldshzKTbA12b2FS9scxwn8/EOrqZmWN3jU5KGK3fpxqhR0RusL+vg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jzl2myrquhdcwptnyg9yx7vkduv60ndthx86ks","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["policepolecw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiCMZRupU1ero1Osz+IC2lQKHS208dqF+L4tH3PuGJ8T"},"signature":"y+2BUJHk5KNzAmfTqI91iubiOWvfAv/1eJMUPAlYvwp/UZ0TOdWHJuWqDzzgAbjXbXdQ2Tfz5ZPJV7l1EviDZw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jzl2myrquhdcwptnyg9yx7vkduv60ndthx86ks","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1629","policepolecw","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiCMZRupU1ero1Osz+IC2lQKHS208dqF+L4tH3PuGJ8T"},"signature":"thbz+urK22Gwt3rF7ya5a5PIBPqIlnMoUEKG7q22X5sQVSRBVFoH1Cyh85snuuBEFdcIp+ZJQqn9aaGXVvWBjQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jzl2myrquhdcwptnyg9yx7vkduv60ndthx86ks","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1629","1","1","g1jzl2myrquhdcwptnyg9yx7vkduv60ndthx86ks"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiCMZRupU1ero1Osz+IC2lQKHS208dqF+L4tH3PuGJ8T"},"signature":"UQ1qe870czw00iF2YZJY9cbt3vfxFhR3wpVZv2jFg8ciiKSwipt4hxczT0q3YSYOqWzKwQE66pP+NW74UGviFQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g159fuexamvwmkn6nldlhhg4y97npdrsya8t5fmj","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"4BwePsDv7R0AvX2AizfrDA6h2BKlvoop4uxhMSiB1rd8FvyWtaINEWHxos8Px7K1neNhLAWBCvDtQi9K3JGNqA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g159fuexamvwmkn6nldlhhg4y97npdrsya8t5fmj","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","dampfigure6n",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjI8BiQCDSyRIcrMTR0IIi5Qne+gn+FBCKk4jarzGxBz"},"signature":"ouF8pr0o8UyNzUdiRbNK6SzBJ55qyAsjMF0Iqoc02BpYZ3IdBZN1CxSgBMo5lXO8jO3wai/VlDuRpZyYAmSmuA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g159fuexamvwmkn6nldlhhg4y97npdrsya8t5fmj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["dampfigure6n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjI8BiQCDSyRIcrMTR0IIi5Qne+gn+FBCKk4jarzGxBz"},"signature":"fZo7ODrTU6spFFCLIC+B9baAHy4oa8j6lzUH+nYpQ+l7T3qKBI9o52M96X6hqmRF7qz9QSkc4Lqfo1hGlRhLjA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g159fuexamvwmkn6nldlhhg4y97npdrsya8t5fmj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1630","dampfigure6n","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjI8BiQCDSyRIcrMTR0IIi5Qne+gn+FBCKk4jarzGxBz"},"signature":"n6frgwW4ug7/d9pfWHa/ieWwSOsK9BtLRD/sHdswyVI/nknuuURQrAQUwAuJoYXimm7GBjROuB58UuYbQpjpXQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g159fuexamvwmkn6nldlhhg4y97npdrsya8t5fmj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1630","1","1","g159fuexamvwmkn6nldlhhg4y97npdrsya8t5fmj"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjI8BiQCDSyRIcrMTR0IIi5Qne+gn+FBCKk4jarzGxBz"},"signature":"dlMN0fSJMWK9fCa1r6jFlrcUg92fbOiOEglAkO0YXbkJG3M4M/FW+JCgD9AsFXx8bM9wyBYNvbHXnlEtTLtd2Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1a5u3gkqv93srl9pv90py5w7dkp57xs00e77xsj","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Ad+ZYnjSjnbfhEzDtGIrLMgAbccvc33ghxzftzhBLf0Qjt4kFfxEBnJI/unrEzcP0KJnxCMcrQieczby7Azfmg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a5u3gkqv93srl9pv90py5w7dkp57xs00e77xsj","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","virtualkidney9p",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AidrToU2doydcwvvX5QmT2/8Yzn/OSPCLmT1K641aESV"},"signature":"rx/TE2Zb7SrBmwCHA4PuIkFEXTYZxibTQA1JGXFnBAFoCWt2tJLtj65SyQN2jE5CkYzkSwl1+QCntKMbOM9tXw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a5u3gkqv93srl9pv90py5w7dkp57xs00e77xsj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["virtualkidney9p"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AidrToU2doydcwvvX5QmT2/8Yzn/OSPCLmT1K641aESV"},"signature":"nZBVD90qzzeAorc1pViEISDL6dA51VPSqkaIBTHXNydNdhjumoJG/w+jFyQJ67DBWwzPg59FUATyuGN0+Ct6VA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a5u3gkqv93srl9pv90py5w7dkp57xs00e77xsj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1631","virtualkidney9p","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AidrToU2doydcwvvX5QmT2/8Yzn/OSPCLmT1K641aESV"},"signature":"U6tp1o3KVwqYtKcAaI4UeQw86nFqntYPS0Ml4yKSwh8P2+0ztLOZXaGXLxCz9W3lr3yquGIN/ttFXD77etSg3Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a5u3gkqv93srl9pv90py5w7dkp57xs00e77xsj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1631","1","1","g1a5u3gkqv93srl9pv90py5w7dkp57xs00e77xsj"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AidrToU2doydcwvvX5QmT2/8Yzn/OSPCLmT1K641aESV"},"signature":"cgJTBY6gBoWsjVLi6CyzsONnCX5Q6HEktA3xkcOl5NtXZJNLyQrxmXY+EtBhrsn27ktALVHswwTrWi2mkrkP8A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g14wpea2236r7dklwgn30egmfsarke4nn7gfr66q","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"NqMi1KBgp4h4OsvBZ07kbjrY3RornOjXFmcdUihwi44ci0SUreD7rjZovZBil/h42VR+Tkz01EOujTHjArfeIQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14wpea2236r7dklwgn30egmfsarke4nn7gfr66q","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","vibrantitemlw",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgW2pwiCA9bL8V+Mm1zXeJ44Ma/3Oh0bEVraInfde8cL"},"signature":"ElhQusmN02VttO1Yz5z0sQnTLy8BvsqobPFdL3yTEpoUAAkiqyzUyRFwn70JFBYpAQYZlUJUEMkzO/i4GyqG5w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1f3smlgk0sf048u2urrfeg4qfz2at6mpcutzrdm","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"hvfhlARDUkFeo3WAeC6EFg7XqaLRVwuz3VkicrncteIvZrAi0DXccUnWswggPy8WTtZEGGZOkwN/FOpir7m+LA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1f3smlgk0sf048u2urrfeg4qfz2at6mpcutzrdm","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","emptyjazz48",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoAkLwS0G2VYvP7tc4kmi7699Ka5JDbRNOqa0SkHrn09"},"signature":"c4cK0u+reKraDseU359Q310QB2xzcA53vu1m2w7iSFhu+d0Chen9rhr0T165bQ3M/R1K3Iwyg9DOAIctHmHPAg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14wpea2236r7dklwgn30egmfsarke4nn7gfr66q","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["vibrantitemlw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgW2pwiCA9bL8V+Mm1zXeJ44Ma/3Oh0bEVraInfde8cL"},"signature":"iavYg0aHLfooMt7IP/7cjv+I2o2mq48gbYzTA2VWPz5gr33VaWAoIZmAItRVWIRE8NseLUALykgjLMoVwfGIfQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1f3smlgk0sf048u2urrfeg4qfz2at6mpcutzrdm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["emptyjazz48"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoAkLwS0G2VYvP7tc4kmi7699Ka5JDbRNOqa0SkHrn09"},"signature":"N4G3SguhjtBQr3eQMemuKa2CAVVHphsYQ7Q/64IFMWZ4h+aTh8meWVSQsD/5r0GNC67oKV4mntP3690Bi0ijjA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14wpea2236r7dklwgn30egmfsarke4nn7gfr66q","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1632","vibrantitemlw","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgW2pwiCA9bL8V+Mm1zXeJ44Ma/3Oh0bEVraInfde8cL"},"signature":"ck3skAIC8tYTpZDGm1pbt4B4sAAGUL/5CA1SCjuumf16B0eYxvKdGv19TscRr71+1ryibTWLmp+Av9PUBWeAlA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14wpea2236r7dklwgn30egmfsarke4nn7gfr66q","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1632","1","1","g14wpea2236r7dklwgn30egmfsarke4nn7gfr66q"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgW2pwiCA9bL8V+Mm1zXeJ44Ma/3Oh0bEVraInfde8cL"},"signature":"UhJLWO2ixwbR81I4TVjr8S30g/WRp4YyxEixP6GV2bkCnUaDFVqP9Uz6acVEa9Yfm7SI0SXmI2u7xd8hvpqHcQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1f3smlgk0sf048u2urrfeg4qfz2at6mpcutzrdm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1633","emptyjazz48","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoAkLwS0G2VYvP7tc4kmi7699Ka5JDbRNOqa0SkHrn09"},"signature":"J1A1+CGdwffcxqDZyX7uOAxk7yXJYVgPJbSkfnAtdi065QAZn6+DJ1r2LtUHcdW/twwdfn44dWMULFhlgZnUMA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1f3smlgk0sf048u2urrfeg4qfz2at6mpcutzrdm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1633","1","1","g1f3smlgk0sf048u2urrfeg4qfz2at6mpcutzrdm"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoAkLwS0G2VYvP7tc4kmi7699Ka5JDbRNOqa0SkHrn09"},"signature":"vT/HyNOxap69i33013sSTEJFeXk+30XPIkXPWhrW+e1+yd4cTny6qusmgRvXMCP13prHVHgKTcdUgyXEdGg2yQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1g472wr4hs5qfpfyd6tt3sswwalfxewylnhr5sa","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"K70H21HoaOAGcr0SCA7kKa1WkWn3svi7mvuTzcwzNn8mVLf7Ab5V5rduZPAdrg+MxtOcGbYljOF986Ceu4lpYw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g472wr4hs5qfpfyd6tt3sswwalfxewylnhr5sa","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","estatesurveyfy",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aj3Z3fZDKI3Tv4qAA2SNuUzqAlURo464z5ZT8q0KbRGz"},"signature":"S3AAhU8nzy2BtBOAvs2HGi3ip9Q/ke4gEdkpbUYqUpQyKnQTdg4XUxRLKIPTqysC9+bqkDJuU9arsEB/ytaddA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g472wr4hs5qfpfyd6tt3sswwalfxewylnhr5sa","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["estatesurveyfy"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aj3Z3fZDKI3Tv4qAA2SNuUzqAlURo464z5ZT8q0KbRGz"},"signature":"lFkH9QY9EP5N3IblOHirsoz9WDv4MeW3EaPU6QIjNGlnQbcxHrLbddaO79Js8H1urQefaX8YXY7cv9s+zKzWrw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g472wr4hs5qfpfyd6tt3sswwalfxewylnhr5sa","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1634","estatesurveyfy","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aj3Z3fZDKI3Tv4qAA2SNuUzqAlURo464z5ZT8q0KbRGz"},"signature":"wgJa5ITmX7FIr1bMKFTh/iRCgc0/41hueM12OWbC/g9N0jFvsztmi53DCKU8rxOoczrHBbOnL0R7rHto7nMR7g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g472wr4hs5qfpfyd6tt3sswwalfxewylnhr5sa","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1634","1","1","g1g472wr4hs5qfpfyd6tt3sswwalfxewylnhr5sa"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aj3Z3fZDKI3Tv4qAA2SNuUzqAlURo464z5ZT8q0KbRGz"},"signature":"I03gDls09cCRgDwM2D1WXPrzW/SWWf9PRjXI07Rq5HFoTpbWyg/LsonRLAifMHIzNRnaPCD8p+h5oNdHvHnY+g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g15kdfageau7n0hvt8cd55shxhgsc5p0w7fx59dr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"bgDDGLYyGzjSweb7xSdBObhML7OsnNzzDDfHfLXpnnJ/06osBchEQfq3e0iCP8unKmHBKYhhBIhVdW/veD0k9w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15kdfageau7n0hvt8cd55shxhgsc5p0w7fx59dr","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","publicauctionvt",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah83459hbLCu3dY9CsmFR2inMTZJfgW6twtjfp/FaFS9"},"signature":"h+Q4kPo/PEWatOBpo2S+tOR/ObfJpdgI2pe1KJ27dygbH/LjWFfBViwBzMGpB5BbTpYSjc8D3vTEkNbycBK71g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15kdfageau7n0hvt8cd55shxhgsc5p0w7fx59dr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["publicauctionvt"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah83459hbLCu3dY9CsmFR2inMTZJfgW6twtjfp/FaFS9"},"signature":"J6lXTAAynY4EDpLkj2DSXDulwe8i83LqzYDLuDwGAxRrOTlXAQJdK6TofN+8BRX7eIZrem8shgxbvcxu1d5YSw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15kdfageau7n0hvt8cd55shxhgsc5p0w7fx59dr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1635","publicauctionvt","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah83459hbLCu3dY9CsmFR2inMTZJfgW6twtjfp/FaFS9"},"signature":"oUFOLfTEfgSs7I3kHqTmp5LCs39xMu97hxdccqxFZ7Jw3RbSZJvzNsJRSzcymyh9im1To0dbMv3mQYJqnGQBiw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15kdfageau7n0hvt8cd55shxhgsc5p0w7fx59dr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1635","1","1","g15kdfageau7n0hvt8cd55shxhgsc5p0w7fx59dr"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah83459hbLCu3dY9CsmFR2inMTZJfgW6twtjfp/FaFS9"},"signature":"EB7Cur2e9dWvhIlsNIW5p6eesXS2UwDGJDqUcR40p/d6lN8tS0mUmae9sfGZyPOljpRg9Gqwg7VvoNM1phJChg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g197j57fx6fs5rxneh6u697qsradkfm8t7xpmua7","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"2TRNEwczRhThgN9Oz8XMOFs3aIpDH0fb9fjC26sw3F8PRM2TPNeqffAhlah7ymtowIblSnbtjxSgA1MgqN4dDA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g197j57fx6fs5rxneh6u697qsradkfm8t7xpmua7","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","rulesoulrx",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AreG/zwXXzlCu/qUQNNZYYge1Tu1YZsHkQ+auPFynOHB"},"signature":"tmebNJS+yLqlbRVbW7iatik3ryN6jIkfegJmfaEAOGVk/i4eRF8ScOP5vaagqImS49u9PYZFXW4uoEfD1gKXfQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g197j57fx6fs5rxneh6u697qsradkfm8t7xpmua7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["rulesoulrx"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AreG/zwXXzlCu/qUQNNZYYge1Tu1YZsHkQ+auPFynOHB"},"signature":"ZUa9sKMUyWTG9Bu1PwJ3lQKDKjLJIU33E5rSkACXqndyYGjVZlSopilDrQDIbPnigNsaQi83KoscpAyh9W7PSA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g197j57fx6fs5rxneh6u697qsradkfm8t7xpmua7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1636","rulesoulrx","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AreG/zwXXzlCu/qUQNNZYYge1Tu1YZsHkQ+auPFynOHB"},"signature":"A5cUWRaWIqJFRnf9bbTZSvufMy6YsFBaShIEp/428GMtY/bWnHhHWFBy1MaetRtMWYiwndWj8zgRZGAz1+9V3A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g197j57fx6fs5rxneh6u697qsradkfm8t7xpmua7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1636","1","1","g197j57fx6fs5rxneh6u697qsradkfm8t7xpmua7"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AreG/zwXXzlCu/qUQNNZYYge1Tu1YZsHkQ+auPFynOHB"},"signature":"5qXFV6boyP2fmD7/0GRP87f5L0pSDtLZL9X0yTzGrDs0jbb/zCPTexbSdLEGucEPOnWdbt3m1PVgM/EnLyZQyQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g14czup2ufhurd04pp9awf0jk5jmjff5vm8pyy9y","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"rTwb4nNoSpcNP0Y7AmNEyT60QfXrwpi8RI2F1Kg/3J1viwMimONVFbhligr0y5ILShT7mvQi6lWqFqtJIh6/sg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14czup2ufhurd04pp9awf0jk5jmjff5vm8pyy9y","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","mediaverify4p",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2E1stOs9a/jOTXBYU61zTkRuaPwTSPd5/F19V226r0s"},"signature":"oisLESpZag5lw8SMQmPrierng9O9eZbDZwD3diO4UO5aC/dTRKZZeTORkrsw4FX6VxzGpRs44XzteuFQSF4ZPA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14czup2ufhurd04pp9awf0jk5jmjff5vm8pyy9y","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["mediaverify4p"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2E1stOs9a/jOTXBYU61zTkRuaPwTSPd5/F19V226r0s"},"signature":"ChoUSiHyQtDxK/p/Z1MmBVqm99Scs6nErE4kLLiQ9DkxQJ4KyKqZdaFH69mGPs6DcwRCYKQNIVAX4Hy8Vr5Sug=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14czup2ufhurd04pp9awf0jk5jmjff5vm8pyy9y","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1637","mediaverify4p","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2E1stOs9a/jOTXBYU61zTkRuaPwTSPd5/F19V226r0s"},"signature":"4SkrzENQAkEIO5Nw7MBWdH9Ac5VixeVcL68cPI1y+TE+9JFU7Jf11IDtKdLARO+m3ka0vqsfRQuBry/EryzIqg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14czup2ufhurd04pp9awf0jk5jmjff5vm8pyy9y","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1637","1","1","g14czup2ufhurd04pp9awf0jk5jmjff5vm8pyy9y"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2E1stOs9a/jOTXBYU61zTkRuaPwTSPd5/F19V226r0s"},"signature":"M5uzZEh9EBVVWkPEbLelxVssBZIqH37JFwQSmybUMlE9M0PRWJ2CIa0lchwiVnQ6pweBDlyXew4ZwGNni6+igA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1seupq0gdtn3dhlstkx5qlepgx5mf4e70lt7cpm","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"4l2XzG32aFP3HgnEX4bS5wg4tGq1J2gzE0KDwHOVMQtEK7/IZd0We3SGKj0DXGYRM86QtMj6+fKGUq8ZvCFNPw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1seupq0gdtn3dhlstkx5qlepgx5mf4e70lt7cpm","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","auntgivels",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsTSOhq/KNvCOJtvlr9garFKsOkqikiM1UCqVUuFmazz"},"signature":"Q8DGSrYElbEXojGLFgAbAYBP0oGypcR6o1M0jc2SoGt6gSw9SK/0SIv8jaHCxrezm/pt5KxIPk9si3IbF80xeQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1seupq0gdtn3dhlstkx5qlepgx5mf4e70lt7cpm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["auntgivels"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsTSOhq/KNvCOJtvlr9garFKsOkqikiM1UCqVUuFmazz"},"signature":"KTkcwiB3ArMAuOZUp//paiXasELqEPI1nrxiAJao1SoZvAvdfhI7WF0Nk19JnxOXHaO+HuBaQnyggoS3ARC2ug=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1seupq0gdtn3dhlstkx5qlepgx5mf4e70lt7cpm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1638","auntgivels","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsTSOhq/KNvCOJtvlr9garFKsOkqikiM1UCqVUuFmazz"},"signature":"LtivLdPqrQaK6iACv/nu8zs+suvFcehLIngLpaLjcigInYRDQV7cnc7ODstPJ6xvqL3EYp8VBZE8zr3y42UK0g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1seupq0gdtn3dhlstkx5qlepgx5mf4e70lt7cpm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1638","1","1","g1seupq0gdtn3dhlstkx5qlepgx5mf4e70lt7cpm"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsTSOhq/KNvCOJtvlr9garFKsOkqikiM1UCqVUuFmazz"},"signature":"XCCuxnk5RKZLlTYlcZsGZ80F9tcfhw6DL9PPIUKPKI5JlC993LJhKCp/u/UL8XTg7DryBEcckWwIFgi4HXW08g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1544yngslat766f66y2e2p79nwxjhkypsqkmnac","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"SsqMYPCMaNECduncqMwVYSL7CNV32b51+AsXWiyNKSdhavTCYrg1qLQQ3wvU3T+72Omhwr2E8pvGnillHcXAxg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1544yngslat766f66y2e2p79nwxjhkypsqkmnac","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","sortemotionf6",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8bfa1GQlms1G+jzRrkVbSio3ftqEbbu76AqW5cVKFOy"},"signature":"aj93Sg1wBXXTLV4Io9vYulgPsNzCBrONwtWJ3CQuMfkbb4++9rEYecZfRrAzPn+B7MiM08eThjldfEJ5m/+Lig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1544yngslat766f66y2e2p79nwxjhkypsqkmnac","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["sortemotionf6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8bfa1GQlms1G+jzRrkVbSio3ftqEbbu76AqW5cVKFOy"},"signature":"wDXWgc9lLrk7u4C7Hd0MKZwfIYp+PJ8ZMawzW61/0PR/EzBNKEnFFcQEOW64VXjDJAiJ3VAdnNtMQYBqSBzokg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1544yngslat766f66y2e2p79nwxjhkypsqkmnac","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1639","sortemotionf6","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8bfa1GQlms1G+jzRrkVbSio3ftqEbbu76AqW5cVKFOy"},"signature":"2hHFmN8WMiswa53MB0EQ79xOLd70wfn0CG9u6895JYUrsue9nkP9pGOktRz8tSks6YvrL7ZfpZz97f8RWwEn6A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1544yngslat766f66y2e2p79nwxjhkypsqkmnac","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1639","1","1","g1544yngslat766f66y2e2p79nwxjhkypsqkmnac"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8bfa1GQlms1G+jzRrkVbSio3ftqEbbu76AqW5cVKFOy"},"signature":"ETV8XzVWW0ckDLumoEUGwBy31DuH29dr2DNYNXOly0xuUl5mbhLdCprb/Zt1HskSzQJluMdxC95jB7BdwoHMaQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g124506deuw9e9cjxhmtmsy9cxu340zdjlxvapzk","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Ch4y9dP5GPKTK1ohCjAJnzvdS7VZgZflwN0d+KBDc+hfFCR8NRTFdRvc/mkv/J1WsDpuwscgVEGaHbVJdRfvDw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g124506deuw9e9cjxhmtmsy9cxu340zdjlxvapzk","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","twomaple9c",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjUwtVJqVTcpNovp4RWjeyi9gMlTL7wjQ/vVaViEFFzv"},"signature":"lRh0Nk+3URPTjxVmIG/e3XjSuPTahBbsERhoAk/kva1QKkrXXfp/BqILGRGHqNYbKZ6/aSLAe+Oht8mvVr7sCg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g124506deuw9e9cjxhmtmsy9cxu340zdjlxvapzk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["twomaple9c"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjUwtVJqVTcpNovp4RWjeyi9gMlTL7wjQ/vVaViEFFzv"},"signature":"q5qrg/Avx35Q5CQ82GixHor3uuGszqCR5LxnZUIb4g4FJEsgwr29hm9jVTfLEH5RwDivDKyND8FjAE1kJF/QXg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g124506deuw9e9cjxhmtmsy9cxu340zdjlxvapzk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1640","twomaple9c","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjUwtVJqVTcpNovp4RWjeyi9gMlTL7wjQ/vVaViEFFzv"},"signature":"4T5aEO1aZYYkhYjpRgFv86mLQg52m2iqjylkqp/gsTdFYqOwoufCjX+m5u9r8l2qk+57McXR2E458hut7jCW5w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g124506deuw9e9cjxhmtmsy9cxu340zdjlxvapzk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1640","1","1","g124506deuw9e9cjxhmtmsy9cxu340zdjlxvapzk"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjUwtVJqVTcpNovp4RWjeyi9gMlTL7wjQ/vVaViEFFzv"},"signature":"HACG0vPght5lGYBO9PfxwuDw2BP5rw9GGPXAIUFXibIGvjqJrBSy64KXNYa68J4i74lVzhxFHXNFAqsD3h9Wug=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g14u06lk4su6zjpeyutl8pamxel2e7aq8fncngvt","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"dBga5/86nWcrgeYScY3OJwPlD+DC7+bP8efxsVm1KRFX4mn+nngEcCEm1fourSZ7yZUMBFeaMthldVi0vNSaww=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14u06lk4su6zjpeyutl8pamxel2e7aq8fncngvt","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","tornadodomainey",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Av34Ta9PBlFhxO96lxv9/waxcsp52RC1JAqLarwNzyXZ"},"signature":"gbDydqLFABgQiq2d7J+b4mj5oXh9pzskNXeAAgNRtiVWhqlwnlBR4ET435AFVvEn28mU4qVVhCo6Po13SCFIJQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14u06lk4su6zjpeyutl8pamxel2e7aq8fncngvt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["tornadodomainey"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Av34Ta9PBlFhxO96lxv9/waxcsp52RC1JAqLarwNzyXZ"},"signature":"s2/oFLUFMBH3hxTMaJWG1y73+Elutq6c9hfCRlz1vV5kiezPAjWJA2PTiBQLkXWTT9H8QndvHQPMEovRfRXW2Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14u06lk4su6zjpeyutl8pamxel2e7aq8fncngvt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1641","tornadodomainey","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Av34Ta9PBlFhxO96lxv9/waxcsp52RC1JAqLarwNzyXZ"},"signature":"QzdBE2eWmS2xUYCvcBzZEtgFrvzbwSLldsdbX1wj/JgjgltlqHaeZDyr4iM1UYRUgORyGIFHgcmppXKb1KP8HQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14u06lk4su6zjpeyutl8pamxel2e7aq8fncngvt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1641","1","1","g14u06lk4su6zjpeyutl8pamxel2e7aq8fncngvt"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Av34Ta9PBlFhxO96lxv9/waxcsp52RC1JAqLarwNzyXZ"},"signature":"Wf5s36kg9Hbrc42S20fVkro6FkBnhQluucAlzPn5+PgKr1P+k9hx7qL6JmrSrouKr25XZ7lR3PkehHcdXUYFAA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1advcvjw4zeau0nu3ktppgpcfhkppq6estvca7q","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"tDluve6hmoZrHJF5DVownaItSwIRWTVExDjCDv8KRvoclV8Vf+KEXw43BZX8VgsvpLDPweS5aGTp8aOKSSbALw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1advcvjw4zeau0nu3ktppgpcfhkppq6estvca7q","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","brandarrestnu",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1MW/JMgWfaO188Pva7IGfOUVqkhMWJn2dhHmLd2dSeV"},"signature":"rbnP+jiqIxhE2YELlVp8OvQZDyMNKc/AZf52hN7gzohS25jsglOfa8MKzMN3lGnzL/vXWIhA/SAJpmWSypH9XQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1advcvjw4zeau0nu3ktppgpcfhkppq6estvca7q","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["brandarrestnu"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1MW/JMgWfaO188Pva7IGfOUVqkhMWJn2dhHmLd2dSeV"},"signature":"WN7lYOoyoII9Vgvf5okkQzcuaHzu4HFXaTW1H6e6tE9xQzg1fcWucWocITG4Lo2K5p34intjUyA35EXTUYxdSw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1advcvjw4zeau0nu3ktppgpcfhkppq6estvca7q","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1642","brandarrestnu","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1MW/JMgWfaO188Pva7IGfOUVqkhMWJn2dhHmLd2dSeV"},"signature":"iiz3zSRlE6NtU6y+Dik2MuMOaHxCSv7VGZtTO4bvaoxWG0rtG+aCVe4KTuNh2+SxQfs27xMupqtGvLdcjKvMrg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1advcvjw4zeau0nu3ktppgpcfhkppq6estvca7q","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1642","1","1","g1advcvjw4zeau0nu3ktppgpcfhkppq6estvca7q"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1MW/JMgWfaO188Pva7IGfOUVqkhMWJn2dhHmLd2dSeV"},"signature":"SkNHRDo/uo5F5B8Kc9IriIU19rGLx7EjXX6QzOVu2DsLePxZwNW0rbgiP2KeN9ZvE8WqYET+ObEwc6lDQ1c69w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1qmcqhcm2tq3gx877cdt5hl806zvtkg2r45wuk2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"BftL3iGDFdzjAPtpUQlchkwCHO3iVh8Xz7NtA51Ozt5hGAiA08gNLS1VwodYxZ+5HnOlCP0mKYjwx/BOdEUEQA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qmcqhcm2tq3gx877cdt5hl806zvtkg2r45wuk2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","togethersystem87",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah5QAOAbJwIXHOuOmUq8dypfhJeN/etJ3vBNN1uskINl"},"signature":"FvmOkSXikb/sHeUei+8/wRR8g+Q5k5TLpJ6yV/mdqERCMFWsDWlsFxCA856jzIpiQc41UFoZC1pPClgV2efJuA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qmcqhcm2tq3gx877cdt5hl806zvtkg2r45wuk2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["togethersystem87"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah5QAOAbJwIXHOuOmUq8dypfhJeN/etJ3vBNN1uskINl"},"signature":"+AnVE61mO6Z48L0yQ2fBe9IobXwEnFkvjtRQYRXPaSttLlLf0ax+RCYbqEDiM4+DwPnqNHSTBxyltTgnWC7qpQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1r6v0lt5aqmf7mfvsxx0aa0acr47jaxegx68jgq","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"E6Kkvr2pky5Odas2WIWfmQuhOF6gygAejdVjXUGlX2koR5bbrha4+yS3SHjxJ4TE48/xOgW1orHIXv6DJ6/FTw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qmcqhcm2tq3gx877cdt5hl806zvtkg2r45wuk2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1643","togethersystem87","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah5QAOAbJwIXHOuOmUq8dypfhJeN/etJ3vBNN1uskINl"},"signature":"d/pAeMnqdl9IYrX8Dk9YSDmqHutl9JMq+ghWV2pvc3I/eJZgqRETs/iJqmI3wjDvBYE+TT7nxSQ0FUzS6FEfAg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1r6v0lt5aqmf7mfvsxx0aa0acr47jaxegx68jgq","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","enrollverify7m",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Alk9Ama28QSCirQMGrouFDr4lmLKOqALktBxSycAdNld"},"signature":"eLbqnt/JhBaui5hRoBc6Zh8RCGQoCpK9axINhnPJ7MdBuBCDgipxMOFbeoEFlFUJo/UuKkCz2zCFJR7spF+vAg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qmcqhcm2tq3gx877cdt5hl806zvtkg2r45wuk2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1643","1","1","g1qmcqhcm2tq3gx877cdt5hl806zvtkg2r45wuk2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah5QAOAbJwIXHOuOmUq8dypfhJeN/etJ3vBNN1uskINl"},"signature":"/fgJtBSEPWKlz5hH9zUanK0+icRGuZV81QlMfE7s4wYkgdzAsjW3LFTGBLGeYjKqSLOvOLfgWZjw4/nCmRj1ng=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1r6v0lt5aqmf7mfvsxx0aa0acr47jaxegx68jgq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["enrollverify7m"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Alk9Ama28QSCirQMGrouFDr4lmLKOqALktBxSycAdNld"},"signature":"cGAgyTfIKOhOB/1iTL/WlDZMUerJVdG/N5q+U5Lu2Bg/+FRBcwagA7Wr02ZtqrNObAH1jCEVSbEX+YgjyWN0IQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1r6v0lt5aqmf7mfvsxx0aa0acr47jaxegx68jgq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1644","enrollverify7m","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Alk9Ama28QSCirQMGrouFDr4lmLKOqALktBxSycAdNld"},"signature":"qSICYvWPI+dKKsxzME4bBK5hrXp+sp206XHloGFOZfVb37rTebj0HDtVgGSbupQRzLLwOpncDPIt1VH2/tN7LA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1r6v0lt5aqmf7mfvsxx0aa0acr47jaxegx68jgq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1644","1","1","g1r6v0lt5aqmf7mfvsxx0aa0acr47jaxegx68jgq"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Alk9Ama28QSCirQMGrouFDr4lmLKOqALktBxSycAdNld"},"signature":"zQuCjyd15BEL7Q+Zj1jyYt8BcC7uoIq2xxo5Zl1G6/A9N7/ktR+lgjFCix/cO+xmEyqx1rbGjPHduEsRgsQrxA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1mhuz47rsghutatf6tfyryfzf0n0sc9yd49mgua","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"KmPrF7gdVcItP7z2TpzLlSqHXK7snLY9bzc6oENTJYxVuo3IogdCOkY7qYu4EdGp1stVHoF4NdqM28FtT50SQQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mhuz47rsghutatf6tfyryfzf0n0sc9yd49mgua","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","nationbirdtf",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag56isFtEKhuDzfdN0/tTcRAHDdfDakMafmOqKfhukyQ"},"signature":"/uQzjaYFt/yYj8gFb6aqQaVCq/JZLPCOMPOGaJ0ILKckd6KNHdm1zCJos/hfR04GLHvFYGkUNFV/TtjnIhUXGQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mhuz47rsghutatf6tfyryfzf0n0sc9yd49mgua","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["nationbirdtf"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag56isFtEKhuDzfdN0/tTcRAHDdfDakMafmOqKfhukyQ"},"signature":"4asEyeiYLnFLUtxdL25nPKGNQpvGVCtrTijhXW47421pDVQr3HtdZ+OFsFcUOWwP6NhXGjXwspzeyX0ZPhlqDQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mhuz47rsghutatf6tfyryfzf0n0sc9yd49mgua","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1645","nationbirdtf","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag56isFtEKhuDzfdN0/tTcRAHDdfDakMafmOqKfhukyQ"},"signature":"k1GPpeQ6xB3f5MDEE2yk/G+97uumcxaZDzKNQ4UZuDJSQp/1cUwfrJNaWxizZxcVLdT1XVmT3vFyWX7ZRCk1gQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mhuz47rsghutatf6tfyryfzf0n0sc9yd49mgua","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1645","1","1","g1mhuz47rsghutatf6tfyryfzf0n0sc9yd49mgua"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag56isFtEKhuDzfdN0/tTcRAHDdfDakMafmOqKfhukyQ"},"signature":"oslbzg+FR3OdNKMHn5xULFFEKj/06Pl9iPezyK57VkJQQBUBOf40tlCutfOSfjOT64sBVJ/4FlW6PJ8AUeqTHQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1c9yul08mwmt9y839kxgprz7peevnqdf7h6hv3h","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"lQ4neJcXVwNctZhZZvZT2YYBeIf64ai6I2QpYlkrFCk585urHt/t01gKjqCKNBIsufLni0Cg1g2uJrlC/6gXVQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c9yul08mwmt9y839kxgprz7peevnqdf7h6hv3h","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","mediaregret83",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlQ8cVNglYOYiK1PuYCVfoL66RV6ztp/6WGZ+gGa6lSG"},"signature":"ReQKrHKf6L4p2XCyGzsXZgf0fr7zF1M6eDzPe2+walEnYEsz7+408O7AzH00823GfaTMqROnQUp+92yAItTYZQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c9yul08mwmt9y839kxgprz7peevnqdf7h6hv3h","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["mediaregret83"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlQ8cVNglYOYiK1PuYCVfoL66RV6ztp/6WGZ+gGa6lSG"},"signature":"BrnP4GeAeYamciWggrvglaPiW+7iuRN/eylNE744qzAVsVackGKHY/YRWiOjk3euxtI9nwUu1kC25iw/X8ZRxw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c9yul08mwmt9y839kxgprz7peevnqdf7h6hv3h","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1646","mediaregret83","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlQ8cVNglYOYiK1PuYCVfoL66RV6ztp/6WGZ+gGa6lSG"},"signature":"IsBb3oBTN6dgajh9TC+vtkiDMSWBpzajf/56jTlW6sVNxwqVKYZ7SruoZ+3AzuEhCrJ/8flpvT9nff333Dz7QA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c9yul08mwmt9y839kxgprz7peevnqdf7h6hv3h","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1646","1","1","g1c9yul08mwmt9y839kxgprz7peevnqdf7h6hv3h"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlQ8cVNglYOYiK1PuYCVfoL66RV6ztp/6WGZ+gGa6lSG"},"signature":"Y/jzKbCI3YixJvLpSLbMfvqIv6ILjNUX00/Mae9RLD9YwUNjKqkuPWVaA+tJZPAUWbh31YA/YziwrsqN3KecEQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12r6k7fvdkpy4f2g4xqcsnqp5ekvpahkfwy5vgg","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Byj1tAP+Vr16VThYnqZH+VpbyJEF8RRsk1nCvKbKOdYzjwCoF9MiOCRdEtbTkKAcMbsHny8zndhxpC6NC9qlNw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12r6k7fvdkpy4f2g4xqcsnqp5ekvpahkfwy5vgg","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","sockcup4f",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgRp3s4cLPdXZ2gpoSY5cZivZ9y6CT7V36FtiD/5LoC6"},"signature":"xoQi2bUUx+wdG7D6tMGV4vuoxTYwoIfnaAC3a5IKGsV5GYfCNiM3JTZwM1P6S04hKwXpV9Gt/fv7QXfeM0w9iQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12r6k7fvdkpy4f2g4xqcsnqp5ekvpahkfwy5vgg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["sockcup4f"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgRp3s4cLPdXZ2gpoSY5cZivZ9y6CT7V36FtiD/5LoC6"},"signature":"P6cz/hZuPzKKl1xvcmv2BMoSO1ak3APExHqPkz6rRIhIOBrlY/lbVasQgE0eKQyNDRxQTj29PLfmIvM12BeTGQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12r6k7fvdkpy4f2g4xqcsnqp5ekvpahkfwy5vgg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1647","sockcup4f","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgRp3s4cLPdXZ2gpoSY5cZivZ9y6CT7V36FtiD/5LoC6"},"signature":"gpmv+RGcnfdBbOmGtCjjKQpw5D+5EhP7tmEiiSa9Pb5Hh3rfku4fMdqFN87do71OJ6+0kkvB2VcTFBeJcu0qMg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12r6k7fvdkpy4f2g4xqcsnqp5ekvpahkfwy5vgg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1647","1","1","g12r6k7fvdkpy4f2g4xqcsnqp5ekvpahkfwy5vgg"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgRp3s4cLPdXZ2gpoSY5cZivZ9y6CT7V36FtiD/5LoC6"},"signature":"aLpU856JKIqsbLaYcX7JnlNiMO/Zih2eAVs34QLMnJACWCU0678eruItKO+CB3SajaRXPEB5LC70HIRO6VSXXg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1gel86khl7xjmd334larnhk6e3q2xc26mcev85e","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"8R1BiKaSqz3l2Td7zO7veZzX3d/gtCwTXdb75TZi72BDCi7N89BEU8Gd0mRB6Xr/XlgWXU56t9YztZ/PV+Jnbw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gel86khl7xjmd334larnhk6e3q2xc26mcev85e","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","stemsister33",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoIliBRFxeptC2CD1I0tVJdYOl4qewY0BOqnyBtQvttd"},"signature":"BHIYHDSgTy/rsPkHPDiSHlnV0Z/kfQ5WFWPIUosW29cnvEnAb/m583G/8goDNV5iO+DVRnVtVM2ptVE5/jMgZA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gel86khl7xjmd334larnhk6e3q2xc26mcev85e","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["stemsister33"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoIliBRFxeptC2CD1I0tVJdYOl4qewY0BOqnyBtQvttd"},"signature":"sN6vHt01K3imYp6a6dYjoizN6bCY5UzHzzpNUWWMXloBxoFEuVa60B/1eI7A0ap+mea6G+ni9NKWGnLUjBNA/Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gel86khl7xjmd334larnhk6e3q2xc26mcev85e","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1648","stemsister33","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoIliBRFxeptC2CD1I0tVJdYOl4qewY0BOqnyBtQvttd"},"signature":"D1D69SLgbeTetVpuNKX6uSuyagWvboFisdMRCJrLSO9hLqY0lLR7PJwVi1el16jSanpNfxYKsI3shM7ZRQl1gA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gel86khl7xjmd334larnhk6e3q2xc26mcev85e","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1648","1","1","g1gel86khl7xjmd334larnhk6e3q2xc26mcev85e"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoIliBRFxeptC2CD1I0tVJdYOl4qewY0BOqnyBtQvttd"},"signature":"K2xq3yV0bSE9ziVQqFWdSI50CyN2s/TgN1+6HIXA30hJoKhURy1w7zyeUPYaDPjSH+rU68E9tGC2nclMdsGEAA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1melfan7un5q60ycjl6nadf2f7e540qrsekgvsw","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"HA/U9fTkRQik4PjtGAKi43VUp2ytOWh3NwPW/XXAmxNd+VndNbeRUhJWjuiMAXaR2C/NXWvFJNToyDKYHyRk5A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1melfan7un5q60ycjl6nadf2f7e540qrsekgvsw","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","poemhugeyc",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+6gy4SmhmwvfRiCGGXaSLYoupRV6maDChHDDBDAcMxR"},"signature":"N5T2zIghn5t9pQD4GSb1UJJZO8W4dcEppECFpN8uSBciGYC/kO0ZPE85OpMoLBH72sK1wLH6BB//x6ZVRucG8Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1melfan7un5q60ycjl6nadf2f7e540qrsekgvsw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["poemhugeyc"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+6gy4SmhmwvfRiCGGXaSLYoupRV6maDChHDDBDAcMxR"},"signature":"R59CLZEJckqVf6DIR97qBr/iEA7EoJ/+n/97uHK4Uu0Nxq/TVj2/zGLRV/Lj60iuZASSgmWybYjKumo1ejMllg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1melfan7un5q60ycjl6nadf2f7e540qrsekgvsw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1649","poemhugeyc","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+6gy4SmhmwvfRiCGGXaSLYoupRV6maDChHDDBDAcMxR"},"signature":"FVe+yF8Bo4xOIKygGV1xwmd+m5PgAPPoV7+shI0t2f0Kzst8TccJricBhE0WLirIqqhAURujRzEX0qqCfkAOpQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1melfan7un5q60ycjl6nadf2f7e540qrsekgvsw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1649","1","1","g1melfan7un5q60ycjl6nadf2f7e540qrsekgvsw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+6gy4SmhmwvfRiCGGXaSLYoupRV6maDChHDDBDAcMxR"},"signature":"C+nExxilundSbRxlRRB93G+6svGnTiFNCJJWqTvjZ9oIlumEznwAqKTJx7Qfs4IoBcxDmTDXtPBKcYaZRDgv5w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ndvnvxg27jrycgwa9xr3mnwjdwarrne62x3h9p","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"nvvddaq0Kr2QJZBsQZ9ETJJLztTNUc0pev8m47z0d11MutRDf7ZnZ8yVIjRE8O5u8r5hyaXpL/dwRs1omKDKAw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ndvnvxg27jrycgwa9xr3mnwjdwarrne62x3h9p","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","opposechangegw",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A22oC3Emt6zSdjnSY+15tM+MXhWH8XRDnyOo2lsNYDs2"},"signature":"NGMDqX3QO5XJb8sUnSUZPJa1gGKWo+iCT6bEkHfhPeQjtiVlZBIyS/yCsjY+k2qtfaHPL1jFMfWZM6+smJEFrQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ndvnvxg27jrycgwa9xr3mnwjdwarrne62x3h9p","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["opposechangegw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A22oC3Emt6zSdjnSY+15tM+MXhWH8XRDnyOo2lsNYDs2"},"signature":"6/mb1WfuRJV4J62bQnAscqWILht16hKishTrgztgygMw96L6JRQuL2sofBo4fyRNpz/JYqydQp4SJjzqVS0KNQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ndvnvxg27jrycgwa9xr3mnwjdwarrne62x3h9p","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1650","opposechangegw","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A22oC3Emt6zSdjnSY+15tM+MXhWH8XRDnyOo2lsNYDs2"},"signature":"W5YY74RCkcDLq9E75lxrR4SJQKi0lb469h7rsYfycIdAmSWyAAUuzQMePBP9wAowoaVjwJFnhbkGxVHbsFegpw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ndvnvxg27jrycgwa9xr3mnwjdwarrne62x3h9p","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1650","1","1","g1ndvnvxg27jrycgwa9xr3mnwjdwarrne62x3h9p"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A22oC3Emt6zSdjnSY+15tM+MXhWH8XRDnyOo2lsNYDs2"},"signature":"U59pVcqv9TA0DcsNYPLIjUuL0BWsAQz5sQjnFxMGWdpfmoPPA8pRJAB/ctheMnDgvssGW5efOFQvBy3cyLub3Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1sapr90hr0072fh26509k7vu8e8lp6wrsupt7jt","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"wRGQm/9Hgm4789ML1BOPu442+U4ZE8i96a+slUrRS4la47OSL3XSXKQ/W1m5rScw+MvHSz8/jDpFbo1OD7BP6Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sapr90hr0072fh26509k7vu8e8lp6wrsupt7jt","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","playexclude2f",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5SOesOsf0VahOtbv4oXUSnUcX4N5/9Pr6IaxnMNN4jf"},"signature":"GmPcNt7O7XnlVLk4f6Kj4YUUvEmKsflm8ar2v1nu7lk6APdq8da9gWRdkQ8l8ZsmxGYKuZZ/CTYTOq/uBH3blg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sapr90hr0072fh26509k7vu8e8lp6wrsupt7jt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["playexclude2f"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5SOesOsf0VahOtbv4oXUSnUcX4N5/9Pr6IaxnMNN4jf"},"signature":"1I3ErOdDR3RnjWpz0xQzZF0M+tfWEJV4fk1AY19L6YZaTxpwKC7klNwK+NUHi8c3Lfq1J+wgLyiID0qSVjIvww=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sapr90hr0072fh26509k7vu8e8lp6wrsupt7jt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1651","playexclude2f","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5SOesOsf0VahOtbv4oXUSnUcX4N5/9Pr6IaxnMNN4jf"},"signature":"65dvIonr3ecMYO3QoO9yRjQZco9Y2etyoRyoBVIV04NNscMui7wmWBWJV+1FzMs0jl9HYyjluyOLFNlaXhmqkQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sapr90hr0072fh26509k7vu8e8lp6wrsupt7jt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1651","1","1","g1sapr90hr0072fh26509k7vu8e8lp6wrsupt7jt"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5SOesOsf0VahOtbv4oXUSnUcX4N5/9Pr6IaxnMNN4jf"},"signature":"3sUDgFTTOgIZ0IuXH28YWVk41KsUETcN1y251Rt0yVI4J6xc0Ov5cg02d0W8KeoZIKxTmDguOB4HAXt8M4GLFg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g164ejpqr43txwp86jj89v2u6hnhg5y2qfdykcw8","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"JBDuDbAQvwhJy0TcarGmCzN+8Icl7FISgZhq/4ry349f3s6bBa0MgVYrEqRsX7JgtMr32mncIKHK36BLGCARrg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g164ejpqr43txwp86jj89v2u6hnhg5y2qfdykcw8","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","unclenorth86",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2qKXaN3A/c6Piloco1viSSPuLaKyhr81XIClGqM1szr"},"signature":"dBFtT0ZBSWdfeQCUzMXtTlDBEQwEduRsYeH4mpzk6E9F7uqw3svgQrUh2DKq2wLJ2UkIYKHiee0Ee7vBiVDbgg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g164ejpqr43txwp86jj89v2u6hnhg5y2qfdykcw8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["unclenorth86"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2qKXaN3A/c6Piloco1viSSPuLaKyhr81XIClGqM1szr"},"signature":"o6fPC43UjYlY7Lqmxs9UZM4syfAss80rcvrEUEUdg00sbbRmFCOFgHLdJHUgo37yJtf+zYUHhNMySoJvtsLebQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g164ejpqr43txwp86jj89v2u6hnhg5y2qfdykcw8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1652","unclenorth86","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2qKXaN3A/c6Piloco1viSSPuLaKyhr81XIClGqM1szr"},"signature":"gXu37kVXR2Prkqc0s6sL6w/7X1i0ixS0wjG1sZxodYt5Rwu/NdeetOWM52Ww/9mwWOZXe/gvnvI9pDDqWfOvgg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g164ejpqr43txwp86jj89v2u6hnhg5y2qfdykcw8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1652","1","1","g164ejpqr43txwp86jj89v2u6hnhg5y2qfdykcw8"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2qKXaN3A/c6Piloco1viSSPuLaKyhr81XIClGqM1szr"},"signature":"GDFvyiuwxGTFIc3DTUexPw9kdYVbHm5GNXKZcsIzmN4hr3LryePpkUTaLrGaT43vFVBersrCh8wEumAd6xOIBw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1g54nytuxczzng4nt2sz84arm4uhhfz3dfrvey0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"zolHdqdJQ/SDMRVhVmbHBCR2BhrtBildP4nsMX2A4JFXALu1/UiZrcFkBI0KWyAgvN5Y0dffGmTpchVWMWJ6TA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g54nytuxczzng4nt2sz84arm4uhhfz3dfrvey0","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","coastlike4n",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsCbAaB42rzoilkFELdYI3MDs3jYtVdt6HFjjPMRV08e"},"signature":"dzDUzlAYpifJGUM6S8TBMaCC5pUFspa1LljNmMB9Ft0uyXiIXvBBfeR9XCxSH71k6qHZJtTFUBc2gCCNKK+P0w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g54nytuxczzng4nt2sz84arm4uhhfz3dfrvey0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["coastlike4n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsCbAaB42rzoilkFELdYI3MDs3jYtVdt6HFjjPMRV08e"},"signature":"Turoru+JKyi76L/eTkL9Jhe6p/ygR6zT2g6wydgzx7YSFc1GUpzy1LYw7MEfeOZ7lrlFW+HDfm9M2xWIPGjhpQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g54nytuxczzng4nt2sz84arm4uhhfz3dfrvey0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1653","coastlike4n","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsCbAaB42rzoilkFELdYI3MDs3jYtVdt6HFjjPMRV08e"},"signature":"jTIO9WCbnyqx2RotE+8eCHEWqBBpRkpM+Wn4DjXkVJhBfqv1C2TizNJCZMlQ8+qBwF+EP4qJxNUHUi/meYQX0g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g54nytuxczzng4nt2sz84arm4uhhfz3dfrvey0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1653","1","1","g1g54nytuxczzng4nt2sz84arm4uhhfz3dfrvey0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsCbAaB42rzoilkFELdYI3MDs3jYtVdt6HFjjPMRV08e"},"signature":"HPGqARQc0yr2u2R/N9ZTsvRIyyIeceJPZQSwa5tgz09O2fXzr8Fstk3qT9pq4ifkfjUuOlDAtJnkF8qD2mlp5w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g17x60n0kl8emkz44drll8vz0drhyhrc9alpuec4","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"XOm/LdRxdlx/TaUJsH4K0pvJqwWibpaOMsNWwW4TywZaH3ZRXEs+wdO6mCxjunVRQfveckF+WA9Y1iTHfbQoRw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17x60n0kl8emkz44drll8vz0drhyhrc9alpuec4","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","plungealways44",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3zoD154q34eGzDt67bTKkIpNKwmCE50xXg+hR2Q4C/9"},"signature":"P0QSKHWAQFRWIwwJIXRB0VhMq46GzjuIqLxUGmLyfiIj/QhFnQgxY/tr9a7M40MrTstp5pjnJWBeldebyspcvw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17x60n0kl8emkz44drll8vz0drhyhrc9alpuec4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["plungealways44"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3zoD154q34eGzDt67bTKkIpNKwmCE50xXg+hR2Q4C/9"},"signature":"bJVXgur4CZ28bUFUwUwtoEskBjL6owv830yvK76jgvFMrfcSLW/zCtU7dOv2GLikXTeLX9sxmLXWxNRnX7sJiw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17x60n0kl8emkz44drll8vz0drhyhrc9alpuec4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1654","plungealways44","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3zoD154q34eGzDt67bTKkIpNKwmCE50xXg+hR2Q4C/9"},"signature":"n4UCS53pHIHqp7ZPVSKq7IcJObzlzUAfKSvlVuXMIMkY7iyIA7rnOIPY944MNkWOq53p4fdpojzFH3gE/BhpWQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17x60n0kl8emkz44drll8vz0drhyhrc9alpuec4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1654","1","1","g17x60n0kl8emkz44drll8vz0drhyhrc9alpuec4"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3zoD154q34eGzDt67bTKkIpNKwmCE50xXg+hR2Q4C/9"},"signature":"DpO+uMrVXGF1EaOU80FtgImzsWAiUCByJORUSjocKKNfq6Heq+9sBHe49cZwICxfN1cwgW+wK9uLCR51tGODxg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1a4gde3mzgj9wysa7ml4pzmcp39hrk2apn99yhc","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"8gqnZTIXsAxDm89Wuaz7dJp6cCna++VuJx9nPkLI6h1W9cOmHRgeiBYimuJc/bMQySJDUJHf73rYG1rjMjYASA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a4gde3mzgj9wysa7ml4pzmcp39hrk2apn99yhc","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","becauseescapewy",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxGs0oQJBTbTNWtcl4ImT4ZAr7KPxMF/M28avwpl7ike"},"signature":"9TlZBVBWLXfzKM+AeEJixzBtIAVvOTnM4vvUsK9/OxElVryq+vBVFXZBCEugvO3aFyDcMoYuSpxeAC+m38gdAQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a4gde3mzgj9wysa7ml4pzmcp39hrk2apn99yhc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["becauseescapewy"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxGs0oQJBTbTNWtcl4ImT4ZAr7KPxMF/M28avwpl7ike"},"signature":"ZgxYO3bOW2NCB+/py8zFGOxVkQjFDslVYmnRn4mRqpxMwjWhWIMMJXZOFX4lOVH9y9AsnUP8AclDVk56rTEdSA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a4gde3mzgj9wysa7ml4pzmcp39hrk2apn99yhc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1655","becauseescapewy","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxGs0oQJBTbTNWtcl4ImT4ZAr7KPxMF/M28avwpl7ike"},"signature":"S/tZpKaT87EzwesUvFz9mIgJfXU0xM1wFOpjrs0LnI0QeBOxCnOf2FgIOkgRjl2NyP/8iN9HYE473X2d2xx0HA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a4gde3mzgj9wysa7ml4pzmcp39hrk2apn99yhc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1655","1","1","g1a4gde3mzgj9wysa7ml4pzmcp39hrk2apn99yhc"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxGs0oQJBTbTNWtcl4ImT4ZAr7KPxMF/M28avwpl7ike"},"signature":"xeThw8jntDTxbL/EsYmFXSgyKrnIrbFLaHELR2HZ8uleBzgS44OlaXupXYi/RuS6YOGNQESF5biKm2Qyk5LDpQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1p8dgar2tjd90cntmt74w83fvu0dxyvna5dj5t6","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"QA1YHPdsyyDlyO6x7GKMm5e2zzbWcDz9ztInFC5NQfwbG4xAv6o4YUhx4X1Yg3TWLSOOQQLxh9cqWsRluMwm0Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p8dgar2tjd90cntmt74w83fvu0dxyvna5dj5t6","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","memorybeefnt",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqC2kHW/7n5OnUp/CvRpzyyHffT7A7XtD3+g/+IYf802"},"signature":"bCr1N0wlnPjstYVyCgdepy7CNezBusalcbJeLv0SHQ9rlTHW7i8hXhjP3LKeKxvHvQZd92ulkHrHLPXnVIvWNA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p8dgar2tjd90cntmt74w83fvu0dxyvna5dj5t6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["memorybeefnt"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqC2kHW/7n5OnUp/CvRpzyyHffT7A7XtD3+g/+IYf802"},"signature":"nV0puV4fWidHzZuCpyaN2HbVIbKfQo2NU6pLZzGVgHEj0ez3UCi4AbXaRPIbPQ7nHkzBsTckre8ChJqbefTfCQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p8dgar2tjd90cntmt74w83fvu0dxyvna5dj5t6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1656","memorybeefnt","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqC2kHW/7n5OnUp/CvRpzyyHffT7A7XtD3+g/+IYf802"},"signature":"6bx0V4iASYmgF91AAy8q7pQXSBr2ltFO38AUoreZTAohyeiw8zksEc3b6Xp/gSqJibPjSNO+YaHAbMYeTbuCFQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p8dgar2tjd90cntmt74w83fvu0dxyvna5dj5t6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1656","1","1","g1p8dgar2tjd90cntmt74w83fvu0dxyvna5dj5t6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqC2kHW/7n5OnUp/CvRpzyyHffT7A7XtD3+g/+IYf802"},"signature":"1yFPELdKR5PORTQw8AfPOLLzGVedJ3SZz7Ocf/+8OvEvYSN6wGFyUQVdQ9HQl5hRJ+gx+UcScGxjr4mp5ZNfIQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g13p84ywmn3rydllu8zhs5snt3vuqucc85la7hdc","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"DZqDShCAnh2/1b3UreuJBAX5NhbMtKMXMjZ+UQLBuoc1L6Eoe3XSJ44qwusi9d1PCa8HIYpzQXpdkV0ZAhrgvA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13p84ywmn3rydllu8zhs5snt3vuqucc85la7hdc","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","dunevelvetlu",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/L/1FzYy5rpL6R0b5i05aunZx3OJzZeED/SdnSW68eC"},"signature":"/CLex/jYmiMZtRz9nPM/NrXwKl/IlJKAAk9Bm0hD8yksJvS/j1JMgdH01TaEhfe5HC7ADoYQEypOkoNtKaWXYw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13p84ywmn3rydllu8zhs5snt3vuqucc85la7hdc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["dunevelvetlu"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/L/1FzYy5rpL6R0b5i05aunZx3OJzZeED/SdnSW68eC"},"signature":"Rf+Vt7H3PntVOiAukBI4y1uH7Skymyqw/1rF2tt7wZ4FnLzCa1tj72DoAMqFBFZPnSN/LiYpRWy5nDwdoPMoFw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13p84ywmn3rydllu8zhs5snt3vuqucc85la7hdc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1657","dunevelvetlu","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/L/1FzYy5rpL6R0b5i05aunZx3OJzZeED/SdnSW68eC"},"signature":"tATCjeVVX4YTznVS9NOUfEy9gyJoRV42mS0uIdgDFIwDjeZ7eJQY+J8jRdDM8jxadsxG5jBw4tO6jySdES8haQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13p84ywmn3rydllu8zhs5snt3vuqucc85la7hdc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1657","1","1","g13p84ywmn3rydllu8zhs5snt3vuqucc85la7hdc"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/L/1FzYy5rpL6R0b5i05aunZx3OJzZeED/SdnSW68eC"},"signature":"EXeaNQY8dSSsv51rSRS6WwMXYOLhQPc+/WviI6o8SqpVswpFPUJ4dvSJUxyVVvE/ZFgZug6WFMSkbzEsB4BQEQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1hu9lepzx7fr3m8wscgw6e8fklnzz7xn35mm77j","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"3lGMUAA/1UNSjCzHLezT+/TiF4Iw3ckfpGqXPIzLfN15RE8xWXKHy5yJFFHWWixS6WsSfYTqSMMRS/hTEkLwgA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hu9lepzx7fr3m8wscgw6e8fklnzz7xn35mm77j","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","puritybronze3m",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoH1LRYmni9QE38dS1KBXYUZXiWcvI5Mq1EwMl1K+fRn"},"signature":"OB2Fv2Xvcjk5OgpN8YgMEQXfrqdRqiq72iZVV4hcgAQNvK7AuQyJw4kH5NXV1TQwBZS1Zu6NhLXZuEKnOl/8DA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hu9lepzx7fr3m8wscgw6e8fklnzz7xn35mm77j","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["puritybronze3m"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoH1LRYmni9QE38dS1KBXYUZXiWcvI5Mq1EwMl1K+fRn"},"signature":"pCmdBLZvGBRHZVi45dfC5CHb3lhn5qLGbMLA3eVYgpN5EqN0WolGZW3slCsNqhRX0X/DkRyd2EGBdirINlicNg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hu9lepzx7fr3m8wscgw6e8fklnzz7xn35mm77j","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1658","puritybronze3m","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoH1LRYmni9QE38dS1KBXYUZXiWcvI5Mq1EwMl1K+fRn"},"signature":"uZx6EiCnlSBm254yjRB+zal8VF8CV59BfXaxHOZe7p9mKEkmGv4uTh7mUmZTnMlfnxQED/9pRaGow4tSFeS1Kw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hu9lepzx7fr3m8wscgw6e8fklnzz7xn35mm77j","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1658","1","1","g1hu9lepzx7fr3m8wscgw6e8fklnzz7xn35mm77j"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoH1LRYmni9QE38dS1KBXYUZXiWcvI5Mq1EwMl1K+fRn"},"signature":"mWNSfBHXHMNHIZGh6hxQv8ksrgN1Xny/dUqrpkjRZflxuYkZBg1a2TQsW3lH8lMAR+Ev8rx9VkPD3ZfqUQD+UA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1trunhetpmqsgyh6j7xjsnjw3kdpjhxwepqz2m5","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"4H4voHC7yGp7goSW0Oa9WXb/7vCIMqsjOiPC8xok73dK5PoaYy7m1ZG+6CO8rl9/gmLY4FxvLunb0pIrNdYP8Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1trunhetpmqsgyh6j7xjsnjw3kdpjhxwepqz2m5","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","hugeupdateh6",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmdR6aanDocH9xMBX8PEg/50dH/+IhNb2mTHomLOcCkq"},"signature":"frGdhORmxcyIFEXbCxRkTz3iiUIeZ6gg88Scjvn04OchOVjRykuouAuQzmkOwjFpkQVke4rCvSs/mKYtEbfq5g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1trunhetpmqsgyh6j7xjsnjw3kdpjhxwepqz2m5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["hugeupdateh6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmdR6aanDocH9xMBX8PEg/50dH/+IhNb2mTHomLOcCkq"},"signature":"jYdBkoD/XCEUCXyIITA7gTFyZn7bKFz+rsfY7XryuLBANNDMq0DL+UNJ6JchzwWxQ+Bbg5mVikJb3WZ6O4e+EA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1trunhetpmqsgyh6j7xjsnjw3kdpjhxwepqz2m5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1659","hugeupdateh6","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmdR6aanDocH9xMBX8PEg/50dH/+IhNb2mTHomLOcCkq"},"signature":"/XBQZHc1SxNVM2OlW78zbOGyOFvBSfhpOl+g2ApMuW4/zgw8v9dL087yeEnsoV8alUzCV5WTDkF1VIVj5+aQSg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1trunhetpmqsgyh6j7xjsnjw3kdpjhxwepqz2m5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1659","1","1","g1trunhetpmqsgyh6j7xjsnjw3kdpjhxwepqz2m5"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmdR6aanDocH9xMBX8PEg/50dH/+IhNb2mTHomLOcCkq"},"signature":"kCqkw6n8d0cEhJ4qORCmktqKGDGhE3Z8vSnFBO3RdZM6zgxbGXl8tpxnWuK71qquMTCTOnsO4XOgkUsI5qYPiA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1k4qk6tt0d4ku3kmp7vwylukgmdgzg3ae7jtavu","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"9BoDGXdRkN8E8LAho/cy9VzAD8eIQk1AcrmcFds0uyxLLzj1+UHvsFxlc4DNjpmzwgGklr7kf6ne2gjYLIvhrQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1k4qk6tt0d4ku3kmp7vwylukgmdgzg3ae7jtavu","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","weekendhistorykm",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A214Dtbb6UowprF4NMKD7RAWbF4czAWmruDcypKVLSy3"},"signature":"t/Qm0+7xcpeLO/kiwLMjP8nWXhUx7tVKX8pIXStxe4A88JEfHNwvC8SA8ectS255IqujvQC6gbHtiPMvApBGsw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1k4qk6tt0d4ku3kmp7vwylukgmdgzg3ae7jtavu","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["weekendhistorykm"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A214Dtbb6UowprF4NMKD7RAWbF4czAWmruDcypKVLSy3"},"signature":"deEphhdHjY7O9/rW/rmsFF/4heT29sF0sNSe85/uBWl+4IiEiZ1QYJsvB3kVE4edkx+ETFq72FbP+0Vk/YfPtg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1k4qk6tt0d4ku3kmp7vwylukgmdgzg3ae7jtavu","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1660","weekendhistorykm","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A214Dtbb6UowprF4NMKD7RAWbF4czAWmruDcypKVLSy3"},"signature":"dOpPW7L8a4CljjT2cuvB2pjASXAcpyBCnP79ULWfUjQiv1j64mB+F5rtmw+5WeDfQVj8R27mc7k1Z/WEwSDq1Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1k4qk6tt0d4ku3kmp7vwylukgmdgzg3ae7jtavu","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1660","1","1","g1k4qk6tt0d4ku3kmp7vwylukgmdgzg3ae7jtavu"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A214Dtbb6UowprF4NMKD7RAWbF4czAWmruDcypKVLSy3"},"signature":"ZH+fnSRmGK1pKY/aMVwBTYhiNN5UPL34BAfkErMxeOsfYne1ak6ii7kwWctPMBwJ5+QhP4bPlNK6W2K2R4moMQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1lxjxpjkesq2a6neqdxyh8q62d798s204vwew0a","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"IL+EAvEYZyEqJZ/HBn5+4EYvu6yW0bmOXglRGk/QQDgv5Yu123o9/E6dSIrM42338An/XWrdk1Cef1xph9tbwQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lxjxpjkesq2a6neqdxyh8q62d798s204vwew0a","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","papertiredne",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+YYjX6oKJqhzB4pxsn7AwXwR9ehHjK2HSRsXLmwIcI+"},"signature":"gL4RVKsOB85EOkwonDr4Rfma4RtFTmrp8+MI4prqVNgFnFwFEOvOVFgwI/LQbC/pcRn+MyAMjc8a3GcHK9SNHA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lxjxpjkesq2a6neqdxyh8q62d798s204vwew0a","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["papertiredne"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+YYjX6oKJqhzB4pxsn7AwXwR9ehHjK2HSRsXLmwIcI+"},"signature":"WOou0xXvLjbxPUij2Ax7CX1seeRAuyvG0vrhmmoMGI44vXjP2bjqtYZ6Vdgl0/EMbBaxCc5yZGGUFWHmAO4IyA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lxjxpjkesq2a6neqdxyh8q62d798s204vwew0a","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1661","papertiredne","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+YYjX6oKJqhzB4pxsn7AwXwR9ehHjK2HSRsXLmwIcI+"},"signature":"wwrqViMhHaRpvGF2oqiDFMKkNT8wR4W0H5Xe4iPLD7ctuXYzeH+KswDvPU8OItGs21WlD4ETDBfKbhz+4OQxyg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lxjxpjkesq2a6neqdxyh8q62d798s204vwew0a","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1661","1","1","g1lxjxpjkesq2a6neqdxyh8q62d798s204vwew0a"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+YYjX6oKJqhzB4pxsn7AwXwR9ehHjK2HSRsXLmwIcI+"},"signature":"yWvmWAoLmevoqykUAnzXeN/RxDFKVU7EQwtLCQw3qjcBg2saDrjshbv9i+jl8sOblTOhcMGTRTzxbze3CDRuWQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1drqnehsu2zqz5nmr03srgf7lt4fglgcu2he7k2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"DVKTZNJqRw/KlXaryDHbcKql0VvaS2gQpeEEAH5B7NF8PtWT+56He6VVXnq0r96oxzleoy9Q9n97B5HdYgW/OA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1drqnehsu2zqz5nmr03srgf7lt4fglgcu2he7k2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","husbandpassz5",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiW+2B1Nh4OqeFIzS0I1hQtuvYZK9xhAOaSzoinAECnj"},"signature":"d07Wk2oE6rgD/iL2IFsiehN+80TXoax1/e92C4shFXtP/L6mc45SmU7xsGJ6FJ+OMCmJOXusepnqXOM9iNWxNg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1drqnehsu2zqz5nmr03srgf7lt4fglgcu2he7k2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["husbandpassz5"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiW+2B1Nh4OqeFIzS0I1hQtuvYZK9xhAOaSzoinAECnj"},"signature":"Ze9Yax2XysaAMTfTQMr/jGeZcGZm4r7S/mgiuS35FDAcDjlMZAf5mW3bUxBWzVyD+MOqe8zG/3CeEv2Iph6J+g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1drqnehsu2zqz5nmr03srgf7lt4fglgcu2he7k2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1662","husbandpassz5","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiW+2B1Nh4OqeFIzS0I1hQtuvYZK9xhAOaSzoinAECnj"},"signature":"vYUkgP88WG5AuHRxqPIAcjKp1uQstqcKi8F2JjgZX+QGo94QCEPr5bMgo2kZ7sjEuzcF9ARjaaAlM5sgRDEZMQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1drqnehsu2zqz5nmr03srgf7lt4fglgcu2he7k2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1662","1","1","g1drqnehsu2zqz5nmr03srgf7lt4fglgcu2he7k2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiW+2B1Nh4OqeFIzS0I1hQtuvYZK9xhAOaSzoinAECnj"},"signature":"xIEs8ID7Z6ayvFATOp4Pll9cDNBkQ6rzSyPk5BFsO81lZB9z47y39STGaxOJGYlTdn2NsBM095sSF0LKC37gxw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1xd3t3c93zm979um9vanqeclmdnktzlxs96ppdc","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ew+PRJN00w0B0NcJZjceUFePyzRCrYzOHr0GPWo3SkoYtcHCTLMXoIDA60BNJ0Qj+AH5g1B6+7Zlv7dU5ezanA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xd3t3c93zm979um9vanqeclmdnktzlxs96ppdc","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","modelelderum",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5QiaZ07rqK6MZkOlwMZY8PZHPV4DWH1Voz+uH50WSyj"},"signature":"nONhvbL9VFBcozOAiNLhMxEyU2uU48yZ9Amw9XN1Bzl/EFb/ejwDtbuUUWlAtRdFjLNAaLIKnYmLN1RApRFP5g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xd3t3c93zm979um9vanqeclmdnktzlxs96ppdc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["modelelderum"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5QiaZ07rqK6MZkOlwMZY8PZHPV4DWH1Voz+uH50WSyj"},"signature":"UaFb7OliHMVUHRn+TTRHd/zYVostvjdlnA0j1BcT5xZmxgVendkQpps9hvdfU80sYk3NG6wgbAHFrjKVK4FPwA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xd3t3c93zm979um9vanqeclmdnktzlxs96ppdc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1663","modelelderum","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5QiaZ07rqK6MZkOlwMZY8PZHPV4DWH1Voz+uH50WSyj"},"signature":"QBCUV7oSzUMNwPz8oVIjoFeVJGg7eCgYjAm+uEqo5HldyuL0XXgmS6zLsuWAjcYywXHLC0hnBWy5XoEBA8XcCQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xd3t3c93zm979um9vanqeclmdnktzlxs96ppdc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1663","1","1","g1xd3t3c93zm979um9vanqeclmdnktzlxs96ppdc"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5QiaZ07rqK6MZkOlwMZY8PZHPV4DWH1Voz+uH50WSyj"},"signature":"nraEfdGWeVYWugF8Zk4pL5WYE2TU1dg0lzLWLhI2NCM/SNbnlTciR4vAEQ3DPs72v1GlHdriLP3VyFjRgWMuFw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12wmptvwyntnej7vexaxxkpdw7r3kyxukr98y6x","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"CHmiHn0mZdaEk/iangZBDJDLZjyOvwOYsQIx1T69kbB4VN2qSWg8oPVqw+oDkSwUFEE10/wTigoik/FG/4qBlg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12wmptvwyntnej7vexaxxkpdw7r3kyxukr98y6x","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","truckensure7v",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aw3ssV+88xvSGuXwjBJGmKtdbYsQRpoDmM0Pw5+PuJLl"},"signature":"CdSdmyafBSF27/cHBuMAQTYzaqjjkqu4uA+PeQbBOlYsUARyLhd3ncCnT3h0pSZ6CfNG98UvJ4PwBYIpzM7FGg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12wmptvwyntnej7vexaxxkpdw7r3kyxukr98y6x","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["truckensure7v"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aw3ssV+88xvSGuXwjBJGmKtdbYsQRpoDmM0Pw5+PuJLl"},"signature":"AtXR5EGlU7VKHn1MboXQ8hxV6qSPI7JjUgOk7nagFT11UA6VrclZflVirZWnvhGflahgW3T7Ov8Gl12xfRjJ7Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12wmptvwyntnej7vexaxxkpdw7r3kyxukr98y6x","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1664","truckensure7v","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aw3ssV+88xvSGuXwjBJGmKtdbYsQRpoDmM0Pw5+PuJLl"},"signature":"1tsl1t+vJgh1kMnKbAONlmWiVwefL7uxdM/vOKfRHtc+IbAijy0NnAImczPRQcTYAIRe7tQrxRPrRaZvE7vRuw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12wmptvwyntnej7vexaxxkpdw7r3kyxukr98y6x","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1664","1","1","g12wmptvwyntnej7vexaxxkpdw7r3kyxukr98y6x"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aw3ssV+88xvSGuXwjBJGmKtdbYsQRpoDmM0Pw5+PuJLl"},"signature":"BYR/SBnyZl8aEGEka2VRCUAN+U75QYpAJREtC3cfFYxLvvCNBa2JIo7Pi/KdNkkZeIuUmSKDTLUb8dPlm+XqUw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g185yp6v6jnfa8zj9qfhnpchpr68lqnl2t7gu7kg","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"hDTkgWcxx/dugLsGuS/YPW2K+bom7E0faqhwOjWJYSsjSHDPh785pLxzUcobX2FvDuiql+adl6vHzTt4vH0fiA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g185yp6v6jnfa8zj9qfhnpchpr68lqnl2t7gu7kg","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","waitswordj9",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+dMBcfXGUXmGq7Y4UloP0+5+OyUNIGd3n6BQkewpI3N"},"signature":"/FYJ+8upsUvc9FCg/luZXsJfYUWOXGff7BtXpFnONXwYHDC/nSRAYwTUerB1e5bJsvzte5A8f/LkcxF/VhsgKQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g185yp6v6jnfa8zj9qfhnpchpr68lqnl2t7gu7kg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["waitswordj9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+dMBcfXGUXmGq7Y4UloP0+5+OyUNIGd3n6BQkewpI3N"},"signature":"BOU72yTgaEmddSgIooo4dz2EwT5yAuTTeOh8mL2vSSFKA+PrMNRVsDMV9HqBSPBYdqLxCi4RwLOXQJqhHIZYaA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g185yp6v6jnfa8zj9qfhnpchpr68lqnl2t7gu7kg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1665","waitswordj9","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+dMBcfXGUXmGq7Y4UloP0+5+OyUNIGd3n6BQkewpI3N"},"signature":"gvHDKjaeC7bVhj5TPRtQP+/3NvtwJOhO97auLiq7asAuEAdk1T7c5MbRT2sacMgjOuQmymuAximBmJqG9eJwaA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g185yp6v6jnfa8zj9qfhnpchpr68lqnl2t7gu7kg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1665","1","1","g185yp6v6jnfa8zj9qfhnpchpr68lqnl2t7gu7kg"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+dMBcfXGUXmGq7Y4UloP0+5+OyUNIGd3n6BQkewpI3N"},"signature":"jRl3n8uZa59hVlj/n6HtTchDQFvXFjxLY2zTYoBfJQ5HfD0xn6Apbne2JrFzcoPY8X29VMAGI9dutZJ40ICqEg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g14pqgwl6t3ez5s3g2srm5p2u3f6xe6rlc6mws2v","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"y9BsrYq18JO9XmSFh/tbAUmN5xVgdLX9s238xoCQevdJ8aBUzu78jFJRPdNtXmjhkBmcryx70Xd0ogh9sfh4pQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14pqgwl6t3ez5s3g2srm5p2u3f6xe6rlc6mws2v","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","mercygrain5s",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9I79PJkNAI3fdxZb1R1LVY7uvn+PLPjGukY891FY4y8"},"signature":"2nTI2lKR81ukUUx0jYJ12J3b8PFsL8FDnH70SzkheN1AmbTV8M/ZYOcJqjxMeUVc/efcpIRHKA4Zo0hpKGCvKA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14pqgwl6t3ez5s3g2srm5p2u3f6xe6rlc6mws2v","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["mercygrain5s"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9I79PJkNAI3fdxZb1R1LVY7uvn+PLPjGukY891FY4y8"},"signature":"+ZSM5P/00LxGIHo8snHDxvxfjN7EWKOQiq2rBX+Bm9Z3FF6/QfXDQBaMF2ZvvdGPYLE65OsGGPxaJFRtsfEbRQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14pqgwl6t3ez5s3g2srm5p2u3f6xe6rlc6mws2v","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1666","mercygrain5s","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9I79PJkNAI3fdxZb1R1LVY7uvn+PLPjGukY891FY4y8"},"signature":"9XVkDt+H7yMdTe47qNIHywLYUX7xc3kXu57C+g+SiX8AZY9twtqb+38Mfx81NPsPNg/F0ifeW8M0YtzmZF8a5w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14pqgwl6t3ez5s3g2srm5p2u3f6xe6rlc6mws2v","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1666","1","1","g14pqgwl6t3ez5s3g2srm5p2u3f6xe6rlc6mws2v"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9I79PJkNAI3fdxZb1R1LVY7uvn+PLPjGukY891FY4y8"},"signature":"BRYI2+CeMzrmihReKsTmDwfY4Qg96OV+EGNSI4pEH0xOgISMo8eV4R2DUHxXI6GO9BN8AYr/ve4v0KW/M6yb8Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g143n40shtt429sp38njppdvu36h3ygrkh9s7m7r","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"7W2R+DqNrAZm++TsMVKDE5yEJr3ICloLZBfJo6RyKJIn6Vqj7y4V6q5Td5k0P8AEZEUXjc91mgE/RthBfSthxA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g143n40shtt429sp38njppdvu36h3ygrkh9s7m7r","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","eaglethrivep3",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoTPbvS4a5wz8N2s/GyJ7ejDJnpiD9FCQf8iTxObq8gZ"},"signature":"nTZ1e561BRamdDsMngGpIpmQMKnp2KyLe6fQr0A+ieM7KkknqWoK9TC7BY1pR6H5Esud+GmVVKeceRfz9a4DbQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g143n40shtt429sp38njppdvu36h3ygrkh9s7m7r","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["eaglethrivep3"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoTPbvS4a5wz8N2s/GyJ7ejDJnpiD9FCQf8iTxObq8gZ"},"signature":"g1Eg9LYzGCg48/UKwmC2tnmkFbzMqzI2qCfkSLHb85oi1VQYPpuj0Kde4U1wStzGD7VYohQ/uSf96j8JMdL/tA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g143n40shtt429sp38njppdvu36h3ygrkh9s7m7r","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1667","eaglethrivep3","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoTPbvS4a5wz8N2s/GyJ7ejDJnpiD9FCQf8iTxObq8gZ"},"signature":"Bd8zU0ObXkrgFxz3Pag7kJ3XVUPj1h/YXItHRgLapDQ7nM6rfqZmsnrDjFVZybSYa1Rfxat8Bdwgkum0r4sGCA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g143n40shtt429sp38njppdvu36h3ygrkh9s7m7r","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1667","1","1","g143n40shtt429sp38njppdvu36h3ygrkh9s7m7r"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoTPbvS4a5wz8N2s/GyJ7ejDJnpiD9FCQf8iTxObq8gZ"},"signature":"dPGA3ys1i2cAocWu6l2BEIIsp3ooqa84xsa/HRE63n8VYlzKtsJJR872gdIJ5sV1L+9+LkEPgBrekjQYv8rDLQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1sf5ktunzg4j8jqa49m9fsd44htlqsaaxhesu5f","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"icRViRDIG58y/RgEfMeNVY/Ga5F/CQk1lW0l6VdX0fMevxqjltQeGKsbFXEwaLVoSK3K60Z2X0Uav1XchpqTQg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sf5ktunzg4j8jqa49m9fsd44htlqsaaxhesu5f","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","asthmaabsurdqa",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax8HdHXP+VTq0pEdSLZkeFu6lUv1C5vZ7al0E5v0v7+R"},"signature":"TzM1FIU7rq8fqLW5S8b24JLlHVC3JZHs2y2rEKB5VWZ+u0B5m5V6MdHl4axPbyrPke8lq9KyUli8cWjkIEFHMQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sf5ktunzg4j8jqa49m9fsd44htlqsaaxhesu5f","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["asthmaabsurdqa"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax8HdHXP+VTq0pEdSLZkeFu6lUv1C5vZ7al0E5v0v7+R"},"signature":"7sdbJGECgW018ZiTQ3QXDwSinLugiGQIIqkbrW29emUqkeSbucvFHC0ho+wsEHZh8HvSLQ5peTVQSsqNlL2jSQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sf5ktunzg4j8jqa49m9fsd44htlqsaaxhesu5f","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1668","asthmaabsurdqa","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax8HdHXP+VTq0pEdSLZkeFu6lUv1C5vZ7al0E5v0v7+R"},"signature":"QDJ3cc8xT7B+8PnBqFiFeW6sL+C8nbNqgZfQwrBHZacfWdTEUTsaGpI94DWpQCci6Gh38YRKW5sXT/G8tQc3Uw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sf5ktunzg4j8jqa49m9fsd44htlqsaaxhesu5f","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1668","1","1","g1sf5ktunzg4j8jqa49m9fsd44htlqsaaxhesu5f"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax8HdHXP+VTq0pEdSLZkeFu6lUv1C5vZ7al0E5v0v7+R"},"signature":"Am0shj8ycL+cbbMMpfeyD2pMC8votwgqF6YQhAih8n93y9BTCGw8oqjxnjzYRaIB5hGXPJaIrt96+q3eZooqrw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g19ms4903unkqjnqjz0cag37ljqgl97xstc7ev2p","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"AAMlTlc147iKLB3bNtYj0pgUjTYovZzQbRGOUHKKtWlyGLiGxd++K7bmL146KqFNdGgitEYxfUTz+B82b0hlAA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19ms4903unkqjnqjz0cag37ljqgl97xstc7ev2p","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","indoorelegantjn",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au9zj+0UhzDv9bL65zeS46RecI0r5j8EYK17l0xPLAZG"},"signature":"omwYGxaUMfmYtPNDPh6vHtrUPgmBSwth1MG4Bs4VdNJYPwQ36S4qknWkzvx0+LcQU+vnzvIy9PrpAhB8I4ZIBw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19ms4903unkqjnqjz0cag37ljqgl97xstc7ev2p","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["indoorelegantjn"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au9zj+0UhzDv9bL65zeS46RecI0r5j8EYK17l0xPLAZG"},"signature":"6Z0AzHSY+bw8u70nqz4PCacOj8mSu1WheeWlIfsrIJdirLkPdzwbR4FANMMv2UjVgr2PaxG8Z7fYX6uvWhprrQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1wxp05at40cq7gkcz0rjqm5uhmlljh2zfqqn4l8","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"RAz5x3QZRnf7ph+zDA+gtvvD1zbvc7FeEYl+62NsVrp6Iud9JlUWD6aEPBXwzNabMOMZe1RS78Ri85Uiyq/8wQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19ms4903unkqjnqjz0cag37ljqgl97xstc7ev2p","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1669","indoorelegantjn","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au9zj+0UhzDv9bL65zeS46RecI0r5j8EYK17l0xPLAZG"},"signature":"nmgr6FxYpnFa4cfd49OPpOiQHStnA4Sw6+9GFVj2dWhR8FexTghyHhRcuyge2pD21Yb8mBzHQDlYvR/N5Ndepw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wxp05at40cq7gkcz0rjqm5uhmlljh2zfqqn4l8","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","routeorderkc",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhIFjXtGypnZLlrohisIwQsMt3iUTzAm6IDOO7b1BCXq"},"signature":"HuDkPOSnW/LzYwL8n3BvCDZg6m2lOqNHHgfivHNKLkpjqvmM1Etk65/pCCKAfyAelX79CfiDtEKY+tg59+v6CA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19ms4903unkqjnqjz0cag37ljqgl97xstc7ev2p","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1669","1","1","g19ms4903unkqjnqjz0cag37ljqgl97xstc7ev2p"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au9zj+0UhzDv9bL65zeS46RecI0r5j8EYK17l0xPLAZG"},"signature":"xMkboJVCbCRXyFU3T0kDiEyZxOjU/ncz1uXupvktO952FumbGMqmptUN0IHpexlzbW3JxGUZxtnA9AT9C3uQVA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wxp05at40cq7gkcz0rjqm5uhmlljh2zfqqn4l8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["routeorderkc"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhIFjXtGypnZLlrohisIwQsMt3iUTzAm6IDOO7b1BCXq"},"signature":"kwwof1rZFzTUhSorxh4F/KpdRwhOtZCgbp+QuhNo6vh3tuGZVvhkhHXtHEpyMTQhp1EDHqv+8Ggd+umrP1RDqg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wxp05at40cq7gkcz0rjqm5uhmlljh2zfqqn4l8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1670","routeorderkc","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhIFjXtGypnZLlrohisIwQsMt3iUTzAm6IDOO7b1BCXq"},"signature":"O1s2jPnIl1zq+eQlMIy58C2U0f19v4rC0LICC6s9h082Oy6OluNkvRcv0eo+BepGXXHgCAUaNlD9HkBq5Yg98w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wxp05at40cq7gkcz0rjqm5uhmlljh2zfqqn4l8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1670","1","1","g1wxp05at40cq7gkcz0rjqm5uhmlljh2zfqqn4l8"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhIFjXtGypnZLlrohisIwQsMt3iUTzAm6IDOO7b1BCXq"},"signature":"g49+vIjo8TnVBcBAQCXy4cj/cYaKDPe0It1qZew19MAknKsaEN1ZUmAPJrYm43w6r2vu5vHBiLIXt3tEPftVSg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g187svwlc6u4kw3d65u9mg8lz0qlgfvxaemd5cwt","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"j+VXv0Hn6n5vhofhsCnPYW5/JTWMIETkjdk7d6N2j6p0FW9eKj1fbF31S/j5RYkNMHJWRpYDFYEsOlfxqdwcuA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g187svwlc6u4kw3d65u9mg8lz0qlgfvxaemd5cwt","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","vaporsprayd6",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ahqj+Ehx8aAqJ1+8wgldV7+wYUBMBjLk6l3rabvPEJUm"},"signature":"FJZCEqr8sKpiPzXSu8IfC9+2oTzS/bYZ8SIoZtR9dChqHjZQw/N4SvYiYzSgRcj9IFQQjAtHqE1an+t7LTcmcQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g187svwlc6u4kw3d65u9mg8lz0qlgfvxaemd5cwt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["vaporsprayd6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ahqj+Ehx8aAqJ1+8wgldV7+wYUBMBjLk6l3rabvPEJUm"},"signature":"52C4cCsJvN9qdCoKxGMFobJjy828uBzDDlwaVcBZ0BVqfWOjcKJvHM9eV/NHSTYO0O2YG+HpLdJ5ljv5uCZtlQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g187svwlc6u4kw3d65u9mg8lz0qlgfvxaemd5cwt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1671","vaporsprayd6","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ahqj+Ehx8aAqJ1+8wgldV7+wYUBMBjLk6l3rabvPEJUm"},"signature":"rD7DhuabAbvNady8NjjKcew03UkjTCuy3nXw1A36H6t20RBom5afVF9WW+TTQnT769fYzeb5dJXoM/Ck2bHp0A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g187svwlc6u4kw3d65u9mg8lz0qlgfvxaemd5cwt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1671","1","1","g187svwlc6u4kw3d65u9mg8lz0qlgfvxaemd5cwt"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ahqj+Ehx8aAqJ1+8wgldV7+wYUBMBjLk6l3rabvPEJUm"},"signature":"I0PHc9SHT8FAg6mIVT9ATINo11r6Jk6MVVlPwSjqVlxc3ZF5YOvcOvSTsDWbxbR+DL8eIeXQ/g/PC5BgglZZ3A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1emqpcavkq7n77fexphv6x48kvuxp97lpcezn3q","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"+Ro1CEVIUjLTpuQAscUpRRBSr3suQ7lUDfaiIJL5yMx+eroGC2bPFFrevGwxV3LAK7zUE5Zdu3NjHs+UqaotGQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1emqpcavkq7n77fexphv6x48kvuxp97lpcezn3q","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","pelicaneggfe",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aka5IfsxqJuasWOEa4gYh7J7rPoiSjUCZnXs4feuP0aT"},"signature":"B2CZR0rS5kIqvYa7LEiabgADLF/YsThCidTJKEdUCHYViSc8Vu6+u4QHK7OhoglCv/7vGiZqynSu+fWDYzVeKg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1emqpcavkq7n77fexphv6x48kvuxp97lpcezn3q","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["pelicaneggfe"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aka5IfsxqJuasWOEa4gYh7J7rPoiSjUCZnXs4feuP0aT"},"signature":"B6oIT8LEeeiboOPLwnpip6VfrTSmEBrA5ZLfAxY603xkXxrtJkFMFHHw6xSbjcADZeJe58/mT1YXkQGUdVV2VQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1emqpcavkq7n77fexphv6x48kvuxp97lpcezn3q","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1672","pelicaneggfe","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aka5IfsxqJuasWOEa4gYh7J7rPoiSjUCZnXs4feuP0aT"},"signature":"ksfMuX5nChPIhz2Yj6tMQmM4JT+/CfrjNtA8QV81OedirWj9HoQb8NLWuS3YtlFe74mnEt3vTnW52DKU4ZVDLA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1emqpcavkq7n77fexphv6x48kvuxp97lpcezn3q","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1672","1","1","g1emqpcavkq7n77fexphv6x48kvuxp97lpcezn3q"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aka5IfsxqJuasWOEa4gYh7J7rPoiSjUCZnXs4feuP0aT"},"signature":"q2M0TbKM5Qr8zvPYZTG4lRuuzdOL+YT/Yp5PGJk42ZRkrteFxG+twByDERvsu7ESwjn/G1ln4IWway89+UTgZg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1c4w32d5yphmzqahcvlyw2ahpy3un3alf9n0xt5","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"jy8mBkzY41SiB8pmNeBOTzIqRFHAV/dYhKVzM/VsMLscoftTGOMA6Es0Tk2NaaIeZU6PxdS8j4kM5tSezclLOw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4w32d5yphmzqahcvlyw2ahpy3un3alf9n0xt5","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","humordecoratezq",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtSbuAj7QN4olwZ5fnDQ6cVcD1aaOTBzQvubAo6f0vp/"},"signature":"VHesGqJGMcKis9RG5NT1nCWzWQzo5zO5r4nEKdUd9Fo1+qQtnii63dnNNf+n0wTs2y9ipu8C6nSGgvzbvqbs5A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4w32d5yphmzqahcvlyw2ahpy3un3alf9n0xt5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["humordecoratezq"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtSbuAj7QN4olwZ5fnDQ6cVcD1aaOTBzQvubAo6f0vp/"},"signature":"W/emLG33hvcm+MsnjkV+04W822MbRDl32AuwoRqw0+BJzElUzno2gzympmRo1MKDSG7recQAROju3jCeB/QMpQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4w32d5yphmzqahcvlyw2ahpy3un3alf9n0xt5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1673","humordecoratezq","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtSbuAj7QN4olwZ5fnDQ6cVcD1aaOTBzQvubAo6f0vp/"},"signature":"/OUPEmG18n+7C8sO1bsbL04t5rSTK4EYYYeqIkkavEFh8gQUPTUOz9KCbzl/79pzZRKPUq1Yz+Zfmfls+aky/A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4w32d5yphmzqahcvlyw2ahpy3un3alf9n0xt5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1673","1","1","g1c4w32d5yphmzqahcvlyw2ahpy3un3alf9n0xt5"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtSbuAj7QN4olwZ5fnDQ6cVcD1aaOTBzQvubAo6f0vp/"},"signature":"AFPPWMFcb0NMDeLKvagx9csHIu2vKP95tazajjwHhPF2ux2+eIj1g9Y9pYt+6GB3m04lqDhi0q6V17FjO8nB0Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1s8wj2wwvsc6tkzsjwfrzgn0m4g0ce4qyw38gtj","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"BB0iorgRNdFjNKSwOPIuvRZRvnst0YAr6vV3KRiz/N8LJ7QHut+iK+UB7FFtV91Y2LYG3bUW9MwuOlZrRU2ETQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s8wj2wwvsc6tkzsjwfrzgn0m4g0ce4qyw38gtj","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","flipjustzs",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7wLinE2cYyz6okL4P9QiFXwZd8s4K+s+7PULA7xZ+me"},"signature":"DtFuuDEbYl2M19DNKCZcMaFrmrLfQKWGqyhKOF88++x1XjQ7yTlo9oflaabij3+6I6VXG4GyEd0h2CuGPmaTdA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s8wj2wwvsc6tkzsjwfrzgn0m4g0ce4qyw38gtj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["flipjustzs"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7wLinE2cYyz6okL4P9QiFXwZd8s4K+s+7PULA7xZ+me"},"signature":"P9xhszMxTWLI7PqZCoyJyJgGIQkF7E0BKL7OxKTSQ+MQJ6djVgFHMVGeik20EEPZXuOgLh+i3DyBZ6oK5lyGhQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s8wj2wwvsc6tkzsjwfrzgn0m4g0ce4qyw38gtj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1674","flipjustzs","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7wLinE2cYyz6okL4P9QiFXwZd8s4K+s+7PULA7xZ+me"},"signature":"KEGzA2sVkpWCvmKYogr9MAjEVzXNEnloCP1vb5MvocRaRNNM9OTh4mKMvXkmGtGVr3Zvzv4rqMeTrkct2O80gw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s8wj2wwvsc6tkzsjwfrzgn0m4g0ce4qyw38gtj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1674","1","1","g1s8wj2wwvsc6tkzsjwfrzgn0m4g0ce4qyw38gtj"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7wLinE2cYyz6okL4P9QiFXwZd8s4K+s+7PULA7xZ+me"},"signature":"oCY/X3Rktsq01aRHKl2Z1wLhZnJlroJpxVsnfuDV611EdkwEPpM72i8T/udRVgF2yaPB3PAwLruuexpkQAiiDQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1tty6yln3guda6j7f8vtlh58fwgp72mm7vjxjq3","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"+dMK8uyt4CcVjGWK06I4rb8pbfBAJPl/MDhb9g8/vXofvkQO+MshpDqScnKN0knYwVWypSAS/erHdRhqmEPlhA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tty6yln3guda6j7f8vtlh58fwgp72mm7vjxjq3","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","tissuesurej7",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzlP3X1igBKXUT3F2SvfNh11UFWNnNR+o+ersQ8Eo36c"},"signature":"5j582zIdCNQMpkC69zBnJa6jLespDjokhidS3xyaubEektg0Pi4z29A90JzAlVb6cXVNBOPITldqwJWOTbMl/A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tty6yln3guda6j7f8vtlh58fwgp72mm7vjxjq3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["tissuesurej7"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzlP3X1igBKXUT3F2SvfNh11UFWNnNR+o+ersQ8Eo36c"},"signature":"wpeMG1olH5FN+BAGFEfoBlKVfUDf/uCo/MOGnCBTtDQRgifNfgC/3o2UXKBaZTanmsdxPa35l59/odKdenyCGA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tty6yln3guda6j7f8vtlh58fwgp72mm7vjxjq3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1675","tissuesurej7","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzlP3X1igBKXUT3F2SvfNh11UFWNnNR+o+ersQ8Eo36c"},"signature":"n/xvmihkZvVKDyxeR86U/QPGBEslEJeY9Nq5Akg/cy5y/RYnd8PsKEK5GD6XA9tyLIzASujxpmvR63DpIuP7oQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tty6yln3guda6j7f8vtlh58fwgp72mm7vjxjq3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1675","1","1","g1tty6yln3guda6j7f8vtlh58fwgp72mm7vjxjq3"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzlP3X1igBKXUT3F2SvfNh11UFWNnNR+o+ersQ8Eo36c"},"signature":"NEXfEomVLKZsRxzE4itqhrXXNpe6aiKjPgD4vqJcDH8wI0D1Hxe1WRmyoTBBuDutORLXlccaUdSSEUixh6GJ7A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1mjuzx50nu6pa0fpn9pre7h4qhhc5ftamjr97dz","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"kpJikQwX/uhpA/FP9bPDrkYsU7FnFI8HDn9wS7VA4B1BhkK2MXFlXgrbs24PE/4AEnoOiT97IPke59obnkmviA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mjuzx50nu6pa0fpn9pre7h4qhhc5ftamjr97dz","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","goddessweirdfp",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArwA1s9vrM0m+/FwkSX4/kdajaAlaTPsKMUQnJlmOh0J"},"signature":"te0p2bnpSYPZnxYTapiqOSI+9rNhZ7gBKB1k2xIOJzQ4BIfwy8UOtSvUuwrb4fbrcMMbbnpdU/7KIkn3maOW0Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mjuzx50nu6pa0fpn9pre7h4qhhc5ftamjr97dz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["goddessweirdfp"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArwA1s9vrM0m+/FwkSX4/kdajaAlaTPsKMUQnJlmOh0J"},"signature":"LBb24PH2mxwrm0ngKjC1bLHdXih0s3a/EWIQmOH54kZPy1wMeize46xzHnnNI++YI1vvVyjn/seeb4/+257gBw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mjuzx50nu6pa0fpn9pre7h4qhhc5ftamjr97dz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1676","goddessweirdfp","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArwA1s9vrM0m+/FwkSX4/kdajaAlaTPsKMUQnJlmOh0J"},"signature":"zlBMcHv9pBcOjYl5pA4ETYZz8hWx1wVQFOBtGTHQEZo6R8ddTfMNcUbTb6IdePqTgZX41jyBa/yRStuQpXAGsg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mjuzx50nu6pa0fpn9pre7h4qhhc5ftamjr97dz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1676","1","1","g1mjuzx50nu6pa0fpn9pre7h4qhhc5ftamjr97dz"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArwA1s9vrM0m+/FwkSX4/kdajaAlaTPsKMUQnJlmOh0J"},"signature":"bL2VApOEpbatxHmEpdpi3K0ZF9tu6u3ladAhiYSFoN4OP2VlDg+KPBV+cqCTlvdrE9WDlM0M6GG/9c5E6FEOxA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1uwgr3kdnzmlt6ryq3antvhdmeqjtatuyk4vapq","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"xh/bOa0AHWG0Um1zdLBtZdUBsL+T2n3XlFCFWtHpT5NpeXAY2mp/E2gMea/aL2xVeAAaUAVexcI5d9uTJRiiqQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uwgr3kdnzmlt6ryq3antvhdmeqjtatuyk4vapq","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","merryhelpt6",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuwWT0CTm9WyE2lhb69JbPU9wZgZ56zVReK0okjVeC1+"},"signature":"OsgBub+9cTQZ2f09CVEUCsM3oQ5//Y1+Ay8xYQSxSWAy4/hg182Y+XHEeYF7Svs5P8fpf8T9zQ41tgxua8uPxg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uwgr3kdnzmlt6ryq3antvhdmeqjtatuyk4vapq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["merryhelpt6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuwWT0CTm9WyE2lhb69JbPU9wZgZ56zVReK0okjVeC1+"},"signature":"4upXc9FgkJiS2oE0nhTlJaf4OlsEtvttsp1zUib9n0tN3G4AENjE+ysBvx7Q3mgKkvTMv6UCHUBiOSRJGV31WA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uwgr3kdnzmlt6ryq3antvhdmeqjtatuyk4vapq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1677","merryhelpt6","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuwWT0CTm9WyE2lhb69JbPU9wZgZ56zVReK0okjVeC1+"},"signature":"VBtaoK1PyQhIsGvlh3g1pWq6/Rz7s3ejz5wS4y551FUpegyKHSw9kY1TOEaOQFFJzG0nrdTCCHzIFzJ2Goov8w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uwgr3kdnzmlt6ryq3antvhdmeqjtatuyk4vapq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1677","1","1","g1uwgr3kdnzmlt6ryq3antvhdmeqjtatuyk4vapq"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuwWT0CTm9WyE2lhb69JbPU9wZgZ56zVReK0okjVeC1+"},"signature":"X530uNyf6EJ8tjtHDRG3bZFiAgbk4BfKyrDGJK3AM6Br/geaLoIZi4RiE7AdB3eyiVzBfRXkl0IXRZVa3bjKiA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1wwz2f75al35h70yc6djqyc46aedemq8hsmq353","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"tcKjQaiREQ86e4n5QYGJoTmhEGGPaA26fk0NcDDoIGBjVjNeJQa1xvjsfLthVVUBiYdkMx0Y3Lsp+h7Exwc54w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wwz2f75al35h70yc6djqyc46aedemq8hsmq353","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","swiftradio0y",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8houTyBuDYRL8gyAbWcyAxVochKm9q3pAm9n2+XWtil"},"signature":"2g8raqP3Ywjrwla6vVXG5aoX9tUgzTgtrpK/A1EDJNl/jT2CU+QlTV/ao5kujdg+07hsrBIF3DLRo4K1Kr6ZKw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wwz2f75al35h70yc6djqyc46aedemq8hsmq353","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["swiftradio0y"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8houTyBuDYRL8gyAbWcyAxVochKm9q3pAm9n2+XWtil"},"signature":"407lQbN7flAb4Ug0Om89FYAJgBSzt25zl7y82oLLSAUeB36b1UXNEJueRIWCipZkX/TwqtYQ9WwI1NGT9ciqFw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wwz2f75al35h70yc6djqyc46aedemq8hsmq353","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1678","swiftradio0y","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8houTyBuDYRL8gyAbWcyAxVochKm9q3pAm9n2+XWtil"},"signature":"KfmHPpEB6YEO7+TO63mUITg46Hv4cnTuskiuYOdOqhoqRKi6ex2ACfimtFqDm3PfPuz6iqxqzOIaa/2NTOZC6A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wwz2f75al35h70yc6djqyc46aedemq8hsmq353","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1678","1","1","g1wwz2f75al35h70yc6djqyc46aedemq8hsmq353"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8houTyBuDYRL8gyAbWcyAxVochKm9q3pAm9n2+XWtil"},"signature":"TBxsdaYcMdsl0CuZdRWM8U6NLzLI98tZZBgQXBTnD31OPxmPR/E/LL0F4icWt4VvCaNV4Xui9Y+28LnZLIKZ3Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g130fjyq7slqvxz7fcn3un5stsduzfyaq47t83mk","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"G3V/AEOgptqRhcGNr2UK3rjyuMY+vsXEd5HL/ZTlVFc+RfZ0k0G9rHIVan97OdRae0L0nUYfnJYnklsmZZadbA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g130fjyq7slqvxz7fcn3un5stsduzfyaq47t83mk","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","kittenhold7f",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"At7oV8PzBDnYhfwDii5cJ7zt4Xl+6yJxYu1XYFWOzThw"},"signature":"lapYsOltpN3bp3O+L0QpTJNgnXb9UEGnATW5L9wf6CwPqGCYxNgSBk9Pe24NJT+mhF7yPlDRTivvPH1OhuJJ3A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g130fjyq7slqvxz7fcn3un5stsduzfyaq47t83mk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["kittenhold7f"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"At7oV8PzBDnYhfwDii5cJ7zt4Xl+6yJxYu1XYFWOzThw"},"signature":"EtQz/mbtMF7E8EbwbBkJqe30WgrUc9rm7QuW0MWg9qYQ/OOq5Gp1vBYC/A5Yk0+w40eWKThPAyr9X6VdrvouWA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g130fjyq7slqvxz7fcn3un5stsduzfyaq47t83mk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1679","kittenhold7f","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"At7oV8PzBDnYhfwDii5cJ7zt4Xl+6yJxYu1XYFWOzThw"},"signature":"Zd77LVbTY1RvFTtufiY+EZoivlC3wQY8f2E3V6xKSkEk6eoKyqGkcyhsfx4etOsdqc/b5dsbBuPqgnC4Ni/o4A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g130fjyq7slqvxz7fcn3un5stsduzfyaq47t83mk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1679","1","1","g130fjyq7slqvxz7fcn3un5stsduzfyaq47t83mk"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"At7oV8PzBDnYhfwDii5cJ7zt4Xl+6yJxYu1XYFWOzThw"},"signature":"ck/O/kt1tGNdnkQYdZKPz4KjqfVP4+C4kqeB/FqNsqNCkYMJHYmrkoDZiQZHBk14kIcrdA+gKeP13S2/35f9XA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12z506j9vmpnne0rc0zn38p0v5ksfct00dh06p4","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"890hByYf/DO0mX7Z19fc9+lEYf7TuvByZTdqLuXjVnYBhfg9dBIV90M3QTLpyZKv5DzxVA8pMO03wTpp5QofaA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12z506j9vmpnne0rc0zn38p0v5ksfct00dh06p4","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","foilsectionne",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwKcQMD+3R/NYFTKKuyqCP2S2yiYvdSowGkLneA/4Y0w"},"signature":"uya0QUAc6RMVhKnrdCIthxijaShbfKL8tzGBWLXmaIgV5QNMtpDGhO3Qnz+fu3VyklkAt9kc9R5tjyrT1UhKkg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g132gk56xqv3my3ltqz8mcmd5zwgq7g6v9rptvp3","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Rtoz/3/MrC9PSelUTkx1w7SvSe1HZKgw0v1oeXgf2S5dIeos6+zd8piIc+SLe3yOKQtB3EsgId7ipEHoU0npTg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12z506j9vmpnne0rc0zn38p0v5ksfct00dh06p4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["foilsectionne"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwKcQMD+3R/NYFTKKuyqCP2S2yiYvdSowGkLneA/4Y0w"},"signature":"KQysWTM8v28h7HNTMZheNyMktcpC6GovZdwu/TFaafgJTH8O155Xt8yuUCUn27ZmN1zBO98F8Ux0Me/hQFj/5Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g132gk56xqv3my3ltqz8mcmd5zwgq7g6v9rptvp3","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","mutualvotelt",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoG3uYE7mCjAYrPaw9x2AuQRHGUuWxbX+uUGUuQP8YJo"},"signature":"F4R3x+eFI/ntrONX5oJNe0sMcjF2UJrA7fTksa0zQd4P6osoGV+fF3kZI4nF+22TulvPsM/nRZI9Irif0mX5FA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12z506j9vmpnne0rc0zn38p0v5ksfct00dh06p4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1680","foilsectionne","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwKcQMD+3R/NYFTKKuyqCP2S2yiYvdSowGkLneA/4Y0w"},"signature":"GhS9Zgr9bVhj5GHM/H/fRBN9ky1kdo7Dp6cUxEGPoPwAqP5Haj1O6QjosCi0Hb8Ln3BwqYmRPrKQR4cRraJSoA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g132gk56xqv3my3ltqz8mcmd5zwgq7g6v9rptvp3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["mutualvotelt"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoG3uYE7mCjAYrPaw9x2AuQRHGUuWxbX+uUGUuQP8YJo"},"signature":"Za3TMVqqNZHrP3QEzwHTSmTSkZVXaPq2bWDvucdGrP4FhhoE5tdvIQfsh1t0eV6JnY+KYoITNcC/UCqYl6MrEA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12z506j9vmpnne0rc0zn38p0v5ksfct00dh06p4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1680","1","1","g12z506j9vmpnne0rc0zn38p0v5ksfct00dh06p4"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwKcQMD+3R/NYFTKKuyqCP2S2yiYvdSowGkLneA/4Y0w"},"signature":"Tl9dE4iuk+iROuN9QlswFpmywk5DumcWzkaP1B/BuWAkze6nRKS8eHjqYKHC+SCRQFHbPiUgUe3opDk7lbn5Rw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g132gk56xqv3my3ltqz8mcmd5zwgq7g6v9rptvp3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1681","mutualvotelt","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoG3uYE7mCjAYrPaw9x2AuQRHGUuWxbX+uUGUuQP8YJo"},"signature":"M1lbEjrYGGyutemM1PXKhZ3WuJtAD12knDV/ncnN4wleeR0hdBI+0z+cYG3hvzdKbhDQT5EbZpQdBKZcP9DmSg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g132gk56xqv3my3ltqz8mcmd5zwgq7g6v9rptvp3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1681","1","1","g132gk56xqv3my3ltqz8mcmd5zwgq7g6v9rptvp3"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoG3uYE7mCjAYrPaw9x2AuQRHGUuWxbX+uUGUuQP8YJo"},"signature":"KxsforV2n73bOqRq6xFr+vkOnGEqUTUauLmTTGixymd+szCWjGOELl96FkTj+wSzLEMkIm0VsS5QEuWyZLNtXQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1wmd3ce3mgzjf80vcpwelhvxdlv3j2qs9qur7eh","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"gXRcrd/qJUBxIhJN+PEyzGfFOk/yQYBAUbRtSNUJAOga4N5YJCLwfB4kHXFnXKoSEXcRBrEhRN1kGiDavH9O+g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wmd3ce3mgzjf80vcpwelhvxdlv3j2qs9qur7eh","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","admitpriority0v",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjULncGezqfE61i4m/gMpSzbbJkcA0iLRAxG1EjdndSL"},"signature":"3APsIXh9qG68Yv3FuUHWqcBswBXePDNc+eEws18MvZsrQM7kxviAVktxFNGnb6iM1WbIq52vaemeTWRstSf1rg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wmd3ce3mgzjf80vcpwelhvxdlv3j2qs9qur7eh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["admitpriority0v"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjULncGezqfE61i4m/gMpSzbbJkcA0iLRAxG1EjdndSL"},"signature":"gKylcFb4x9LWTd1dixdcg6RGvE3Bn0+ULBJCO39aKKFlJiTmK76n9TE/KZye/1cpAeg93k7IXLSkNqSBlm7G2A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wmd3ce3mgzjf80vcpwelhvxdlv3j2qs9qur7eh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1682","admitpriority0v","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjULncGezqfE61i4m/gMpSzbbJkcA0iLRAxG1EjdndSL"},"signature":"gWmO5afgfcFCmUl3u4hV7e+Rr+mthPvrBhks5fvRD+1rc/SHmzewu3UJOR9IepsVXZ85IJFD2wETWLk52GkGcw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wmd3ce3mgzjf80vcpwelhvxdlv3j2qs9qur7eh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1682","1","1","g1wmd3ce3mgzjf80vcpwelhvxdlv3j2qs9qur7eh"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjULncGezqfE61i4m/gMpSzbbJkcA0iLRAxG1EjdndSL"},"signature":"NCN0F8gqcIYEvGtTVbieRmv6L8D2uoDiBBj29N97XDowcIxvdsopKMaPGfcIzTWu5Rmf/GVmZ3+7GT7Umhewgg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g199mjp2d7pjpckwzd200aneac968rqaz6x3gxzy","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"20u+Ge/X82P1CFairJkUr/aEugW8Qtgn47PI4CEC7OIEAOkZvYr9nRWC0SkJbN9vSjEL/GJHo4V56mZqWOPIfg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g199mjp2d7pjpckwzd200aneac968rqaz6x3gxzy","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","venturemysterywz",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoNnDvWdyrgaDnd4oxmPpvrLMFXSuNShKiMVmCG3tenC"},"signature":"oTi/5fn9wADioV8Bo8jrl2G19HvgdUf8w92g6eqiP4YlrtPql6Z++De1SH+SLG8NUd3a3zYiseQl4ts2ss61Yg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g199mjp2d7pjpckwzd200aneac968rqaz6x3gxzy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["venturemysterywz"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoNnDvWdyrgaDnd4oxmPpvrLMFXSuNShKiMVmCG3tenC"},"signature":"BlKCzyy4HxTlLYDfAC2CW2kRoFWkVNSBOLTHj/FXxkcIGbV6WTdYSzEXltSwlr99A/aiQ95FDeIv6qBaszHiNQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g199mjp2d7pjpckwzd200aneac968rqaz6x3gxzy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1683","venturemysterywz","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoNnDvWdyrgaDnd4oxmPpvrLMFXSuNShKiMVmCG3tenC"},"signature":"l67QQrrru57Q9Hu3+3hQqZOJp9bANFllJszGL3XTwFdWR9CaU7Y0p9hWgL9WnJQ8QYY5ArpGL+2B4wCCCs3FzQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g199mjp2d7pjpckwzd200aneac968rqaz6x3gxzy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1683","1","1","g199mjp2d7pjpckwzd200aneac968rqaz6x3gxzy"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoNnDvWdyrgaDnd4oxmPpvrLMFXSuNShKiMVmCG3tenC"},"signature":"e7ODCgywKEiPcJYxZyA+i6eTTCOat6Nq2/dz5pvJt5xKSZInzu9nVSpzrnsd9lnQXczLxGma3+saSOHQSBgpRA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18677ltrdrhqr029ffmpnnr75mk2wkmte702jgn","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"KXw9JZtPA4DYtaD446Thn8mq4oVUg7TsZloKb2MpFQVG4UATFhuUXiNttU1F/HylxGc5BIx2LZQ294GoTWEetw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18677ltrdrhqr029ffmpnnr75mk2wkmte702jgn","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","investsnowr0",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Am4yksQPLTmMkh0YRwx9UJuPhS/o3+djK17t2noX8Ul1"},"signature":"fDEhGKSsTzLgArqTKJUfE0/UukNPgmnv/wivIDpjsWQ+WrNbM6r+CtzIunlNzHSwa1EjhF4rIVOFUldfJulKww=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18677ltrdrhqr029ffmpnnr75mk2wkmte702jgn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["investsnowr0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Am4yksQPLTmMkh0YRwx9UJuPhS/o3+djK17t2noX8Ul1"},"signature":"ALAe/V7U3MIFtKxIz/kG/zoDLmlt4b92K+07rkeTwrhcJXi7ENHj12UVvv8RgCtDjLWCQzmJuRtY1fHI4UvAyw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18677ltrdrhqr029ffmpnnr75mk2wkmte702jgn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1684","investsnowr0","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Am4yksQPLTmMkh0YRwx9UJuPhS/o3+djK17t2noX8Ul1"},"signature":"0eHfYEkgsK25Y5KrjyWkgK71GQiKK+9SbPOZJh9uheldkg+p9dpmRL6nMGs/HDSfWR/wMXvSqAucQGOpR/Q+eQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18677ltrdrhqr029ffmpnnr75mk2wkmte702jgn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1684","1","1","g18677ltrdrhqr029ffmpnnr75mk2wkmte702jgn"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Am4yksQPLTmMkh0YRwx9UJuPhS/o3+djK17t2noX8Ul1"},"signature":"HEZT37q0Yyh0NdYzkUR97cVgme/ReMLWMjuZ4Wyv4cpJWrrIkm0CJClQ0sKldUmuy36k5lQYQqBAi8Q7QdYBUw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1dquytd4lymf0yspk5mt30pjar0hg52lu987m26","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"94v1q57xY80P4FWqg5vSxp7tcg3eJRfh0oVWTyU1dtoAs7Oa21A6ONhPRVWMQ/CSu6y+3/ls3S0aKbRHz0uHqQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dquytd4lymf0yspk5mt30pjar0hg52lu987m26","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","assistcurvesp",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmYY6Gqkd4kDdkYXcrS462Pfdfdzu5GD0qVG6JNo8UMW"},"signature":"v0gm4LpeVP8Tgzf4vv8EJ+M+iPMXiazST+IPngNVIQlgHhGrotKrPVkTuKJpIlkg/UArGLNAu94c5/pAZzNvBw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dquytd4lymf0yspk5mt30pjar0hg52lu987m26","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["assistcurvesp"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmYY6Gqkd4kDdkYXcrS462Pfdfdzu5GD0qVG6JNo8UMW"},"signature":"d4cxKXse1pnoEMA/14N03bRCbNi9rDM3hjtv/9qJYERdJ0ZHHAsBi2zKSx9h1EQvyLnNpIZCiLJBXW13ypH0YA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dquytd4lymf0yspk5mt30pjar0hg52lu987m26","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1685","assistcurvesp","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmYY6Gqkd4kDdkYXcrS462Pfdfdzu5GD0qVG6JNo8UMW"},"signature":"ONXmExwHsbdDshARniKSzrk0T8J9a9+Y+O/u/XID/r9BQ3zV+Iu0Cg7rgSycaVbiuLFjlDN1cxWzoep79piDwA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dquytd4lymf0yspk5mt30pjar0hg52lu987m26","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1685","1","1","g1dquytd4lymf0yspk5mt30pjar0hg52lu987m26"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmYY6Gqkd4kDdkYXcrS462Pfdfdzu5GD0qVG6JNo8UMW"},"signature":"1n7f663YR7oyUWIRVT2/38e68v8ZY4R3aSXAGcG+26FkAeMTO8go1XRnnBZdq1mmGQ+y/qTx1QtlR8jsi4SQtQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1e8e690rspc97mtz6z6en4tznjy7e3sanvl0atv","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"oQZMchfY1i08UTZ0hZ9yRQlJH82glrDPb9dkxSPOUcV9haz2EJkyByvWj3EZxncNL1m/JaWtg00YOXVBDS2NjA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e8e690rspc97mtz6z6en4tznjy7e3sanvl0atv","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","undofashiontz",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7QDwkRxCTINqgVg/MZIOXqxzD9bXdYZXT8nWMCmOC6h"},"signature":"gXZ7TjFPBefE/47ej/gzoKxZfzkon5VZwrB0jH9IZmUwRIHMh1z0uxBodRKPVtPJG94TqrPf04Yk+nCsrOyjWA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e8e690rspc97mtz6z6en4tznjy7e3sanvl0atv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["undofashiontz"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7QDwkRxCTINqgVg/MZIOXqxzD9bXdYZXT8nWMCmOC6h"},"signature":"DeisrM1KrJOQKM8e3wQ1uUL0jNOm+WmlEkJgGmDuSDBNuHl23857Ti/alBY4O9HfO8ryHZRubk+xQGBhVAcLcA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e8e690rspc97mtz6z6en4tznjy7e3sanvl0atv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1686","undofashiontz","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7QDwkRxCTINqgVg/MZIOXqxzD9bXdYZXT8nWMCmOC6h"},"signature":"5eyY0zT23tIbUkZrfFODOB6hDL+gQWmlp0oOGiM9gSUsL9NMUTI3qoMNrS3T3+XTb4LRZVNgn79G5GAgfkKkCQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e8e690rspc97mtz6z6en4tznjy7e3sanvl0atv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1686","1","1","g1e8e690rspc97mtz6z6en4tznjy7e3sanvl0atv"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7QDwkRxCTINqgVg/MZIOXqxzD9bXdYZXT8nWMCmOC6h"},"signature":"MVsjty76CxScOcIRJ+tDCLCVqXd5xHDieMj1znqSQIdpqnVHVlKFfkLklDdkt2IsuOw4RgxEZjDnOTcop06Y8Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1nttua33f3naqmxf5lahgjd054r6ksdzy8dm855","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"JBCxFcFRMfFx8xpU/hHSzOQhv2LLgzVRnn0cNiDRN507kV9cMGGk4VDytfCr9wqGrzEta9mCt6eDE9M/9hFe/w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nttua33f3naqmxf5lahgjd054r6ksdzy8dm855","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","suggestdonorxf",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6aWtvGZjeqR5wy7+Zb6iSqUV+iriwJ0OCIX5/7RMYdC"},"signature":"VLf9cLsIhdJd0IAH31oOqcOYaxWmzQTBl4FBteP0Rzxhz0Ux7sNJzqjBgWQA9vwvBj/SwggaULIP4b02eUDyCg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nttua33f3naqmxf5lahgjd054r6ksdzy8dm855","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["suggestdonorxf"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6aWtvGZjeqR5wy7+Zb6iSqUV+iriwJ0OCIX5/7RMYdC"},"signature":"v82v80P6ovPZlyzdwOwQw3V4UuvJLJr7ZrxglgonK5Qrh5JLyBZxVHxd6cpLuE4RFI2Sbe08iW56Iq0kznw0xA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nttua33f3naqmxf5lahgjd054r6ksdzy8dm855","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1687","suggestdonorxf","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6aWtvGZjeqR5wy7+Zb6iSqUV+iriwJ0OCIX5/7RMYdC"},"signature":"+NR253KgtIZH9wOBWLLNXs6n27WBfQuHIe4I7zMecWoJHfn2ByJlASvHVoGVy4VK8vgnv1Xp+dU3O6HW/8HSsg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nttua33f3naqmxf5lahgjd054r6ksdzy8dm855","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1687","1","1","g1nttua33f3naqmxf5lahgjd054r6ksdzy8dm855"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6aWtvGZjeqR5wy7+Zb6iSqUV+iriwJ0OCIX5/7RMYdC"},"signature":"jsdeQhUUwyHNE3AEXjhTD/DN3ATjLhIt89wKnKhzA9t5a8SOFqjfvn7kGGxIxp0vLhjAzy1g31cwc3SDNoc3pQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g170kzgqfz057gsa0du8aps4pz0uwhr7n7x67u7e","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"0py9SBX362nw299IXWiLfdCk1FR9eH6UYlwvAUSimkQJnE0++G1n9hyQjLXaZQ3e3uFHFuhoRGMYLQEaWf1lIw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g170kzgqfz057gsa0du8aps4pz0uwhr7n7x67u7e","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","lunchcapitalgs",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqKYCH6RLFZaUhcD2z2sYR9yePLY0JFbYDaBDBHOYzHT"},"signature":"w8akwVB5QpSLjoqIepC1+h9QV5IRBmv2X9uv+5yZgBZa/+iS+LmD3I9z/NRK7elJbdRfICcJxoPypf2xojunlw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g170kzgqfz057gsa0du8aps4pz0uwhr7n7x67u7e","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["lunchcapitalgs"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqKYCH6RLFZaUhcD2z2sYR9yePLY0JFbYDaBDBHOYzHT"},"signature":"vKBugfFY+xlEbmz5dMVD+SCXGfVggVNQZEsL7ZvEox9veFk9d+ec4hT7+QrW8TJQabkoKdsMHL+eJSyDbQVYuw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g170kzgqfz057gsa0du8aps4pz0uwhr7n7x67u7e","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1688","lunchcapitalgs","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqKYCH6RLFZaUhcD2z2sYR9yePLY0JFbYDaBDBHOYzHT"},"signature":"CbpgK2SdONkx0h3tXLPXv/PXWKho5Cdjvk98bdD4Z24Y+SLR1PVU/qTVXodAOdhBYh3KvPvQt+Hd+xmx3CRNtg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g170kzgqfz057gsa0du8aps4pz0uwhr7n7x67u7e","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1688","1","1","g170kzgqfz057gsa0du8aps4pz0uwhr7n7x67u7e"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqKYCH6RLFZaUhcD2z2sYR9yePLY0JFbYDaBDBHOYzHT"},"signature":"EfztP7ET85nUHhyJUw4B5mOna/exA7WKELmKXUe5QDJjnlOtMgAWtVM3dPkNYpMnoouujvlx/5gMO24Ks9ortw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1nhnyreczzm79tcjgncfhhtgrkypl9jx2kd6ea2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"8F66yTjDKlOOui4iGdtXnaqtGfWdxMRGZmklsT57H29rWiLR3AGipPRDD5M0OG2DGQM267jhv1YsYj4lNzqzwQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nhnyreczzm79tcjgncfhhtgrkypl9jx2kd6ea2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","apartglidecj",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aldd8p89R8aJ9C7oOVlFIAYY47B6mfsKxOOasA80Hc87"},"signature":"e6vo3i8MezKC/P4lPIIDeOWBSXHeES72bMrSiU5YCiRgDJrZ+SiCf6KrpPWjxqZ/+XIP/8BQj4cNJW+TF6w9VQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nhnyreczzm79tcjgncfhhtgrkypl9jx2kd6ea2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["apartglidecj"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aldd8p89R8aJ9C7oOVlFIAYY47B6mfsKxOOasA80Hc87"},"signature":"mdhKqbAG6BPCIiW93TVKfW8Ina4xOCioS2mhldrZOTdFxJFUPFIuqPewD/GaiAGZwhBKJ4ELzUTKR9GTft7hkw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nhnyreczzm79tcjgncfhhtgrkypl9jx2kd6ea2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1689","apartglidecj","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aldd8p89R8aJ9C7oOVlFIAYY47B6mfsKxOOasA80Hc87"},"signature":"Klj+ATH2NxivqyiUwduOuf5kDa3Q0CNdZPINtS3WvmhlvCaDEEWDhyYvKMK4q1LEZRX7GhiTL8T/Mk0yF4ZV0A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nhnyreczzm79tcjgncfhhtgrkypl9jx2kd6ea2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1689","1","1","g1nhnyreczzm79tcjgncfhhtgrkypl9jx2kd6ea2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aldd8p89R8aJ9C7oOVlFIAYY47B6mfsKxOOasA80Hc87"},"signature":"WQSisxHzq+uGnJvPyngVG+WqelOwfi39qhTunXlS7QtYQpVmV+9QirgP6H14uPL1OMtk+x4iLbqtpdNn9pc26A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1fpjppmad6da7fssn9q2f7m84t7ekl4adf4z0gm","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"6xhOnTDCcWAJaFrxPV6FqfK7LZM6TZkcOckHAI0zEPgqNKNoMRPq+096HJ5Kf5g/a3FaKLDgn6LlJamcjOxqiA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fpjppmad6da7fssn9q2f7m84t7ekl4adf4z0gm","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","questionpupilss",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxcRP4jccjyd2yR1HF5V5e/ojLDvZNpH3T6lCO7mH4Lb"},"signature":"G8KXs7mGbDamDZBKFJrk6pAFfv0WRjqieJ7m/e8KZ38E7qfPbWR/C0BVhi3SKMZPIugt01W6UMFe8lqDFdSeTw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fpjppmad6da7fssn9q2f7m84t7ekl4adf4z0gm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["questionpupilss"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxcRP4jccjyd2yR1HF5V5e/ojLDvZNpH3T6lCO7mH4Lb"},"signature":"HDwrCyN8Rj9S3oXbEquDk/1H/XPtr5GryxIAJhQ796M3jS4LjEOskA32RL7Mta+oZualYB+DylszJzAVdCX04g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fpjppmad6da7fssn9q2f7m84t7ekl4adf4z0gm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1690","questionpupilss","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxcRP4jccjyd2yR1HF5V5e/ojLDvZNpH3T6lCO7mH4Lb"},"signature":"9UTWGpT7lAXUQtH8yvbHiqesBasVwD4XzzRHy3HggEM5BdKawqp+Yf1k59M0dYl3tx0ava0b8ywaMm1J57DLbg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fpjppmad6da7fssn9q2f7m84t7ekl4adf4z0gm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1690","1","1","g1fpjppmad6da7fssn9q2f7m84t7ekl4adf4z0gm"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxcRP4jccjyd2yR1HF5V5e/ojLDvZNpH3T6lCO7mH4Lb"},"signature":"xNcMhsmz802eUDsekTbpY4puWFEAPHxZBLOqUYCm6ptF4acL9jNYRpn2qr8GX2qcn59KRdHHZkdJo0346J9mkQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1c3y3m274hxmngfgmf0ex6mfj5m40m4e7yuvdam","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"MJHTg21hDycvnowFniUwff1vdRY3UT8oNXZJOTaJedAc+yZsHjaNQXucVpS5/55TAfQQpt5lWmS4ztGbTqkRfg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ddc2pnwvyg3lqe5x363t0s6gntwz3clh9gvsx4","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"IlKquFMbSdlcqmQ7mfemwLNOItRkzV1BZrgeE2ZjlQJnvgGq0JqL1Kx7yrjWL/TzIiE+5uNEvEfVYk/n2sLFgg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c3y3m274hxmngfgmf0ex6mfj5m40m4e7yuvdam","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","variouselephantfg",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyYqa4dNMQik5Xv2lOjzvgoYxdArdWDgEh54hjwtvzBK"},"signature":"H6GR0/dYyEG6DyRlwQxCER3RmM8ECDqO8M77YBZBasdPMG6EpjASTpgIval7ZhEabS9MF/SrOHjjRmSCzQ9DcQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ddc2pnwvyg3lqe5x363t0s6gntwz3clh9gvsx4","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","dicegiantlq",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1gX6ZERyDdlEXgP8qzpyQydipUA/mT19NPtaHd8nFyT"},"signature":"MEQmIcHLoQeckMXiSS3Dx5Pt4YLMJm+YDCPqz17rsGIPbI0HSXaKRtDUNmcdoe7pbhuOTcF/CbfocJFx46n3nQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c3y3m274hxmngfgmf0ex6mfj5m40m4e7yuvdam","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["variouselephantfg"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyYqa4dNMQik5Xv2lOjzvgoYxdArdWDgEh54hjwtvzBK"},"signature":"XvjvNId7Q+rj6Jk3fqmTBSm/4FDAGOM8ZEYFA5rIFx1YjiqyGYcTJ0XctKd2JNE4TN3hV/eFAXjWZGNLg61lfw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ddc2pnwvyg3lqe5x363t0s6gntwz3clh9gvsx4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["dicegiantlq"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1gX6ZERyDdlEXgP8qzpyQydipUA/mT19NPtaHd8nFyT"},"signature":"Aox5WCGGqhRCORAu/FoNF7McGrJk/KCDLKrIM2gwe0gdUtz1upxNaGMNQOs1AkfsmT61m5Xw7XFH8LR2YlXOJg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c3y3m274hxmngfgmf0ex6mfj5m40m4e7yuvdam","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1691","variouselephantfg","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyYqa4dNMQik5Xv2lOjzvgoYxdArdWDgEh54hjwtvzBK"},"signature":"KF7VG0XdaLtpBIIJgumj4BF3er1OwZFhHrreOfYAPB0OwtMA5YorLUbI5/sLUsWra2mnrLaMzVrWAGN/XaJCSw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ddc2pnwvyg3lqe5x363t0s6gntwz3clh9gvsx4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1692","dicegiantlq","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1gX6ZERyDdlEXgP8qzpyQydipUA/mT19NPtaHd8nFyT"},"signature":"gGoRf4uqCwiZGrxGweFX8EOmWWe8heOik5LicTwFjrIGkgToC1zaGjzX2NF7I6nTqKqNlEeVDUF/X4dmzAngCg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c3y3m274hxmngfgmf0ex6mfj5m40m4e7yuvdam","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1691","1","1","g1c3y3m274hxmngfgmf0ex6mfj5m40m4e7yuvdam"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyYqa4dNMQik5Xv2lOjzvgoYxdArdWDgEh54hjwtvzBK"},"signature":"1K7LJYD18DpmZrWbZ+mJHhoQAImGB2UgQLNTlKmCH0Vc088YHuYbkorE0YmfA6xyGAFmaBUDTPQli7abz+VddQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ddc2pnwvyg3lqe5x363t0s6gntwz3clh9gvsx4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1692","1","1","g1ddc2pnwvyg3lqe5x363t0s6gntwz3clh9gvsx4"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1gX6ZERyDdlEXgP8qzpyQydipUA/mT19NPtaHd8nFyT"},"signature":"gaZHBrPC8cRgAjUBXcdYCoG/Yip6CtvRkVfeMM3ELGx+Gfs75DD+9k3MXRaivW5Jl84e3yzndzhvQpBgJx12bw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1jk5e640me8xnxa0ar4u2rt5qkf975zdjt6k59r","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"3Mor931Ims1HQ0Q9LShI+4lSipCRPRBDZr9vhh4rCxd+HlUc94OlZ5k2tUEsyOfy9AwWr063PguuLQIYrY8/QQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jk5e640me8xnxa0ar4u2rt5qkf975zdjt6k59r","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","festivalmatha0",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2fznWLUxOZ7kmtB2GAnTsM5Jc7/Dy63IG0kKHDYwpK0"},"signature":"ElUAeoKP/N7ZoXhjN2Fl88nA7Koo4wEAxQqad9NqlrwwSG+vaG+qx+PG6qqG1JZZ1PWzARCt7mcYTa1D29srcQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jk5e640me8xnxa0ar4u2rt5qkf975zdjt6k59r","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["festivalmatha0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2fznWLUxOZ7kmtB2GAnTsM5Jc7/Dy63IG0kKHDYwpK0"},"signature":"vpqb1lzBmZkR7+kwPp88uq2NkBY4/juLfz3MkDFr9v5+KstMiPOzYrRCku8kKDhe1amaqYcj/kJruoRRhLHsQw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jk5e640me8xnxa0ar4u2rt5qkf975zdjt6k59r","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1693","festivalmatha0","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2fznWLUxOZ7kmtB2GAnTsM5Jc7/Dy63IG0kKHDYwpK0"},"signature":"j8Vec2n6A+zFgLvfLBt9RS/q13ScSOjz9C8hRZhmqPIE2FLSwbbl5e027hsPkSsBDjuKA7WlovD4CyK3AJ4MLA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jk5e640me8xnxa0ar4u2rt5qkf975zdjt6k59r","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1693","1","1","g1jk5e640me8xnxa0ar4u2rt5qkf975zdjt6k59r"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2fznWLUxOZ7kmtB2GAnTsM5Jc7/Dy63IG0kKHDYwpK0"},"signature":"nudvDGoyr5oap9T/CbeCGWP02IUgz/waP/VhxA8AiQtsRvSej+RfYRendueIyGeG8oZXw0xHQ2fZa4V+TKrp5A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g17vekh8jwgaantr0syd4vgtvkeake28mm6tju34","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"nEMlUmhuo0xsoOL3o9wJZw08GGn8DgioMHw+yjAjAzlf6itHjmWkN0NDlWRCBwCF48fsvyTakMjaFvlgNbX2fg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17vekh8jwgaantr0syd4vgtvkeake28mm6tju34","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","needaskr0",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0LgY+WqBXin0O1M7d6JZRNChau0XS6wcv//C36z24go"},"signature":"+K25MxOOG/Q/tvNTHHAeruVVo25lzAetii8tTFFcGmUN6qH7AnTccwhlQl11gDDj42YKhKfZe1upZ9Hniv4ptA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17vekh8jwgaantr0syd4vgtvkeake28mm6tju34","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["needaskr0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0LgY+WqBXin0O1M7d6JZRNChau0XS6wcv//C36z24go"},"signature":"UHvrHVOWlmGQ9iSLYgCXg1DbJ8gk1l6rmSgb/zhTmGEwmb3fOf6jtqWfHY+5yf2LidAq+kXKL/nv0OyWWJGFIQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17vekh8jwgaantr0syd4vgtvkeake28mm6tju34","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1694","needaskr0","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0LgY+WqBXin0O1M7d6JZRNChau0XS6wcv//C36z24go"},"signature":"ts0YSMHNAunUSdwJ0G4xf2CVKdGwVME+Si7jY5cOt712zGnIBCs14Ey4F/7aGUtD/Jteqc+l+g99Uvz5wAJtFg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17vekh8jwgaantr0syd4vgtvkeake28mm6tju34","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1694","1","1","g17vekh8jwgaantr0syd4vgtvkeake28mm6tju34"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0LgY+WqBXin0O1M7d6JZRNChau0XS6wcv//C36z24go"},"signature":"KofK3GSJXIN7NPDcCWxWugtWZcqZnQ1qIeUCka/nNUsFJ4XtCKeS+EGAF3HGpnyq+zWYo5LECA6xczmJzgSn4A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1rxp2t8h62axg9kczsyex39ln72z8jwpw66nqms","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"mUDVwdaE1vrKA+LqN1nRZg/L3sVbGocnDE0phlfDSC0Be/ksIJiznsKpAdfiRAZ7Tet53hg8Pw4vlb6qdkvj3g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rxp2t8h62axg9kczsyex39ln72z8jwpw66nqms","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","privatefeatureg9",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyBjHmEvEP6eXFpo53DQJ5D7mbvuU9QeiWnr84XMhiv7"},"signature":"2J4gp/5oa8CA+mSTwkbjMPO2g9NRa8zFIA+Db5IiT39MPdfMSBei1Yk78R4gS8bdKSGdiEYi0GaloHT6b5UqCw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rxp2t8h62axg9kczsyex39ln72z8jwpw66nqms","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["privatefeatureg9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyBjHmEvEP6eXFpo53DQJ5D7mbvuU9QeiWnr84XMhiv7"},"signature":"HBPtw7SPDTLdwsuIRtvhXq+Y47n5WHxMMUAzosBtpNMEpeht+c90qX9SNOrsj30FhxzfcAB4zpu0Id12WvF5DA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rxp2t8h62axg9kczsyex39ln72z8jwpw66nqms","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1695","privatefeatureg9","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyBjHmEvEP6eXFpo53DQJ5D7mbvuU9QeiWnr84XMhiv7"},"signature":"jWEs96PBDoQj7rFj3QvIC1Tcr1FXx076tyQgW1yxL0UEeYUQpfmRGNXP8ZpfDF1ConAGFVBM53d9+dVwIquH5g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rxp2t8h62axg9kczsyex39ln72z8jwpw66nqms","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1695","1","1","g1rxp2t8h62axg9kczsyex39ln72z8jwpw66nqms"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyBjHmEvEP6eXFpo53DQJ5D7mbvuU9QeiWnr84XMhiv7"},"signature":"x0xQHRi06zkX/i+Keh43+oQCpyyO8e69cOnFRU73xaItwS/Cj7rK8rinllUK7+UI92yY2i8QW/HYxoaLFhRMLA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1hp37p3n07ql4qr5j0jzw2sldkc4z7jspnnv5xd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"GKatesAyjTwUBEx921fVREok8tacnsvC/u5YTZcOoQt6bjaQOSiSXelsL9srDeaHL6VmJFIDYZ/6y4zpANNY5g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hp37p3n07ql4qr5j0jzw2sldkc4z7jspnnv5xd","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","kitpeanutr5",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApE7CoafIZpFWoUUjxE9QLVz5OXE2wtMFYcNriiC1KJQ"},"signature":"h2LntVQHK57MkqFvL31QI1mVtIxd+50IHzDZDb3gbHAZkwO4aNNrewLnwpGoaKcjuGlep7RQYAZ+EtOLK0S6cw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hp37p3n07ql4qr5j0jzw2sldkc4z7jspnnv5xd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["kitpeanutr5"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApE7CoafIZpFWoUUjxE9QLVz5OXE2wtMFYcNriiC1KJQ"},"signature":"ja9WkglRDHa2Wivsl8c2zDuEdxgB3wvl4FQwvDFIRIwPh0MelRGUarqn8+xmwpg6vhoiy27LEtR/wbBBOLdlcQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hp37p3n07ql4qr5j0jzw2sldkc4z7jspnnv5xd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1696","kitpeanutr5","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApE7CoafIZpFWoUUjxE9QLVz5OXE2wtMFYcNriiC1KJQ"},"signature":"wIjT+LpH0o2kW17nwXTtk2rwU3amAyR7p1VLLCQC529UbZYhZM09rwcNFvkiHaXJbt0/w8fjltR67PSfTKbEEA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hp37p3n07ql4qr5j0jzw2sldkc4z7jspnnv5xd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1696","1","1","g1hp37p3n07ql4qr5j0jzw2sldkc4z7jspnnv5xd"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApE7CoafIZpFWoUUjxE9QLVz5OXE2wtMFYcNriiC1KJQ"},"signature":"U66GqbkXIfEbeEBf53cZWAH5h507umiq+Bmg45Qf/1VOSii9dZZuFJNoY0d9K34CP7NykgcU1eBQ6XlBp4b9XA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1npx98eje98dv3n3v9c5rzavs73k2v08auglmd6","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"SLIFyPYEPKiXpH8ewTx4aQ5dpcoZXQpwEpdZri47QuUthPLbAxi3lLH/wUFrows6Izr/1e+jPPZlSKf+GxZclw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1npx98eje98dv3n3v9c5rzavs73k2v08auglmd6","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","valveislandn3",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2E7h0poM0lz+Sjnk8FCHnC6P3FbMFQAA9vHdY2qGeHv"},"signature":"RMhVJCH1rH6K1dVlByoE8Ug8pIzN6sj7oY1aFISWdYdjrxwjbatG1ItCZAhp6OfDcSyzHg2/n8UBnjXeGoXBag=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1npx98eje98dv3n3v9c5rzavs73k2v08auglmd6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["valveislandn3"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2E7h0poM0lz+Sjnk8FCHnC6P3FbMFQAA9vHdY2qGeHv"},"signature":"s42D+SXWJoh4hvLWBTHDW/ERRIQs5rKe9CVc6VKIr0kbNnSDVsHclZDpVzyPtjykV2C2roLk9LAoczFose1XQg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1npx98eje98dv3n3v9c5rzavs73k2v08auglmd6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1697","valveislandn3","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2E7h0poM0lz+Sjnk8FCHnC6P3FbMFQAA9vHdY2qGeHv"},"signature":"xvhrZR3BjmIc6fY8UKy7CP3hPVNoGcIt7tJDj3mbKdAjq2sbf4HPUfdPLxCU34qSLeh0N4Nc+DEtRnlzDgiHIw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1npx98eje98dv3n3v9c5rzavs73k2v08auglmd6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1697","1","1","g1npx98eje98dv3n3v9c5rzavs73k2v08auglmd6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2E7h0poM0lz+Sjnk8FCHnC6P3FbMFQAA9vHdY2qGeHv"},"signature":"YT/v1pcPcWbQaX48sv5vu5ZGkiWCVHAuOsdvBlp9u4V2yZRPTsI0MQCn+IxY8Fd+46X8MhhAGd8gaSoO41nuUA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1scuc7fglaut4jak4wza2uw49vjqs0j0uut9ghs","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"egLyJsXNeoauDBAirLenDrArolJUAhskgnd5mrBzZBJCfS39ODekG+tRzdqjm1tgQ4dMl6Emh23Woqvk5pt3OQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1scuc7fglaut4jak4wza2uw49vjqs0j0uut9ghs","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","juniorpanicak",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"At+EXw09Jv6p7T9054ZiSEhZtbBnkElu7fbQW+Em6ymq"},"signature":"BNcqfsGfAFC04KrBIUE4/ZnBS4c12FdJdrN1E31205lB+T9UWWhaOii9hULvGsYleL7RQC5puECoPpDcnq8IGQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1scuc7fglaut4jak4wza2uw49vjqs0j0uut9ghs","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["juniorpanicak"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"At+EXw09Jv6p7T9054ZiSEhZtbBnkElu7fbQW+Em6ymq"},"signature":"RIFwTuo12RmaMXxAFXn8tIve/ZiSWgGpvAyXE4OMmeERPwMGsTzc6//JO8XmI/MHHRV2Cat9qZw6DKI7tmC5yQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1scuc7fglaut4jak4wza2uw49vjqs0j0uut9ghs","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1698","juniorpanicak","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"At+EXw09Jv6p7T9054ZiSEhZtbBnkElu7fbQW+Em6ymq"},"signature":"i3N3RXwYhIEf2JlZtBWXYI2S7D69x+VO4YTRNDkFviw2msH09bfVyVWlxRxOelycwVDtrzopsx4GvbwHNpL9rg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1scuc7fglaut4jak4wza2uw49vjqs0j0uut9ghs","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1698","1","1","g1scuc7fglaut4jak4wza2uw49vjqs0j0uut9ghs"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"At+EXw09Jv6p7T9054ZiSEhZtbBnkElu7fbQW+Em6ymq"},"signature":"we00gJAvjkqPCnac9wnVG6w1TzDVh4sHurRf9ZmKmQ4ihWqf9cLJqvR4Nx7Q7XaPaGJ4REV5LqF2zDadYa/10w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g19kv4qqtvnh77tly9gjp8yylt0l8lx0sravsx9k","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"p9Og2JdDKY7CKJpq4srblmQ7pdP4bMgMw58mBLJj+llUQBXXDCb8AhNFhfU9sSooWO+9XZz8vcH/T7VATfXutw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19kv4qqtvnh77tly9gjp8yylt0l8lx0sravsx9k","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","illegalonce7t",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwYF2TnkeNo4UpiUlH0ITUEoqvhGK8z2683bo2a7vXUW"},"signature":"T3Mk0q3R433LKJZaVeNm6MsgSImf8OGfnHqApH8A8K46LSwUWz8bsVVRdsTXIaqEpMi1VKrAMZL2K4XKMYbQWw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19kv4qqtvnh77tly9gjp8yylt0l8lx0sravsx9k","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["illegalonce7t"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwYF2TnkeNo4UpiUlH0ITUEoqvhGK8z2683bo2a7vXUW"},"signature":"LkkLqbunb1FtZ6J5osmjJKX0adnbBYVpfvu+/+BDlG1K88HW9weAdRHiKRS33CdrGFH3zbLXB6FQO/MrtXuHJw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19kv4qqtvnh77tly9gjp8yylt0l8lx0sravsx9k","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1699","illegalonce7t","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwYF2TnkeNo4UpiUlH0ITUEoqvhGK8z2683bo2a7vXUW"},"signature":"ZobUS98xmEgkU0UYWKoD9UoDMkvu5ywKhbyA9m8LwNYPMOx3hQLfikGzPC1jzPWbJRC60hd5fSESVI9Bh0jMTA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19kv4qqtvnh77tly9gjp8yylt0l8lx0sravsx9k","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1699","1","1","g19kv4qqtvnh77tly9gjp8yylt0l8lx0sravsx9k"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwYF2TnkeNo4UpiUlH0ITUEoqvhGK8z2683bo2a7vXUW"},"signature":"q0vR4s3IgDg0Odu7p5vie2qIrx0qE59P/9DjdwZZOLx0s9/0Afasq2hvoOyxczhj2SNAMsuw7iSzzDj3jT1N6A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1key67aqx5dmzlm2lr206aef8a0k4xgv3r9hwaj","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Bdcd8WUFfdR7H5btw/6fX7/0VUjROiJX/xabfn7FtzRUZCTdz4iaIvuqmVNTHk8VrguA0dmLx+Nquo29lg1w7Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1key67aqx5dmzlm2lr206aef8a0k4xgv3r9hwaj","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","oilalienm2",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au+6HlJk9JiV0jYn+8E45vIuwSFSStqa4n2IfZK6jjiB"},"signature":"AOZcxH1oCA3QafEn8tADRP5JPySGd7QJO18yLkABotII+FaEGPepaxQQAudi1y9S4k692RlMMA/x1UkuUqYQCA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1key67aqx5dmzlm2lr206aef8a0k4xgv3r9hwaj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["oilalienm2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au+6HlJk9JiV0jYn+8E45vIuwSFSStqa4n2IfZK6jjiB"},"signature":"dlsCRJXOuDpnQ5PymWhuxpqWiDW3L7b8C9r048ynGU8swqkwq6tpiciyY4+zdZH+eQ6aCMd9PmIgZTam9HY5lw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1key67aqx5dmzlm2lr206aef8a0k4xgv3r9hwaj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1700","oilalienm2","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au+6HlJk9JiV0jYn+8E45vIuwSFSStqa4n2IfZK6jjiB"},"signature":"PEBrMFyoSqu5NEPOAW6nKLM988egon3NEMkt3nRxwNRvcIeW0eILqQbhd5OWRuK9S3UFy4uQA5uWU1VNGi7soQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1key67aqx5dmzlm2lr206aef8a0k4xgv3r9hwaj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1700","1","1","g1key67aqx5dmzlm2lr206aef8a0k4xgv3r9hwaj"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au+6HlJk9JiV0jYn+8E45vIuwSFSStqa4n2IfZK6jjiB"},"signature":"J6muwKmzYLD/lfKkqjVRfiOqfwyOGUJtqKIGIXk9HQc3TmQET5bjVl6HeZpi9mYZnZRwOXFadU1B7x+IEkZ1Ig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1zlufzumxtwxnsfczaqhdpt2xed0udreu0nhczs","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ZYAHRp8B6d8UoIsSRFqbU8tnXO4BHPgTOa94/jPCLV0Xn54a+HJM3LYPIGW8/XDWYJ4uuSkPO+xSgirKBNB6Uw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zlufzumxtwxnsfczaqhdpt2xed0udreu0nhczs","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","wisdomhalffc",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au2vcH++GdsF01KBEkMzvL/6JUsFuMHFRGOGaGg1z2Tz"},"signature":"dVYigT3i3Yr1Qn3wOwg4qMNgQYVzgBF9wYuA/cruQbsOuG0+IwNLGIXEnSONEaYoIWV2Otwquc2wHX1xRzMPsQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zlufzumxtwxnsfczaqhdpt2xed0udreu0nhczs","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["wisdomhalffc"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au2vcH++GdsF01KBEkMzvL/6JUsFuMHFRGOGaGg1z2Tz"},"signature":"ThXBQsrvDhsgG0hsboddoO1WcAnnhkOhyIHl2i3BDZh/sDhUZnHRDJxqmX/EEPFTzYp9VMEntFB/v90qFt6f6w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zlufzumxtwxnsfczaqhdpt2xed0udreu0nhczs","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1701","wisdomhalffc","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au2vcH++GdsF01KBEkMzvL/6JUsFuMHFRGOGaGg1z2Tz"},"signature":"dtF20nOwljtDIhHy5fr+g9fyg7ys/7Ikz9VnFTFevtdZUiqr39f1kNP84QbZZ5fUDtVJ7Ubyk+V3AZb+y8fBxQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zlufzumxtwxnsfczaqhdpt2xed0udreu0nhczs","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1701","1","1","g1zlufzumxtwxnsfczaqhdpt2xed0udreu0nhczs"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au2vcH++GdsF01KBEkMzvL/6JUsFuMHFRGOGaGg1z2Tz"},"signature":"LtjzSSuV6utsNM6ZEXf4QZO9smVoisI3cpR+i8mCLsZGd8/UUlZsPawzK1WefiZueyC5CIDT5LoFoerP4wpr9A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1xvjc0c0ahht7w3uerll9eg5gqv9wsahk58q6kh","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"e/c2VmFTK6iKCC/xvPSeisOQoFaEA1UuLBi0a7Pf+jFIg9YVACRtr/uGyu6DjzjBgGmbUDzam8LAJOxPU8CvZw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"hello","Path":"gno.land/r/demo/hello","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"rQMxi+TeAXOE7zcJxp3S90AxTPzBeYL67HDoXQLi6cNlMH+n17cWrY6vqJsZLvHOQFNkYTxhyseIkq5tSFAg4Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"2WQXvhmVZqR1+l/16CSDBxOQupQOXTZj6aCbYtXcnOQ37nn3xVGdpdUbgkK7pbigMea138pPm+onsYkfZv1MuA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1t4du52tfdfcnsrhlkfxhulr3r2a8a965zs07tx","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoWl1n0gPDWHmsIdghOux9H5dKTvm5LHh/7c9EXMTS0y"},"signature":"jF3ZAamqC9d+zrD6iu7X+wU3GnNYSM/MZHv/x9Pwp9dju5frxI53PB8S5hQ0GWPb+/sI01F+btM6P6pckifWJQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"2000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"8Yls2z+u06junqmmQik2U5OLXtM7j+W71QQW3+7qxS1czh4wxJSelpZEeMVwm9ny2bt+vMNlQSGdRBkyf5l/Xw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1t4du52tfdfcnsrhlkfxhulr3r2a8a965zs07tx","2"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"TJEQDbjjDhpVcAdM1hneD1nirrju16mF7JpVZraCB4gXggSral0jqmasI+FGAd1WFhRF/2Ue1xclYonL0Iwm8Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"3000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"aM1Xyeypr/9hjdA4xSamRUfqTn+vZOFOWWH6BK38229ituA9twRSDdpSm6zL+k5K1OEKDMrMjjqlVzQyZLUtzA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"DAVqhFe7mq181D9vl6p4xa6FBAGnXn05ldZHki8qYwN9Vwe04a3N46Lqd2zPD2imaLtIgrZJ0rDWxGMcM/ZMng=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"TKmW0b0t79VeHFT7MLvOb3UB52JoDr0lXIsIYXnQhHpnEVM76L+JKRMj9Zz5zZtF8QmMBiNjS5KxwMfAaVIp6Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"RYpXC7ZGPjHIueT0jcbGGfX2ej5C9ftlaAW7Wlem7E0dUXx/vopKhCeUK24TpOHV+6FCFl8xu0p0MVZNtobn7Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"o7DR2G+uRdeRj25ZIFGL6/TmazR+NI4HCsYYhAUaWexYhrpKiVzpkIc8tLevHViXWIStOMnhMpBnvn/J0vR/yg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"2000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"Sxp7NixKcNAAxycFbtL4b8CB/db66ozZK28rxKHJYcA6RxbI5HB5Gs666QZSexyHJF3wpCjzKhUfIv2R1Gr2bA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"2000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"lqPSU8OQkDN1gSyHFha85s1vSadveGZGSaLEnCGnL/luKldG4mC1XvVaAlC8Vb529yio44TD4tOTssnrgQBvYw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"2000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"fbJoeP4n0Apiw4AkBtbRQaNDhSLjTBPe//RzNj3aKYp4YMA8D40ZeftqfGoctsFa6NCrgNcuuVj29Ndc+5/wyg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"Kg53HUNgCxStwxmNqtXQZrYmlR6e7EENckw5ycm4SnAOjlWqmyOXZN9TV248vbEGIau6RGsZ9wQ4Er3EuF4h+w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"ub7UCD8FvQyowEUqSghG6k//PeAPyNNIC9mRcOIGRPUOMiUIWkLxGux1UTaK9BM3LXha0RXSjRvHIv4JRxPzsg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1t4du52tfdfcnsrhlkfxhulr3r2a8a965zs07tx","amount":"10000000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"VEKmlfpmPzYdbAkLn+IlOkvld5p62hd++6EuMcXGpLdo4JLzFtu5LX3Afh/DDCI9g65aaHkFI6BIbmA0/0dXgw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"SQbeJ+UVxSXWD6G+ORQOnkhixa7sX8Tj3ba7BqTQRfEvpGWcUNgyPjwOM9rZPJIprSPvwCyphI82Skrdvs5zJg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"62099989ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArADVPfUBrZVmlqmZWPWucRTe9gkJ9wJFyTszJoU5Ebi"},"signature":"lwmN/4mdhzPI+ApDhDv2SIAjqhJFUrY93OUPU7zxmNlP5VsrBYU/Mg9NPeVU5lwV96GqmcHSWxG+3MU2RB0Xqw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1hszy9yk8nq0jgs8tcrhj39j0r6llv0z82s30yf","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"uLoGGZD9jbujZk4NvQ86bYCyjNf44WnWiIRHPsatMZ9xU6545REiPRL7NFtZBOTWXntejQ6/Vbq7Crw0QgpyyQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g14uur3grrs2rd3gaykgckz06jsp4je7x3tl7f3r","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"mqjisbhDvW8+B30FFgBQGIn8gXMjiBa+7gRulcVV8pUuqcS4096MF6Fk06Rh9L7hoIp0RwVvsofP7a/jmtIpZw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1sde8f0lzs9ff45z9nkt08k2cn6ps2yqe6hmpd9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"qkugNoebBbBmHEWdJWKCTDxkiUucznpjeIvQqk9cvnUdE87VY2lDSdwg6nVOr0OTPCRsK+xvRCaAOD2+EHzYnQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1hc0ttt2zyyea84mw7cu5z6jdjvlj726jry95hw","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"u60fDUjkMt/mDsKo8mQUT7sE9o07lShQHQImoi5BijddlOpMPavRmdb7/rHnRm7r77VafATI4RIsO8GTXZT60w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fnakf9vrd6uqn8qdmp88yam4p0ngy572answ9f","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","1500"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3cWVULHSHC1mwK8o1vfJHKfNMvLEvKU/sHPQoFWRoey"},"signature":"SBHicbgwRZ7CBWI+tFzvSHzxSMH3k59EDkq3j9j3QA4YzYbXqq27QE1B5mSJafudgB8JZDfNVC/LtegqVqeUqQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1t4du52tfdfcnsrhlkfxhulr3r2a8a965zs07tx","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"EgN2AWk9DhKrGk5SySDXnNFsVqDyQL0GX4E8PgPwlJRlQ/Gq9/a8MGpZO7UxNzI9JDs1r1Xs0CP4O6LQB+eMdA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1kxa74mz8hul5tge3rvyep6epzhkf99x29zac7g","to_address":"g1fzjcyrhv7rtrpwhsd0mhl9n7ahxm0v34p9w5kn","amount":"2000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/rLJAbJ6FDKQm3GA5RLimerzN2dJSqFzOpUECkD7J3O"},"signature":"4wSbHsd9HYsn04l0SYhTebwlUkDejy7mgZP5/RGuPSApWcSfL5j2iMkA011Ybgr7xYxR9kQmq9oPUTfkX3/m6Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1fzjcyrhv7rtrpwhsd0mhl9n7ahxm0v34p9w5kn","to_address":"g1kxa74mz8hul5tge3rvyep6epzhkf99x29zac7g","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7BGCHnC+0EaBkHciQ6D+fFVnlumBrn4QABY4FhxNlab"},"signature":"g1DZSdfIvaJkDlz4S8wvOfCREcA2RmzYf0XnKDtwZ7xJcbab7uZhsgwAbYCGiGYePCkzW7PIBEmzQ2krVjBopw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1kxa74mz8hul5tge3rvyep6epzhkf99x29zac7g","to_address":"g1fzjcyrhv7rtrpwhsd0mhl9n7ahxm0v34p9w5kn","amount":"98000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/rLJAbJ6FDKQm3GA5RLimerzN2dJSqFzOpUECkD7J3O"},"signature":"KU7SNvWu9ybnP/Fp8pWtyTphxVu39wK7+v+XgzwCF3gN7xlYOlNj8Fh/e8kFRMY81xryinTXQ6nij94GI/5ulQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ckn395mpttp0vupgtratyufdaakgh8jgkmr3ym","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["test_board"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aszr4WZZtoqvpWfpKQFXAT8Bx/fH234W2oIq4eQnTnbI"},"signature":"wck9L/nrzSmYaIcLzDw2gY8jwf2cJQ4jZqiXedJjg2c2LyGib/3a8Ry4qGDCc1qRIpbsqJxgJAgH1rVLfsKJjA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ckn395mpttp0vupgtratyufdaakgh8jgkmr3ym","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["test_board"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aszr4WZZtoqvpWfpKQFXAT8Bx/fH234W2oIq4eQnTnbI"},"signature":"qY4HLqP5AWsXnlh/lTAjqUo2kYPmaJ7jVOLnEr1NOl1dguExrprjBitPjkqa8EQOeotoqSZN+BO+DlpU13l0QQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ckn395mpttp0vupgtratyufdaakgh8jgkmr3ym","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["test_board"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aszr4WZZtoqvpWfpKQFXAT8Bx/fH234W2oIq4eQnTnbI"},"signature":"ZKyk6YzX+RFGm/DVJgOr46lRyLk0BhNt9h0JrCf1umV71yQM9obgHqR0Ba4d+Gl9/ymZK8xdLmryY1bfcCP/iw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ckn395mpttp0vupgtratyufdaakgh8jgkmr3ym","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["thisismybtest"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aszr4WZZtoqvpWfpKQFXAT8Bx/fH234W2oIq4eQnTnbI"},"signature":"GNMrYIpQ8zzxDGSCH8cGHFdodtXkx7xxh9jcUNk1LhwhFcnaFntzE+fNIioXe8AixPlhuvUwcH2XsL3XewRVPQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"NOlbBM9tGAqvQQ4CWWvMsLygK+4JWDUMG+ebal1yqtcTGUCkPvhni11k+NZrI1lJCkgEYk4/dCbvbNUdw8zIYg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1rz93546e2sx8g0dap0t66gx70sqk5r2d33jtfu","to_address":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","amount":"30000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzaGtCsAUkJ/y8wtbXQk89FobK6T2i5bTDsw44zoe9ZB"},"signature":"J8SmY6Ug1QvmeROlcWz93h3Ri20Rnh78gaf0Jqh68Rd2O2KgTRON4v5b/mxAIxSO7j01u6/Z5oSA+S24phdoVQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","package":{"Name":"gnodao","Path":"gno.land/r/demo/gnodao_v01","Files":[{"Name":"gnodao.gno","Body":"package gnodao\n\nimport (\n\t\"fmt\"\n\t\"gno.land/p/demo/avl\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype VoteOption uint32\n\nconst (\n\tYES          VoteOption = 0 // Indicates approval of the proposal in its current form.\n\tNO           VoteOption = 1 // Indicates disapproval of the proposal in its current form.\n\tNO_WITH_VETO VoteOption = 2 // Indicates stronger opposition to the proposal than simply voting No. Not available for SuperMajority-typed proposals as a simple No of 1/3 out of total votes would result in the same outcome.\n\tABSTAIN      VoteOption = 3 // Indicates that the voter is impartial to the outcome of the proposal. Although Abstain votes are counted towards the quorum, they're excluded when calculating the ratio of other voting options above.\n)\n\n// GNODAO VOTE\ntype Vote struct {\n\taddress   std.Address // address of the voter\n\ttimestamp uint64      // block timestamp of the vote\n\toption    VoteOption  // vote option\n}\n\ntype DAO struct {\n\tid               uint64\n\turi              string       // DAO homepage link\n\tmetadata         string       // DAO metadata reference link\n\tfunds            uint64       // DAO managing funds\n\tdepositHistory   []string     // deposit history - reserved for later use\n\tspendHistory     []string     // spend history - reserved for later use\n\tpermissions      []string     // permissions managed on DAO - reserved for later use\n\tpermMap          *avl.MutTree // permission map - reserved for later use\n\tvotingPowers     *avl.MutTree\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalStatus uint32\n\nconst (\n\tNIL           ProposalStatus = 0\n\tVOTING_PERIOD ProposalStatus = 1\n\tPASSED        ProposalStatus = 2\n\tREJECTED      ProposalStatus = 3\n\tFAILED        ProposalStatus = 4\n)\n\nfunc (s ProposalStatus) String() string {\n\tswitch s {\n\tcase NIL:\n\t\treturn \"Nil\"\n\tcase VOTING_PERIOD:\n\t\treturn \"VotingPeriod\"\n\tcase PASSED:\n\t\treturn \"Passed\"\n\tcase REJECTED:\n\t\treturn \"Rejected\"\n\tcase FAILED:\n\t\treturn \"Failed\"\n\t}\n\treturn \"\"\n}\n\ntype VotingPower struct {\n\taddress string\n\tpower   uint64\n}\n\ntype Proposal struct {\n\tdaoId        uint64         // dao id of the proposal\n\tid           uint64         // unique id assigned for each proposal\n\ttitle        string         // proposal title\n\tsummary      string         // proposal summary\n\tspendAmount  uint64         // amount of tokens to spend as part the proposal\n\tspender      std.Address    // address to receive spending tokens\n\tvpUpdates    []VotingPower  // updates on voting power - optional\n\tnewMetadata  string         // new metadata for the DAO - optional\n\tnewURI       string         // new URI for the DAO - optional\n\tsubmitTime   uint64         // proposal submission time\n\tvoteEndTime  uint64         // vote end time for the proposal\n\tstatus       ProposalStatus // StatusNil | StatusVotingPeriod | StatusPassed | StatusRejected | StatusFailed\n\tvotes        *avl.MutTree   // votes on the proposal\n\tvotingPowers []uint64       // voting power sum per voting option\n}\n\n// GNODAO STATE\nvar daos []DAO\nvar proposals [][]Proposal\n\nfunc getDAOVotingPower(daoId uint64, address string) uint64 {\n\tif len(daos) \u003c= int(daoId) {\n\t\treturn 0\n\t}\n\tres, ok := daos[daoId].votingPowers.Get(address)\n\tif ok {\n\t\treturn res.(uint64)\n\t}\n\treturn 0\n}\n\nfunc IsDAOMember(daoId uint64, address std.Address) bool {\n\treturn getDAOVotingPower(daoId, address.String()) \u003e 0\n}\n\nfunc getVote(daoId, proposalId uint64, address std.Address) (Vote, bool) {\n\tif int(daoId) \u003e= len(daos) {\n\t\treturn Vote{}, false\n\t}\n\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\treturn Vote{}, false\n\t}\n\n\tvote, ok := proposals[daoId][proposalId].votes.Get(address.String())\n\tif ok {\n\t\treturn vote.(Vote), true\n\t}\n\treturn Vote{}, false\n}\n\n// GNODAO FUNCTIONS\nfunc CreateDAO(\n\turi string,\n\tmetadata string,\n\tvotingPowers []VotingPower,\n\tvotingPeriod uint64,\n\tvoteQuorum uint64,\n\tthreshold uint64,\n\tvetoThreshold uint64,\n) {\n\tdaoId := uint64(len(daos))\n\tdaos = append(daos, DAO{\n\t\tid:               daoId,\n\t\turi:              uri,\n\t\tmetadata:         metadata,\n\t\tfunds:            0,\n\t\tdepositHistory:   []string{},\n\t\tspendHistory:     []string{},\n\t\tpermissions:      []string{},\n\t\tpermMap:          avl.NewMutTree(),\n\t\tvotingPowers:     avl.NewMutTree(),\n\t\ttotalVotingPower: 0,\n\t\tvotingPeriod:     votingPeriod,\n\t\tvoteQuorum:       voteQuorum,\n\t\tthreshold:        threshold,\n\t\tvetoThreshold:    vetoThreshold,\n\t})\n\n\ttotalVotingPower := uint64(0)\n\tfor _, vp := range votingPowers {\n\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\ttotalVotingPower += vp.power\n\t}\n\tdaos[daoId].totalVotingPower = totalVotingPower\n\tproposals = append(proposals, []Proposal{})\n\t// TODO: emit events\n}\n\nfunc CreateProposal(\n\tdaoId uint64,\n\ttitle, summary string,\n\tspendAmount uint64, spender std.Address,\n\tvpUpdates []VotingPower,\n\tnewMetadata string,\n\tnewURI string,\n) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a dao member\")\n\t}\n\n\tproposals[daoId] = append(proposals[daoId], Proposal{\n\t\tdaoId:        daoId,\n\t\tid:           uint64(len(proposals[daoId])),\n\t\ttitle:        title,\n\t\tsummary:      summary,\n\t\tspendAmount:  spendAmount,\n\t\tspender:      spender,\n\t\tvpUpdates:    vpUpdates,\n\t\tnewMetadata:  newMetadata,\n\t\tnewURI:       newURI,\n\t\tsubmitTime:   uint64(time.Now().Unix()),\n\t\tvoteEndTime:  uint64(time.Now().Unix()) + daos[daoId].votingPeriod,\n\t\tstatus:       VOTING_PERIOD,\n\t\tvotes:        avl.NewMutTree(),\n\t\tvotingPowers: []uint64{0, 0, 0, 0}, // initiate as zero for 4 vote types\n\t})\n}\n\nfunc VoteProposal(daoId, proposalId uint64, option VoteOption) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// if invalid proposal, panic\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\n\t// if vote end time is reached panic\n\tif time.Now().Unix() \u003e int64(proposals[daoId][proposalId].voteEndTime) {\n\t\tpanic(\"vote end time reached\")\n\t}\n\n\t// Original vote cancel\n\tcallerVotingPower := getDAOVotingPower(daoId, caller.String())\n\tvote, ok := getVote(daoId, proposalId, caller)\n\tif ok {\n\t\tif proposals[daoId][proposalId].votingPowers[int(vote.option)] \u003e callerVotingPower {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] -= callerVotingPower\n\t\t} else {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] = 0\n\t\t}\n\t}\n\n\t// Create a vote\n\tproposals[daoId][proposalId].votes.Set(caller.String(), Vote{\n\t\taddress:   caller,\n\t\ttimestamp: uint64(time.Now().Unix()),\n\t\toption:    option,\n\t})\n\n\t// Voting power by option update for new vote\n\tproposals[daoId][proposalId].votingPowers[int(option)] += callerVotingPower\n}\n\n// TODO: handle voting power change during voting period for other proposal\n// TODO: experiment with gas limit\nfunc TallyAndExecute(daoId, proposalId uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// validation for proposalId\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\tdao := daos[daoId]\n\tproposal := proposals[daoId][proposalId]\n\tvotingPowers := proposal.votingPowers\n\n\tif time.Now().Unix() \u003c int64(proposal.voteEndTime) {\n\t\tpanic(\"proposal is in voting period\")\n\t}\n\n\t// reference logic for tally - https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/keeper/tally.go\n\ttotalVotes := votingPowers[YES] + votingPowers[NO] + votingPowers[NO_WITH_VETO] + votingPowers[ABSTAIN]\n\tif totalVotes \u003c dao.totalVotingPower*dao.voteQuorum/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If no one votes (everyone abstains), proposal rejected\n\tif totalVotes == votingPowers[ABSTAIN] {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/3 of voters veto, proposal rejected\n\tvetoThreshold := dao.vetoThreshold\n\tif votingPowers[NO_WITH_VETO] \u003e totalVotes*vetoThreshold/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote Yes, proposal passes\n\tthreshold := dao.threshold\n\tif votingPowers[YES] \u003e (totalVotes-votingPowers[ABSTAIN])*threshold/100 {\n\t\tproposals[daoId][proposalId].status = PASSED\n\n\t\t// TODO: spend coins when spendAmount is positive \u0026 spender is a valid address\n\t\tif proposal.spendAmount \u003e 0 {\n\t\t\tif daos[daoId].funds \u003e= proposal.spendAmount {\n\t\t\t\tdaos[daoId].funds -= proposal.spendAmount\n\t\t\t} else {\n\t\t\t\tproposals[daoId][proposalId].status = FAILED\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tif proposal.newMetadata != \"\" {\n\t\t\tdaos[daoId].metadata = proposal.newMetadata\n\t\t}\n\n\t\tif proposal.newURI != \"\" {\n\t\t\tdaos[daoId].uri = proposal.newURI\n\t\t}\n\n\t\tfor _, vp := range proposal.vpUpdates {\n\t\t\tdaos[daoId].totalVotingPower -= getDAOVotingPower(daoId, vp.address)\n\t\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\t\tdaos[daoId].totalVotingPower += vp.power\n\t\t}\n\n\t\t// TODO: contract does not own account that can hold coins - this is one of limitations\n\t\t// TODO: Adena Wallet from OnBloc - investigate on how they manage coins (swap - custody?)\n\t\t// Manual sending for funds (Address \u003c-\u003e Address) - Miloš Živković\n\t\t// https://github.com/gnolang/gno/blob/e392ab51bc05a5efbceaa8dbe395bac2e01ad808/tm2/pkg/crypto/keys/client/send.go#L109-L119\n\t\treturn\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote No, proposal rejected\n\tproposals[daoId][proposalId].status = REJECTED\n}\n\nfunc DepositDAO(daoId uint64, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// TODO: send coins from caller to DAO\n\t// TODO: verify received amount\n\t// daos[daoId].depositHistory = append(daos[daoId].depositHistory, Deposit{\n\t// \taddress: caller,\n\t// \tamount:  amount,\n\t// })\n}\n\nfunc GetDAO(daoId uint64) DAO {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\treturn daos[daoId]\n}\n\nfunc GetDAOs(startAfter, limit uint64) []DAO {\n\tmax := uint64(len(daos))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn daos[startAfter:max]\n}\n\nfunc GetProposal(daoId, proposalId uint64) Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\treturn proposals[daoId][proposalId]\n}\n\nfunc GetProposals(daoId, startAfter, limit uint64) []Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tmax := uint64(len(proposals[daoId]))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn proposals[daoId][startAfter:max]\n}\n\nfunc Render(path string) string {\n\treturn \"\"\n}\n"},{"Name":"gnodao_test.gno","Body":"package gnodao\n\nimport (\n\t\"fmt\"\n\t\"std\"\n\t\"testing\"\n\t\"time\"\n)\n\nvar caller std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnabcde\"\nvar caller1 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\"\nvar caller2 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\"\nvar daoMembers = []std.Address{\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnccccc\",\n}\nvar votingPowers = []VotingPower{\n\t{\n\t\taddress: daoMembers[0].String(),\n\t\tpower:   1,\n\t},\n\t{\n\t\taddress: daoMembers[1].String(),\n\t\tpower:   2,\n\t},\n\t{\n\t\taddress: daoMembers[2].String(),\n\t\tpower:   3,\n\t},\n}\n\nfunc assertPanic(t *testing.T, f func()) {\n\tdefer func() {\n\t\tif r := recover(); r == nil {\n\t\t\tt.Errorf(\"The code did not panic\")\n\t\t}\n\t}()\n\tf()\n}\n\nfunc TestIsDAOMember(t *testing.T) {\n\tdaos = []DAO{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\n\t// TODO: what package is ideal to use for checks?\n\tif IsDAOMember(0, caller) != false {\n\t\tt.Errorf(\"Should not be false\")\n\t}\n\tif IsDAOMember(0, caller1) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n\tif IsDAOMember(0, caller2) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n}\n\nfunc TestCreateDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\tif len(daos) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tif len(proposals) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tdao := daos[0]\n\tif dao.id != 0 {\n\t\tt.Errorf(\"first DAO id should be 0\")\n\t}\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"dao uri not set properly\")\n\t}\n\tif dao.metadata != \"https://metadata.gnodao1.org\" {\n\t\tt.Errorf(\"dao metadata not set properly\")\n\t}\n\tif dao.funds != 0 {\n\t\tt.Errorf(\"dao funds not set properly\")\n\t}\n\tif len(dao.depositHistory) != 0 {\n\t\tt.Errorf(\"dao deposit history not set properly\")\n\t}\n\tif len(dao.spendHistory) != 0 {\n\t\tt.Errorf(\"dao spend history not set properly\")\n\t}\n\tif len(dao.permissions) != 0 {\n\t\tt.Errorf(\"dao permissions not set properly\")\n\t}\n\tif dao.permMap == nil {\n\t\tt.Errorf(\"dao permission map not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 0 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller1.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller2.String()) != 2 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif dao.totalVotingPower != 6 {\n\t\tt.Errorf(\"totalVotingPower not set properly\")\n\t}\n\tif dao.votingPeriod != 86400*2 {\n\t\tt.Errorf(\"votingPeriod not set properly\")\n\t}\n\tif dao.voteQuorum != 30 {\n\t\tt.Errorf(\"voteQuorum not set properly\")\n\t}\n\tif dao.threshold != 10 {\n\t\tt.Errorf(\"threshold not set properly\")\n\t}\n\tif dao.vetoThreshold != 10 {\n\t\tt.Errorf(\"vetoThreshold not set properly\")\n\t}\n}\n\nfunc TestCreateProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\t})\n\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tproposal := proposals[0][0]\n\tif proposal.daoId != 0 {\n\t\tt.Errorf(\"proposal daoId should be 0\")\n\t}\n\tif proposal.id != 0 {\n\t\tt.Errorf(\"proposal id should be 0\")\n\t}\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"proposal title not set properly\")\n\t}\n\tif proposal.summary != \"Proposal to bootstrap DAO fund.\" {\n\t\tt.Errorf(\"proposal summary not set properly\")\n\t}\n\tif proposal.spendAmount != 0 {\n\t\tt.Errorf(\"proposal spendAmount not set properly\")\n\t}\n\tif proposal.spender != caller {\n\t\tt.Errorf(\"proposal spender not set properly\")\n\t}\n\tif len(proposal.vpUpdates) != 0 {\n\t\tt.Errorf(\"proposal vpUpdates not set properly\")\n\t}\n\tif proposal.newMetadata != \"\" {\n\t\tt.Errorf(\"proposal newMetadata not set properly\")\n\t}\n\tif proposal.newURI != \"\" {\n\t\tt.Errorf(\"proposal newURI not set properly\")\n\t}\n\tif proposal.submitTime != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"proposal submitTime not set properly\")\n\t}\n\tif proposal.voteEndTime != uint64(time.Now().Unix())+daos[0].votingPeriod {\n\t\tt.Errorf(\"proposal voteEndTime not set properly\")\n\t}\n\tif proposal.status != VOTING_PERIOD {\n\t\tt.Errorf(\"proposal status not set properly\")\n\t}\n\tif proposal.votes == nil {\n\t\tt.Errorf(\"proposal votes not set properly\")\n\t}\n\tif len(proposal.votingPowers) != 4 {\n\t\tt.Errorf(\"proposal votingPowers not set properly\")\n\t}\n}\n\nfunc TestVoteProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(1, 0, YES)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(0, 1, YES)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tVoteProposal(0, 0, YES)\n\t})\n\n\t// vote and check result is set properly\n\tstd.TestSetOrigCaller(caller1)\n\tVoteProposal(0, 0, YES)\n\tvote, found := getVote(0, 0, caller1)\n\tif !found {\n\t\tt.Errorf(\"proposal vote not set\")\n\t}\n\tif vote.address != caller1 {\n\t\tt.Errorf(\"vote address not set properly\")\n\t}\n\tif vote.timestamp != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"vote timestamp not set properly\")\n\t}\n\tif vote.option != YES {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 1 {\n\t\tt.Errorf(\"votePowers by vote option not set properly\")\n\t}\n\n\t// vote again with different option and check result\n\tVoteProposal(0, 0, NO)\n\tvote, found = getVote(0, 0, caller1)\n\tif vote.option != NO {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 0 {\n\t\tt.Errorf(\"votePowers for YES not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(NO)] != 1 {\n\t\tt.Errorf(\"votePowers for NO not set properly\")\n\t}\n\n\t// test vote end time already reached\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\t\tVoteProposal(0, 0, YES)\n\t})\n}\n\nfunc TestTallyAndExecute(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{\n\t\t{\n\t\t\taddress: caller.String(),\n\t\t\tpower:   1,\n\t\t},\n\t}, \"newMetadata.com\", \"newURI.com\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(1, 0)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 1)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tTallyAndExecute(0, 0)\n\t})\n\tassertPanic(t, func() { // vote end time not pass\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 0)\n\t})\n\n\t// vote end time to be reached\n\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\n\t// quorum not reached\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for vote quorum\")\n\t}\n\n\t// everyone abstains\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for all abstains\")\n\t}\n\n\t// more than 1/3 vote with NO_WITH_VETO\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower / 2\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = daos[0].totalVotingPower / 2\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for NO_WITH_VETO\")\n\t}\n\n\t// all YES vote\n\tproposals[0][0].votingPowers[ABSTAIN] = 0\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = 0\n\tproposals[0][0].votingPowers[YES] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != PASSED {\n\t\tt.Errorf(\"proposal should be PASSED\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif daos[0].metadata != \"newMetadata.com\" {\n\t\tt.Errorf(\"metadata not set properly\")\n\t}\n\tif daos[0].uri != \"newURI.com\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestDepositDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when not a dao member\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tDepositDAO(0, 100)\n\t})\n\n\t// not panics\n\tstd.TestSetOrigCaller(caller1)\n\tDepositDAO(0, 100)\n}\n\nfunc TestGetDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tGetDAO(100)\n\t})\n\n\t// success when valid dao id\n\tdao := GetDAO(0)\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestGetDAOs(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tgotDaos := GetDAOs(0, 10)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tCreateDAO(\"https://gnodao2.org\", \"https://metadata.gnodao2.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tgotDaos = GetDAOs(0, 0)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 10)\n\tif len(gotDaos) != 2 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 1)\n\tif len(gotDaos) != 1 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n}\n\nfunc TestGetProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tGetProposal(1, 0)\n\t})\n\n\t// panic when invalid proposal id\n\tassertPanic(t, func() {\n\t\tGetProposal(0, 1)\n\t})\n\n\t// success when valid dao id and proposal id\n\tproposal := GetProposal(0, 0)\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"title not set properly\")\n\t}\n}\n\nfunc TestGetProposals(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tassertPanic(t, func() { // invalid dao id\n\t\tGetProposals(0, 0, 10)\n\t})\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"proposal #1\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\tCreateProposal(0, \"proposal #2\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\tgotProposals := GetProposals(0, 0, 0)\n\tif len(gotProposals) != 0 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 10)\n\tif len(gotProposals) != 2 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 1)\n\tif len(gotProposals) != 1 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n}\n\nfunc TestRender(t *testing.T) {\n\tif Render(\"\") != \"\" {\n\t\tt.Errorf(\"Render function should empty\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"Yiw39HGBllVL6GsXJUYTuJt3yZO2yLZ83lRV0qSXFDprGRaGnmNkyu0e0kPozXTT9dRqjU+OF9QGwzhR9MfTng=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","package":{"Name":"gnodao","Path":"gno.land/r/demo/gnodao_v01","Files":[{"Name":"gnodao.gno","Body":"package gnodao\n\nimport (\n\t\"gno.land/p/demo/avl\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype VoteOption uint32\n\nconst (\n\tYES          VoteOption = 0 // Indicates approval of the proposal in its current form.\n\tNO           VoteOption = 1 // Indicates disapproval of the proposal in its current form.\n\tNO_WITH_VETO VoteOption = 2 // Indicates stronger opposition to the proposal than simply voting No. Not available for SuperMajority-typed proposals as a simple No of 1/3 out of total votes would result in the same outcome.\n\tABSTAIN      VoteOption = 3 // Indicates that the voter is impartial to the outcome of the proposal. Although Abstain votes are counted towards the quorum, they're excluded when calculating the ratio of other voting options above.\n)\n\n// GNODAO VOTE\ntype Vote struct {\n\taddress   std.Address // address of the voter\n\ttimestamp uint64      // block timestamp of the vote\n\toption    VoteOption  // vote option\n}\n\ntype DAO struct {\n\tid               uint64\n\turi              string       // DAO homepage link\n\tmetadata         string       // DAO metadata reference link\n\tfunds            uint64       // DAO managing funds\n\tdepositHistory   []string     // deposit history - reserved for later use\n\tspendHistory     []string     // spend history - reserved for later use\n\tpermissions      []string     // permissions managed on DAO - reserved for later use\n\tpermMap          *avl.MutTree // permission map - reserved for later use\n\tvotingPowers     *avl.MutTree\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalStatus uint32\n\nconst (\n\tNIL           ProposalStatus = 0\n\tVOTING_PERIOD ProposalStatus = 1\n\tPASSED        ProposalStatus = 2\n\tREJECTED      ProposalStatus = 3\n\tFAILED        ProposalStatus = 4\n)\n\nfunc (s ProposalStatus) String() string {\n\tswitch s {\n\tcase NIL:\n\t\treturn \"Nil\"\n\tcase VOTING_PERIOD:\n\t\treturn \"VotingPeriod\"\n\tcase PASSED:\n\t\treturn \"Passed\"\n\tcase REJECTED:\n\t\treturn \"Rejected\"\n\tcase FAILED:\n\t\treturn \"Failed\"\n\t}\n\treturn \"\"\n}\n\ntype VotingPower struct {\n\taddress string\n\tpower   uint64\n}\n\ntype Proposal struct {\n\tdaoId        uint64         // dao id of the proposal\n\tid           uint64         // unique id assigned for each proposal\n\ttitle        string         // proposal title\n\tsummary      string         // proposal summary\n\tspendAmount  uint64         // amount of tokens to spend as part the proposal\n\tspender      std.Address    // address to receive spending tokens\n\tvpUpdates    []VotingPower  // updates on voting power - optional\n\tnewMetadata  string         // new metadata for the DAO - optional\n\tnewURI       string         // new URI for the DAO - optional\n\tsubmitTime   uint64         // proposal submission time\n\tvoteEndTime  uint64         // vote end time for the proposal\n\tstatus       ProposalStatus // StatusNil | StatusVotingPeriod | StatusPassed | StatusRejected | StatusFailed\n\tvotes        *avl.MutTree   // votes on the proposal\n\tvotingPowers []uint64       // voting power sum per voting option\n}\n\n// GNODAO STATE\nvar daos []DAO\nvar proposals [][]Proposal\n\nfunc getDAOVotingPower(daoId uint64, address string) uint64 {\n\tif len(daos) \u003c= int(daoId) {\n\t\treturn 0\n\t}\n\tres, ok := daos[daoId].votingPowers.Get(address)\n\tif ok {\n\t\treturn res.(uint64)\n\t}\n\treturn 0\n}\n\nfunc IsDAOMember(daoId uint64, address std.Address) bool {\n\treturn getDAOVotingPower(daoId, address.String()) \u003e 0\n}\n\nfunc getVote(daoId, proposalId uint64, address std.Address) (Vote, bool) {\n\tif int(daoId) \u003e= len(daos) {\n\t\treturn Vote{}, false\n\t}\n\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\treturn Vote{}, false\n\t}\n\n\tvote, ok := proposals[daoId][proposalId].votes.Get(address.String())\n\tif ok {\n\t\treturn vote.(Vote), true\n\t}\n\treturn Vote{}, false\n}\n\n// GNODAO FUNCTIONS\nfunc CreateDAO(\n\turi string,\n\tmetadata string,\n\tvotingPowers []VotingPower,\n\tvotingPeriod uint64,\n\tvoteQuorum uint64,\n\tthreshold uint64,\n\tvetoThreshold uint64,\n) {\n\tdaoId := uint64(len(daos))\n\tdaos = append(daos, DAO{\n\t\tid:               daoId,\n\t\turi:              uri,\n\t\tmetadata:         metadata,\n\t\tfunds:            0,\n\t\tdepositHistory:   []string{},\n\t\tspendHistory:     []string{},\n\t\tpermissions:      []string{},\n\t\tpermMap:          avl.NewMutTree(),\n\t\tvotingPowers:     avl.NewMutTree(),\n\t\ttotalVotingPower: 0,\n\t\tvotingPeriod:     votingPeriod,\n\t\tvoteQuorum:       voteQuorum,\n\t\tthreshold:        threshold,\n\t\tvetoThreshold:    vetoThreshold,\n\t})\n\n\ttotalVotingPower := uint64(0)\n\tfor _, vp := range votingPowers {\n\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\ttotalVotingPower += vp.power\n\t}\n\tdaos[daoId].totalVotingPower = totalVotingPower\n\tproposals = append(proposals, []Proposal{})\n\t// TODO: emit events\n}\n\nfunc CreateProposal(\n\tdaoId uint64,\n\ttitle, summary string,\n\tspendAmount uint64, spender std.Address,\n\tvpUpdates []VotingPower,\n\tnewMetadata string,\n\tnewURI string,\n) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a dao member\")\n\t}\n\n\tproposals[daoId] = append(proposals[daoId], Proposal{\n\t\tdaoId:        daoId,\n\t\tid:           uint64(len(proposals[daoId])),\n\t\ttitle:        title,\n\t\tsummary:      summary,\n\t\tspendAmount:  spendAmount,\n\t\tspender:      spender,\n\t\tvpUpdates:    vpUpdates,\n\t\tnewMetadata:  newMetadata,\n\t\tnewURI:       newURI,\n\t\tsubmitTime:   uint64(time.Now().Unix()),\n\t\tvoteEndTime:  uint64(time.Now().Unix()) + daos[daoId].votingPeriod,\n\t\tstatus:       VOTING_PERIOD,\n\t\tvotes:        avl.NewMutTree(),\n\t\tvotingPowers: []uint64{0, 0, 0, 0}, // initiate as zero for 4 vote types\n\t})\n}\n\nfunc VoteProposal(daoId, proposalId uint64, option VoteOption) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// if invalid proposal, panic\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\n\t// if vote end time is reached panic\n\tif time.Now().Unix() \u003e int64(proposals[daoId][proposalId].voteEndTime) {\n\t\tpanic(\"vote end time reached\")\n\t}\n\n\t// Original vote cancel\n\tcallerVotingPower := getDAOVotingPower(daoId, caller.String())\n\tvote, ok := getVote(daoId, proposalId, caller)\n\tif ok {\n\t\tif proposals[daoId][proposalId].votingPowers[int(vote.option)] \u003e callerVotingPower {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] -= callerVotingPower\n\t\t} else {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] = 0\n\t\t}\n\t}\n\n\t// Create a vote\n\tproposals[daoId][proposalId].votes.Set(caller.String(), Vote{\n\t\taddress:   caller,\n\t\ttimestamp: uint64(time.Now().Unix()),\n\t\toption:    option,\n\t})\n\n\t// Voting power by option update for new vote\n\tproposals[daoId][proposalId].votingPowers[int(option)] += callerVotingPower\n}\n\n// TODO: handle voting power change during voting period for other proposal\n// TODO: experiment with gas limit\nfunc TallyAndExecute(daoId, proposalId uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// validation for proposalId\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\tdao := daos[daoId]\n\tproposal := proposals[daoId][proposalId]\n\tvotingPowers := proposal.votingPowers\n\n\tif time.Now().Unix() \u003c int64(proposal.voteEndTime) {\n\t\tpanic(\"proposal is in voting period\")\n\t}\n\n\t// reference logic for tally - https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/keeper/tally.go\n\ttotalVotes := votingPowers[YES] + votingPowers[NO] + votingPowers[NO_WITH_VETO] + votingPowers[ABSTAIN]\n\tif totalVotes \u003c dao.totalVotingPower*dao.voteQuorum/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If no one votes (everyone abstains), proposal rejected\n\tif totalVotes == votingPowers[ABSTAIN] {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/3 of voters veto, proposal rejected\n\tvetoThreshold := dao.vetoThreshold\n\tif votingPowers[NO_WITH_VETO] \u003e totalVotes*vetoThreshold/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote Yes, proposal passes\n\tthreshold := dao.threshold\n\tif votingPowers[YES] \u003e (totalVotes-votingPowers[ABSTAIN])*threshold/100 {\n\t\tproposals[daoId][proposalId].status = PASSED\n\n\t\t// TODO: spend coins when spendAmount is positive \u0026 spender is a valid address\n\t\tif proposal.spendAmount \u003e 0 {\n\t\t\tif daos[daoId].funds \u003e= proposal.spendAmount {\n\t\t\t\tdaos[daoId].funds -= proposal.spendAmount\n\t\t\t} else {\n\t\t\t\tproposals[daoId][proposalId].status = FAILED\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tif proposal.newMetadata != \"\" {\n\t\t\tdaos[daoId].metadata = proposal.newMetadata\n\t\t}\n\n\t\tif proposal.newURI != \"\" {\n\t\t\tdaos[daoId].uri = proposal.newURI\n\t\t}\n\n\t\tfor _, vp := range proposal.vpUpdates {\n\t\t\tdaos[daoId].totalVotingPower -= getDAOVotingPower(daoId, vp.address)\n\t\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\t\tdaos[daoId].totalVotingPower += vp.power\n\t\t}\n\n\t\t// TODO: contract does not own account that can hold coins - this is one of limitations\n\t\t// TODO: Adena Wallet from OnBloc - investigate on how they manage coins (swap - custody?)\n\t\t// Manual sending for funds (Address \u003c-\u003e Address) - Miloš Živković\n\t\t// https://github.com/gnolang/gno/blob/e392ab51bc05a5efbceaa8dbe395bac2e01ad808/tm2/pkg/crypto/keys/client/send.go#L109-L119\n\t\treturn\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote No, proposal rejected\n\tproposals[daoId][proposalId].status = REJECTED\n}\n\nfunc DepositDAO(daoId uint64, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// TODO: send coins from caller to DAO\n\t// TODO: verify received amount\n\t// daos[daoId].depositHistory = append(daos[daoId].depositHistory, Deposit{\n\t// \taddress: caller,\n\t// \tamount:  amount,\n\t// })\n}\n\nfunc GetDAO(daoId uint64) DAO {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\treturn daos[daoId]\n}\n\nfunc GetDAOs(startAfter, limit uint64) []DAO {\n\tmax := uint64(len(daos))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn daos[startAfter:max]\n}\n\nfunc GetProposal(daoId, proposalId uint64) Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\treturn proposals[daoId][proposalId]\n}\n\nfunc GetProposals(daoId, startAfter, limit uint64) []Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tmax := uint64(len(proposals[daoId]))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn proposals[daoId][startAfter:max]\n}\n\nfunc Render(path string) string {\n\treturn \"\"\n}\n"},{"Name":"gnodao_test.gno","Body":"package gnodao\n\nimport (\n\t\"fmt\"\n\t\"std\"\n\t\"testing\"\n\t\"time\"\n)\n\nvar caller std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnabcde\"\nvar caller1 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\"\nvar caller2 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\"\nvar daoMembers = []std.Address{\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnccccc\",\n}\nvar votingPowers = []VotingPower{\n\t{\n\t\taddress: daoMembers[0].String(),\n\t\tpower:   1,\n\t},\n\t{\n\t\taddress: daoMembers[1].String(),\n\t\tpower:   2,\n\t},\n\t{\n\t\taddress: daoMembers[2].String(),\n\t\tpower:   3,\n\t},\n}\n\nfunc assertPanic(t *testing.T, f func()) {\n\tdefer func() {\n\t\tif r := recover(); r == nil {\n\t\t\tt.Errorf(\"The code did not panic\")\n\t\t}\n\t}()\n\tf()\n}\n\nfunc TestIsDAOMember(t *testing.T) {\n\tdaos = []DAO{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\n\t// TODO: what package is ideal to use for checks?\n\tif IsDAOMember(0, caller) != false {\n\t\tt.Errorf(\"Should not be false\")\n\t}\n\tif IsDAOMember(0, caller1) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n\tif IsDAOMember(0, caller2) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n}\n\nfunc TestCreateDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\tif len(daos) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tif len(proposals) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tdao := daos[0]\n\tif dao.id != 0 {\n\t\tt.Errorf(\"first DAO id should be 0\")\n\t}\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"dao uri not set properly\")\n\t}\n\tif dao.metadata != \"https://metadata.gnodao1.org\" {\n\t\tt.Errorf(\"dao metadata not set properly\")\n\t}\n\tif dao.funds != 0 {\n\t\tt.Errorf(\"dao funds not set properly\")\n\t}\n\tif len(dao.depositHistory) != 0 {\n\t\tt.Errorf(\"dao deposit history not set properly\")\n\t}\n\tif len(dao.spendHistory) != 0 {\n\t\tt.Errorf(\"dao spend history not set properly\")\n\t}\n\tif len(dao.permissions) != 0 {\n\t\tt.Errorf(\"dao permissions not set properly\")\n\t}\n\tif dao.permMap == nil {\n\t\tt.Errorf(\"dao permission map not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 0 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller1.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller2.String()) != 2 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif dao.totalVotingPower != 6 {\n\t\tt.Errorf(\"totalVotingPower not set properly\")\n\t}\n\tif dao.votingPeriod != 86400*2 {\n\t\tt.Errorf(\"votingPeriod not set properly\")\n\t}\n\tif dao.voteQuorum != 30 {\n\t\tt.Errorf(\"voteQuorum not set properly\")\n\t}\n\tif dao.threshold != 10 {\n\t\tt.Errorf(\"threshold not set properly\")\n\t}\n\tif dao.vetoThreshold != 10 {\n\t\tt.Errorf(\"vetoThreshold not set properly\")\n\t}\n}\n\nfunc TestCreateProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\t})\n\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tproposal := proposals[0][0]\n\tif proposal.daoId != 0 {\n\t\tt.Errorf(\"proposal daoId should be 0\")\n\t}\n\tif proposal.id != 0 {\n\t\tt.Errorf(\"proposal id should be 0\")\n\t}\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"proposal title not set properly\")\n\t}\n\tif proposal.summary != \"Proposal to bootstrap DAO fund.\" {\n\t\tt.Errorf(\"proposal summary not set properly\")\n\t}\n\tif proposal.spendAmount != 0 {\n\t\tt.Errorf(\"proposal spendAmount not set properly\")\n\t}\n\tif proposal.spender != caller {\n\t\tt.Errorf(\"proposal spender not set properly\")\n\t}\n\tif len(proposal.vpUpdates) != 0 {\n\t\tt.Errorf(\"proposal vpUpdates not set properly\")\n\t}\n\tif proposal.newMetadata != \"\" {\n\t\tt.Errorf(\"proposal newMetadata not set properly\")\n\t}\n\tif proposal.newURI != \"\" {\n\t\tt.Errorf(\"proposal newURI not set properly\")\n\t}\n\tif proposal.submitTime != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"proposal submitTime not set properly\")\n\t}\n\tif proposal.voteEndTime != uint64(time.Now().Unix())+daos[0].votingPeriod {\n\t\tt.Errorf(\"proposal voteEndTime not set properly\")\n\t}\n\tif proposal.status != VOTING_PERIOD {\n\t\tt.Errorf(\"proposal status not set properly\")\n\t}\n\tif proposal.votes == nil {\n\t\tt.Errorf(\"proposal votes not set properly\")\n\t}\n\tif len(proposal.votingPowers) != 4 {\n\t\tt.Errorf(\"proposal votingPowers not set properly\")\n\t}\n}\n\nfunc TestVoteProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(1, 0, YES)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(0, 1, YES)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tVoteProposal(0, 0, YES)\n\t})\n\n\t// vote and check result is set properly\n\tstd.TestSetOrigCaller(caller1)\n\tVoteProposal(0, 0, YES)\n\tvote, found := getVote(0, 0, caller1)\n\tif !found {\n\t\tt.Errorf(\"proposal vote not set\")\n\t}\n\tif vote.address != caller1 {\n\t\tt.Errorf(\"vote address not set properly\")\n\t}\n\tif vote.timestamp != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"vote timestamp not set properly\")\n\t}\n\tif vote.option != YES {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 1 {\n\t\tt.Errorf(\"votePowers by vote option not set properly\")\n\t}\n\n\t// vote again with different option and check result\n\tVoteProposal(0, 0, NO)\n\tvote, found = getVote(0, 0, caller1)\n\tif vote.option != NO {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 0 {\n\t\tt.Errorf(\"votePowers for YES not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(NO)] != 1 {\n\t\tt.Errorf(\"votePowers for NO not set properly\")\n\t}\n\n\t// test vote end time already reached\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\t\tVoteProposal(0, 0, YES)\n\t})\n}\n\nfunc TestTallyAndExecute(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{\n\t\t{\n\t\t\taddress: caller.String(),\n\t\t\tpower:   1,\n\t\t},\n\t}, \"newMetadata.com\", \"newURI.com\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(1, 0)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 1)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tTallyAndExecute(0, 0)\n\t})\n\tassertPanic(t, func() { // vote end time not pass\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 0)\n\t})\n\n\t// vote end time to be reached\n\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\n\t// quorum not reached\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for vote quorum\")\n\t}\n\n\t// everyone abstains\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for all abstains\")\n\t}\n\n\t// more than 1/3 vote with NO_WITH_VETO\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower / 2\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = daos[0].totalVotingPower / 2\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for NO_WITH_VETO\")\n\t}\n\n\t// all YES vote\n\tproposals[0][0].votingPowers[ABSTAIN] = 0\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = 0\n\tproposals[0][0].votingPowers[YES] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != PASSED {\n\t\tt.Errorf(\"proposal should be PASSED\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif daos[0].metadata != \"newMetadata.com\" {\n\t\tt.Errorf(\"metadata not set properly\")\n\t}\n\tif daos[0].uri != \"newURI.com\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestDepositDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when not a dao member\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tDepositDAO(0, 100)\n\t})\n\n\t// not panics\n\tstd.TestSetOrigCaller(caller1)\n\tDepositDAO(0, 100)\n}\n\nfunc TestGetDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tGetDAO(100)\n\t})\n\n\t// success when valid dao id\n\tdao := GetDAO(0)\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestGetDAOs(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tgotDaos := GetDAOs(0, 10)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tCreateDAO(\"https://gnodao2.org\", \"https://metadata.gnodao2.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tgotDaos = GetDAOs(0, 0)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 10)\n\tif len(gotDaos) != 2 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 1)\n\tif len(gotDaos) != 1 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n}\n\nfunc TestGetProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tGetProposal(1, 0)\n\t})\n\n\t// panic when invalid proposal id\n\tassertPanic(t, func() {\n\t\tGetProposal(0, 1)\n\t})\n\n\t// success when valid dao id and proposal id\n\tproposal := GetProposal(0, 0)\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"title not set properly\")\n\t}\n}\n\nfunc TestGetProposals(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tassertPanic(t, func() { // invalid dao id\n\t\tGetProposals(0, 0, 10)\n\t})\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"proposal #1\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\tCreateProposal(0, \"proposal #2\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\tgotProposals := GetProposals(0, 0, 0)\n\tif len(gotProposals) != 0 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 10)\n\tif len(gotProposals) != 2 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 1)\n\tif len(gotProposals) != 1 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n}\n\nfunc TestRender(t *testing.T) {\n\tif Render(\"\") != \"\" {\n\t\tt.Errorf(\"Render function should empty\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"aCiP0umLORzUfT4lOQ9p+7gKXPVNlXJbQoWxFMX+6eE1WEM9TESmysSyA4DJxwmTQwJEcYyOeIuCPu2+bTXPTQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1l7nmtmzptycmt36lrju4ypum2yr5zx244c52r3","to_address":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","amount":"100000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A98IFyM+yKsk0qIx5E0oc4bZxYWQ9WnMDU1kiclZmnpK"},"signature":"RIkKEu0p3Q9sC1VZlzs3GhaukcyGxFWTk+Y14Qnvrs9rkZEtk6e1PkR9rwnbKXe0UB/XlEYwh+vds4a7jRa4UQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModAddPost","args":["funding-program","Announcing the Gno.land Funding and Grants Program","\nIf you’re interested in building in Gno.land and using the Gnolang (Gno) language to make a meaningful contribution, we’ve launched the Gno.land Funding and Grants Program to support you on your journey. If you’re a developer, tinkerer, researcher, or educator and you’re excited by the idea of creating innovative dApps, tooling, infrastructure, products, or smart contract libraries on Gno.land, now you can apply for funding.\n\n**About the Gnoland Funding and Grants Program**\n\nWe’re building Gno.land to endure with timeless code that will serve as a reference point for many years to come. Secured by a novel consensus mechanism, Proof of Contribution, Gno.land rewards contributors fairly, addressing one of the blockchain industry’s biggest problems. The developers that are most active on the platform with the highest quality contributions will secure the most rewards. We already have a growing community of Gnomes innovating and building on Gno.land and we’re looking to add more contributors to extend the usability of the platform and its smart contract library.\n\nOur grants program will encourage further participation by allocating financial awards and contributions to individuals and teams who want to build dApps, core infrastructure, products, or features on Gno.land, incentivizing more like-minded Gnomes to test the Proof of Contribution mechanism and push the chain to new limits. The grant amount and duration will depend on the scope and ambition of the project as well as the work involved.\n\n**Types of Contributors**\n\nThe Gno.land Funding and Grants program is divided into four different categories – tinkerer, builder, researcher, and educator – to ensure that we cater to a diverse range of people and working preferences. Here’s how we define these categories:\n\n- Tinkerer: You want to experiment and invent\n    - Build dApps, improve features, and find and develop new ideas\n- Builder: You have an idea and are ready to build it\n    - Build dApps, infrastructure, tooling, products, or port your existing apps to Gno\n- Researcher: You want to discover and analyze\n    - Deep dive into topics linked to the Gno.land universe\n\n**What We Are Looking For**\n\nTo qualify for a Gno.land grant, we’re looking for motivated and passionate people who can contribute by developing dApps, core infrastructure, useful and innovative products, or features that improve the usability of the Gno.land chain, specifically:\n\n- Decentralized Applications (dApps)\n    - What types of dApps do you want to see on Gno.land? Show us.\n    - Build, test, and launch a suite of Gno.land dApps for the community, focusing on diverse use cases and industries such as DeFi, gaming, supply chain management, and social media. Ensure that these apps cater to both individual users and businesses\n    - These dApps should integrate seamlessly with existing Gno.land infrastructure, encourage user interaction, and promote the adoption of Gno.land services\n- Infrastructure, DevX, Quality\n    - Develop comprehensive GitHub and AWS integration for Gno.land, including streamlined deployment processes, continuous integration and delivery pipelines, and monitoring tools\n    - Create Helm charts for easy deployment and management of Gno clusters, enabling users to quickly set up and scale their Gno infrastructure\n    - Design and implement an event system for Gno.land contracts, allowing for real-time monitoring, analysis, and auditing of contract-related events\n    - Enhance Gno.land security by conducting regular vulnerability assessments, penetration testing, and implementing best practices for secure smart contract development\n- Products\n    - Develop advanced project management software tailored to the needs of Gno.land developers and teams, with features such as task tracking, collaboration tools, and integrated Gno.land services\n    - Create comprehensive documentation, including guides, tutorials, and API references, to help users understand and utilize Gno.land's features and services more effectively\n    - Design a censorship-resistant smart contract system, enabling secure and transparent transactions and interactions on the Gno.land platform, free from external interference\n- Interoperability \u0026 Integration\n    - Implement cross-chain compatibility and interoperability, allowing Gno.land to connect and interact with other blockchain networks, expanding its potential user base and increasing its overall reach\n    - Develop a powerful integrated development environment (IDE) specifically for Gno.land developers, with features like code completion, debugging tools, and seamless integration with Gno.land services\n    - Design and launch a user-friendly wallet for Gno tokens, featuring a secure and intuitive interface, support for multiple devices, and easy integration with Gno.land dApps\n\nThe above guidelines are by no means exhaustive and are intended to spark your imagination and give examples of the types of contributions we’re looking for in Gno.land. We’re open-minded and willing to assess all grant proposals, so if you have an idea that’s not on the list or a suggestion that you think will benefit our vibrant community, let us know. If your submission doesn’t qualify for a grant, we’ll do our best to provide you with open and honest feedback and points for improvement, as well as identify any opportunities to get involved in our ongoing incentivized Game of Realms competition.\n\n**Meet Our First Grantees - Onbloc**\n\n**Onbloc**\n\nOnbloc is a blockchain software company building core infrastructure for Gno.land and\n\nhelping other dApp developers onboard to the Gno.land ecosystem seamlessly. The team has developed the Gno.land Developer Portal, which provides comprehensive introductory docs for developers, the Adena web3 wallet for Gno.land, and the Gnoscan block explorer. As Gno.land’s most active contributor, Onbloc is leading many community-driven initiatives and we’re excited to extend a grant to this passionate South Korea-based development team to continue their incredible work developing the wallet further, iterating the Gnoscan block explorer, and building Gno.land’s first DEX, Gnoswap.\n\nIn addition to this, we want to encourage Onbloc to continue their amazing work with the community, contributing to meetings, replying to comments on our social platforms, writing code base, organizing local events and meet-ups in South Korea, and creating products that expand the Gno.land ecosystem.\n\n*“Onbloc is thrilled to be a part of the Gno.land Grants Program. As one of the earliest contributors, our endeavors have involved releasing technical guides and research reports, developing infrastructure tools for dApps, creating DeFi smart contracts, and more. We are excited to leverage this grant to further enhance the quality of our products and strengthen our workforce. The grant will enable us to cover some of the existing expenses and hire additional developers to focus on smart contracts and the core side of GnoVM. We expect these endeavors to push the Gno.land blockchain to new limits and accelerate the achievement of the milestones on our roadmap. With the support from the Gnoland team, we are confident in our ability to make significant strides and further contributions to foster the growth of the Gnoland ecosystem.”*\n\n*Dongwon Shin, CEO, Onbloc*\n\n**Teritori**\n\nTeritori is a super-dApp project allowing individuals and organizations to interact, organize, and communicate in a radically resilient and decentralized way. Based on an interoperable vision, the application is built on a multi-chain experience approach, gradually integrating Gnolang as the fundamental technical brick of the system. Currently in Beta ([available here](https://app.teritori.com/)), the app is making modular tools and dApps available to users, with a single gamified user experience. Teritori's philosophy is to offer users and developers a place that belongs to them, their territory, with an emphasis on interoperability, modularity, and customization.\n\nUsers can interact with a social network, NFT marketplace, DAO launcher, service marketplace, games, etc., and integrate a plethora of dApps thanks to the dApp store, where Teritori will promote all Gno.land dApps to encourage the growth of the ecosystem. Using the Gno.land grant, Teritori will continue this amazing work and develop a moderation DAO to provide content moderation to Gno.land in a healthy and decentralized way, a challenge that faces the entire web3 industry. By 2024, the UX of Teritori v1 will be based on decentralized messaging without blockchain, allowing users to converse in a \"natural\" way while adding modules and web3 features. Creating and managing a GnoDAO could be as easy as managing a WhatsApp group.\n\n*“At Teritori, we want to make decentralized organizations accessible to all and experiment with new governance models for humans, social groups, businesses, and diverse organizations. Gno.land enables us to build this vision in a modular, future-proof, and censorship-resistant way. Thanks to the Grants Program, we'll be able to accelerate our development, continue to contribute proactively and build user experiences that enable as many people as possible to discover the Gnol.and ecosystem. We're starting work developing a DAO launcher, with different standard templates for DAOs, in particular, DAOs enabling moderation within news feeds, forums, or social networks. This will rapidly open many doors, such as those of conflict resolution DAOs, on-service marketplaces, or project management software. Gnol.and is a playground where anything is possible! We'll be documenting [our journey here](https://github.com/gnolang/hackerspace/issues/7#issuecomment-1588197187), and sharing our progress as we stay connected to the needs of the community.”*\n\n*Zooma, Core Lead, Teritori*\n\n**Zack**\n\nZack is the first tinkerer-in-residence at Gno.land. With a deep-rooted passion for innovation, he embraced Go early on in 2013 and ever since, has been harnessing its power to craft peer-to-peer programs and develop web2 applications. While Gno.land marks Zack's initial foray into web3 development and blockchain dApps, the Gnolang language allowed him to effortlessly apply his Golang expertise. This has enabled him to flourish within an ecosystem that revolves around decentralized systems, seamlessly transitioning his skill set to create unique decentralized solutions.\n\n*“I have always been curious about web3 and blockchain technologies but have not developed expertise in smart contract languages and struggled to keep up with the fast-changing ecosystem around blockchain technologies. As an avid Go programmer, Gno and Gno.land created the opportunity for me to develop decentralized applications on blockchains by providing a framework and ecosystem that is consistent with Golang in terms of syntax, sustainability, and stability. The additional web3 features in Gno and Gno.land provide huge potential for interesting applications that I hope to unlock to move beyond web2 and harness blockchain technology for novel use cases. The grant provided for tinkerer-in-residence was the key to giving me the resources to move through this ecosystem as I try to think outside the box for what web3 can be and what blockchain can do for a web2 developer like myself.”*\n\n*Zack Scholl, tinkerer-in-residence*\n\n**How You Can Apply**\n\nActions speak louder than words. Until Gno.land is completely on-chain, the best place to start is by contributing to PRs and issues on the Gno.land repos or participating in the Game of Realms competition. If you want to apply for a grant, you’ll need to fork the Gno.land Ecosystem Fund repo and outline your proposal in your project name’s file. Once we receive your application, our team will review it and get in touch if we believe that you fit the criteria. [See GitHub for full instructions](https://github.com/gnolang/ecosystem-fund-grants). Stay tuned, we’ll be hosting a Funding and Grants Program Q\u0026A in the next few weeks!\n","gnoland,funding,grants"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"KeVsKSOKcTPAiXRXE8kaCT/5Cbj3BvxY0SfHzKLXrXpcaZ2VovCiHAhKhqMRGST6+tygzVRbZKUiiSt/gsWp3Q=="}],"memo":"from gnoblog-cli"}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/gnodao_v01","func":"CreateDAO","args":["https://gnodao1.org"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"hK+3ZqBgdt5GSL/QgS4hd74mRXyoovu/jqIDGtEXMLx0WlmmvOnH1yLzLE5FEa1tn8nGcs1gS1Y7EfBv9lDGNg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/gnodao_v01","func":"CreateDAO","args":["https://gnodao1.org","https://metadata.gnodao1.org","[{\"address\":\"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt\",\"power\": 1}]","40","30","10","10"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"4hGcpaBKtNipGwvEjZ1M7m0+7/t6Ez7oWfOQZ6Ym9pE0NaNdLDGq8V84tgg/v29aQ87GmOIztGWNEouu1ZSiYQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/gnodao_v01","func":"CreateDAO","args":["https://gnodao1.org","https://metadata.gnodao1.org","[{\"address\":\"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt\",\"power\": 1}]","40","30","10","10"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"+Q2VA2eYndt7iDEvkrCug1oAha7pwk/tcNujoK+YLUxZelESTC3Oe+hxyQ9CagXKl2Btu8IqobS/oE1EvDOQ7Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/gnodao_v01","func":"CreateDAO","args":["https://gnodao1.org","https://metadata.gnodao1.org","[{\"address\":\"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt\",\"power\": 1}]","40","30","10","10"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"T24C8fculDybMZDbFboQlAqwyrmKZj0kfEUycipCrrNsnfIOpiwMoSbHCniHiKWoIxAOBiK1q/XHBomNmUAKzA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","package":{"Name":"gnodao","Path":"gno.land/r/demo/gnodao_v02","Files":[{"Name":"gnodao.gno","Body":"package gnodao\n\nimport (\n\t\"gno.land/p/demo/avl\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype VoteOption uint32\n\nconst (\n\tYES          VoteOption = 0 // Indicates approval of the proposal in its current form.\n\tNO           VoteOption = 1 // Indicates disapproval of the proposal in its current form.\n\tNO_WITH_VETO VoteOption = 2 // Indicates stronger opposition to the proposal than simply voting No. Not available for SuperMajority-typed proposals as a simple No of 1/3 out of total votes would result in the same outcome.\n\tABSTAIN      VoteOption = 3 // Indicates that the voter is impartial to the outcome of the proposal. Although Abstain votes are counted towards the quorum, they're excluded when calculating the ratio of other voting options above.\n)\n\n// GNODAO VOTE\ntype Vote struct {\n\taddress   std.Address // address of the voter\n\ttimestamp uint64      // block timestamp of the vote\n\toption    VoteOption  // vote option\n}\n\ntype DAO struct {\n\tid               uint64\n\turi              string       // DAO homepage link\n\tmetadata         string       // DAO metadata reference link\n\tfunds            uint64       // DAO managing funds\n\tdepositHistory   []string     // deposit history - reserved for later use\n\tspendHistory     []string     // spend history - reserved for later use\n\tpermissions      []string     // permissions managed on DAO - reserved for later use\n\tpermMap          *avl.MutTree // permission map - reserved for later use\n\tvotingPowers     *avl.MutTree\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalStatus uint32\n\nconst (\n\tNIL           ProposalStatus = 0\n\tVOTING_PERIOD ProposalStatus = 1\n\tPASSED        ProposalStatus = 2\n\tREJECTED      ProposalStatus = 3\n\tFAILED        ProposalStatus = 4\n)\n\nfunc (s ProposalStatus) String() string {\n\tswitch s {\n\tcase NIL:\n\t\treturn \"Nil\"\n\tcase VOTING_PERIOD:\n\t\treturn \"VotingPeriod\"\n\tcase PASSED:\n\t\treturn \"Passed\"\n\tcase REJECTED:\n\t\treturn \"Rejected\"\n\tcase FAILED:\n\t\treturn \"Failed\"\n\t}\n\treturn \"\"\n}\n\ntype VotingPower struct {\n\taddress string\n\tpower   uint64\n}\n\ntype Proposal struct {\n\tdaoId        uint64         // dao id of the proposal\n\tid           uint64         // unique id assigned for each proposal\n\ttitle        string         // proposal title\n\tsummary      string         // proposal summary\n\tspendAmount  uint64         // amount of tokens to spend as part the proposal\n\tspender      std.Address    // address to receive spending tokens\n\tvpUpdates    []VotingPower  // updates on voting power - optional\n\tnewMetadata  string         // new metadata for the DAO - optional\n\tnewURI       string         // new URI for the DAO - optional\n\tsubmitTime   uint64         // proposal submission time\n\tvoteEndTime  uint64         // vote end time for the proposal\n\tstatus       ProposalStatus // StatusNil | StatusVotingPeriod | StatusPassed | StatusRejected | StatusFailed\n\tvotes        *avl.MutTree   // votes on the proposal\n\tvotingPowers []uint64       // voting power sum per voting option\n}\n\n// GNODAO STATE\nvar daos []DAO\nvar proposals [][]Proposal\n\nfunc getDAOVotingPower(daoId uint64, address string) uint64 {\n\tif len(daos) \u003c= int(daoId) {\n\t\treturn 0\n\t}\n\tres, ok := daos[daoId].votingPowers.Get(address)\n\tif ok {\n\t\treturn res.(uint64)\n\t}\n\treturn 0\n}\n\nfunc IsDAOMember(daoId uint64, address std.Address) bool {\n\treturn getDAOVotingPower(daoId, address.String()) \u003e 0\n}\n\nfunc getVote(daoId, proposalId uint64, address std.Address) (Vote, bool) {\n\tif int(daoId) \u003e= len(daos) {\n\t\treturn Vote{}, false\n\t}\n\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\treturn Vote{}, false\n\t}\n\n\tvote, ok := proposals[daoId][proposalId].votes.Get(address.String())\n\tif ok {\n\t\treturn vote.(Vote), true\n\t}\n\treturn Vote{}, false\n}\n\nfunc parseVotingPowers(daoMembers, votingPowers string) []VotingPower {\n\tparsedVPs := []VotingPower{}\n\tif len(daoMembers) == 0 {\n\t\treturn parsedVPs\n\t}\n\tmemberAddrs := strings.Split(daoMembers, \",\")\n\tmemberPowers := strings.Split(votingPowers, \",\")\n\tif len(memberAddrs) != len(memberPowers) {\n\t\tpanic(\"mismatch between members and voting powers count\")\n\t}\n\tfor i, memberAddr := range memberAddrs {\n\t\tpower, err := strconv.Atoi(memberPowers[i])\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tparsedVPs = append(parsedVPs, VotingPower{\n\t\t\taddress: memberAddr,\n\t\t\tpower:   uint64(power),\n\t\t})\n\t}\n\treturn parsedVPs\n}\n\n// GNODAO FUNCTIONS\nfunc CreateDAO(\n\turi string,\n\tmetadata string,\n\tdaoMembers string,\n\tvotingPowers string,\n\tvotingPeriod uint64,\n\tvoteQuorum uint64,\n\tthreshold uint64,\n\tvetoThreshold uint64,\n) {\n\tdaoId := uint64(len(daos))\n\tdaos = append(daos, DAO{\n\t\tid:               daoId,\n\t\turi:              uri,\n\t\tmetadata:         metadata,\n\t\tfunds:            0,\n\t\tdepositHistory:   []string{},\n\t\tspendHistory:     []string{},\n\t\tpermissions:      []string{},\n\t\tpermMap:          avl.NewMutTree(),\n\t\tvotingPowers:     avl.NewMutTree(),\n\t\ttotalVotingPower: 0,\n\t\tvotingPeriod:     votingPeriod,\n\t\tvoteQuorum:       voteQuorum,\n\t\tthreshold:        threshold,\n\t\tvetoThreshold:    vetoThreshold,\n\t})\n\n\tparsedVPs := parseVotingPowers(daoMembers, votingPowers)\n\ttotalVotingPower := uint64(0)\n\tfor _, vp := range parsedVPs {\n\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\ttotalVotingPower += vp.power\n\t}\n\tdaos[daoId].totalVotingPower = totalVotingPower\n\tproposals = append(proposals, []Proposal{})\n\t// TODO: emit events\n}\n\nfunc CreateProposal(\n\tdaoId uint64,\n\ttitle, summary string,\n\tspendAmount uint64, spender std.Address,\n\tdaoMembers string,\n\tvpUpdates string,\n\tnewMetadata string,\n\tnewURI string,\n) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a dao member\")\n\t}\n\n\tparsedVPUpdates := parseVotingPowers(daoMembers, vpUpdates)\n\tproposals[daoId] = append(proposals[daoId], Proposal{\n\t\tdaoId:        daoId,\n\t\tid:           uint64(len(proposals[daoId])),\n\t\ttitle:        title,\n\t\tsummary:      summary,\n\t\tspendAmount:  spendAmount,\n\t\tspender:      spender,\n\t\tvpUpdates:    parsedVPUpdates,\n\t\tnewMetadata:  newMetadata,\n\t\tnewURI:       newURI,\n\t\tsubmitTime:   uint64(time.Now().Unix()),\n\t\tvoteEndTime:  uint64(time.Now().Unix()) + daos[daoId].votingPeriod,\n\t\tstatus:       VOTING_PERIOD,\n\t\tvotes:        avl.NewMutTree(),\n\t\tvotingPowers: []uint64{0, 0, 0, 0}, // initiate as zero for 4 vote types\n\t})\n}\n\nfunc VoteProposal(daoId, proposalId uint64, option VoteOption) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// if invalid proposal, panic\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\n\t// if vote end time is reached panic\n\tif time.Now().Unix() \u003e int64(proposals[daoId][proposalId].voteEndTime) {\n\t\tpanic(\"vote end time reached\")\n\t}\n\n\t// Original vote cancel\n\tcallerVotingPower := getDAOVotingPower(daoId, caller.String())\n\tvote, ok := getVote(daoId, proposalId, caller)\n\tif ok {\n\t\tif proposals[daoId][proposalId].votingPowers[int(vote.option)] \u003e callerVotingPower {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] -= callerVotingPower\n\t\t} else {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] = 0\n\t\t}\n\t}\n\n\t// Create a vote\n\tproposals[daoId][proposalId].votes.Set(caller.String(), Vote{\n\t\taddress:   caller,\n\t\ttimestamp: uint64(time.Now().Unix()),\n\t\toption:    option,\n\t})\n\n\t// Voting power by option update for new vote\n\tproposals[daoId][proposalId].votingPowers[int(option)] += callerVotingPower\n}\n\n// TODO: handle voting power change during voting period for other proposal\n// TODO: experiment with gas limit\nfunc TallyAndExecute(daoId, proposalId uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// validation for proposalId\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\tdao := daos[daoId]\n\tproposal := proposals[daoId][proposalId]\n\tvotingPowers := proposal.votingPowers\n\n\tif time.Now().Unix() \u003c int64(proposal.voteEndTime) {\n\t\tpanic(\"proposal is in voting period\")\n\t}\n\n\t// reference logic for tally - https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/keeper/tally.go\n\ttotalVotes := votingPowers[YES] + votingPowers[NO] + votingPowers[NO_WITH_VETO] + votingPowers[ABSTAIN]\n\tif totalVotes \u003c dao.totalVotingPower*dao.voteQuorum/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If no one votes (everyone abstains), proposal rejected\n\tif totalVotes == votingPowers[ABSTAIN] {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/3 of voters veto, proposal rejected\n\tvetoThreshold := dao.vetoThreshold\n\tif votingPowers[NO_WITH_VETO] \u003e totalVotes*vetoThreshold/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote Yes, proposal passes\n\tthreshold := dao.threshold\n\tif votingPowers[YES] \u003e (totalVotes-votingPowers[ABSTAIN])*threshold/100 {\n\t\tproposals[daoId][proposalId].status = PASSED\n\n\t\t// TODO: spend coins when spendAmount is positive \u0026 spender is a valid address\n\t\tif proposal.spendAmount \u003e 0 {\n\t\t\tif daos[daoId].funds \u003e= proposal.spendAmount {\n\t\t\t\tdaos[daoId].funds -= proposal.spendAmount\n\t\t\t} else {\n\t\t\t\tproposals[daoId][proposalId].status = FAILED\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tif proposal.newMetadata != \"\" {\n\t\t\tdaos[daoId].metadata = proposal.newMetadata\n\t\t}\n\n\t\tif proposal.newURI != \"\" {\n\t\t\tdaos[daoId].uri = proposal.newURI\n\t\t}\n\n\t\tfor _, vp := range proposal.vpUpdates {\n\t\t\tdaos[daoId].totalVotingPower -= getDAOVotingPower(daoId, vp.address)\n\t\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\t\tdaos[daoId].totalVotingPower += vp.power\n\t\t}\n\n\t\t// TODO: contract does not own account that can hold coins - this is one of limitations\n\t\t// TODO: Adena Wallet from OnBloc - investigate on how they manage coins (swap - custody?)\n\t\t// Manual sending for funds (Address \u003c-\u003e Address) - Miloš Živković\n\t\t// https://github.com/gnolang/gno/blob/e392ab51bc05a5efbceaa8dbe395bac2e01ad808/tm2/pkg/crypto/keys/client/send.go#L109-L119\n\t\treturn\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote No, proposal rejected\n\tproposals[daoId][proposalId].status = REJECTED\n}\n\nfunc DepositDAO(daoId uint64, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// TODO: send coins from caller to DAO\n\t// TODO: verify received amount\n\t// daos[daoId].depositHistory = append(daos[daoId].depositHistory, Deposit{\n\t// \taddress: caller,\n\t// \tamount:  amount,\n\t// })\n}\n\nfunc GetDAO(daoId uint64) DAO {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\treturn daos[daoId]\n}\n\nfunc GetDAOs(startAfter, limit uint64) []DAO {\n\tmax := uint64(len(daos))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn daos[startAfter:max]\n}\n\nfunc GetProposal(daoId, proposalId uint64) Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\treturn proposals[daoId][proposalId]\n}\n\nfunc GetProposals(daoId, startAfter, limit uint64) []Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tmax := uint64(len(proposals[daoId]))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn proposals[daoId][startAfter:max]\n}\n\nfunc Render(path string) string {\n\treturn \"\"\n}\n"},{"Name":"gnodao_test.gno","Body":"package gnodao\n\nimport (\n\t\"fmt\"\n\t\"std\"\n\t\"testing\"\n\t\"time\"\n)\n\nvar caller std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnabcde\"\nvar caller1 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\"\nvar caller2 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\"\nvar daoMembers = []std.Address{\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnccccc\",\n}\nvar votingPowers = []VotingPower{\n\t{\n\t\taddress: daoMembers[0].String(),\n\t\tpower:   1,\n\t},\n\t{\n\t\taddress: daoMembers[1].String(),\n\t\tpower:   2,\n\t},\n\t{\n\t\taddress: daoMembers[2].String(),\n\t\tpower:   3,\n\t},\n}\n\nfunc assertPanic(t *testing.T, f func()) {\n\tdefer func() {\n\t\tif r := recover(); r == nil {\n\t\t\tt.Errorf(\"The code did not panic\")\n\t\t}\n\t}()\n\tf()\n}\n\nfunc TestIsDAOMember(t *testing.T) {\n\tdaos = []DAO{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\n\t// TODO: what package is ideal to use for checks?\n\tif IsDAOMember(0, caller) != false {\n\t\tt.Errorf(\"Should not be false\")\n\t}\n\tif IsDAOMember(0, caller1) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n\tif IsDAOMember(0, caller2) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n}\n\nfunc TestCreateDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\tif len(daos) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tif len(proposals) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tdao := daos[0]\n\tif dao.id != 0 {\n\t\tt.Errorf(\"first DAO id should be 0\")\n\t}\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"dao uri not set properly\")\n\t}\n\tif dao.metadata != \"https://metadata.gnodao1.org\" {\n\t\tt.Errorf(\"dao metadata not set properly\")\n\t}\n\tif dao.funds != 0 {\n\t\tt.Errorf(\"dao funds not set properly\")\n\t}\n\tif len(dao.depositHistory) != 0 {\n\t\tt.Errorf(\"dao deposit history not set properly\")\n\t}\n\tif len(dao.spendHistory) != 0 {\n\t\tt.Errorf(\"dao spend history not set properly\")\n\t}\n\tif len(dao.permissions) != 0 {\n\t\tt.Errorf(\"dao permissions not set properly\")\n\t}\n\tif dao.permMap == nil {\n\t\tt.Errorf(\"dao permission map not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 0 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller1.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller2.String()) != 2 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif dao.totalVotingPower != 6 {\n\t\tt.Errorf(\"totalVotingPower not set properly\")\n\t}\n\tif dao.votingPeriod != 86400*2 {\n\t\tt.Errorf(\"votingPeriod not set properly\")\n\t}\n\tif dao.voteQuorum != 30 {\n\t\tt.Errorf(\"voteQuorum not set properly\")\n\t}\n\tif dao.threshold != 10 {\n\t\tt.Errorf(\"threshold not set properly\")\n\t}\n\tif dao.vetoThreshold != 10 {\n\t\tt.Errorf(\"vetoThreshold not set properly\")\n\t}\n}\n\nfunc TestCreateProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\t})\n\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tproposal := proposals[0][0]\n\tif proposal.daoId != 0 {\n\t\tt.Errorf(\"proposal daoId should be 0\")\n\t}\n\tif proposal.id != 0 {\n\t\tt.Errorf(\"proposal id should be 0\")\n\t}\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"proposal title not set properly\")\n\t}\n\tif proposal.summary != \"Proposal to bootstrap DAO fund.\" {\n\t\tt.Errorf(\"proposal summary not set properly\")\n\t}\n\tif proposal.spendAmount != 0 {\n\t\tt.Errorf(\"proposal spendAmount not set properly\")\n\t}\n\tif proposal.spender != caller {\n\t\tt.Errorf(\"proposal spender not set properly\")\n\t}\n\tif len(proposal.vpUpdates) != 0 {\n\t\tt.Errorf(\"proposal vpUpdates not set properly\")\n\t}\n\tif proposal.newMetadata != \"\" {\n\t\tt.Errorf(\"proposal newMetadata not set properly\")\n\t}\n\tif proposal.newURI != \"\" {\n\t\tt.Errorf(\"proposal newURI not set properly\")\n\t}\n\tif proposal.submitTime != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"proposal submitTime not set properly\")\n\t}\n\tif proposal.voteEndTime != uint64(time.Now().Unix())+daos[0].votingPeriod {\n\t\tt.Errorf(\"proposal voteEndTime not set properly\")\n\t}\n\tif proposal.status != VOTING_PERIOD {\n\t\tt.Errorf(\"proposal status not set properly\")\n\t}\n\tif proposal.votes == nil {\n\t\tt.Errorf(\"proposal votes not set properly\")\n\t}\n\tif len(proposal.votingPowers) != 4 {\n\t\tt.Errorf(\"proposal votingPowers not set properly\")\n\t}\n}\n\nfunc TestVoteProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(1, 0, YES)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(0, 1, YES)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tVoteProposal(0, 0, YES)\n\t})\n\n\t// vote and check result is set properly\n\tstd.TestSetOrigCaller(caller1)\n\tVoteProposal(0, 0, YES)\n\tvote, found := getVote(0, 0, caller1)\n\tif !found {\n\t\tt.Errorf(\"proposal vote not set\")\n\t}\n\tif vote.address != caller1 {\n\t\tt.Errorf(\"vote address not set properly\")\n\t}\n\tif vote.timestamp != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"vote timestamp not set properly\")\n\t}\n\tif vote.option != YES {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 1 {\n\t\tt.Errorf(\"votePowers by vote option not set properly\")\n\t}\n\n\t// vote again with different option and check result\n\tVoteProposal(0, 0, NO)\n\tvote, found = getVote(0, 0, caller1)\n\tif vote.option != NO {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 0 {\n\t\tt.Errorf(\"votePowers for YES not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(NO)] != 1 {\n\t\tt.Errorf(\"votePowers for NO not set properly\")\n\t}\n\n\t// test vote end time already reached\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\t\tVoteProposal(0, 0, YES)\n\t})\n}\n\nfunc TestTallyAndExecute(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{\n\t\t{\n\t\t\taddress: caller.String(),\n\t\t\tpower:   1,\n\t\t},\n\t}, \"newMetadata.com\", \"newURI.com\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(1, 0)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 1)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tTallyAndExecute(0, 0)\n\t})\n\tassertPanic(t, func() { // vote end time not pass\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 0)\n\t})\n\n\t// vote end time to be reached\n\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\n\t// quorum not reached\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for vote quorum\")\n\t}\n\n\t// everyone abstains\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for all abstains\")\n\t}\n\n\t// more than 1/3 vote with NO_WITH_VETO\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower / 2\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = daos[0].totalVotingPower / 2\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for NO_WITH_VETO\")\n\t}\n\n\t// all YES vote\n\tproposals[0][0].votingPowers[ABSTAIN] = 0\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = 0\n\tproposals[0][0].votingPowers[YES] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != PASSED {\n\t\tt.Errorf(\"proposal should be PASSED\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif daos[0].metadata != \"newMetadata.com\" {\n\t\tt.Errorf(\"metadata not set properly\")\n\t}\n\tif daos[0].uri != \"newURI.com\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestDepositDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when not a dao member\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tDepositDAO(0, 100)\n\t})\n\n\t// not panics\n\tstd.TestSetOrigCaller(caller1)\n\tDepositDAO(0, 100)\n}\n\nfunc TestGetDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tGetDAO(100)\n\t})\n\n\t// success when valid dao id\n\tdao := GetDAO(0)\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestGetDAOs(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tgotDaos := GetDAOs(0, 10)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tCreateDAO(\"https://gnodao2.org\", \"https://metadata.gnodao2.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tgotDaos = GetDAOs(0, 0)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 10)\n\tif len(gotDaos) != 2 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 1)\n\tif len(gotDaos) != 1 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n}\n\nfunc TestGetProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tGetProposal(1, 0)\n\t})\n\n\t// panic when invalid proposal id\n\tassertPanic(t, func() {\n\t\tGetProposal(0, 1)\n\t})\n\n\t// success when valid dao id and proposal id\n\tproposal := GetProposal(0, 0)\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"title not set properly\")\n\t}\n}\n\nfunc TestGetProposals(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tassertPanic(t, func() { // invalid dao id\n\t\tGetProposals(0, 0, 10)\n\t})\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"proposal #1\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\tCreateProposal(0, \"proposal #2\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\tgotProposals := GetProposals(0, 0, 0)\n\tif len(gotProposals) != 0 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 10)\n\tif len(gotProposals) != 2 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 1)\n\tif len(gotProposals) != 1 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n}\n\nfunc TestRender(t *testing.T) {\n\tif Render(\"\") != \"\" {\n\t\tt.Errorf(\"Render function should empty\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"jYxfWfeNl/BxkcI8IVU8Uh8Azu+IeFeV6pa+pauUH2RIQvTdWEhEjDLPKGW8Xxmg24TW4QnHmzEvALOkoIjoxw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/gnodao_v02","func":"CreateDAO","args":["https://gnodao1.org","https://metadata.gnodao1.org","g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","1","40","30","10","10"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"iVib2R801xEvhcyl3nmS9jYuCDJOAbh8g/YA+2hV/WQ/+Lc7zW3LsXQ1Wv/aUdhJXX8dZxGTSp9aN706toezHQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"QwkwdXdzUvjz0M7kfdPkVli1C+KW1jxxUb5DFeTQzRpxsp7wwYHjl7OXuiZdxK9WwqXWoK9eb269XynWrw8FFA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"HUKVO914L+epuHzWnCMwYTbRhQADDOJCTJnbEC0ch7x70X7UfzBz8xvKkcENcb738cXDEYEPFSAMk289Xdx4SQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"LsdfmzhdcZyBa12mH8uKH4IDnxCcQeRQl2/08rk2bh5XuAMyPrNP4XdDfxktGZg78GrA2zJc+l42IqlDMaXEeg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"cLvJAQ8DHHIOpnwtr8f9dIJA0z4Ps/0nf8HSmG1G/MBccx1aptwpCIpU3B0r2xTXjyPjj1J+Ovfn0dDjbVfmlQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"xS4GJk6+JqfZek4fdj7QhFJFjXBzvQ/Xe9kRATGBpNRXXsIV8fVNyzuBL9Xhibsjl5UxLFyU6NvVmDuTUqw4Fw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"SmytunAvy5wI3nJFikEde2C7nZpsNSpKMd+Va+gut1gMIYSRcNN66PWstvDHtaKVIP55343fHgRGlFqfXnj2oA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"7IqQXE/Bq0IdENVPO7dAfA2yYfWNOyuY4UKLEzlwzNU8f2CIMEGAWmUKBOIVBWG4wtXm3/P6s9w2UEfR/jJhWw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","2"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"80BuahzJrCvhKOgv1FtGXCfdF8mqyZFYGRlpRhnBVjVQSQbK2zp/0lMO8IPo0T282na0OGiCynrZ41LZbR6vyw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"KGzFSLAI87GZQ63rhFUwhVb2dYc+KKfb4ZIFGZbvmA5H5frw4Tb/cfclYKgKmq08V6wk5kchuculxEAzyvVu2A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"kTmuMzcuH8mX9pTca95PfBuAhIhb3qo0miWEd/0xanYQs1uwYtWtQgbelS1tJZi1XTl70KiSAfvgGQETMsw8Pg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"10000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"O7vYNNrguhFaxiz4KiTbNTq18WCcQFPSnuB5PVODL/w/TSFq9k3NZcbjOs4KjGXIHkNDpmavqYqEueKUqWBzKQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"5000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"x72w3ze4aauraQ6AY5Pcq4jFezy4sqODpg6YIlOBxP07/bczljYX5RDXkT231B+LbvNodePI9+2Urc8JVYIQQg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","15"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"vTx/OBkJyLepdN1GA8e3uJ4TCDV4Wu5NCQ77+zzvVdFzJNFmfHnfH4JgSCDEXn5Wpnpfwa5zIJJQCJZnI9EpMw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"3000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"WCnQuDQLNHWhmoy6jJpRbvFePZFy/dXuIKrNmqD2BLBLqDX5oJ1kKFdb+wYMHcvrzz3Fs48Oa7eB80bTmRIxAg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","202"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"KzRBNqKLI0o3qUwl+u5MCxMKeDnu1gnqAbrZF6lFrf9R1EAbNn2WASQkeOrlq5uvXaH88mR1jAq4WaqkDdRaZw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"7000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"DYGyk6O/X7RIMuFfiTlWOBIBORifXH1gMnpNg6GfVY1FRAwGzX/wUdm8fFKpP1AR0wWsUE8LG3hpunlIhv7zsA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"16000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"zYXLlon1A3Rg9aI222kGMhWSD4m/TVJQ9vHWbGVFyuVANFrBOiQs/q3kTYZmpAPuFbMwhvoVU7Q6gCGFBMVbAw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"6900000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"DEowkWpeWeeG/+YfQDQ2TFzaK6h1028EqVB3Jo+5CQEdCRUqnzDdatVKdIFIIzK3SIyNqqC8+Q7j5X/m+L+asg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","package":{"Name":"hello","Path":"gno.land/r/demo/jinooosion","Files":[{"Name":"hellojinoosion.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"Fpp8ne18N5/U6+IArEt0GaFUhKmaLjbDkqaEsGoy8w1vzaNlCROri9HvH/MXQVSBIcyoMDdLOvIIc2RnlR1d8w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","15"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"dEQyemfWJKsgcQDO8BBxReDBnMELPZz5i7K0xMXYFZRByNSmGOgbzzSdhI/vOtcMojnriSSFKd2qIuoJTvrIRw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"8000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"4AH+2yq3d2hnMk2vgztf3cmSm4CnU3BQVfHWcXRiXMQx/I7nLFcPQABdfA6YPUxP21Im7HKH3B5LYj/wkHt9GA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","71"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"5uUetLDO30MXYNDG0TEnxygtaKZzQw29uQVIWTXRXoJnUI0UeputNKiO+AXAq3GYrsB9NPWEMjCk65IOAVh2nA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","package":{"Name":"gggg","Path":"gno.land/r/demo/gggg","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"g7Eca3qVh78rmbrb2l2JZGQ91zmutsCZAmx+gP8bZS4i4espwbb6cujoA2lj4soMoHZy3gCwWMCItgGgqPKfQQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","15"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"eQ5O+EWiIfcZVZhzge15mn9e8qKugLHV6KRKzecB/ZUTdeiQ5SRgIJTuyifxUh1cASd1+WQjICaF3IYmf5vYBQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"2500000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"MB5oMEROemNz/ahcfOecHqxFe0UV7cmZozuo3ejfjoZ8fb8MJjdcTGAlyEkpckob1Pq+x1q8SBYFdLeyolgCAA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","package":{"Name":"g1ggg","Path":"gno.land/r/demo/ggg1g","Files":[{"Name":"hell41o.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"FQKr9SuKBvspdI9ak91TCc3QlyCsGShoABiW/kiXZHcP7q/MKyHWMZMXkiAFHIIYN0FWp8Y17RglGuDtNrET8Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g1ckddn039khwxzu4v5mc8n34vd9ksaks2l6c3kg","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"Mcm59D3pnDdBCelGWUI8ZX/SlJ3CxzFcrk4Pdp6nebhqoX0P8b+1F+WpTSuw2At2mMfBsY7JQ6XW+gvglvxvHw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1ckddn039khwxzu4v5mc8n34vd9ksaks2l6c3kg","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"sufQWpSHqbf7qLrmaNnSIj0H0Nf6mcuLylHBznEFMwxYUBBO4dmjTwbqyPK4OO61ZMG596mK65FlVhKqmnqpbw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","41"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"2Dzs+PhneWdoCFO3QhIEjiWm6WjEjRn5+TQfmWTgDXUlxWqpUjXyuBQGxtnm5Ic5Xqum4jvLzHIOct+J+i918Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","to_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","amount":"6400000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"Htt6qHa7X4tuFuzHInDFN1BT4WsI4qtI490qLr02x+sVQ/EBg7Y2urZSDoWySBP4q/On9i1Bk8bb82WjJ32puQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1awfxe0zsn7wud8dhxu602mujwyx6nmsegzwcj8","7000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"1u16y6jT/RjQqstFjL7SmRWz7tTdq52E8AXkZM9WE5YyC8oQ645BI7M8yNeso4bwYnC559XB1sjBn00u+RsmbA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g10mvc8gy7pcz2th0rclm4h04qwhu6eu7m0fr4pt","10000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"XTspg8SGOB9TI1AZAJqdt3fYVOy0iYx0i3SCHoyUcm1Ew8+WQu/SwjmgT05TYWU+61TJZhJnt3Nqh8P1grlr2w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ckddn039khwxzu4v5mc8n34vd9ksaks2l6c3kg","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0kzkYEt8K5ZALtwx28ajSrJZ3f7mI5J91Lqeaf2Rqhw"},"signature":"sHwq7aRBig+sY0NpZI4u/QTKBEQBaynf8C/3H14e340s4nWmedWQQzl5Zk/f5SGBeSC+MrajKJpMWH9K8d7rOQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g17mcw908lp5y006avp4fjr082wrzryzqh2qgr8k","amount":"23000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"j/S9yOXTgSMn/yIrBxdq1Y+IFUDc3Cfc3rB4TJvP8WoVYOmoOdu0F6J6EcmLS2MkZEPHrxvoWie7KLFvWBQe0A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","19"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"IzqtXmleMEKGsuRiwZQU/+vm37p7WgFmDBFcgGyyyQw+xcmfa6c3ZUkyIzlqkqXpDvOxjA+5EpO0Mo+H2AaS3A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"5000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"0XP8eAnWjsJC8Lwy+43t48m/APCKdqFUbqVVpkrDiBJW5RnWFBT3Jdi7VBYdkENC7XjImUbpqYx98CJ8cYpNkA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","5"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"s24tef8yxT4k45mnHdNrIFGd3JPA36VvR5II1U2J70Y97Wt3ZusLMda6heMfAHyvLycC1ij6Ry5jHZrV3S82IQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","amount":"4500000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"THeWduBVRQPE8WWb8UG8m1xtRh4TrerSEZ3D6vDoMg4xqrGp+ojz3czDUX3ctt/J4nuujOnogmT3RYz9AckWYw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"12345678ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"LLMUlqDoecoiuSjpRtj8wazj2Yrj+5mXYE2beC2KDchF5Y3FOep0i7mnSuN5vREEKiB/GO4AFkkhgFVPZSfveQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","965"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"EeNfYWYeathFIHTLxp1pZ7RAEOQbMSmkPlvQSP9WXlNgWwE6lG+JeIQ6//YI67UyTJ3o59uEw3t4DZfMyM7vWA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","package":{"Name":"ab1cd","Path":"gno.land/r/demo/abcef","Files":[{"Name":"helloabc11.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"Wjh1hK2yh/EQWT4PZx5mkLZunv3BUqW4nqKxAHVm5VgD2rqf5KxynM3ciO0qd6jxDpfS8t6Cxf7qOGmY12Bj0A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","package":{"Name":"g1ggg","Path":"gno.land/r/demo/ggg1g","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"vl0HVS+CaQvFu2x6xZMmkwJGHPXQmGYDX3FqJF6zHGxjaRx7pbDb5FhBCEDN5r/Pi0BVcePfofKji27fpAfI/Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","package":{"Name":"gggg123","Path":"gno.land/r/demo/gggg123","Files":[{"Name":"gggg123.gno","Body":"package gggg123\n\nfunc gggg123() string {\n\treturn \"gggg123() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"BDM92zvaL+xMlokUcCoetz/ctZB4nulp1se2eOgQPLUFuGdtH/d3QJUUieb1ldpYtl0n9j9AeWacuqiVBgrpFA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","15"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"19I6i+jyAmTfeL0LfNQpuoA10AtF8kv0AMeBQWgy8URHGeUY8yHzA9UauQ8+AA3usi42PFyTsGbs9QZLbJYJoQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["527","","527"]},{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["4885","","4885"]},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"5000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"Z4G6DD1ONI5VAh0zxNDDPBx4tja8sZQcDSV3IK8vQ9RbwiGaR9THO1rLn5MGu6iMFKSDRlEcLp/mCu7Gutd8dQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","1111","hihi"]},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"5000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"BSW2qNAjmxlnQH6zCxnHD0pwS/rf5mzxsXhk61yd6AoL0H30wlPS0+KzOLDKB6R5Pu5/1g87ZqNa6BjUcMdqrw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"9934926ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"dHDgalImYoqIZpgiHRhSKkgMKTBnPBMMmDXg91ALJWEah/QY0SdgHE0Otwz0MFnj5iV84Q3zMCxBl09YPbidTA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","82"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"czSaVTtiPPiru/Do4PMnPv7hCoCQVWCbWgbVZCPOwzwYJ74lObx2cR9IyslYWs+tpGmzWkrHz587dZXyGT3gyw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","20"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"O6dVOpP0ex8jlT3PW+tq9TK/kWJ4R5mKhuperM+rgYx9qfO3JoCUfnRoLc0Hx57GrrDhuhc5xnJUpTQ2Fa7p/A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","100"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"ScpxkYE0zLVTaY5e25Q3SDj+tIfG6mRRqejmBN3YPoJtEjbsf3D79Lm/41/zNbx0IBbSTE68T03qJg/LHJe3oQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"ZUWXOyIJAqofepNa7k9zw9wiWD+gL135cx1Zmg01+UM56DVDdWoz+GtZVGK1E3oologF051dAAQ4/TCmjqpO5A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1l47x640c4petu4chfjge3qg2uplakx78hkxqxd","to_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3+XBwhRNxB98UM5CE/sbFKQFUNrwd3wclkoRFngQHN4"},"signature":"AloRZhfXp8A15r2Z6Ks/BzDzzeaI2HOYmk/yoyEqKHYg5bUQ/Uha/FGy9f1HUHaX3EANBQModHzRX/hAWf1alw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"123456ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"x8mvMG+4y+m9WAOW34UpYfECrH/5/JYnBNVm25bcDywxEykv/MhAhccqWulpW62Mej0IAyDqVZDDaw5214iiqw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","111","HI"]},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"50000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"//K4wUFl21YU2IgUjMlhfQKr+ENILAHyucT/6rbNfrl7jxPNe9HdbvoU3vLCta1eztkkxJzdE6zFej+o4aA46w=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","amount":"1111111111111ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"JDepS+y1/S2ius0ku5Tl5wD0IW1qdt41Hs6Sqx4k+i0OPZKNhWUPZ4Ir5vSCyBhlB6aqFU6tH5Ft1CEV9+Z9Tw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"2500000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"k2RyrH/GNuvufGdKL2kRprQ1o1B+UZnURvT/o9CcC5dCLD+sfhDQ8VCbIVaIAFlkdMtLugfOWBcwmI4Q1toYVQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"100000000000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"Qfqh9WxYXn2OYXfLuNHUdRfQnJfgXUExrs1EOpCNQrEzy/vxJv50ySwJQo+cPhvVqlhEGO5941IK6zUrImkjFw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1uatom"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"usyGM9SWq+lpOAQ2ssS21P5YtPH3tkeywWfhMs3u7wJMwzNoJKe1INRVi5eHrHoFRTDGk7fUBdHDp18+joMTXA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"2500000000000abcde"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"9eBBc2rctcC/4aXM80F2oWeR3NmrI5tsRRBDNBmZDHgcbDM4I7kBBUh21vYVjerWhjXdwUnuPb0/0SW7+12WMg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"800000000000000sbf"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"+/hMYkIAS+ShckqbsQNmb9zLy5lUZWeWkr6qMQKkZmkt3LYA73Ok2LsNJEXLLQ2DieqL85sHBZ73b2LMbnQGNA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/gnodao_v02","func":"CreateProposal","args":["0","First proposal","First proposal summary","0","","","","https://metadata.gnodao1.com","https://gnodao1.com"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"POXwpdDNAdgk9G0qpJiQ9xoe676JKqiXq3BGAYVjwwAFutRVoi5Ce+vsE2zCliCI1Zfgs1jjbzKRwQQ2UG3Qxg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/gnodao_v02","func":"VoteProposal","args":["0","0","0"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"sthGHivYwgrswwKeLdv0sQwA0sGTuUhlaQK+r93GnKZwMgykHOHiZ1zuaOaGUjl2CGbFPA4r7V+Lo30xCcanrQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/gnodao_v02","func":"CreateProposal","args":["0","First proposal","First proposal summary","0","","","","https://metadata.gnodao1.com","https://gnodao1.com"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"Z6fZ4MoSuaYpJDc+KRP/u1GqQM/dpmcmGqSGHtReKTk8Ihp88wPZNW/6q4E0YF89Y+0B1/X/BsfwbYJm/atEsw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/gnodao_v02","func":"VoteProposal","args":["0","1","0"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"ILwv+Om9PsEgfNqePTgcVMFMN/Ggoi+PzNWiKoMOof4F4/6X2YW4zgN2ri2pUJEZlWTfLyl8QMwytzywsZ1wrg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/gnodao_v02","func":"TallyAndExecute","args":["0","1"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"mAFi+s6QtE38mPKBgwQ8TKB2+Lx4WXq8z8/aADjltjNyJjE6x6vUL2YcB94AzikkEU8LRPNJjRsw1RmnJGcyvw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/gnodao_v02","func":"TallyAndExecute","args":["0","1"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"NWlFnS9jhMwEvkOGlGbXsCsogpYXXO9dHl9Ul69Z4v1/0IpqfF4gpNKFX29NC0KGd7DDSpJ7h6yMcFZSVGYETg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"100000000000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"QolFGxaUKyR0zUTpe5gqf7MMcOIGW63/cxmYSfd/nZoPGlNuVqZrfaVxsEgDViCSf2vdm0ubVEMt4qUr6fPZAw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"10000000000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"2XLK1+sNU9Ppy5BcWWrwhIeylsPi10EQ1aYSQLMdQDNyqAky6A2/OlTZpxGZA85QrvsA09Nu0Fl0EVybRYozMQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1uatom"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"IYAdirLgfT6OHJAk+JmU39aqkxt98RiNTfWpiE8KNvIOFr6ncNSMikrTaOVEzg9+NjmgQ7/jK4JlbjGUDJa9hA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"/569dqlFi+evzkYleWUNLP5wIKsy5KDppXS+vo78o+F6BwqTRKe3qjofRMPHlN6uuJwvOf8thzxMjm/p81gtAQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"Ou6+3ps85ADWD/TDeXhqkJ/X38OI+lmHgh2HXkEgtv9H5Z5EQlmHeHt7NdHFQls+P4yRaRkRgsXhry3+mvHvow=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"K1u6l0tyY/eIGoT4U17FeqoWlaBwQC9LCoGpCFZWCuhcM2cB/BciUFTZfyHehEky2u2z8n/GneEMXIJbMCBKmA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"v0RPJNYv/Cl6pDpUdHCmsZUaFcCsOvkDqFkaaHh7O31ktaHQXQo9rZMECbv29ZyFcks4pYULxEIwFHxEcxbXaQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"10000000000000idk"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"ba32AV1gqGcoXL7kPsVr8MEjBhC/Chxx37sHJ+JTEwMUq/bYlokLYMTZ0zY4JSMUSbFxF/8LiKauZP2e5yaNRA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1uatom"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"+1qQQOz3RP+74O8WDQrpD77aoRzVII7JbHyV+y6X0/9CFYUWAi+mUtaFj7F3QedKGsZ/P7W437DdaKmbFVkFBA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1uatom"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"E+/uHk1B2YarS0XtLgOO94xmDKOu4CntfAqZxZQdFvR9LKBJdstPHmnVGzKa0vC/JACI8iZR6RF7B5990XA1UQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000000000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"yMhol6/+ZZsk8hvJ1KaQtSyCKDYqGAQEQALXdgRPOhtdrzGvBXxOE09xK4fYLdZq0iRCY38YxcZNZZekOtRLsQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"10000000000000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"d8lfv9TkkgfqX8D/PvJ3gacUs8T64GH7tp5b+X2BmvwP3L+f+nKeio31sQT5ikTJQM+JdGLr8l8vh/ATIQOXIQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"100000000000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"fNkR19V1CJgH9d1zWvLSqtolHrkA1iIfve+K2N/CH+t+n2G3aAB4ni9HNstCyAra7HUV0sIfpMT/1zxZJKch5g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"100000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"/DHNg3b2Knmi1niHONdiUQl4aOYxO1H4pwUt2jCYJ28GQODhl1EeQg/UW6m64ttppxWgP91rmFYL1uuVpIqGwA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"100000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"nXznOvAtVhKzMIsrXr05OHwWLaiFpzHxChAFjuzVBglUnLFpfEfqfKzFo/L15LWKHf36aQQFll1JuF9h9KmRzQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"100000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"l/BCo8jrdtEgaCCZ0KQcENooyuCJ0PyfENTAbuHAiLIwE1BDiLcH03NRCD4q/Nmkc2Wq0jVY/Wg+MxvDube59g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1star"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"Cl+aW6yp20fnxHLr+F2Sx5TooIcATVCHx6DKt+lZTRED3eyeqbazjiJRmw5aC5pf1N0tPpbbGEbVIIQsrGrCmg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1star"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"C1ujTmbLb6SCixaCreDFbIt4H9LAD0O5Ko5ykk7Z8RslIvshQojqlRFPl0eJw0zt0QVDnLe+5qVEKg9HqBhPjA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"100ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"6e2GbwtrueutflIRoWjPyCP+XjqILboVlWt23cpq1HRmK77vXin60uyv7KU/sEVQU1hfzzoMdxfIvzd5vHcbcw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"wx4jo8w2rDVA3C4DLwaMnzu9lfiGLYXvN1Rvefd/1iU7e1LwZeDVoR1oss5ltnJnCX2ghtn5ETuWhqPImuk0CQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"+Yr1oQCQ8xQmb1OQPyv2lbDdPU08pdamXGZ1C7jkCPcfAMeTp1w+Zo+pKVBa93OSICl3WNxxXy0+doEasZl8Jw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"0+KVDYhB57Jj4NbcKSQGgY9aXVId8xEsv6s1KFOQEmZk4ZgAJdoDxDakSpMirkh8HMHCm6R35Dh/OBmLt/GwMA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"OxixIQ+5NfkrRX1hn/6bjpOjWXwWryHe1oO0euUqPhNjuRl8koJm1AffSiDmUryAsRf/JJBzZI1xcm0iTCVuJw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1441ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"5DLC6CfMBpg/mgtQp0F+l31DOm7abbdlINbyzV1rdRwb3CLrqKZ+9L6cNdhZwnwVOBtAT14NKw8lU3bFIu4zYg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"14","func":"14","args":["14"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"S75SZzgKc0q7f3P/6fHWecAPz2tzqaTzTTzcxv4cLvF3TfdxQKsaTQYS/ybTKv2mnGo1UqbdWTAWjfdFiyiy7A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"d1IxtSW70AmaW0pWvnjT15+2aOo5KZAjrVf0uvDa9Yxh/OKbwg1HYsXQUl9/q85VlO1sDO/gs+tBGU5YpnVLGw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1ugg"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"Yzc83+kfsDR10WL2ASwjyEM6JzBY3WZ7v8dV/W8/Ly8xAYZFCx8f9kDaVXgA3mgdzs/jF3bL/MEs5EvOTs0mfw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1abc"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"bGNdbysnDwZU947yAmCFgj84dxjPraJMNuhYO2oZOVk5HTTA5J04BKKGpKyWl8QGtQsUlusDwIZBYflzC5ZknQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1adc"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"RRL8nJtVVzPu04Bj7tBXG8bGoFxrk6j4TEnG+KH9znErEu9MnS9RrmLARw8LtzJhNpxRoDvCu0jNYKDfVQEOVw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"3adct"}],"fee":{"gas_wanted":"99999","gas_fee":"3ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"0OzTS08EcGBKmPNAp5nAUC+T1QYlSlydAD8soXwL4ckqufhGlQflncf6FwW8aCc2mjSwUwqDrCkvhG3eSHXvsg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"3adct"}],"fee":{"gas_wanted":"50000","gas_fee":"3ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"0sSgsVFmbUj+DIuHgo34fyybyCrfeBZNc5EPXR6TWNIjKthsN20YgkgA4oL+dL+KWUa86VtLthyC697TDf/xCw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"3adct"}],"fee":{"gas_wanted":"40000","gas_fee":"3ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"hHhJRioI3wzqgpHB4c+o1U8qT3yghs0PMNXlB2bKznQKTOxeZ77DXyJpvNE7hyWpIwotvN/1AnBZLLR+AV6FMQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"3adct"}],"fee":{"gas_wanted":"30000","gas_fee":"3ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"vkziqGC1uV09CoVVoavmC2+OF38tWGaK1k3lTvIADuUh1h+9NZc11EoU/LooCkLM/A01JDBXowT0D1cfCvuhhQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"3adct"}],"fee":{"gas_wanted":"29999","gas_fee":"3ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"OobIcnOeHEByB4nn+LEw2pKaPaMCQN6aNC1jA8fYAfNOOe9CllA/iNaA7EITmXwFn7QaDqjcMzSLPp4TxcfS3Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","package":{"Name":"aabb","Path":"gno.land/r/demo/aabb","Files":[{"Name":"aabb.gno","Body":"package aabb\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"vNpjrbDronUi0MMAffJyTIOylGZExiUBbD70Z/kRXcJBGBVEsMSngdAyPs7GPw9bfs1GfYfuMyJTVFXhHIzXmA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"jQodLm9PwnoLN2Sc+84WtXD96vpJQ9jF+WWQ0fjgHUYw/kxIqrJ5m1+AydRAFHhPkCKk76Ph5Hzji8W61SPioQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","81"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"f2GSCmSV/bELI75NCbkGCT7YFuY6p3W2aKO0C2aOdqF9MXVtuPFkNW0MCgOCL2CEHNWfqhlMvFd6ARAM1O1rKA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1l47x640c4petu4chfjge3qg2uplakx78hkxqxd","20"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"HXbUTjni/wV5O7B1SbwO7yEo+0neIN3TeBhsTC9mMBIh2OR7AhPvse6LMyC95z2hO+zov/boXQFCiqRZCxSL7w=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"VxUkA2MtQJW5qScqmWIvNTxpeJ64d0uGbnkEoZkb2mJMq4ib+cSZmXQ51WNRnjJbrpjGeKVy+B05gVCGZ45JYQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","101"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"X/JnDnEu/TET0mkTR67Ypl/2njNGUdwVyYdgVbBPxN07w0LVTHl3EEJKjoHgzB/eX5MtaWBpaEnMMXPUqOq6qw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g1l47x640c4petu4chfjge3qg2uplakx78hkxqxd","187"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"Z8/WdqmCgDlkaHImSS6jw+5J6d8DAk1Iy4ddpgehZ8YOfPfT9pxwCRy1dR+xsrirFX1+2NhnggNwtMpNET1WJw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1l47x640c4petu4chfjge3qg2uplakx78hkxqxd","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","187"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3+XBwhRNxB98UM5CE/sbFKQFUNrwd3wclkoRFngQHN4"},"signature":"MZodSB9SE6zTagm9LpYXPeuvyK/0Avrf+0iFk6V1IkkNnR9IC7C5SwVD2flHk3ESX2Hupl+cMHgUucuWv+8epQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"10000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"v5OOJgz0G+9GIHwBq6hg9kHp1NDSE+o8J7G9/P5GE0QdJLiuDFvmT802Vw0theKuMpJvrr3g8Tsmnt2rYR1lYA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["10"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"CbxmpSTHFNLTe6YITStMPeK8gthS/H1yujMhSxUH38JP0V1MxDmkNJXOAODn8Plrd+c+42rjq+BBifXk9MCEBA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1apawtjjc29wr9s6tq7y2kq8xwnn4smap9lgkzc","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"yRsuiEkiSdQUW15aFlCKHAF3iKf1bVAjcGB0P/KaRf18uN8ak1trp4i6W4gEoT1P4K7WlBJZ50GqymYRb01pXA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","to_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","amount":"22119034564ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"Gw7C3fevmDq8l1fGVREasSHd0S8zGgEAwIP+JYSTHlVZi5tmieHTCRFTNvXQFyn6/QWGP1MagOQOsQaYZ+ycQw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1d224yhcszcr2z9qjww046ffppprh4n3al5tc2d","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"zOUGdXSfAeviATsfFMw7NLoR6rQmTZRf3c8GrP6iPaYzs3f1S1srOpyCPuoNn//PnahGTpu98WncewMGioDTPg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"hello","Path":"gno.land/r/demo/mul1","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","10"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"tHHkiN9xl2CajmId57HM/MviRdJ0uLweAselgmM5vE8poYkPJqGKAXpglDBxFaToasAnilKJyKJuJQ1/gsfluQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mjzyk7r49ta4h6ppgv2fedgz5ek6hgyttge9pv","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1hxecqgcv4f0p7s7ap6t20vaeeuvqgvl9qtchr6","3"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwpFZ/Eba2YD0tSPYISodHi2gBBhx/hUg/PPZTt93aq7"},"signature":"63qCzoytjKntUnss1ESOm30qhJL9tccyDnZCfPKiE4chUn6mjBYcNI8AJGQCvLwkX0Cqt0wXJNcHImjw6M0qjA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1134569100"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"zj6sicncfxTvGP0Lv6JSscS5AmACMLhuwaxhfqoWbnh90LWknBAYaZQIvyjNSTeJ7jrxR5MnBvNRAqAeK4ZKOg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","1134572000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"bVLde+qQfC1GNpJXPPoHIQjO6Lmc/eEvT0CEEY0pDmA5Fy7k0J/WIMj7hJjdwce0uG44c5MpCOIMnkpEGpTj8w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","package":{"Name":"cinap","Path":"gno.land/r/demo/panicker","Files":[{"Name":"panicker.gno","Body":"package cinap\n\nvar ErrCinap = errors.New(\"cinap-err\")\n\nfunc Panic() {\n\tpanic(\"cinap\")\n}\n\nfunc PanicWithError() {\n\tpanic(ErrCinap)\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"s0DjBc43PXddMRTpRBb7jK6xW2Kg0TQHl6yzwxTfRm0HVyMz7QBdWmw9y7ruHD4UvXtDUoSdQNbXgJt59HqvwQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","package":{"Name":"cinap","Path":"gno.land/r/demo/panicker","Files":[{"Name":"panicker.gno","Body":"package cinap\n\nimport (\n\t\"errors\"\n)\n\nvar ErrCinap = errors.New(\"cinap-err\")\n\nfunc Panic() {\n\tpanic(\"cinap\")\n}\n\nfunc PanicWithError() {\n\tpanic(ErrCinap)\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"IOvjGtmOPtbBZct0jb3e1StlcrmdTh7B0tDH168w3o8mfZUu8To9XXQkGCQO57zrQUrWXpB20UcOwiBQpSZv8w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","package":{"Name":"cinap","Path":"gno.land/r/demo/panicker_2","Files":[{"Name":"panicker.gno","Body":"package cinap\n\nfunc Panic() {\n\tpanic(\"cinap\")\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"uMw1MEG6iuszNYSNyWOCLXQPveuNFQzPr6Vxdz+Kyl52ImFTfBg639dRqpbQyHddltrLyOI+ZeHYzu1KJUoCYw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","package":{"Name":"cinap","Path":"gno.land/r/demo/panicker_3","Files":[{"Name":"panicker.gno","Body":"package cinap\n\nimport (\n\t\"errors\"\n)\n\nvar ErrCinap = errors.New(\"A wild cinap has appeared!\")\n\nfunc Render(path string) string {\n\treturn \"\"\n}\n\nfunc Panic() {\n\tpanic(\"cinap\")\n}\n\nfunc PanicWithError() {\n\tpanic(ErrCinap)\n}\n\nfunc Error() error {\n\treturn ErrCinap\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"khnPz6YR6ghqrWw9yP6qzj10XYtSIUvsm8Yx+BWYdUYvAFZ4EyLGAJQ5ZvG2Rdux2bsYRZpk8YuTg8CBV5AEaA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","send":"","pkg_path":"gno.land/r/demo/panicker_3","func":"Panic","args":null}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"CGmbkGed65k9VStOwPg8wgRCsHMgGuNYir9z5rFZUgQ5sgGtSKFun19G0IVACQxeolB1xpq/DT5HH3tp2jMCDg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","send":"","pkg_path":"gno.land/r/demo/panicker_3","func":"Error","args":null}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"VnREqYNKbpIRDClpONEIyFYLQpwYeKLa7eZcL6MX5ZlpQ20nLZl6RnjaoIjEW3mQ1NfuEISQrUhsr7j/o2XjTA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","send":"","pkg_path":"gno.land/r/demo/panicker_3","func":"PanicWithError","args":null}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"ABtOSzVagk6xyYuNLHNJ76zAm9+jWuCmFuRy65E7qucsyYPXhUkgwc1K0MwlogbTPrKtCy0wuKxDZG6XBwuOWQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","to_address":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","amount":"1000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"2pgQ8aW8Rh0OGAeAjF+A/L33XmAX9yxSXrZtKVMmsmMGVuyI/9v0u1fXzUl89T04T9CuE7huGVVS62XNgoQMKA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g1q0pjk6dd6lehd5q3gcpghvcf3rd6mqy7tge4va","amount":"80000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"HyilxfEI+FKBW0iBARJ4a/BWM70fMYOloPFdQHmBfplFGSo+DxgrkyN8MTEKmze8fkBn7kB+qsUTG7+Fqjwm/A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/gnoland/faucet","func":"AdminAddController","args":["g1q0pjk6dd6lehd5q3gcpghvcf3rd6mqy7tge4va"]}],"fee":{"gas_wanted":"1000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"pqzIIj/i7w7ZEtWg33gTpj0dhe1/Omsx33Uue4dUbFhdXkK5fKRBFmwnvgEUft5fMB0sE1CBoUaU4fsNnG6gIQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g1q0pjk6dd6lehd5q3gcpghvcf3rd6mqy7tge4va","amount":"80000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"P7oUIFPyYsGrZPnT0lNL/KXQVr9hDdpvknGiB+q+9ewrwnotMmyzt9SYTFU5JD3m/Sn8i4FzNV8SrbcATGbVtg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g1q0pjk6dd6lehd5q3gcpghvcf3rd6mqy7tge4va","amount":"80000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"IS7pKhT6pVRW+/MG2R5r0Ml44nIRbEG2BZTQ1sh3iaN78z5C1TiT7yi0lamGkvbANPrDyz8E0mZA/a8mqCiQAA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"ZrtrHh2de9sVuUYu6xzHL3Xb6wB4UZM9x8tXlWqn7WRTVM2B9rhEsWY0AqQhW89vHmWY7+Lc+T/yMGF6ASgRrg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"Mqmf6lDLv35TSWk5WhTPxvSkXAGkbETrMRhaXxWNFQo35q0IdCzTtcG1LmtXOXudjJhZMGJpEwNxZDZo9gIU0Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"7Q3KTCOGmgfbFJvRYekR1F5GpFlYXJJUdWp0o9slV4MfBy+txjo+k7PUzUE2fcYFWc07t8Y4DUkUWNw/ddgJfQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"ijn/KxeOWLpg6QZzfyATJE4nFYTkgqVpTTHHPirxh+4EStZ9VfHdrUJQ2MuRKIolfStxdrPnTufP3gETLa8qow=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"eSkR94accWqFUoGm/yBu13n0LHfCyQ8cFfMu39KyUP1PxV3X2xXhGhqMW09/3hicP9IBpCQaFmysxXAqvsGLEQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"//YrCUp56mqKuqu4zLiTC0J9DJwMg5gevJWRDu/J0R9Q7UCMRomLibOgFYiu9Y0WDRffeAm9MofgK+QhCOAvAg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"sdReF25NXimnb/odrrXof1NeMrWJ5u4Z5aZw65fvXul5cepplJgV+jwiJkriazwaOor33Wq8QGJ5M3IVnvi+Cw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"Q9OQ9oQep4gqEdy8vnzE45nUNlCixQ27EAllAJmzE1NaCNaZBhRjAV6soIViKcvI/8nHDCzj9qwQl4ptH7Uv/g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"k+xuaPh22GTDFGPe0o87l4TV7g1VaHHGRV8i/BOqsNA2wo+VnjGAraGIIdh+yXcVcot6W78Svj+cCNA9/O+Asw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"U3CEooJ2NrLBv6nOmGCcdlMmQpT8oDwUWr6XgeAL+AIHcF7a8wRXMUnCv1qI1EUcQWq5vCQNXPF17XAOudm5kw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"y9rXUyBrb4odRMr/2weGNjvTfAR1KCCv79ZtKf/AGYwpES0kQofvcbWtyYlLLcN/6FR+3i/cthWDFq9z7Zb6pg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"HN2paVWvvraGbHvLLtkLKyr0eyV9gQWqpiWpaRQ5/6UJtVGZ/lcoE1oPXETsR92XvnWCmxem2t0mfdS0SmPRqw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"Z3G9/2118MGJT0jKHkfJYh6dIiwD9F8Cb/NB4a3JJM4TPbyjS9LhfEb4kMWCQeL9Q3Z0WvVPo7porHG8hYwFTA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"/7acMiDlv6Ir0AdNCCAC8CNJntJ3lRNpIte96Eg5IHpnHT2uFcj85ohMgrzr71thYxbHXPUh7POitjLeWtwNNA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"/s+O1aAA2uZKXU0+fyQtSDF+Z4Va6htb48dRbN+yjMlAhGAyxfzAq7fkZ6ieCcmn9AKIv3OHuERNhGxu6cTfmA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"irqmA63P1V/bcwXoigMhfi2Y+EYk8Bf2nBQrV9wd1wBy+TBWKfW2T32MM5HFEhNbeUn5NUr3db7L5ED7WRBY4g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"WBPCRcQYLvpLnDrDuxtQ9izrlKAWbVAIp2lNbchmaE9mbXH6eH5i8uFZCrPy3a0tgpMbUa/GLL/sV4QMwEG1ow=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"lEBNnEWFIIn8m3C0hYJgfJmwWofDYeZJEeOwqSCChlASVrCkC5Wb7aLlv2NtaG28g2oSf2DVothgAbxqGwH2Fw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"o5e9YsnJHxiga5J0cUaEomYuc8+RxCdmrUeCd2fNTiwqlheMXtHBmVheXSu/gK36dEAHX4ZQIfRjrAtzPsa6bw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"B9jG1IRup3FAiU2LeMOV5mp9mFOFqE8MppkM2nuGG3cb3r9+fS6FMqeK+BVdxhH4wi0PZKfBDBuEE1vKy3Wrfw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"zLqZ1/ePB3sh9/h84Q4bQs9kGV9OklEklSgtBsZykSwbwwJPcmF/nCqgeVyo0E1vXdP+UuXiKVefHd7UHF314Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"01d2ycBGpVs5pTwIAJsoJKmBJ/FliZD8MbET2aPpxXpAsPmRsZj//d50yxE3TuP/ZrtLWwrJqnUMICKtxYFJPA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"mqJzSqg7PIe3ImnZlIlJgd+V8PuR8r7/H7jYLxwEoGszba06dOWYa/O6INB4dQpqKEIFjYXbCimeVT2l2ld1xw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","package":{"Name":"aabbb","Path":"gno.land/r/demo/aabbb","Files":[{"Name":"aabbb.gno","Body":"package aabb\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"ZUM6neoR40ZyHugQnnwCcF9YvgdKJopzffXoKaFW3w4+b/MqoodIDkq7p7CurQsNLvPqI4abTTMe6g8DyjBFbA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","to_address":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","amount":"100000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"CTEMHPVw8/O2olpetp752xLQQQXnHNyMnFGaef6LpH1tAKLI/PZ1/Z5aABBxIrNhsgfaUJrbnu8+qxcF46lEhw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g1q0pjk6dd6lehd5q3gcpghvcf3rd6mqy7tge4va","amount":"80000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"rcUT8hrzIuq2WWcfYHHKucWAEOONg1LZPvUD10Z7YCktecZcR+mKLsj+gEW2+HJ/rs3uorpTa2q8ziSv2wUiDA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g1q0pjk6dd6lehd5q3gcpghvcf3rd6mqy7tge4va","amount":"80000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"LBScWO8mfzenB8VJg29KqOOcVcjIrgw5qE0NMf8v77IEdslLC7Z4rvpL3QZ6AuYRbqcYutvxNgz5m49IvIwFOw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g1q0pjk6dd6lehd5q3gcpghvcf3rd6mqy7tge4va","amount":"80000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"qAPTH+/zMwPmDp0J/oUccBpiIxvpNRvmrnPnEJWK9ctcfkmsVWKJHCBHNSoRFIBM0XrWEe1ngE+vSnKcG56PZw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g1q0pjk6dd6lehd5q3gcpghvcf3rd6mqy7tge4va","amount":"80000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"i3iatIhuPeOdHEqzyvZKhg6aEMK5uO35OMdAbw599Ix1j+6DDdJNZeIdjN+Op4QXP8dZ2RjZ+vyZRO7o74WN2w=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g1q0pjk6dd6lehd5q3gcpghvcf3rd6mqy7tge4va","amount":"80000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"y1vYMDhl1PI8eVFbRY4EpzB2PxLNhWcCCTI5hScssL5MDiDB+3Lw5afuLMVatUzLulmc8BOlWbaR1+uEekdOUQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g1q0pjk6dd6lehd5q3gcpghvcf3rd6mqy7tge4va","amount":"80000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"B05ApIj8roLnGW6epSimntTyEGoGrkIlqsJcMmI7cB1C+YrjC8o8ICc3B4aJKuoI9sB1jCKflu4RfQSmu/yPxw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g1q0pjk6dd6lehd5q3gcpghvcf3rd6mqy7tge4va","amount":"80000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"PnD4X8rXJqbk+caEAVN9OvSXCAmUMk6u3aZTboyO+Rsi54tdPBRbY5WLqefzIoGXsr8UwjHvxTB3JjCJodGQ1Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g1q0pjk6dd6lehd5q3gcpghvcf3rd6mqy7tge4va","amount":"80000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"nyaAAYChoK4sHg25HPvG/JhL/MABN5zBL/0mbSRMv91o+XxBagAB66gqhYFXDzWQVbqOsgp1ST1R7xzuxnATUg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g1q0pjk6dd6lehd5q3gcpghvcf3rd6mqy7tge4va","amount":"80000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"qjkWnvx13+71a/ciN1/WWQAWsESqG3f6+b4DpGkB2ZB9mECz2iSDq3oLaP8u2w5jIfGNsFJm1jMC1VFYcC1t8g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"hello","Path":"gno.land/r/demo/hello222","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"5000000ugnot"},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"CZc7gq3sqHb4kDMkMNNFQ/2eIM+o8y9qn3W90ixZ4vc50ErDugEMJAq9E00KLVwRw1hnqb4Prn0XKHarEzh06w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mjzyk7r49ta4h6ppgv2fedgz5ek6hgyttge9pv","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1flk9z2qmkgqeyrl654r3639rzgz7xczdfwwqw7","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwpFZ/Eba2YD0tSPYISodHi2gBBhx/hUg/PPZTt93aq7"},"signature":"GrA/hg5b6aSeaBZb0YkhFJAyYZvUJ6r7pnJrbcjCeuI07dy70lkiP0k40KHIQ4CptWyE/WrogK91jiLy2uAxGQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_3","func":"Propose","args":["0","Create moderated board","","AAtDcmVhdGVCb2FyZAAIbXlfYm9hcmQ"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"xVGoL1C6F68QRjFX+DOg/3iviGJKvgT0N5OvFj3N1FRLScDusSt+uSk5gEycuy2aXXKS8qhnw/G+DCLyEFim0w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_3","func":"Propose","args":["0","Delete post","","AApEZWxldGVQb3N0AAAAAAAAAAEAAAAAAAAAAQAAAAAAAAACAAlEZW1vcmF0ZWQ"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"voL/BEvmlFTiV/gJzowxTo+eKiTrt27vzQ3+X6J5RrchO9pvcESogY/IB7vwjU3NYlCarHFzIvCs16vmHy4AdA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/dao_realm","func":"Propose","args":["0","Delete post","","AApEZWxldGVQb3N0AAAAAAAAAAEAAAAAAAAAAQAAAAAAAAACAAlEZW1vcmF0ZWQ"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"oUunI+xM9WVKmuFVaLvhs1TNT7FTp0+MfRXQ9Vxn6dggexucq8Afe5w78B13D09+KEkQKvkkAtN8roZ9P9k1DQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/dao_realm","func":"Propose","args":["0","A","B",""]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"yBIUo/7vgBFG1zXzlut4qTL7rxGmSBx9XPcW97s52ahAAdZpAzF3FRQUJZYikyxz+BNL6X13WFnF2tssMtjqSQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1x7mvd7sr7kxjt87hn56dmx5kyt7q0e7qgmwys2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"xq/Pbl2c0GrALolL41LpY8JL53mNksKbjG9VT998KTUbHzvBAAJWBdwiBuMauZZ5QsBVVw5kRWwkvzrHUS4PoQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1r8r79suzvajkh047qss09ce3akegaqars3j6uy","to_address":"g1x7mvd7sr7kxjt87hn56dmx5kyt7q0e7qgmwys2","amount":"100000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxBOIDQaEvDBJrHMopsYcZDKDwwRLQ3AqoHUYa6gDbYM"},"signature":"/izeGQemxvXUGI9PVQ7/H1NFRmKMUEUahSo8TMr7+1k6yaUHGBWxRsGSRegfoK4PVmxcdEBe2BcoTAZ0Apt6SQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1rv4myhkefn4592w42kv80fsxqn5euup0d3x44e","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"E2J6D2+HUiL/1Nh+7sfFgxG00DahjZo9nX2o7ys82UtUjOHCfjI21rWRk4102mhbug4EQmnKjh79YBGb/Z6QWA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ln2usxhhlz52azszw67xxm2x04nmq5xl9y8dmg","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"1RKXiYou6Rz1L9O6JM+gMdvyT1pkw4exF/+YmMqH1+kBr06MGh4vdz25GMZDzdio8432iraBt82vftGWFmNifA=="}],"memo":""}
