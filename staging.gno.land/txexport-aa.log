{"msg":[{"@type":"/bank.MsgSend","from_address":"g127jydsh6cms3lrtdenydxsckh23a8d6emqcvfa","to_address":"g1e8fjg979chpa0a9jm57ve9uv8p8c6zw6hlta53","amount":"50000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApFD0bqBG+7AAM8XJGJXtPCQPf571XuNwriEn4trrXcK"},"signature":"t4SklOOiEFAiJW67SUV8H5HeREvdX033tpkAy26HUrNhYVcWa9ARxORtNdbFOW+cItJJHjDivxUIIo6NR0JpbQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g127jydsh6cms3lrtdenydxsckh23a8d6emqcvfa","to_address":"g1gnakkugdgr5khrvxxy3fcdxtv6ka7vy9e9dcll","amount":"50000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApFD0bqBG+7AAM8XJGJXtPCQPf571XuNwriEn4trrXcK"},"signature":"Kuj1QDs2TWwTNtlOCbAwhnggFofK/rwKEiadgg/WKTM4CRgLSHOJxMxzPnPFAkBvtBJElke9NNDAAyR3wLWTmg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g127jydsh6cms3lrtdenydxsckh23a8d6emqcvfa","to_address":"g1x2ft3vpzp5syp5x5tqktrep67tqvvazag3n2hm","amount":"50000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApFD0bqBG+7AAM8XJGJXtPCQPf571XuNwriEn4trrXcK"},"signature":"2+TX1kEQ9X/TmgZRwFKwuCKumJz6Jofo9RJlRlCGkQNAopq1Cpu+gOwdbi9vVSCPgZy/9wCX6xYE0YQVPK4GAg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"vault","Path":"gno.land/r/demo/grc/exts/vault","Files":[{"Name":"vault.gno","Body":"package vault\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/grc/exts/vault\"\n)\n\n// FooToken and FooVault are exported. Other contracts can interact with them.\nvar FooToken grc20.IGRC20\nvar FooVault vault.Vault\n\nfunc init() {\n\t// generate admin and mint some tokens to test1.\n\tconst test1 = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\tadmin := grc20.NewAdminToken(\"Foo Token\", \"FOO\", 4)\n\tadmin.Mint(test1, 100000000)\n\n\t// publicly expose an unprivileged implementation of IGRC20.\n\tFooToken = admin.GRC20()\n\n\t// publicly expose a vault.\n\tFooVault = vault.New(admin)\n}\n\nfunc MyBalance() uint64 {\n\tcaller := std.GetOrigCaller()\n\tbalance, err := FooToken.BalanceOf(caller)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Deposit(amount uint, recoverAddress std.Address) {\n\tlockDuration := uint(100) // in blocks.\n\tFooVault.Deposit(amount, recoverAddress, lockDuration)\n}\n\nfunc Recover(target std.Address) {\n\tFooVault.Recover(target)\n}\n\nfunc Unvault(amount uint) {\n\tFooVault.Unvault(amount)\n}\n\nfunc Redeem(amount uint) {\n\tFooVault.Redeem()\n}\n"},{"Name":"vault_test.gno","Body":"package vault\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/testutils\"\n)\n\nfunc Test(t *testing.T) {\n\ttest1 := std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\ttest2 := testutils.TestAddress(\"test2\")\n\ttest3 := testutils.TestAddress(\"test3\")\n\tstd.TestSetOrigCaller(test1)\n\n\t// check token metadata.\n\t{\n\t\tgot := FooToken.GetName()\n\t\texpected := \"Foo Token\"\n\t\tif strings.TrimSpace(got) != strings.TrimSpace(expected) {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t// check balance of test1.\n\t{\n\t\tgot, _ := FooToken.BalanceOf(test1)\n\t\texpected := 100000000\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %d, got %d.\", expected, got)\n\t\t}\n\t}\n\n\t// transfer tokens to test2.\n\t_ = FooToken.Transfer(test2, 1000)\n\n\t// check balance of test1.\n\t{\n\t\tgot, _ := FooToken.BalanceOf(test1)\n\t\texpected := 99999000\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %d, got %d.\", expected, got)\n\t\t}\n\t}\n\n\t// check balance of test2.\n\t{\n\t\tgot, _ := FooToken.BalanceOf(test2)\n\t\texpected := 1000\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %d, got %d.\", expected, got)\n\t\t}\n\t}\n\n\t// test1 deposits 300 tokens with an unlock duration of 100 blocks default.\n\tstd.TestSetOrigCaller(test1)\n\tDeposit(300, test3)\n\n\t// check balance of test1.\n\t{\n\t\tgot, _ := FooToken.BalanceOf(test1)\n\t\texpected := 99998700\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %d, got %d.\", expected, got)\n\t\t}\n\t}\n\n\t// check balance of vault pkgs.\n\t{\n\t\tgot, _ := FooToken.BalanceOf(std.GetOrigPkgAddr())\n\t\texpected := 300\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %d, got %d.\", expected, got)\n\t\t}\n\t}\n\n\t// test1 calls unvault for 50 tokens\n\t// and wait 101 blocks\n\t// then redeem it\n\tUnvault(50)\n\tstd.TestSkipHeights(101)\n\tRedeem(50)\n\n\t// check balance of test1.\n\t{\n\t\tgot, _ := FooToken.BalanceOf(test1)\n\t\texpected := 99998750\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %d, got %d.\", expected, got)\n\t\t}\n\t}\n\n\t// check balance of vault pkgs.\n\t{\n\t\tgot, _ := FooToken.BalanceOf(std.GetOrigPkgAddr())\n\t\texpected := 250\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %d, got %d.\", expected, got)\n\t\t}\n\t}\n\n\t// TODO: additional test case(s) for func Recover().\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"6YU22+XzrfzzI0gFkYPPr7v2MWB8n3c8WzlaZ3hI34R1AKMo84lN/d/a3q6rCKAYtgtVMXzYWhYqRaYjAb1Bww=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g127jydsh6cms3lrtdenydxsckh23a8d6emqcvfa","to_address":"g1678sw4dcrssm2sxf8rf33vvanhdcyr35yj2tgc","amount":"50000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApFD0bqBG+7AAM8XJGJXtPCQPf571XuNwriEn4trrXcK"},"signature":"tpAtRI19aO0PlZVi8BAZko+qcHtHMVVPYjfBgwcroEI+i3xlYk/Xj/bafZBWvLtmGDpCQLQr2CAfwSKPebiFIQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g127jydsh6cms3lrtdenydxsckh23a8d6emqcvfa","to_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","amount":"50000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApFD0bqBG+7AAM8XJGJXtPCQPf571XuNwriEn4trrXcK"},"signature":"pb79JnO2o90SHECx/fI4VQcLs+Zzt+usVoUEajp6sIt36MOWP2HN+SEDbFcUGDYDcyP7Qw7jLMXAuPymAz/eiQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g127jydsh6cms3lrtdenydxsckh23a8d6emqcvfa","to_address":"g1sp2uhv9aprre0d8jc094asx7j2d9mknlkr09ep","amount":"50000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApFD0bqBG+7AAM8XJGJXtPCQPf571XuNwriEn4trrXcK"},"signature":"1k7EPkv6fkYYNyOM+ZoU8sSOhqnC8krda4d1iTNFTtUz8Xu0yeSSsGau+f6/rnmXH/argDW3ekfcfPItIeNvEg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g127jydsh6cms3lrtdenydxsckh23a8d6emqcvfa","to_address":"g1n6cs4y6p9fm44mlegvdemw4wsemvf4cl88mj4f","amount":"50000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApFD0bqBG+7AAM8XJGJXtPCQPf571XuNwriEn4trrXcK"},"signature":"qQN/4DWTq6LfEeGnApvOJEVJVCe7ieHGQQrxGj+/3p4V8djUWkA1VIylk4JZ+c9sCL1gJchF9N2zbunaI/dSgQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g127jydsh6cms3lrtdenydxsckh23a8d6emqcvfa","to_address":"g130q9pzkadcq6wypx7ysjwmnfe0y5yzz554ae4s","amount":"50000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApFD0bqBG+7AAM8XJGJXtPCQPf571XuNwriEn4trrXcK"},"signature":"yOj5GtYowubBRp1YcmzBk+TyNHrHVoDLzbnwMStdxiwiQ9GPQdjLeme+LRBt6Clwaro/RPrmKXRgSHC8bAxIgg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g127jydsh6cms3lrtdenydxsckh23a8d6emqcvfa","to_address":"g1ye8xtap9eh6k2tmc7v9h8c38jtxzr9p74t8ner","amount":"50000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApFD0bqBG+7AAM8XJGJXtPCQPf571XuNwriEn4trrXcK"},"signature":"nKLQFHR16/D16T5JIk2VyT1ITZlUJk9uCRQsfCcSQ8ovuw4ZJLRPef7JtHUJzP8fJTwnSVY0bwtWV4xzmpPtOA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g127jydsh6cms3lrtdenydxsckh23a8d6emqcvfa","to_address":"g15aq8hur3uz7yz2q8juewm2s2rjchgma0tanp34","amount":"50000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApFD0bqBG+7AAM8XJGJXtPCQPf571XuNwriEn4trrXcK"},"signature":"nwjGTlGEGIKfOwoIHRIqGYHKWYUrZbOSj8msIVGbnzt8HGQvqjXSwMjAFrH3v+VOmzmmFUpU4j1orxbQx2RioA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g127jydsh6cms3lrtdenydxsckh23a8d6emqcvfa","to_address":"g1ac52y56apcs5vd43dtu67xryndy68gss09trlp","amount":"50000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApFD0bqBG+7AAM8XJGJXtPCQPf571XuNwriEn4trrXcK"},"signature":"uFCHHU3bohq73C6ftoA2iGV1fe/SWxRv3Dn5vurQ0Y5XUVRYf/Jpdjrlelwy6xC+GFuT9HMdJAdFrwLhRdYw/g=="}],"memo":""}
6dd6lehd5q3gcpghvcf3rd6mqy7tge4va"]}],"fee":{"gas_wanted":"1000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"gNh3g06dZErw6whxXyK6jBS19/ISKZLz14hiBRT350VpWN6NqYxDJT7tV2GPl3R5/B0nU1NWjT6NoK9eJq8VLA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"faucet","Path":"gno.land/r/faucettest2","Files":[{"Name":"admin.gno","Body":"package faucet\n\nimport (\n\t\"errors\"\n\t\"std\"\n)\n\nfunc AdminSetInPause(inPause bool) string {\n\tif err := assertIsAdmin(); err != nil {\n\t\treturn err.Error()\n\t}\n\tgInPause = inPause\n\treturn \"\"\n}\n\nfunc AdminSetMessage(message string) string {\n\tif err := assertIsAdmin(); err != nil {\n\t\treturn err.Error()\n\t}\n\tgMessage = message\n\treturn \"\"\n}\n\nfunc AdminSetTransferLimit(amount int64, denom string) string {\n\tif err := assertIsAdmin(); err != nil {\n\t\treturn err.Error()\n\t}\n\tlimit = std.Coins{std.Coin{Denom: denom, Amount: amount}}\n\treturn \"\"\n}\n\nfunc AdminSetAdminAddr(addr std.Address) string {\n\tif err := assertIsAdmin(); err != nil {\n\t\treturn err.Error()\n\t}\n\tgAdminAddr = addr\n\treturn \"\"\n}\n\nfunc AdminAddController(addr std.Address) string {\n\tif err := assertIsAdmin(); err != nil {\n\t\treturn err.Error()\n\t}\n\n\tadded := false\n\tisFull := true\n\tk := -1\n\tfor i, v := range gControllers {\n\n\t\tif v == addr {\n\t\t\tadded = true\n\t\t\treturn addr.String() + \" exists, no need to add.\"\n\t\t}\n\n\t\tif v == \"\" {\n\t\t\tisFull = false\n\t\t\tk = i\n\t\t\tbreak\n\t\t}\n\n\t}\n\n\tif isFull == true || k \u003c 0 {\n\t\treturn \"can not add more controllers than allowed\"\n\t}\n\n\tgControllers[k] = addr\n\n\treturn \"\"\n}\n\nfunc AdminRemoveController(addr std.Address) string {\n\tif err := assertIsAdmin(); err != nil {\n\t\treturn err.Error()\n\t}\n\n\tremoved := false\n\tfor i, v := range gControllers {\n\n\t\tif v == addr {\n\n\t\t\tgControllers[i] = \"\"\n\t\t\tremoved = true\n\t\t}\n\n\t}\n\n\tif removed == false {\n\n\t\treturn addr.String() + \" is not on the controller list\"\n\t}\n\treturn \"\"\n}\n\nfunc assertIsAdmin() error {\n\tcaller := std.GetOrigCaller()\n\tif caller != gAdminAddr {\n\t\treturn errors.New(\"restricted for admin\")\n\t}\n\treturn nil\n}\n"},{"Name":"faucet.gno","Body":"package faucet\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/ufmt\"\n)\n\nvar (\n\t// configurable by admin.\n\tgAdminAddr   std.Address    = \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"\n\tgControllers [3]std.Address = [3]std.Address{} // limit it to 3\n\n\tgInPause = false\n\tgMessage = \"# Community Faucet.\\n\\n\"\n\n\t// internal vars, for stats.\n\tgTotalTransferred std.Coins\n\tgTotalTransfers   = uint(0)\n\n\t// per account request limit 350 gnot\n\tlimit std.Coins = std.Coins{std.Coin{\"ugnot\", 350000000}}\n)\n\nfunc Transfer(to std.Address, send int64) string {\n\tif err := assertIsController(); err != nil {\n\t\treturn err.Error()\n\t}\n\n\tif gInPause {\n\t\treturn errors.New(\"faucet in pause\").Error()\n\t}\n\n\tvar sendCoins std.Coins\n\n\tif send \u003c= limit.AmountOf(\"ugnot\") {\n\n\t\tsendCoins = std.Coins{std.Coin{Denom: \"ugnot\", Amount: send}}\n\n\t} else {\n\n\t\treturn errors.New(\"Per request limit \" + limit.String() + \" exceed\").Error()\n\t}\n\n\tgTotalTransferred = gTotalTransferred.Add(sendCoins)\n\tgTotalTransfers++\n\n\tbanker := std.GetBanker(std.BankerTypeRealmSend)\n\tpkgaddr := std.GetOrigPkgAddr()\n\tbanker.SendCoins(pkgaddr, to, sendCoins)\n\treturn \"\"\n}\nfunc GetPerTransferLimit() int64 {\n\n\treturn limit.AmountOf(\"ugnot\")\n\n}\nfunc Render(path string) string {\n\tbanker := std.GetBanker(std.BankerTypeRealmSend)\n\tbalance := banker.GetCoins(std.GetOrigPkgAddr())\n\tdebug := false\n\tif strings.Contains(path, \":debug\") {\n\n\t\tpath = strings.TrimRight(path, \":debug\")\n\t\tdebug = true\n\n\t}\n\n\toutput := path + gMessage\n\toutput += \"Package address: \" + std.GetOrigPkgAddr().String() + \"\\n\\n\"\n\tif gInPause {\n\t\toutput += \"Status: inactive.\\n\"\n\t} else {\n\t\toutput += \"Status: active.\\n\\n\"\n\t}\n\toutput += ufmt.Sprintf(\"Balance: %s.\\n\", balance.String())\n\toutput += ufmt.Sprintf(\"Total transfer: %s (in %d times).\\n\\n\", gTotalTransferred.String(), gTotalTransfers)\n\n\toutput += ufmt.Sprintf(\"Admin: %s\\n\\n \", gAdminAddr.String())\n\toutput += ufmt.Sprintf(\"Controller:\\n\\n \")\n\n\tfor _, v := range gControllers {\n\n\t\toutput += ufmt.Sprintf(\"%s,  \", v.String())\n\n\t}\n\toutput += ufmt.Sprintf(\"\\n\\n\")\n\toutput += ufmt.Sprintf(\"Per request limit: %s\\n\\n\", limit.String())\n\n\treturn output\n}\n\nfunc assertIsController() error {\n\tcaller := std.GetOrigCaller()\n\n\tfor _, v := range gControllers {\n\t\tif caller == v {\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn errors.New(caller.String() + \" is not on the controller list\")\n}\n"},{"Name":"faucet_test.gno","Body":"package faucet\n\nimport (\n\t\"fmt\"\n\t\"std\"\n\t\"testing\"\n\n\t\"gno.land/p/testutils\"\n\t\"gno.land/r/faucet\"\n)\n\nfunc TestPackage(t *testing.T) {\n\tvar (\n\t\tadminaddr       = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\tfaucetaddr      = std.TestDerivePkgAddr(\"gno.land/r/faucet\")\n\t\tcontrolleraddr1 = testutils.TestAddress(\"controller1\")\n\t\tcontrolleraddr2 = testutils.TestAddress(\"controller2\")\n\t\tcontrolleraddr3 = testutils.TestAddress(\"controller3\")\n\t\tcontrolleraddr4 = testutils.TestAddress(\"controller4\")\n\n\t\ttest1addr = testutils.TestAddress(\"test1\")\n\t)\n\t// deposit 1000gnot to faucet contract\n\n\tstd.TestIssueCoins(faucetaddr, std.Coins{{\"ugnot\", 1000000000}})\n\tstd.TestSetOrigPkgAddr(faucetaddr)\n\tassertBalance(t, faucetaddr, 1000000000)\n\n\t// by default, balance is empty, and as a user I cannot call Transfer, or Admin commands.\n\n\tassertBalance(t, test1addr, 0)\n\tassertErr(t, faucet.Transfer(test1addr, 1000000))\n\tassertErr(t, faucet.AdminAddController(controlleraddr1))\n\tstd.TestSetOrigCaller(controlleraddr1)\n\tassertErr(t, faucet.Transfer(test1addr, 1000000))\n\n\t// as an admin, add the controller to contract and deposit more 2000gnot to contract\n\tstd.TestSetOrigCaller(adminaddr)\n\tstd.TestSetOrigSend(std.Coins{{\"ugnot\", 2000000000}}, nil)\n\tassertNoErr(t, faucet.AdminAddController(controlleraddr1))\n\tassertBalance(t, faucetaddr, 1000000000)\n\n\t// now, send some tokens as controller.\n\tstd.TestSetOrigCaller(controlleraddr1)\n\tassertNoErr(t, faucet.Transfer(test1addr, 1000000))\n\tassertBalance(t, test1addr, 1000000)\n\tassertNoErr(t, faucet.Transfer(test1addr, 1000000))\n\tassertBalance(t, test1addr, 2000000)\n\tassertBalance(t, faucetaddr, 998000000)\n\n\t// remove controller\n\t// as an admin, remove controller\n\tstd.TestSetOrigCaller(adminaddr)\n\tassertNoErr(t, faucet.AdminRemoveController(controlleraddr1))\n\tstd.TestSetOrigCaller(controlleraddr1)\n\tassertErr(t, faucet.Transfer(test1addr, 1000000))\n\n\t// add more than 3 controllers\n\n\tstd.TestSetOrigCaller(adminaddr)\n\tassertNoErr(t, faucet.AdminAddController(controlleraddr1))\n\tassertErr(t, faucet.AdminAddController(controlleraddr1))\n\tassertNoErr(t, faucet.AdminAddController(controlleraddr2))\n\tassertNoErr(t, faucet.AdminAddController(controlleraddr3))\n\tassertErr(t, faucet.AdminAddController(controlleraddr4))\n\n\t// send more than per transfer limit\n\tstd.TestSetOrigCaller(adminaddr)\n\tfaucet.AdminSetTransferLimit(300000000, \"ugnot\")\n\tstd.TestSetOrigCaller(controlleraddr1)\n\tassertErr(t, faucet.Transfer(test1addr, 301000000))\n\n\t// block transefer from the address not on the controllers list.\n\tstd.TestSetOrigCaller(controlleraddr4)\n\tassertErr(t, faucet.Transfer(test1addr, 1000000))\n\n}\n\nfunc assertErr(t *testing.T, err string) {\n\tt.Helper()\n\tif err == \"\" {\n\t\tt.Logf(\"info: got err: %v\", err)\n\t\tt.Errorf(\"expected an error, got nil.\")\n\t}\n}\n\nfunc assertNoErr(t *testing.T, err string) {\n\tt.Helper()\n\tif err != \"\" {\n\t\tt.Errorf(\"got err: %v.\", err)\n\t}\n}\n\nfunc assertBalance(t *testing.T, addr std.Address, expectedBal int64) {\n\tt.Helper()\n\n\tbanker := std.GetBanker(std.BankerTypeReadonly)\n\tcoins := banker.GetCoins(addr)\n\tgot := coins.AmountOf(\"ugnot\")\n\n\tif expectedBal != got {\n\t\tt.Errorf(\"invalid balance: expected %d, got %d.\", expectedBal, got)\n\t}\n}\n"}]},"deposit":"200000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"yRjTpaP6dKzFjuheNFv/PFcUW1k04ruQfXb/0ZYTp31by4BjGZs3oQ4Zfi16SgVn6AVwDK+hWGboEiMXYSgqaA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g14ykc8d4n2sr9lmlv80cgp2qu74emujyujvhe5w","amount":"800000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"JZzAihkDLXb+CRE+QZCMmfSpfHg6+upwYEyzV2mtZFwfIaWgQbocPZqLseGnhPNajCapA3iJjcR1xpGZ+zJFLw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g1q0pjk6dd6lehd5q3gcpghvcf3rd6mqy7tge4va","amount":"8000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"pJz/8jnKs4SS6LFos8wwvCzroTurqkRP96KfJFomVQAMQ4w8831cST05rHquD0a4XSskheqUyU5efMtTMwqDnw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/faucettest2","func":"AdminAddController","args":["g1q0pjk6dd6lehd5q3gcpghvcf3rd6mqy7tge4va"]}],"fee":{"gas_wanted":"1000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"rWju5o1PMb/qgjKQ04xEVDS0CSFfP8NjnP0ifhhFlhR7fc/1w9ePXjjiyp0zkh0R7CSfovi9IOm6Wb5ZIuCOHg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1q0pjk6dd6lehd5q3gcpghvcf3rd6mqy7tge4va","send":"","pkg_path":"gno.land/r/faucettest2","func":"Transfer","args":["g1374xjte2vqs8numnhv8y6f26shwqh95zkeda3a","10000000"]}],"fee":{"gas_wanted":"800000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkJNTK/s7bhKvtvzSAI2Wu6zX4iUrquUg/i2saXJIC0n"},"signature":"Wa1Ml3iQ/OVZcmvEOAUaiBJLjN3i/Kg6H7ZScKrk0SM+mfVJGgJj9hgRJfeqpyV8MzIgaxOQwzsRAeSGjZ7sFA=="}],"memo":"disccord faucet"}
g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g1wg6v5ejv890sz0vy387efl56gua5nyzlgjh7hk","amount":"1000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"CmKS9y1IElC4YHrq4gzKsOXReSaCQmfveVEDBNzUCuFHcz+CeLlBGKR0732/ATFcmFBjaQIPsEh4ZZYBBwe+8A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1q0pjk6dd6lehd5q3gcpghvcf3rd6mqy7tge4va","send":"","pkg_path":"gno.land/r/faucettest2","func":"Transfer","args":["g1374xjte2vqs8numnhv8y6f26shwqh95zkeda3a","1000000"]}],"fee":{"gas_wanted":"800000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkJNTK/s7bhKvtvzSAI2Wu6zX4iUrquUg/i2saXJIC0n"},"signature":"NrX2hfVFVkXkrS81kfT8hM7VKamuPtF1MN2OT2cP7YVf50nfOgWFlLiu3Tw3TICutcijaGz3YMKvsG2PJrvkHA=="}],"memo":"disccord faucet"}
{"msg":[{"@type":"/vm.m_call","caller":"g1q0pjk6dd6lehd5q3gcpghvcf3rd6mqy7tge4va","send":"","pkg_path":"gno.land/r/faucettest2","func":"Transfer","args":["g1374xjte2vqs8numnhv8y6f26shwqh95zkeda3a","1000000"]}],"fee":{"gas_wanted":"800000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkJNTK/s7bhKvtvzSAI2Wu6zX4iUrquUg/i2saXJIC0n"},"signature":"L2HqDm5aE4gVV/6Z+z5hFAanl3b5QXWRtmMETtwS2fgqYPLBERm4q8R6rbrjRdfeCWzwGxr37Otxew1Kv20W5Q=="}],"memo":"disccord faucet"}
{"msg":[{"@type":"/vm.m_call","caller":"g1q0pjk6dd6lehd5q3gcpghvcf3rd6mqy7tge4va","send":"","pkg_path":"gno.land/r/faucettest2","func":"Transfer","args":["g1374xjte2vqs8numnhv8y6f26shwqh95zkeda3a","1000000"]}],"fee":{"gas_wanted":"800000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkJNTK/s7bhKvtvzSAI2Wu6zX4iUrquUg/i2saXJIC0n"},"signature":"GWqF25HObTu7a6th9lZiEWl3D1SEqtEh3h4jwv/OPKoIb6DX+TK2Eo0iJVUy4zVCYnB9FpUR+PbqRXQIJJ6N5A=="}],"memo":"disccord faucet"}
