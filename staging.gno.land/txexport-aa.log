{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"Render","args":["p/gor-launch"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"h3PiYB2MitBfWuHMvseNZz1VyLc2yK15CYd7XlECzQBIaPDpostbfCgBwFvTTRRSSsh5o8n2ec0EsA1z8VhLEQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"Render","args":["p/gor-launch"]}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"/V38xrJYj2JKUCbAMlfAR7j8CrsHCPuX2NjpO1S1yNw4EDNmL4X9HAwC8N6XbUSzT5ZSMEmgGE+BMQQf58v+pA=="}],"memo":"from gnoblog-cli"}
{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"Render","args":["p/gor-launch"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"2OyQFa+EX1SEMYUDKQZbNfA6eD2jaIOM7T83xT2uYl0atZKUtfldafi2cY7GbgSsb5ir1p01wvv3/Pjknb09Kg=="}],"memo":"from gnoblog-cli"}
{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModAddPost","args":["gor-launch","Game of Realms Is On: Win Rewards for Contributing to Gno.land","\nPhase one of Game of Realms, a worldwide competition to build the best Gnolang smart contracts, **is now open**. Game of Realms is a high-stakes contest with a total prize pool of **133,700 ATOM** that will see participants compete for tiered membership to co-own the Gno.land blockchain, the next-generation smart contract platform that uses the Gnolang (Gno) programming language. A series of complex technical and non-technical tasks will challenge contributors to create innovative patterns that push the chain to new limits. If you’re interested in helping build the most intuitive smart contract platform in web3—while gaining rewards for your contribution—join today by opening a [PR here](https://github.com/gnolang/gno).\n\nThe Game of Realms contest will allow participants to get a feel for the Gno.land platform while building smart contracts and applications in the ecosystem. It will take place in two stages, phase one and phase two. Phase one is about building the core infrastructure, tools, and tutorials necessary to open the gates to broader participation and will be held off-chain. Phase two, on the other hand, will take place after the successful completion of phase one and be held on-chain, where contributors will build smart contracts on the platform.\n\nIn addition to the ATOM prize pool, the best contributors will also be awarded (mostly) initial-level membership to govern the upcoming mainnet. Membership will be allocated according to the quality and extensiveness of the contribution—the higher the quality, the higher the tier, and the greater the voting rights and rewards. The top equal members will be composed of peers who have contributed the most to the ecosystem and have an understanding of its core components. Top members will also have aligned core moral values. This is essential so that members can maintain the chain together according to its Constitution (TBD** and ultimately create a sustainable ecosystem that rewards all valuable contributions.\n\n## Game of Realms - Phase One (Off-Chain)\n\nWhile we aim to encourage cross-collaboration between devs and non-techs, phase one of the contest is recommended for advanced developers who are more autonomous and can contribute with limited guidelines and support. Accounting for around one-third of the total **133,700 ATOM** prize pool, getting a headstart in phase one will allow seasoned devs to kick the tires on the Gno.land platform, contribute with limited competition, and build the tools needed to open the second phase.\n\nDuring phase one, participants will open PRs against repos from the Gnolang organization. Phase one contributors will be expected to document and share their work efficiently to enable others to use it without conflicts. Your contribution is vital to the success of the contest, the Gno.land platform, and the Cosmos ecosystem at large, especially now, with discussions to move the Cosmos Hub’s core operations on-chain by establishing a DAO system.\n\nThe first DAO to be created will be the [Decentralists DAO](https://github.com/decentralists/DAO), which will provide Cosmonauts with transparency, accountability, and decentralization. The Decentralists DAO will improve discourse, organization management, development, and conflict resolution through smart contracts, and will organize itself into a set of tightly-aligned sub-DAOs dedicated to specific topics, such as engineering and funding.\n\nSo, how does this relate to Game of Realms and what type of contributions are judges looking for? Here are some examples, in order of priority:\n\n* **Define and Implement an Evaluation DAO:** For the Game of Realms contest, a sub-DAO – the Evaluation DAO – is needed to evaluate contributions during phase two and attribute rewards accordingly. Using a DAO will allow community members to vote on the best contributions for the platform. Implementation of the Evaluation DAO is the only step that must be approved by the core team because of its key role in the competition and the future of the platform. Once the DAO is in place, all previous and further contributions will be reviewed collectively by DAO members.\n\n* **Create Tutorials to Onboard More Participants:** We need experienced devs to write or record tutorials to help more people get started during phase two of the competition (and beyond) and to help grow the Gno.land developer community. These tutorials can include topics like interacting with the chain from the CLI, step-by-step guides to creating smart contracts in Gno, tips for running a local dev environment, fast prototyping with gnodev, or they can be tutorials dedicated to certain audiences, such as developers coming from Solidity or web2. All tutorials should be added to the [awesome-gno GitHub repo](https://github.com/gnolang/awesome-gno).\n\n* **Define and Implement a Governance Contract Suite:** In this challenge, developers will be expected to define and implement a governance contract suite capable of competing with existing chains’ governance modules. If you think you can improve the governance system of Cosmos Hub, this is your chance to show us how!\n\nPhase one challenges will stay open during phase two. No competition points will be attributed during this phase as the points will be retro-funded by the DAO and awarded during phase two.\n\n## Game of Realms - Phase Two (On-Chain)\n\nPhase two of Game of Realms will onboard more people to the platform and begin as soon as sufficient materials are completed from phase one. Accounting for around two-thirds of the total 133,700 ATOM prize pool, phase two will be open to both developers and non-technicals who can follow tutorials, create smart contracts, or provide other important contributions to win rewards and scale the platform. As phase two will be held directly on-chain, contributors can submit their contributions to the DAO without publishing them on the main GitHub repo. However, we strongly encourage you to use GitHub as it’s an important resource that helps the community gain a better understanding through specific examples.\n\n_We are currently preparing the challenges for participants of phase two and are looking for your input. Let us know what type of smart contracts you would like to see (minimal or with multiple features) in our upcoming Game of Realms AMA on Tuesday, January 24 at 4 pm UTC. Note that this is a text based AMA so make sure to add your questions before or during the AMA in the #AMA-questions channel on the [Gno.land discord](https://discord.gg/S8nKUqwkPn).\n_Once we have collected your feedback and requests, we will finalize the challenge categories. You can visit the [Game of Realms repo](https://github.com/gnolang/game-of-realms) for more information._\n","gnoland,game-of-realms,launch"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"IeDVJKaIq9t7c7J+TmpEKiOM+U+mPKYcyKSiUngZJPsVf14gi8VAWz6vhalVJMB1Js5UNyQsS1npy6kJHSs6lA=="}],"memo":"from gnoblog-cli"}
{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModAddPost","args":["gor-launch","Game of Realms Is On: Win Rewards for Contributing to Gno.land","\nPhase one of Game of Realms, a worldwide competition to build the best Gnolang smart contracts, **is now open**. Game of Realms is a high-stakes contest with a total prize pool of **133,700 ATOM** that will see participants compete for tiered membership to co-own the Gno.land blockchain, the next-generation smart contract platform that uses the Gnolang (Gno) programming language. A series of complex technical and non-technical tasks will challenge contributors to create innovative patterns that push the chain to new limits. If you’re interested in helping build the most intuitive smart contract platform in web3—while gaining rewards for your contribution—join today by opening a [PR here](https://github.com/gnolang/gno).\n\nThe Game of Realms contest will allow participants to get a feel for the Gno.land platform while building smart contracts and applications in the ecosystem. It will take place in two stages, phase one and phase two. Phase one is about building the core infrastructure, tools, and tutorials necessary to open the gates to broader participation and will be held off-chain. Phase two, on the other hand, will take place after the successful completion of phase one and be held on-chain, where contributors will build smart contracts on the platform.\n\nIn addition to the ATOM prize pool, the best contributors will also be awarded (mostly) initial-level membership to govern the upcoming mainnet. Membership will be allocated according to the quality and extensiveness of the contribution—the higher the quality, the higher the tier, and the greater the voting rights and rewards. The top equal members will be composed of peers who have contributed the most to the ecosystem and have an understanding of its core components. Top members will also have aligned core moral values. This is essential so that members can maintain the chain together according to its Constitution (TBD** and ultimately create a sustainable ecosystem that rewards all valuable contributions.\n\n## Game of Realms - Phase One (Off-Chain)\n\nWhile we aim to encourage cross-collaboration between devs and non-techs, phase one of the contest is recommended for advanced developers who are more autonomous and can contribute with limited guidelines and support. Accounting for around one-third of the total **133,700 ATOM** prize pool, getting a headstart in phase one will allow seasoned devs to kick the tires on the Gno.land platform, contribute with limited competition, and build the tools needed to open the second phase.\n\nDuring phase one, participants will open PRs against repos from the Gnolang organization. Phase one contributors will be expected to document and share their work efficiently to enable others to use it without conflicts. Your contribution is vital to the success of the contest, the Gno.land platform, and the Cosmos ecosystem at large, especially now, with discussions to move the Cosmos Hub’s core operations on-chain by establishing a DAO system.\n\nThe first DAO to be created will be the [Decentralists DAO](https://github.com/decentralists/DAO), which will provide Cosmonauts with transparency, accountability, and decentralization. The Decentralists DAO will improve discourse, organization management, development, and conflict resolution through smart contracts, and will organize itself into a set of tightly-aligned sub-DAOs dedicated to specific topics, such as engineering and funding.\n\nSo, how does this relate to Game of Realms and what type of contributions are judges looking for? Here are some examples, in order of priority:\n\n* **Define and Implement an Evaluation DAO:** For the Game of Realms contest, a sub-DAO – the Evaluation DAO – is needed to evaluate contributions during phase two and attribute rewards accordingly. Using a DAO will allow community members to vote on the best contributions for the platform. Implementation of the Evaluation DAO is the only step that must be approved by the core team because of its key role in the competition and the future of the platform. Once the DAO is in place, all previous and further contributions will be reviewed collectively by DAO members.\n\n* **Create Tutorials to Onboard More Participants:** We need experienced devs to write or record tutorials to help more people get started during phase two of the competition (and beyond) and to help grow the Gno.land developer community. These tutorials can include topics like interacting with the chain from the CLI, step-by-step guides to creating smart contracts in Gno, tips for running a local dev environment, fast prototyping with gnodev, or they can be tutorials dedicated to certain audiences, such as developers coming from Solidity or web2. All tutorials should be added to the [awesome-gno GitHub repo](https://github.com/gnolang/awesome-gno).\n\n* **Define and Implement a Governance Contract Suite:** In this challenge, developers will be expected to define and implement a governance contract suite capable of competing with existing chains’ governance modules. If you think you can improve the governance system of Cosmos Hub, this is your chance to show us how!\n\nPhase one challenges will stay open during phase two. No competition points will be attributed during this phase as the points will be retro-funded by the DAO and awarded during phase two.\n\n## Game of Realms - Phase Two (On-Chain)\n\nPhase two of Game of Realms will onboard more people to the platform and begin as soon as sufficient materials are completed from phase one. Accounting for around two-thirds of the total 133,700 ATOM prize pool, phase two will be open to both developers and non-technicals who can follow tutorials, create smart contracts, or provide other important contributions to win rewards and scale the platform. As phase two will be held directly on-chain, contributors can submit their contributions to the DAO without publishing them on the main GitHub repo. However, we strongly encourage you to use GitHub as it’s an important resource that helps the community gain a better understanding through specific examples.\n\n_We are currently preparing the challenges for participants of phase two and are looking for your input. Let us know what type of smart contracts you would like to see (minimal or with multiple features) in our upcoming Game of Realms AMA on Tuesday, January 24 at 4 pm UTC. Note that this is a text based AMA so make sure to add your questions before or during the AMA in the #AMA-questions channel on the [Gno.land discord](https://discord.gg/S8nKUqwkPn).\n_Once we have collected your feedback and requests, we will finalize the challenge categories. You can visit the [Game of Realms repo](https://github.com/gnolang/game-of-realms) for more information._\n","gnoland,game-of-realms,launch"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"bI1ruxwU1tFlZMY4zkmwgs6l/EOORghvJb+Gj6PoFdIf6kWZBnqcIfEIOycTDUUKfnbKLIaKkOGhvaQJ7J5jYg=="}],"memo":"from gnoblog-cli"}
{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModEditPost","args":["gor-launch","Game of Realms Is On: Win Rewards for Contributing to Gno.land","\nPhase one of Game of Realms, a worldwide competition to build the best Gnolang smart contracts, **is now open**. Game of Realms is a high-stakes contest with a total prize pool of **133,700 ATOM** that will see participants compete for tiered membership to co-own the Gno.land blockchain, the next-generation smart contract platform that uses the Gnolang (Gno) programming language. A series of complex technical and non-technical tasks will challenge contributors to create innovative patterns that push the chain to new limits. If you’re interested in helping build the most intuitive smart contract platform in web3—while gaining rewards for your contribution—join today by opening a [PR here](https://github.com/gnolang/gno).\n\nThe Game of Realms contest will allow participants to get a feel for the Gno.land platform while building smart contracts and applications in the ecosystem. It will take place in two stages, phase one and phase two. Phase one is about building the core infrastructure, tools, and tutorials necessary to open the gates to broader participation and will be held off-chain. Phase two, on the other hand, will take place after the successful completion of phase one and be held on-chain, where contributors will build smart contracts on the platform.\n\nIn addition to the ATOM prize pool, the best contributors will also be awarded (mostly) initial-level membership to govern the upcoming mainnet. Membership will be allocated according to the quality and extensiveness of the contribution—the higher the quality, the higher the tier, and the greater the voting rights and rewards. The top equal members will be composed of peers who have contributed the most to the ecosystem and have an understanding of its core components. Top members will also have aligned core moral values. This is essential so that members can maintain the chain together according to its Constitution (TBD** and ultimately create a sustainable ecosystem that rewards all valuable contributions.\n\n## Game of Realms - Phase One (Off-Chain)\n\nWhile we aim to encourage cross-collaboration between devs and non-techs, phase one of the contest is recommended for advanced developers who are more autonomous and can contribute with limited guidelines and support. Accounting for around one-third of the total **133,700 ATOM** prize pool, getting a headstart in phase one will allow seasoned devs to kick the tires on the Gno.land platform, contribute with limited competition, and build the tools needed to open the second phase.\n\nDuring phase one, participants will open PRs against repos from the Gnolang organization. Phase one contributors will be expected to document and share their work efficiently to enable others to use it without conflicts. Your contribution is vital to the success of the contest, the Gno.land platform, and the Cosmos ecosystem at large, especially now, with discussions to move the Cosmos Hub’s core operations on-chain by establishing a DAO system.\n\nThe first DAO to be created will be the [Decentralists DAO](https://github.com/decentralists/DAO), which will provide Cosmonauts with transparency, accountability, and decentralization. The Decentralists DAO will improve discourse, organization management, development, and conflict resolution through smart contracts, and will organize itself into a set of tightly-aligned sub-DAOs dedicated to specific topics, such as engineering and funding.\n\nSo, how does this relate to Game of Realms and what type of contributions are judges looking for? Here are some examples, in order of priority:\n\n* **Define and Implement an Evaluation DAO:** For the Game of Realms contest, a sub-DAO – the Evaluation DAO – is needed to evaluate contributions during phase two and attribute rewards accordingly. Using a DAO will allow community members to vote on the best contributions for the platform. Implementation of the Evaluation DAO is the only step that must be approved by the core team because of its key role in the competition and the future of the platform. Once the DAO is in place, all previous and further contributions will be reviewed collectively by DAO members.\n\n* **Create Tutorials to Onboard More Participants:** We need experienced devs to write or record tutorials to help more people get started during phase two of the competition (and beyond) and to help grow the Gno.land developer community. These tutorials can include topics like interacting with the chain from the CLI, step-by-step guides to creating smart contracts in Gno, tips for running a local dev environment, fast prototyping with gnodev, or they can be tutorials dedicated to certain audiences, such as developers coming from Solidity or web2. All tutorials should be added to the [awesome-gno GitHub repo](https://github.com/gnolang/awesome-gno).\n\n* **Define and Implement a Governance Contract Suite:** In this challenge, developers will be expected to define and implement a governance contract suite capable of competing with existing chains’ governance modules. If you think you can improve the governance system of Cosmos Hub, this is your chance to show us how!\n\nPhase one challenges will stay open during phase two. No competition points will be attributed during this phase as the points will be retro-funded by the DAO and awarded during phase two.\n\n## Game of Realms - Phase Two (On-Chain)\n\nPhase two of Game of Realms will onboard more people to the platform and begin as soon as sufficient materials are completed from phase one. Accounting for around two-thirds of the total 133,700 ATOM prize pool, phase two will be open to both developers and non-technicals who can follow tutorials, create smart contracts, or provide other important contributions to win rewards and scale the platform. As phase two will be held directly on-chain, contributors can submit their contributions to the DAO without publishing them on the main GitHub repo. However, we strongly encourage you to use GitHub as it’s an important resource that helps the community gain a better understanding through specific examples.\n\n_We are currently preparing the challenges for participants of phase two and are looking for your input. Let us know what type of smart contracts you would like to see (minimal or with multiple features) in our upcoming Game of Realms AMA on Tuesday, January 24 at 4 pm UTC. Note that this is a text based AMA so make sure to add your questions before or during the AMA in the #AMA-questions channel on the [Gno.land discord](https://discord.gg/S8nKUqwkPn).\n_Once we have collected your feedback and requests, we will finalize the challenge categories. You can visit the [Game of Realms repo](https://github.com/gnolang/game-of-realms) for more information._\n","gnoland,game-of-realms,launch"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"W3Hdty08lhaUfgbw20wCIq/e097V9DEJRJv/TVMlossgGVeuT7rPOcatj6uIRWRtne+0zJnGKfKrghOXjr8njQ=="}],"memo":"from gnoblog-cli"}
{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModAddPost","args":["gor-launch","Game of Realms Is On: Win Rewards for Contributing to Gno.land","\nPhase one of Game of Realms, a worldwide competition to build the best Gnolang smart contracts, **is now open**. Game of Realms is a high-stakes contest with a total prize pool of **133,700 ATOM** that will see participants compete for tiered membership to co-own the Gno.land blockchain, the next-generation smart contract platform that uses the Gnolang (Gno) programming language. A series of complex technical and non-technical tasks will challenge contributors to create innovative patterns that push the chain to new limits. If you’re interested in helping build the most intuitive smart contract platform in web3—while gaining rewards for your contribution—join today by opening a [PR here](https://github.com/gnolang/gno).\n\nThe Game of Realms contest will allow participants to get a feel for the Gno.land platform while building smart contracts and applications in the ecosystem. It will take place in two stages, phase one and phase two. Phase one is about building the core infrastructure, tools, and tutorials necessary to open the gates to broader participation and will be held off-chain. Phase two, on the other hand, will take place after the successful completion of phase one and be held on-chain, where contributors will build smart contracts on the platform.\n\nIn addition to the ATOM prize pool, the best contributors will also be awarded (mostly) initial-level membership to govern the upcoming mainnet. Membership will be allocated according to the quality and extensiveness of the contribution—the higher the quality, the higher the tier, and the greater the voting rights and rewards. The top equal members will be composed of peers who have contributed the most to the ecosystem and have an understanding of its core components. Top members will also have aligned core moral values. This is essential so that members can maintain the chain together according to its Constitution (TBD** and ultimately create a sustainable ecosystem that rewards all valuable contributions.\n\n## Game of Realms - Phase One (Off-Chain)\n\nWhile we aim to encourage cross-collaboration between devs and non-techs, phase one of the contest is recommended for advanced developers who are more autonomous and can contribute with limited guidelines and support. Accounting for around one-third of the total **133,700 ATOM** prize pool, getting a headstart in phase one will allow seasoned devs to kick the tires on the Gno.land platform, contribute with limited competition, and build the tools needed to open the second phase.\n\nDuring phase one, participants will open PRs against repos from the Gnolang organization. Phase one contributors will be expected to document and share their work efficiently to enable others to use it without conflicts. Your contribution is vital to the success of the contest, the Gno.land platform, and the Cosmos ecosystem at large, especially now, with discussions to move the Cosmos Hub’s core operations on-chain by establishing a DAO system.\n\nThe first DAO to be created will be the [Decentralists DAO](https://github.com/decentralists/DAO), which will provide Cosmonauts with transparency, accountability, and decentralization. The Decentralists DAO will improve discourse, organization management, development, and conflict resolution through smart contracts, and will organize itself into a set of tightly-aligned sub-DAOs dedicated to specific topics, such as engineering and funding.\n\nSo, how does this relate to Game of Realms and what type of contributions are judges looking for? Here are some examples, in order of priority:\n\n* **Define and Implement an Evaluation DAO:** For the Game of Realms contest, a sub-DAO – the Evaluation DAO – is needed to evaluate contributions during phase two and attribute rewards accordingly. Using a DAO will allow community members to vote on the best contributions for the platform. Implementation of the Evaluation DAO is the only step that must be approved by the core team because of its key role in the competition and the future of the platform. Once the DAO is in place, all previous and further contributions will be reviewed collectively by DAO members.\n\n* **Create Tutorials to Onboard More Participants:** We need experienced devs to write or record tutorials to help more people get started during phase two of the competition (and beyond) and to help grow the Gno.land developer community. These tutorials can include topics like interacting with the chain from the CLI, step-by-step guides to creating smart contracts in Gno, tips for running a local dev environment, fast prototyping with gnodev, or they can be tutorials dedicated to certain audiences, such as developers coming from Solidity or web2. All tutorials should be added to the [awesome-gno GitHub repo](https://github.com/gnolang/awesome-gno).\n\n* **Define and Implement a Governance Contract Suite:** In this challenge, developers will be expected to define and implement a governance contract suite capable of competing with existing chains’ governance modules. If you think you can improve the governance system of Cosmos Hub, this is your chance to show us how!\n\nPhase one challenges will stay open during phase two. No competition points will be attributed during this phase as the points will be retro-funded by the DAO and awarded during phase two.\n\n## Game of Realms - Phase Two (On-Chain)\n\nPhase two of Game of Realms will onboard more people to the platform and begin as soon as sufficient materials are completed from phase one. Accounting for around two-thirds of the total 133,700 ATOM prize pool, phase two will be open to both developers and non-technicals who can follow tutorials, create smart contracts, or provide other important contributions to win rewards and scale the platform. As phase two will be held directly on-chain, contributors can submit their contributions to the DAO without publishing them on the main GitHub repo. However, we strongly encourage you to use GitHub as it’s an important resource that helps the community gain a better understanding through specific examples.\n\n_We are currently preparing the challenges for participants of phase two and are looking for your input. Let us know what type of smart contracts you would like to see (minimal or with multiple features) in our upcoming Game of Realms AMA on Tuesday, January 24 at 4 pm UTC. Note that this is a text based AMA so make sure to add your questions before or during the AMA in the #AMA-questions channel on the [Gno.land discord](https://discord.gg/S8nKUqwkPn).\n_Once we have collected your feedback and requests, we will finalize the challenge categories. You can visit the [Game of Realms repo](https://github.com/gnolang/game-of-realms) for more information._\n","gnoland,game-of-realms,launch"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"Lw55hIxXMSwWqDn71xnc/iqi9TqGa7jVdTlMaIfB1sYaJ4qfuiAo2dPURYod9dp3n30nrMkhKt/UBLHG4xB28g=="}],"memo":"from gnoblog-cli"}
{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModAddPost","args":["gor-launch","Game of Realms Is On: Win Rewards for Contributing to Gno.land","\nPhase one of Game of Realms, a worldwide competition to build the best Gnolang smart contracts, **is now open**. Game of Realms is a high-stakes contest with a total prize pool of **133,700 ATOM** that will see participants compete for tiered membership to co-own the Gno.land blockchain, the next-generation smart contract platform that uses the Gnolang (Gno) programming language. A series of complex technical and non-technical tasks will challenge contributors to create innovative patterns that push the chain to new limits. If you’re interested in helping build the most intuitive smart contract platform in web3—while gaining rewards for your contribution—join today by opening a [PR here](https://github.com/gnolang/gno).\n\nThe Game of Realms contest will allow participants to get a feel for the Gno.land platform while building smart contracts and applications in the ecosystem. It will take place in two stages, phase one and phase two. Phase one is about building the core infrastructure, tools, and tutorials necessary to open the gates to broader participation and will be held off-chain. Phase two, on the other hand, will take place after the successful completion of phase one and be held on-chain, where contributors will build smart contracts on the platform.\n\nIn addition to the ATOM prize pool, the best contributors will also be awarded (mostly) initial-level membership to govern the upcoming mainnet. Membership will be allocated according to the quality and extensiveness of the contribution—the higher the quality, the higher the tier, and the greater the voting rights and rewards. The top equal members will be composed of peers who have contributed the most to the ecosystem and have an understanding of its core components. Top members will also have aligned core moral values. This is essential so that members can maintain the chain together according to its Constitution (TBD** and ultimately create a sustainable ecosystem that rewards all valuable contributions.\n\n## Game of Realms - Phase One (Off-Chain)\n\nWhile we aim to encourage cross-collaboration between devs and non-techs, phase one of the contest is recommended for advanced developers who are more autonomous and can contribute with limited guidelines and support. Accounting for around one-third of the total **133,700 ATOM** prize pool, getting a headstart in phase one will allow seasoned devs to kick the tires on the Gno.land platform, contribute with limited competition, and build the tools needed to open the second phase.\n\nDuring phase one, participants will open PRs against repos from the Gnolang organization. Phase one contributors will be expected to document and share their work efficiently to enable others to use it without conflicts. Your contribution is vital to the success of the contest, the Gno.land platform, and the Cosmos ecosystem at large, especially now, with discussions to move the Cosmos Hub’s core operations on-chain by establishing a DAO system.\n\nThe first DAO to be created will be the [Decentralists DAO](https://github.com/decentralists/DAO), which will provide Cosmonauts with transparency, accountability, and decentralization. The Decentralists DAO will improve discourse, organization management, development, and conflict resolution through smart contracts, and will organize itself into a set of tightly-aligned sub-DAOs dedicated to specific topics, such as engineering and funding.\n\nSo, how does this relate to Game of Realms and what type of contributions are judges looking for? Here are some examples, in order of priority:\n\n* **Define and Implement an Evaluation DAO:** For the Game of Realms contest, a sub-DAO – the Evaluation DAO – is needed to evaluate contributions during phase two and attribute rewards accordingly. Using a DAO will allow community members to vote on the best contributions for the platform. Implementation of the Evaluation DAO is the only step that must be approved by the core team because of its key role in the competition and the future of the platform. Once the DAO is in place, all previous and further contributions will be reviewed collectively by DAO members.\n\n* **Create Tutorials to Onboard More Participants:** We need experienced devs to write or record tutorials to help more people get started during phase two of the competition (and beyond) and to help grow the Gno.land developer community. These tutorials can include topics like interacting with the chain from the CLI, step-by-step guides to creating smart contracts in Gno, tips for running a local dev environment, fast prototyping with gnodev, or they can be tutorials dedicated to certain audiences, such as developers coming from Solidity or web2. All tutorials should be added to the [awesome-gno GitHub repo](https://github.com/gnolang/awesome-gno).\n\n* **Define and Implement a Governance Contract Suite:** In this challenge, developers will be expected to define and implement a governance contract suite capable of competing with existing chains’ governance modules. If you think you can improve the governance system of Cosmos Hub, this is your chance to show us how!\n\nPhase one challenges will stay open during phase two. No competition points will be attributed during this phase as the points will be retro-funded by the DAO and awarded during phase two.\n\n## Game of Realms - Phase Two (On-Chain)\n\nPhase two of Game of Realms will onboard more people to the platform and begin as soon as sufficient materials are completed from phase one. Accounting for around two-thirds of the total 133,700 ATOM prize pool, phase two will be open to both developers and non-technicals who can follow tutorials, create smart contracts, or provide other important contributions to win rewards and scale the platform. As phase two will be held directly on-chain, contributors can submit their contributions to the DAO without publishing them on the main GitHub repo. However, we strongly encourage you to use GitHub as it’s an important resource that helps the community gain a better understanding through specific examples.\n\n_We are currently preparing the challenges for participants of phase two and are looking for your input. Let us know what type of smart contracts you would like to see (minimal or with multiple features) in our upcoming Game of Realms AMA on Tuesday, January 24 at 4 pm UTC. Note that this is a text based AMA so make sure to add your questions before or during the AMA in the #AMA-questions channel on the [Gno.land discord](https://discord.gg/S8nKUqwkPn).\n_Once we have collected your feedback and requests, we will finalize the challenge categories. You can visit the [Game of Realms repo](https://github.com/gnolang/game-of-realms) for more information._\n","gnoland,game-of-realms,launch"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"cf4myiYi9Z7/KYJ6pAZ86JiBECOSIsN8940eQAil1ylSTrL5f5d344YoECzULB5cDY9QafjmUdULyVGSwl6O4w=="}],"memo":"from gnoblog-cli"}
{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModAddPost","args":["gor-launch","Game of Realms Is On: Win Rewards for Contributing to Gno.land","\nPhase one of Game of Realms, a worldwide competition to build the best Gnolang smart contracts, **is now open**. Game of Realms is a high-stakes contest with a total prize pool of **133,700 ATOM** that will see participants compete for tiered membership to co-own the Gno.land blockchain, the next-generation smart contract platform that uses the Gnolang (Gno) programming language. A series of complex technical and non-technical tasks will challenge contributors to create innovative patterns that push the chain to new limits. If you’re interested in helping build the most intuitive smart contract platform in web3—while gaining rewards for your contribution—join today by opening a [PR here](https://github.com/gnolang/gno).\n\nThe Game of Realms contest will allow participants to get a feel for the Gno.land platform while building smart contracts and applications in the ecosystem. It will take place in two stages, phase one and phase two. Phase one is about building the core infrastructure, tools, and tutorials necessary to open the gates to broader participation and will be held off-chain. Phase two, on the other hand, will take place after the successful completion of phase one and be held on-chain, where contributors will build smart contracts on the platform.\n\nIn addition to the ATOM prize pool, the best contributors will also be awarded (mostly) initial-level membership to govern the upcoming mainnet. Membership will be allocated according to the quality and extensiveness of the contribution—the higher the quality, the higher the tier, and the greater the voting rights and rewards. The top equal members will be composed of peers who have contributed the most to the ecosystem and have an understanding of its core components. Top members will also have aligned core moral values. This is essential so that members can maintain the chain together according to its Constitution (TBD** and ultimately create a sustainable ecosystem that rewards all valuable contributions.\n\n## Game of Realms - Phase One (Off-Chain)\n\nWhile we aim to encourage cross-collaboration between devs and non-techs, phase one of the contest is recommended for advanced developers who are more autonomous and can contribute with limited guidelines and support. Accounting for around one-third of the total **133,700 ATOM** prize pool, getting a headstart in phase one will allow seasoned devs to kick the tires on the Gno.land platform, contribute with limited competition, and build the tools needed to open the second phase.\n\nDuring phase one, participants will open PRs against repos from the Gnolang organization. Phase one contributors will be expected to document and share their work efficiently to enable others to use it without conflicts. Your contribution is vital to the success of the contest, the Gno.land platform, and the Cosmos ecosystem at large, especially now, with discussions to move the Cosmos Hub’s core operations on-chain by establishing a DAO system.\n\nThe first DAO to be created will be the [Decentralists DAO](https://github.com/decentralists/DAO), which will provide Cosmonauts with transparency, accountability, and decentralization. The Decentralists DAO will improve discourse, organization management, development, and conflict resolution through smart contracts, and will organize itself into a set of tightly-aligned sub-DAOs dedicated to specific topics, such as engineering and funding.\n\nSo, how does this relate to Game of Realms and what type of contributions are judges looking for? Here are some examples, in order of priority:\n\n* **Define and Implement an Evaluation DAO:** For the Game of Realms contest, a sub-DAO – the Evaluation DAO – is needed to evaluate contributions during phase two and attribute rewards accordingly. Using a DAO will allow community members to vote on the best contributions for the platform. Implementation of the Evaluation DAO is the only step that must be approved by the core team because of its key role in the competition and the future of the platform. Once the DAO is in place, all previous and further contributions will be reviewed collectively by DAO members.\n\n* **Create Tutorials to Onboard More Participants:** We need experienced devs to write or record tutorials to help more people get started during phase two of the competition (and beyond) and to help grow the Gno.land developer community. These tutorials can include topics like interacting with the chain from the CLI, step-by-step guides to creating smart contracts in Gno, tips for running a local dev environment, fast prototyping with gnodev, or they can be tutorials dedicated to certain audiences, such as developers coming from Solidity or web2. All tutorials should be added to the [awesome-gno GitHub repo](https://github.com/gnolang/awesome-gno).\n\n* **Define and Implement a Governance Contract Suite:** In this challenge, developers will be expected to define and implement a governance contract suite capable of competing with existing chains’ governance modules. If you think you can improve the governance system of Cosmos Hub, this is your chance to show us how!\n\nPhase one challenges will stay open during phase two. No competition points will be attributed during this phase as the points will be retro-funded by the DAO and awarded during phase two.\n\n## Game of Realms - Phase Two (On-Chain)\n\nPhase two of Game of Realms will onboard more people to the platform and begin as soon as sufficient materials are completed from phase one. Accounting for around two-thirds of the total 133,700 ATOM prize pool, phase two will be open to both developers and non-technicals who can follow tutorials, create smart contracts, or provide other important contributions to win rewards and scale the platform. As phase two will be held directly on-chain, contributors can submit their contributions to the DAO without publishing them on the main GitHub repo. However, we strongly encourage you to use GitHub as it’s an important resource that helps the community gain a better understanding through specific examples.\n\n_We are currently preparing the challenges for participants of phase two and are looking for your input. Let us know what type of smart contracts you would like to see (minimal or with multiple features) in our upcoming Game of Realms AMA on Tuesday, January 24 at 4 pm UTC. Note that this is a text based AMA so make sure to add your questions before or during the AMA in the #AMA-questions channel on the [Gno.land discord](https://discord.gg/S8nKUqwkPn).\n_Once we have collected your feedback and requests, we will finalize the challenge categories. You can visit the [Game of Realms repo](https://github.com/gnolang/game-of-realms) for more information._\n","gnoland,game-of-realms,launch"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"FJbGN6VfzYtcZ2ribYno3ESxrnmr8G4WtJpaJ0/yc6wcIPwoQsUqs1m+TFnZBAMNHpsk9By4TM0bn/gdoJKQ9g=="}],"memo":"from gnoblog-cli"}
{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModAddPost","args":["gor-launch","Game of Realms Is On: Win Rewards for Contributing to Gno.land","\nPhase one of Game of Realms, a worldwide competition to build the best Gnolang smart contracts, **is now open**. Game of Realms is a high-stakes contest with a total prize pool of **133,700 ATOM** that will see participants compete for tiered membership to co-own the Gno.land blockchain, the next-generation smart contract platform that uses the Gnolang (Gno) programming language. A series of complex technical and non-technical tasks will challenge contributors to create innovative patterns that push the chain to new limits. If you’re interested in helping build the most intuitive smart contract platform in web3—while gaining rewards for your contribution—join today by opening a [PR here](https://github.com/gnolang/gno).\n\nThe Game of Realms contest will allow participants to get a feel for the Gno.land platform while building smart contracts and applications in the ecosystem. It will take place in two stages, phase one and phase two. Phase one is about building the core infrastructure, tools, and tutorials necessary to open the gates to broader participation and will be held off-chain. Phase two, on the other hand, will take place after the successful completion of phase one and be held on-chain, where contributors will build smart contracts on the platform.\n\nIn addition to the ATOM prize pool, the best contributors will also be awarded (mostly) initial-level membership to govern the upcoming mainnet. Membership will be allocated according to the quality and extensiveness of the contribution—the higher the quality, the higher the tier, and the greater the voting rights and rewards. The top equal members will be composed of peers who have contributed the most to the ecosystem and have an understanding of its core components. Top members will also have aligned core moral values. This is essential so that members can maintain the chain together according to its Constitution (TBD** and ultimately create a sustainable ecosystem that rewards all valuable contributions.\n\n## Game of Realms - Phase One (Off-Chain)\n\nWhile we aim to encourage cross-collaboration between devs and non-techs, phase one of the contest is recommended for advanced developers who are more autonomous and can contribute with limited guidelines and support. Accounting for around one-third of the total **133,700 ATOM** prize pool, getting a headstart in phase one will allow seasoned devs to kick the tires on the Gno.land platform, contribute with limited competition, and build the tools needed to open the second phase.\n\nDuring phase one, participants will open PRs against repos from the Gnolang organization. Phase one contributors will be expected to document and share their work efficiently to enable others to use it without conflicts. Your contribution is vital to the success of the contest, the Gno.land platform, and the Cosmos ecosystem at large, especially now, with discussions to move the Cosmos Hub’s core operations on-chain by establishing a DAO system.\n\nThe first DAO to be created will be the [Decentralists DAO](https://github.com/decentralists/DAO), which will provide Cosmonauts with transparency, accountability, and decentralization. The Decentralists DAO will improve discourse, organization management, development, and conflict resolution through smart contracts, and will organize itself into a set of tightly-aligned sub-DAOs dedicated to specific topics, such as engineering and funding.\n\nSo, how does this relate to Game of Realms and what type of contributions are judges looking for? Here are some examples, in order of priority:\n\n* **Define and Implement an Evaluation DAO:** For the Game of Realms contest, a sub-DAO – the Evaluation DAO – is needed to evaluate contributions during phase two and attribute rewards accordingly. Using a DAO will allow community members to vote on the best contributions for the platform. Implementation of the Evaluation DAO is the only step that must be approved by the core team because of its key role in the competition and the future of the platform. Once the DAO is in place, all previous and further contributions will be reviewed collectively by DAO members.\n\n* **Create Tutorials to Onboard More Participants:** We need experienced devs to write or record tutorials to help more people get started during phase two of the competition (and beyond) and to help grow the Gno.land developer community. These tutorials can include topics like interacting with the chain from the CLI, step-by-step guides to creating smart contracts in Gno, tips for running a local dev environment, fast prototyping with gnodev, or they can be tutorials dedicated to certain audiences, such as developers coming from Solidity or web2. All tutorials should be added to the [awesome-gno GitHub repo](https://github.com/gnolang/awesome-gno).\n\n* **Define and Implement a Governance Contract Suite:** In this challenge, developers will be expected to define and implement a governance contract suite capable of competing with existing chains’ governance modules. If you think you can improve the governance system of Cosmos Hub, this is your chance to show us how!\n\nPhase one challenges will stay open during phase two. No competition points will be attributed during this phase as the points will be retro-funded by the DAO and awarded during phase two.\n\n## Game of Realms - Phase Two (On-Chain)\n\nPhase two of Game of Realms will onboard more people to the platform and begin as soon as sufficient materials are completed from phase one. Accounting for around two-thirds of the total 133,700 ATOM prize pool, phase two will be open to both developers and non-technicals who can follow tutorials, create smart contracts, or provide other important contributions to win rewards and scale the platform. As phase two will be held directly on-chain, contributors can submit their contributions to the DAO without publishing them on the main GitHub repo. However, we strongly encourage you to use GitHub as it’s an important resource that helps the community gain a better understanding through specific examples.\n\n_We are currently preparing the challenges for participants of phase two and are looking for your input. Let us know what type of smart contracts you would like to see (minimal or with multiple features) in our upcoming Game of Realms AMA on Tuesday, January 24 at 4 pm UTC. Note that this is a text based AMA so make sure to add your questions before or during the AMA in the #AMA-questions channel on the [Gno.land discord](https://discord.gg/S8nKUqwkPn).\n_Once we have collected your feedback and requests, we will finalize the challenge categories. You can visit the [Game of Realms repo](https://github.com/gnolang/game-of-realms) for more information._\n","gnoland,game-of-realms,launch"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"Rr1YFCk3IzHRRP5PCOU0Oghnh2rnab5CVJsyoMDD22gmZZayqvAo3VQq3jnQKlThRntKixREPD4wSl5L4KaF/g=="}],"memo":"from gnoblog-cli"}
{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModAddPost","args":["gor-launch","Game of Realms Is On: Win Rewards for Contributing to Gno.land","\nPhase one of Game of Realms, a worldwide competition to build the best Gnolang smart contracts, **is now open**. Game of Realms is a high-stakes contest with a total prize pool of **133,700 ATOM** that will see participants compete for tiered membership to co-own the Gno.land blockchain, the next-generation smart contract platform that uses the Gnolang (Gno) programming language. A series of complex technical and non-technical tasks will challenge contributors to create innovative patterns that push the chain to new limits. If you’re interested in helping build the most intuitive smart contract platform in web3—while gaining rewards for your contribution—join today by opening a [PR here](https://github.com/gnolang/gno).\n\nThe Game of Realms contest will allow participants to get a feel for the Gno.land platform while building smart contracts and applications in the ecosystem. It will take place in two stages, phase one and phase two. Phase one is about building the core infrastructure, tools, and tutorials necessary to open the gates to broader participation and will be held off-chain. Phase two, on the other hand, will take place after the successful completion of phase one and be held on-chain, where contributors will build smart contracts on the platform.\n\nIn addition to the ATOM prize pool, the best contributors will also be awarded (mostly) initial-level membership to govern the upcoming mainnet. Membership will be allocated according to the quality and extensiveness of the contribution—the higher the quality, the higher the tier, and the greater the voting rights and rewards. The top equal members will be composed of peers who have contributed the most to the ecosystem and have an understanding of its core components. Top members will also have aligned core moral values. This is essential so that members can maintain the chain together according to its Constitution (TBD** and ultimately create a sustainable ecosystem that rewards all valuable contributions.\n\n## Game of Realms - Phase One (Off-Chain)\n\nWhile we aim to encourage cross-collaboration between devs and non-techs, phase one of the contest is recommended for advanced developers who are more autonomous and can contribute with limited guidelines and support. Accounting for around one-third of the total **133,700 ATOM** prize pool, getting a headstart in phase one will allow seasoned devs to kick the tires on the Gno.land platform, contribute with limited competition, and build the tools needed to open the second phase.\n\nDuring phase one, participants will open PRs against repos from the Gnolang organization. Phase one contributors will be expected to document and share their work efficiently to enable others to use it without conflicts. Your contribution is vital to the success of the contest, the Gno.land platform, and the Cosmos ecosystem at large, especially now, with discussions to move the Cosmos Hub’s core operations on-chain by establishing a DAO system.\n\nThe first DAO to be created will be the [Decentralists DAO](https://github.com/decentralists/DAO), which will provide Cosmonauts with transparency, accountability, and decentralization. The Decentralists DAO will improve discourse, organization management, development, and conflict resolution through smart contracts, and will organize itself into a set of tightly-aligned sub-DAOs dedicated to specific topics, such as engineering and funding.\n\nSo, how does this relate to Game of Realms and what type of contributions are judges looking for? Here are some examples, in order of priority:\n\n* **Define and Implement an Evaluation DAO:** For the Game of Realms contest, a sub-DAO – the Evaluation DAO – is needed to evaluate contributions during phase two and attribute rewards accordingly. Using a DAO will allow community members to vote on the best contributions for the platform. Implementation of the Evaluation DAO is the only step that must be approved by the core team because of its key role in the competition and the future of the platform. Once the DAO is in place, all previous and further contributions will be reviewed collectively by DAO members.\n\n* **Create Tutorials to Onboard More Participants:** We need experienced devs to write or record tutorials to help more people get started during phase two of the competition (and beyond) and to help grow the Gno.land developer community. These tutorials can include topics like interacting with the chain from the CLI, step-by-step guides to creating smart contracts in Gno, tips for running a local dev environment, fast prototyping with gnodev, or they can be tutorials dedicated to certain audiences, such as developers coming from Solidity or web2. All tutorials should be added to the [awesome-gno GitHub repo](https://github.com/gnolang/awesome-gno).\n\n* **Define and Implement a Governance Contract Suite:** In this challenge, developers will be expected to define and implement a governance contract suite capable of competing with existing chains’ governance modules. If you think you can improve the governance system of Cosmos Hub, this is your chance to show us how!\n\nPhase one challenges will stay open during phase two. No competition points will be attributed during this phase as the points will be retro-funded by the DAO and awarded during phase two.\n\n## Game of Realms - Phase Two (On-Chain)\n\nPhase two of Game of Realms will onboard more people to the platform and begin as soon as sufficient materials are completed from phase one. Accounting for around two-thirds of the total 133,700 ATOM prize pool, phase two will be open to both developers and non-technicals who can follow tutorials, create smart contracts, or provide other important contributions to win rewards and scale the platform. As phase two will be held directly on-chain, contributors can submit their contributions to the DAO without publishing them on the main GitHub repo. However, we strongly encourage you to use GitHub as it’s an important resource that helps the community gain a better understanding through specific examples.\n\n_We are currently preparing the challenges for participants of phase two and are looking for your input. Let us know what type of smart contracts you would like to see (minimal or with multiple features) in our upcoming Game of Realms AMA on Tuesday, January 24 at 4 pm UTC. Note that this is a text based AMA so make sure to add your questions before or during the AMA in the #AMA-questions channel on the [Gno.land discord](https://discord.gg/S8nKUqwkPn).\n_Once we have collected your feedback and requests, we will finalize the challenge categories. You can visit the [Game of Realms repo](https://github.com/gnolang/game-of-realms) for more information._\n","gnoland,game-of-realms,launch"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"QKQt+nVXh8ndKIKtT/bKWv3qoa3cb6AUpWCs0jnw+uBH9pMKE6t3zj94xtyLHFKmDF+mpRD0YsVKnXoWQwjVHw=="}],"memo":"from gnoblog-cli"}
{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModAddPost","args":["gor-launch","Game of Realms Is On: Win Rewards for Contributing to Gno.land","\nPhase one of Game of Realms, a worldwide competition to build the best Gnolang smart contracts, **is now open**. Game of Realms is a high-stakes contest with a total prize pool of **133,700 ATOM** that will see participants compete for tiered membership to co-own the Gno.land blockchain, the next-generation smart contract platform that uses the Gnolang (Gno) programming language. A series of complex technical and non-technical tasks will challenge contributors to create innovative patterns that push the chain to new limits. If you’re interested in helping build the most intuitive smart contract platform in web3—while gaining rewards for your contribution—join today by opening a [PR here](https://github.com/gnolang/gno).\n\nThe Game of Realms contest will allow participants to get a feel for the Gno.land platform while building smart contracts and applications in the ecosystem. It will take place in two stages, phase one and phase two. Phase one is about building the core infrastructure, tools, and tutorials necessary to open the gates to broader participation and will be held off-chain. Phase two, on the other hand, will take place after the successful completion of phase one and be held on-chain, where contributors will build smart contracts on the platform.\n\nIn addition to the ATOM prize pool, the best contributors will also be awarded (mostly) initial-level membership to govern the upcoming mainnet. Membership will be allocated according to the quality and extensiveness of the contribution—the higher the quality, the higher the tier, and the greater the voting rights and rewards. The top equal members will be composed of peers who have contributed the most to the ecosystem and have an understanding of its core components. Top members will also have aligned core moral values. This is essential so that members can maintain the chain together according to its Constitution (TBD** and ultimately create a sustainable ecosystem that rewards all valuable contributions.\n\n## Game of Realms - Phase One (Off-Chain)\n\nWhile we aim to encourage cross-collaboration between devs and non-techs, phase one of the contest is recommended for advanced developers who are more autonomous and can contribute with limited guidelines and support. Accounting for around one-third of the total **133,700 ATOM** prize pool, getting a headstart in phase one will allow seasoned devs to kick the tires on the Gno.land platform, contribute with limited competition, and build the tools needed to open the second phase.\n\nDuring phase one, participants will open PRs against repos from the Gnolang organization. Phase one contributors will be expected to document and share their work efficiently to enable others to use it without conflicts. Your contribution is vital to the success of the contest, the Gno.land platform, and the Cosmos ecosystem at large, especially now, with discussions to move the Cosmos Hub’s core operations on-chain by establishing a DAO system.\n\nThe first DAO to be created will be the [Decentralists DAO](https://github.com/decentralists/DAO), which will provide Cosmonauts with transparency, accountability, and decentralization. The Decentralists DAO will improve discourse, organization management, development, and conflict resolution through smart contracts, and will organize itself into a set of tightly-aligned sub-DAOs dedicated to specific topics, such as engineering and funding.\n\nSo, how does this relate to Game of Realms and what type of contributions are judges looking for? Here are some examples, in order of priority:\n\n* **Define and Implement an Evaluation DAO:** For the Game of Realms contest, a sub-DAO – the Evaluation DAO – is needed to evaluate contributions during phase two and attribute rewards accordingly. Using a DAO will allow community members to vote on the best contributions for the platform. Implementation of the Evaluation DAO is the only step that must be approved by the core team because of its key role in the competition and the future of the platform. Once the DAO is in place, all previous and further contributions will be reviewed collectively by DAO members.\n\n* **Create Tutorials to Onboard More Participants:** We need experienced devs to write or record tutorials to help more people get started during phase two of the competition (and beyond) and to help grow the Gno.land developer community. These tutorials can include topics like interacting with the chain from the CLI, step-by-step guides to creating smart contracts in Gno, tips for running a local dev environment, fast prototyping with gnodev, or they can be tutorials dedicated to certain audiences, such as developers coming from Solidity or web2. All tutorials should be added to the [awesome-gno GitHub repo](https://github.com/gnolang/awesome-gno).\n\n* **Define and Implement a Governance Contract Suite:** In this challenge, developers will be expected to define and implement a governance contract suite capable of competing with existing chains’ governance modules. If you think you can improve the governance system of Cosmos Hub, this is your chance to show us how!\n\nPhase one challenges will stay open during phase two. No competition points will be attributed during this phase as the points will be retro-funded by the DAO and awarded during phase two.\n\n## Game of Realms - Phase Two (On-Chain)\n\nPhase two of Game of Realms will onboard more people to the platform and begin as soon as sufficient materials are completed from phase one. Accounting for around two-thirds of the total 133,700 ATOM prize pool, phase two will be open to both developers and non-technicals who can follow tutorials, create smart contracts, or provide other important contributions to win rewards and scale the platform. As phase two will be held directly on-chain, contributors can submit their contributions to the DAO without publishing them on the main GitHub repo. However, we strongly encourage you to use GitHub as it’s an important resource that helps the community gain a better understanding through specific examples.\n\n_We are currently preparing the challenges for participants of phase two and are looking for your input. Let us know what type of smart contracts you would like to see (minimal or with multiple features) in our upcoming Game of Realms AMA on Tuesday, January 24 at 4 pm UTC. Note that this is a text based AMA so make sure to add your questions before or during the AMA in the #AMA-questions channel on the [Gno.land discord](https://discord.gg/S8nKUqwkPn).\n_Once we have collected your feedback and requests, we will finalize the challenge categories. You can visit the [Game of Realms repo](https://github.com/gnolang/game-of-realms) for more information._\n","gnoland,game-of-realms,launch"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"32M5HKCtOieyfM+Dt7GA4tsOlbcvODlR9bN0fdBBf0JcIWP4DRgPD38kDYmWwQev8RaSlu97vD411Z8eSQ14Mw=="}],"memo":"from gnoblog-cli"}
{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModEditPost","args":["gor-launch","Game of Realms Is On: Win Rewards for Contributing to Gno.land","\nPhase one of Game of Realms, a worldwide competition to build the best Gnolang smart contracts, **is now open**. Game of Realms is a high-stakes contest with a total prize pool of **133,700 ATOM** that will see participants compete for tiered membership to co-own the Gno.land blockchain, the next-generation smart contract platform that uses the Gnolang (Gno) programming language. A series of complex technical and non-technical tasks will challenge contributors to create innovative patterns that push the chain to new limits. If you’re interested in helping build the most intuitive smart contract platform in web3—while gaining rewards for your contribution—join today by opening a [PR here](https://github.com/gnolang/gno).\n\nThe Game of Realms contest will allow participants to get a feel for the Gno.land platform while building smart contracts and applications in the ecosystem. It will take place in two stages, phase one and phase two. Phase one is about building the core infrastructure, tools, and tutorials necessary to open the gates to broader participation and will be held off-chain. Phase two, on the other hand, will take place after the successful completion of phase one and be held on-chain, where contributors will build smart contracts on the platform.\n\nIn addition to the ATOM prize pool, the best contributors will also be awarded (mostly) initial-level membership to govern the upcoming mainnet. Membership will be allocated according to the quality and extensiveness of the contribution—the higher the quality, the higher the tier, and the greater the voting rights and rewards. The top equal members will be composed of peers who have contributed the most to the ecosystem and have an understanding of its core components. Top members will also have aligned core moral values. This is essential so that members can maintain the chain together according to its Constitution (TBD** and ultimately create a sustainable ecosystem that rewards all valuable contributions.\n\n## Game of Realms - Phase One (Off-Chain)\n\nWhile we aim to encourage cross-collaboration between devs and non-techs, phase one of the contest is recommended for advanced developers who are more autonomous and can contribute with limited guidelines and support. Accounting for around one-third of the total **133,700 ATOM** prize pool, getting a headstart in phase one will allow seasoned devs to kick the tires on the Gno.land platform, contribute with limited competition, and build the tools needed to open the second phase.\n\nDuring phase one, participants will open PRs against repos from the Gnolang organization. Phase one contributors will be expected to document and share their work efficiently to enable others to use it without conflicts. Your contribution is vital to the success of the contest, the Gno.land platform, and the Cosmos ecosystem at large, especially now, with discussions to move the Cosmos Hub’s core operations on-chain by establishing a DAO system.\n\nThe first DAO to be created will be the [Decentralists DAO](https://github.com/decentralists/DAO), which will provide Cosmonauts with transparency, accountability, and decentralization. The Decentralists DAO will improve discourse, organization management, development, and conflict resolution through smart contracts, and will organize itself into a set of tightly-aligned sub-DAOs dedicated to specific topics, such as engineering and funding.\n\nSo, how does this relate to Game of Realms and what type of contributions are judges looking for? Here are some examples, in order of priority:\n\n* **Define and Implement an Evaluation DAO:** For the Game of Realms contest, a sub-DAO – the Evaluation DAO – is needed to evaluate contributions during phase two and attribute rewards accordingly. Using a DAO will allow community members to vote on the best contributions for the platform. Implementation of the Evaluation DAO is the only step that must be approved by the core team because of its key role in the competition and the future of the platform. Once the DAO is in place, all previous and further contributions will be reviewed collectively by DAO members.\n\n* **Create Tutorials to Onboard More Participants:** We need experienced devs to write or record tutorials to help more people get started during phase two of the competition (and beyond) and to help grow the Gno.land developer community. These tutorials can include topics like interacting with the chain from the CLI, step-by-step guides to creating smart contracts in Gno, tips for running a local dev environment, fast prototyping with gnodev, or they can be tutorials dedicated to certain audiences, such as developers coming from Solidity or web2. All tutorials should be added to the [awesome-gno GitHub repo](https://github.com/gnolang/awesome-gno).\n\n* **Define and Implement a Governance Contract Suite:** In this challenge, developers will be expected to define and implement a governance contract suite capable of competing with existing chains’ governance modules. If you think you can improve the governance system of Cosmos Hub, this is your chance to show us how!\n\nPhase one challenges will stay open during phase two. No competition points will be attributed during this phase as the points will be retro-funded by the DAO and awarded during phase two.\n\n## Game of Realms - Phase Two (On-Chain)\n\nPhase two of Game of Realms will onboard more people to the platform and begin as soon as sufficient materials are completed from phase one. Accounting for around two-thirds of the total 133,700 ATOM prize pool, phase two will be open to both developers and non-technicals who can follow tutorials, create smart contracts, or provide other important contributions to win rewards and scale the platform. As phase two will be held directly on-chain, contributors can submit their contributions to the DAO without publishing them on the main GitHub repo. However, we strongly encourage you to use GitHub as it’s an important resource that helps the community gain a better understanding through specific examples.\n\n_We are currently preparing the challenges for participants of phase two and are looking for your input. Let us know what type of smart contracts you would like to see (minimal or with multiple features) in our upcoming Game of Realms AMA on Tuesday, January 24 at 4 pm UTC. Note that this is a text based AMA so make sure to add your questions before or during the AMA in the #AMA-questions channel on the [Gno.land discord](https://discord.gg/S8nKUqwkPn).\n_Once we have collected your feedback and requests, we will finalize the challenge categories. You can visit the [Game of Realms repo](https://github.com/gnolang/game-of-realms) for more information._\n","gnoland,game-of-realms,launch"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"X/2XhW8Jcu+2fSBwbgHoOqtSx4BfEgG8wia4u1c4qWU6j1v/6QUGcfj+onGF8ZBmdOVTdKcjrQ3FP611mF23oA=="}],"memo":"from gnoblog-cli"}
{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModEditPost","args":["gor-launch","Game of Realms Is On: Win Rewards for Contributing to Gno.land","\nPhase one of Game of Realms, a worldwide competition to build the best Gnolang smart contracts, **is now open**. Game of Realms is a high-stakes contest with a total prize pool of **133,700 ATOM** that will see participants compete for tiered membership to co-own the Gno.land blockchain, the next-generation smart contract platform that uses the Gnolang (Gno) programming language. A series of complex technical and non-technical tasks will challenge contributors to create innovative patterns that push the chain to new limits. If you’re interested in helping build the most intuitive smart contract platform in web3—while gaining rewards for your contribution—join today by opening a [PR here](https://github.com/gnolang/gno).\n\nThe Game of Realms contest will allow participants to get a feel for the Gno.land platform while building smart contracts and applications in the ecosystem. It will take place in two stages, phase one and phase two. Phase one is about building the core infrastructure, tools, and tutorials necessary to open the gates to broader participation and will be held off-chain. Phase two, on the other hand, will take place after the successful completion of phase one and be held on-chain, where contributors will build smart contracts on the platform.\n\nIn addition to the ATOM prize pool, the best contributors will also be awarded (mostly) initial-level membership to govern the upcoming mainnet. Membership will be allocated according to the quality and extensiveness of the contribution—the higher the quality, the higher the tier, and the greater the voting rights and rewards. The top equal members will be composed of peers who have contributed the most to the ecosystem and have an understanding of its core components. Top members will also have aligned core moral values. This is essential so that members can maintain the chain together according to its Constitution (TBD** and ultimately create a sustainable ecosystem that rewards all valuable contributions.\n\n## Game of Realms - Phase One (Off-Chain)\n\nWhile we aim to encourage cross-collaboration between devs and non-techs, phase one of the contest is recommended for advanced developers who are more autonomous and can contribute with limited guidelines and support. Accounting for around one-third of the total **133,700 ATOM** prize pool, getting a headstart in phase one will allow seasoned devs to kick the tires on the Gno.land platform, contribute with limited competition, and build the tools needed to open the second phase.\n\nDuring phase one, participants will open PRs against repos from the Gnolang organization. Phase one contributors will be expected to document and share their work efficiently to enable others to use it without conflicts. Your contribution is vital to the success of the contest, the Gno.land platform, and the Cosmos ecosystem at large, especially now, with discussions to move the Cosmos Hub’s core operations on-chain by establishing a DAO system.\n\nThe first DAO to be created will be the [Decentralists DAO](https://github.com/decentralists/DAO), which will provide Cosmonauts with transparency, accountability, and decentralization. The Decentralists DAO will improve discourse, organization management, development, and conflict resolution through smart contracts, and will organize itself into a set of tightly-aligned sub-DAOs dedicated to specific topics, such as engineering and funding.\n\nSo, how does this relate to Game of Realms and what type of contributions are judges looking for? Here are some examples, in order of priority:\n\n* **Define and Implement an Evaluation DAO:** For the Game of Realms contest, a sub-DAO – the Evaluation DAO – is needed to evaluate contributions during phase two and attribute rewards accordingly. Using a DAO will allow community members to vote on the best contributions for the platform. Implementation of the Evaluation DAO is the only step that must be approved by the core team because of its key role in the competition and the future of the platform. Once the DAO is in place, all previous and further contributions will be reviewed collectively by DAO members.\n\n* **Create Tutorials to Onboard More Participants:** We need experienced devs to write or record tutorials to help more people get started during phase two of the competition (and beyond) and to help grow the Gno.land developer community. These tutorials can include topics like interacting with the chain from the CLI, step-by-step guides to creating smart contracts in Gno, tips for running a local dev environment, fast prototyping with gnodev, or they can be tutorials dedicated to certain audiences, such as developers coming from Solidity or web2. All tutorials should be added to the [awesome-gno GitHub repo](https://github.com/gnolang/awesome-gno).\n\n* **Define and Implement a Governance Contract Suite:** In this challenge, developers will be expected to define and implement a governance contract suite capable of competing with existing chains’ governance modules. If you think you can improve the governance system of Cosmos Hub, this is your chance to show us how!\n\nPhase one challenges will stay open during phase two. No competition points will be attributed during this phase as the points will be retro-funded by the DAO and awarded during phase two.\n\n## Game of Realms - Phase Two (On-Chain)\n\nPhase two of Game of Realms will onboard more people to the platform and begin as soon as sufficient materials are completed from phase one. Accounting for around two-thirds of the total 133,700 ATOM prize pool, phase two will be open to both developers and non-technicals who can follow tutorials, create smart contracts, or provide other important contributions to win rewards and scale the platform. As phase two will be held directly on-chain, contributors can submit their contributions to the DAO without publishing them on the main GitHub repo. However, we strongly encourage you to use GitHub as it’s an important resource that helps the community gain a better understanding through specific examples.\n\n_We are currently preparing the challenges for participants of phase two and are looking for your input. Let us know what type of smart contracts you would like to see (minimal or with multiple features) in our upcoming Game of Realms AMA on Tuesday, January 24 at 4 pm UTC. Note that this is a text based AMA so make sure to add your questions before or during the AMA in the #AMA-questions channel on the [Gno.land discord](https://discord.gg/S8nKUqwkPn).\n_Once we have collected your feedback and requests, we will finalize the challenge categories. You can visit the [Game of Realms repo](https://github.com/gnolang/game-of-realms) for more information._\n","gnoland,game-of-realms,launch"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"ckfQLS7ojEkNwkWM6o/GYYyoLd6Vzdw+T9rii2Q13gBxxQJa1t0j6xlENWg+aEFgAVmnNhKK4yRFYNKG3aGqrQ=="}],"memo":"from gnoblog-cli"}
{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModEditPost","args":["intro","Intro to Gnoland - The Smart Contract Platform to Improve Our Understanding of the World","\n_Welcome to Gno.land. This is the official site to learn about the Gnolang (Gno) programming language and the Gno.land smart contract platform, as well as understand the motivations behind Gno and our core values and mission. We’re starting a series of blog posts and holding regular community calls and AMAs so that you can stay up to date with upcoming developments and dive deeper into the Gno World Order. Stay tuned._\n\n## What Is Gno.land?\n\nGno.land (pronounced no-land) is a layer 1 smart contract platform invented by Jae Kwon, co-founder of Cosmos and Tendermint, to address multiple issues in the blockchain space — in particular, the ease of use and intuitiveness of smart contract programming platforms. Beyond offering succinctness, composability, expressivity, and completeness not found in any other smart contract platform, we aim to challenge the regime of information censorship that we find ourselves living in today.\n\nBy using the programming language Gnolang (Gno), an interpreted version of the widely-used Golang (Go) language, using a state-of-the-art VM written in Go, we want to lower the barrier to entry to web3 and make it simple for developers (particularly existing web2 developers) to write smart contracts and other blockchain applications without having to learn a programming language that is limited by design or exclusive to a single blockchain ecosystem.\n\n### Gnolang (Gno) Is Essential to Broader Adoption of Web3\n\nFor web3 to grow in a sustainable way, we need technological solutions that are designed for the blockchain with programming languages that are universally adopted, secure, composable, and complete. The main programming language currently used for creating smart contracts, Solidity, is designed for one purpose only (writing smart contracts) and lacks the completeness of a general-purpose language.\n\nSolidity removes many of the complexities that blockchain programming requires (such as memory management, ensuring that the code is deterministic, and understanding how the entire tech stack is implemented) allowing developers to quickly build succinct smart contracts. However, Solidity is only used for smart contracts on EVM-compatible blockchains (like Ethereum, Polygon, or EVMOS) and its design is limited by the limitations of the EVM. In addition, developers have to learn several languages if they want to understand the whole stack or work across different ecosystems.\n\nGo, on the other hand, is a well-designed complete programming language with its foundation based on composable structures, designed by the creators of Plan 9. This allows developers to rapidly accelerate application development and adopt a modular structure by reusing and reassembling existing modules without building from scratch. They can embed one structure inside another in an intuitive way while preserving localism, and the language specification is simple, successfully balancing practicality and minimalism.\n\nGo is widely used, especially among existing web2 developers. It’s easier to learn and can be used to program almost anything, such as GoEthereum or Tendermint. Every part of the Gno.land stack is written in Go so that one person can understand the entire system just by studying a relatively small code base. The Go language is so well designed that the Gnolang smart contract system will become the new gold standard for smart contract development and other blockchain (and even non-blockchain) applications.\n\n### Security Is a Built-in Feature of Go (Golang)\n\nBeyond object embedding, closures, importing of modules, composability of programs, and interfaces that allow you to implement a specific set of functions, Go supports secure programming through exported/non-exported fields, enabling “least-authority” design. It is easy to create objects and APIs that expose only what should be accessible to callers while hiding what should not be simply by the capitalization of letters, thus allowing a succinct representation of secure logic that can be called by multiple users.\n\nAnother major advantage of Go is that the language comes with an ecosystem of great tooling, like the compiler and third-party tools that statically analyze code. Gno inherits these advantages from Go directly to create a smart contract programming language that is safe and helps developers to write secure code relying on the compiler, parser, and interpreter to give warning alerts for common mistakes.\n\n### How Gnolang (Gno) Differs from Golang (Go)\n\n[![Go and Gno](https://gnolang.github.io/blog-assets/intro/thumbs/go-and-gno.png)](https://gnolang.github.io/blog-assets/intro/go-and-gno.png)\n\n_Image 1: Gnolang - Like Go but specific to the blockchain_\n\nGno is around 99% identical to Go and most people can code in Gno from day one, even minute one. The Gno.land programming environment comes with blockchain-specific standard libraries, but any code that doesn’t use the blockchain-specific logic can run in Go with minimal processing. On the other hand, some libraries that don’t make sense in the blockchain context are not available in the Gno.land programming environment, such as network or operating-system access.\n\nOtherwise, Gno loads and uses many standard libraries that power Go, so most of the parsing of the source code is the same. Under the hood, the Gno code is parsed into an abstract syntax tree (AST) and the AST itself is used in the interpreter, rather than byte code as in many virtual machines such as Java, Python, or WASM. This makes even the Gno VM accessible to any Go programmer. The novel design of the Gno VM interpreter allows  Gno to freeze and resume the program by persisting and loading the entire memory state. This allows (smart contract) programs to be succinct, as the programmer doesn’t have to serialize and deserialize objects to persist them into a database (unlike programming applications with the Cosmos SDK).\n\nThe composable nature of Go/Gno allows for type-checked interactions between contracts, making Gno.land safer and more powerful, as well as operationally cheaper and faster. Smart contracts on Gno.land will be light, simple, more focused, and easily interoperable — a network of interconnected contracts rather than siloed monoliths that limit interactions with other contracts.\n\n[![Gnolang code example](https://gnolang.github.io/blog-assets/intro/thumbs/code-example.jpg)](https://gnolang.github.io/blog-assets/intro/code-example.jpg)\n\n_Image 2: Code snippet from the Gno programming language_\n\nToday, Gno.land is the only blockchain instance in the world that supports Gno but tomorrow, there will be many chains with different names such as mydapp.zone, or mydao.xyz. Gno.land is the name of ONE chain and is not a name that will be used by other Gnolang-powered chains. Gno.land will remain a minimal hub with three main utilities:\n\n* Managing cross-Gnolang-chain fees/licenses\n* To be the (or an) official home for the best smart contracts\n* To provide new models of governance (w/ DAO modules)\n\n### Earning Rewards Through Proof-of-Contribution (PoC)\n\nThere are four main ways to earn rewards through PoC on the Gno.land chain:\n\n* Pre-defined tasks (technical or otherwise)\n* Pre-defined bounties\n* Retroactive bounties\n* Vesting-style rewards for core members\n\nBounties rewards (both pre-defined and retroactive) will be decided with “local rules,” through the agreement of the DAO with everything on-chain and transparent. If one human were to abuse the system, it would trigger and the bad actor would be slashed. We’ll go into depth on how you can earn rewards in an upcoming post.\n\n### Durable Solutions to Improve Our Understanding of the World\n\nOne of our inspirations for the Gno.land project is the gospels, which built a system of moral code that lasted for thousands of years. Part of Gno.land’s endurance will be having a minimal production implementation that becomes a reference for other implementations and a basis for education to elevate people's understanding of blockchains.\n\nGno.land aims to appeal to web developers, dApp developers, and blockchain builders to create solutions that help people improve their understanding of the world. With the barrage of misinformation delivered today from various factions, it’s impossible to separate the real from the fake. This causes a state of gridlock. We are living in a regime of information censorship spanning all important topics from climate change to global pandemics — a vast coordinated effort to prevent people from understanding the truth.\n\nBy just browsing Reddit, searching with Google, and scrolling through Facebook, Twitter, or Instagram, people are deliberately being [misled](https://twitter.com/lhfang/status/1587095890983936000) about key global issues that we all deserve clarity on. This is as malevolent as any type of censorship regime in the world — and we need to come together to challenge it and break the wall of censorship to achieve a functional democracy at last.\n\n### Gno.land’s Current Phase of Development\n\nGno.land is currently running in its third testnet and there will be several more testnets before the platform is production ready. Modern civilization wasn’t built in a day, and neither will Gno.land rush into committing to an exact launch date. However, the next development, an incentivized testnet called ‘Game of Realms’, is scheduled for Q1 2023.\n\nGame of Realms will be similar to ‘Game of Stakes’ on the Cosmos Hub and will reward the earliest and best contributors. If you would like to find out more about Game of Realms, Gno.land, Gnolang, or anything else,  join us for our first community call with Gno.land Founder, Jae Kwon on November 22nd, at 4pm UTC on our [Discord channel](https://discord.gg/YFtMjWwUN7). We look forward to seeing you.\n","gnoland,gnosh,gnot,permissionless,consensus,proof-of-contribution,dao,governance,ibc,democracy,freedom"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"nSC5wLqs2tw7bi/NhJNVij32PO+NsVrUsAQju0dlHwxiVir6zOYkjXEeIY4OGnOwuXlI2nUVNfyfb5EgsxJvaA=="}],"memo":"from gnoblog-cli"}
{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModAddPost","args":["monthly-dev-1","The More You Gno: Gno.land Monthly Updates","\nWe made progress across the board at Gno.land last month, from onboarding more devs to receiving an influx of contributions to the Game of Realms contest. To encourage development and discourse, we set up a biweekly public developer call in addition to our biweekly Office Hours sessions. Anyone can join, ask questions, and give their suggestions on how to shape the Gno.land platform and become a contributor. Last month, we covered several pressing topics from Gno IDE and Gno.land website language, to GnoVM, IBC, and ICS. Jae also came back to the circuit in March with two IRL workshops for devs at side events during EthDenver and Game Developer Conference (GDC) in San Francisco.\n\n## Developer Updates\n\nYou can find the live streams of the new biweekly public developer calls on [Gno.land YouTube](https://www.youtube.com/@_gnoland/videos) as well as access the agendas on [GitHub](https://github.com/gnolang/meetings/blob/main/notes/2023_03_15_dev_call_notes.md). The main talking points this month were Gno IDE, Gno.land website language and UX, garbage collection, bug fixes, and how to bring IBC and ICS to the platform. We are working on all these issues concurrently but the order of release will be Gno.land mainnet, IBC, and then ICS (this is reflected in the DAG below).\n\n![Mini DAG](https://gateway.pinata.cloud/ipfs/QmNuJwMFtD5srnvxkQEGxAcQ7Vz9WzxULWGdEMCZgKkFFo)\n\n## Gno.land Website Language\n\nWe want to add more features for developers, such as libraries to make writing interfaces better and more consistent. There is an open topic for frontend developers with typography skills and library developers to create a UI framework for markdown or a custom rendering system.\n\nInternally, our core team is working on improvements to Gno.land’s website, making it easier to navigate with shorter columns while ensuring the text is markdown centric and readable in plain text and the GitHub rendering machine. We hope to achieve this using CSS and having classes for vertical columns, without having to make an extension to the markdown parser.\n\n## Gno IDE\n\nGno.land developer experience team is working on a web-based Gno IDE for quickly building Gno realms and packages right on your browser by just visiting a web app. Gno IDE will provide much improved UX for everything around building a realm (including making the testing easier), and additional features like autocompletion in the editor. Gno IDE will contain all the features you would expect from an IDE as well as valuable APIs for devs building tools around Gno.land with the public Gno Infrastructure.\n\n![Gno IDE](https://gateway.pinata.cloud/ipfs/QmSM4D4CVxSyeVru7cn59EXi3Jk1HVEbeTbeAKc1R7Ky7d)\n\nGno IDE will have multiple modes to support different use cases. The normal mode will be used during everyday developments (as you’re familiar with from other code editors). The presentation mode is for high accessibility and readability. You can use it during video calls or physical workshops while projecting your screen to an audience. The third and perhaps most interesting mode is the embedded mode. Use this mode to embed the IDE into websites and blogs. This feature is especially useful for tutorials to test out sample code, run it on the real testnets, and play with it.\n\n## IBC and ICS\n\nAs depicted in the DAG above, Gno.land mainnet will launch first, followed by IBC and then ICS. We will focus on implementing IBC1, as we strongly believe in the ICS model and want to be a consumer of an existing Cosmos chain. We want a common ICS implementation that works across many hubs because Gno.land is a type of hub that will need its own ICS to scale while providing GnoVM on consumer chains on the Cosmos Hub. Our next step now is to find the best way to configure ICS for Gno.land and make GnoVM available as a consumer chain in the Cosmos Hub system.\n\nRegarding IBC, we will use the current implementation that was written for the Cosmos SDK and port that over to Tendermint2. We anticipate some issues along the way including security patches that need to be applied to our code base. There are multiple ongoing directions and discussions about how to bridge Gno.land’s smart contracts to IBC, which are essentially Interchain smart contract interactions.\n\nOne possibility is to have an API that submits events to a queue of outgoing events, and another queue to receive and consume events asynchronously. This mechanism could work for IBC2 to have rich inter-contract Interchain features, and the same API could work for Interchain plus smart contract interactions that require advanced options. We discussed a proposal to create a standard for Interchain contracts so that IBC2 could eventually be standardized eliminating limitations by applying it with an EVM, other languages, and CosmWasm.\n\nThis protocol could be based on Protobuf or a similar well-known syntax definition protocol so that we can push the Interchain to the next level. IBC2 will be safe and fast and replace vulnerable atomic bridges between multiple technologies. This is a major update that we are committed to developing and we need help identifying all the challenges involved. Working on IBC integration, separate from the Gno.land mainnet launch, will require significant time to understand how the light client system works. If you’re interested in taking on this task, let us know and we’ll set up a group. IBC will likely be the most important challenge of Game of Realms phase 2.\n\n## Garbage Collection\n\nCurrently, our work on garbage collection does not address the problem in the traditional Golang sense of dealing with memory efficiency. Instead, we are progressively optimizing and improving the main state tree by automating the clean-up of orphan nodes. The next phase will be targeting the official garbage collector component to begin work on memory management as we have some common Golang garbage collection challenges, but are identifying some uncommon ones too.\n\nWe need to consider elements like where to hold our objects because this is tied to releasing them in a concurrent lock-free way. We also need a good data structure. This is ongoing research as of now to implement a dedicated routine to synchronously clean stuff in a non-blocking way.\n\n## Game of Realms\n\nThis month, we have seen a massive uptick in contributions to Game of Realms phase one with a tidal wave of issues, general discussions, and PRs. One of the biggest things we worked on was adding support for MOD, which is a version of Go mod with an easier interface to manage your dependencies and version your dependencies. You can track the ongoing issue on GitHub [here](https://github.com/gnolang/gno/issues/390).\n\nThere have been some really strong contributions to the Evaluation DAO and governance module, as well as a big CLI refactor that went into our code base. We've also seen people contribute contracts like GRC 1155 or general improvements to existing realms, with many suggestions for fixing bugs. Finding bugs and reporting what people want is a good indication that the Gno.land platform is being picked up and gaining adoption.\n\nYou can find the Office Hours recordings that cover Game of Realms on YouTube [here](https://www.youtube.com/watch?v=JTmNg-b6Lcs).\n\n## Developer Events Stateside\n\nGno.land hosted a lively meetup during EthDenver last month where Gno.land founder and core dev Jae Kwon gave a talk for Solidity developers called “Gno.land, the Inevitable Next Generation Smart Contract Platform.\" He compared and contrasted Gno.land and Gnolang to Solidity, and showed Ethereum developers how the GnoVM shifts the smart contract paradigm. You can watch the [recording here](https://www.youtube.com/watch?v=IJ0xel8lr4c).\n\nAlso in March, Jae hosted a gaming workshop at a side event during the infamous Gaming Developer Conference (GDC) in San Francisco. “Gno.land for Game Developers, Building Your App in Web3,\" showed participants a sample gaming app built on the Gno.land platform and offered them the chance to try their hand at writing a smart contract for their app with Gno.\n\n## Virtual Events - How to Build a Forum\n\nCore tech lead at Gno.land Miloš Živković held a virtual workshop for Go devs called “How to Build a Forum.” He showed how Gnolang is a fast and simple way to build and launch smart contracts using the Gnolang interpreter virtual machine that interprets Gno and eliminates the need for any servers or ORNs.\n\nThe VM allows for the memory state of your Gno.land application to persist automatically after every transactional function call, which is a completely new way to handle transaction volume and memory recall. You can watch the [full tutorial here](https://github.com/gnolang/workshops).\n\n*We’d like the community to get involved in Gno.land’s monthly updates, so if you’re building on Gno.land and want to highlight your development, project, event, or idea, let us know and we’ll include your contribution.*\n","gnoland,gnovm,tm2"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"G0mM+V6/sr2JvDp/L2mdMDCuL0ahU28BsThdaUdCSTZ5DkR0WVyVyCmRa0rmwfjjdxyQbCMiUnVnIvf8SpUoaQ=="}],"memo":"from gnoblog-cli"}
{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModEditPost","args":["monthly-dev-1","The More You Gno: Gno.land Monthly Updates","\nWe made progress across the board at Gno.land last month, from onboarding more devs to receiving an influx of contributions to the Game of Realms contest. To encourage development and discourse, we set up a biweekly public developer call in addition to our biweekly Office Hours sessions. Anyone can join, ask questions, and give their suggestions on how to shape the Gno.land platform and become a contributor. Last month, we covered several pressing topics from Gno IDE and Gno.land website language, to GnoVM, IBC, and ICS. Jae also came back to the circuit in March with two IRL workshops for devs at side events during EthDenver and Game Developer Conference (GDC) in San Francisco.\n\n## Developer Updates\n\nYou can find the live streams of the new biweekly public developer calls on [Gno.land YouTube](https://www.youtube.com/@_gnoland/videos) as well as access the agendas on [GitHub](https://github.com/gnolang/meetings/blob/main/notes/2023_03_15_dev_call_notes.md). The main talking points this month were Gno IDE, Gno.land website language and UX, garbage collection, bug fixes, and how to bring IBC and ICS to the platform. We are working on all these issues concurrently but the order of release will be Gno.land mainnet, IBC, and then ICS (this is reflected in the DAG below).\n\n![Mini DAG](https://gateway.pinata.cloud/ipfs/QmNuJwMFtD5srnvxkQEGxAcQ7Vz9WzxULWGdEMCZgKkFFo?filename=mini-dag.png)\n\n## Gno.land Website Language\n\nWe want to add more features for developers, such as libraries to make writing interfaces better and more consistent. There is an open topic for frontend developers with typography skills and library developers to create a UI framework for markdown or a custom rendering system.\n\nInternally, our core team is working on improvements to Gno.land’s website, making it easier to navigate with shorter columns while ensuring the text is markdown centric and readable in plain text and the GitHub rendering machine. We hope to achieve this using CSS and having classes for vertical columns, without having to make an extension to the markdown parser.\n\n## Gno IDE\n\nGno.land developer experience team is working on a web-based Gno IDE for quickly building Gno realms and packages right on your browser by just visiting a web app. Gno IDE will provide much improved UX for everything around building a realm (including making the testing easier), and additional features like autocompletion in the editor. Gno IDE will contain all the features you would expect from an IDE as well as valuable APIs for devs building tools around Gno.land with the public Gno Infrastructure.\n\n![Gno IDE](https://gateway.pinata.cloud/ipfs/QmSM4D4CVxSyeVru7cn59EXi3Jk1HVEbeTbeAKc1R7Ky7d?filename=gno-ide.png)\n\nGno IDE will have multiple modes to support different use cases. The normal mode will be used during everyday developments (as you’re familiar with from other code editors). The presentation mode is for high accessibility and readability. You can use it during video calls or physical workshops while projecting your screen to an audience. The third and perhaps most interesting mode is the embedded mode. Use this mode to embed the IDE into websites and blogs. This feature is especially useful for tutorials to test out sample code, run it on the real testnets, and play with it.\n\n## IBC and ICS\n\nAs depicted in the DAG above, Gno.land mainnet will launch first, followed by IBC and then ICS. We will focus on implementing IBC1, as we strongly believe in the ICS model and want to be a consumer of an existing Cosmos chain. We want a common ICS implementation that works across many hubs because Gno.land is a type of hub that will need its own ICS to scale while providing GnoVM on consumer chains on the Cosmos Hub. Our next step now is to find the best way to configure ICS for Gno.land and make GnoVM available as a consumer chain in the Cosmos Hub system.\n\nRegarding IBC, we will use the current implementation that was written for the Cosmos SDK and port that over to Tendermint2. We anticipate some issues along the way including security patches that need to be applied to our code base. There are multiple ongoing directions and discussions about how to bridge Gno.land’s smart contracts to IBC, which are essentially Interchain smart contract interactions.\n\nOne possibility is to have an API that submits events to a queue of outgoing events, and another queue to receive and consume events asynchronously. This mechanism could work for IBC2 to have rich inter-contract Interchain features, and the same API could work for Interchain plus smart contract interactions that require advanced options. We discussed a proposal to create a standard for Interchain contracts so that IBC2 could eventually be standardized eliminating limitations by applying it with an EVM, other languages, and CosmWasm.\n\nThis protocol could be based on Protobuf or a similar well-known syntax definition protocol so that we can push the Interchain to the next level. IBC2 will be safe and fast and replace vulnerable atomic bridges between multiple technologies. This is a major update that we are committed to developing and we need help identifying all the challenges involved. Working on IBC integration, separate from the Gno.land mainnet launch, will require significant time to understand how the light client system works. If you’re interested in taking on this task, let us know and we’ll set up a group. IBC will likely be the most important challenge of Game of Realms phase 2.\n\n## Garbage Collection\n\nCurrently, our work on garbage collection does not address the problem in the traditional Golang sense of dealing with memory efficiency. Instead, we are progressively optimizing and improving the main state tree by automating the clean-up of orphan nodes. The next phase will be targeting the official garbage collector component to begin work on memory management as we have some common Golang garbage collection challenges, but are identifying some uncommon ones too.\n\nWe need to consider elements like where to hold our objects because this is tied to releasing them in a concurrent lock-free way. We also need a good data structure. This is ongoing research as of now to implement a dedicated routine to synchronously clean stuff in a non-blocking way.\n\n## Game of Realms\n\nThis month, we have seen a massive uptick in contributions to Game of Realms phase one with a tidal wave of issues, general discussions, and PRs. One of the biggest things we worked on was adding support for MOD, which is a version of Go mod with an easier interface to manage your dependencies and version your dependencies. You can track the ongoing issue on GitHub [here](https://github.com/gnolang/gno/issues/390).\n\nThere have been some really strong contributions to the Evaluation DAO and governance module, as well as a big CLI refactor that went into our code base. We've also seen people contribute contracts like GRC 1155 or general improvements to existing realms, with many suggestions for fixing bugs. Finding bugs and reporting what people want is a good indication that the Gno.land platform is being picked up and gaining adoption.\n\nYou can find the Office Hours recordings that cover Game of Realms on YouTube [here](https://www.youtube.com/watch?v=JTmNg-b6Lcs).\n\n## Developer Events Stateside\n\nGno.land hosted a lively meetup during EthDenver last month where Gno.land founder and core dev Jae Kwon gave a talk for Solidity developers called “Gno.land, the Inevitable Next Generation Smart Contract Platform.\" He compared and contrasted Gno.land and Gnolang to Solidity, and showed Ethereum developers how the GnoVM shifts the smart contract paradigm. You can watch the [recording here](https://www.youtube.com/watch?v=IJ0xel8lr4c).\n\nAlso in March, Jae hosted a gaming workshop at a side event during the infamous Gaming Developer Conference (GDC) in San Francisco. “Gno.land for Game Developers, Building Your App in Web3,\" showed participants a sample gaming app built on the Gno.land platform and offered them the chance to try their hand at writing a smart contract for their app with Gno.\n\n## Virtual Events - How to Build a Forum\n\nCore tech lead at Gno.land Miloš Živković held a virtual workshop for Go devs called “How to Build a Forum.” He showed how Gnolang is a fast and simple way to build and launch smart contracts using the Gnolang interpreter virtual machine that interprets Gno and eliminates the need for any servers or ORNs.\n\nThe VM allows for the memory state of your Gno.land application to persist automatically after every transactional function call, which is a completely new way to handle transaction volume and memory recall. You can watch the [full tutorial here](https://github.com/gnolang/workshops).\n\n*We’d like the community to get involved in Gno.land’s monthly updates, so if you’re building on Gno.land and want to highlight your development, project, event, or idea, let us know and we’ll include your contribution.*\n","gnoland,gnovm,tm2"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"6ukWhND5jFUVQj4OS1fn2aJ3id95Os5GHV4rhg5xBQtSOBo6wYCdm7DGGbNlAVcv/PmjMe5Od55WU9InQBt6jA=="}],"memo":"from gnoblog-cli"}
{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModEditPost","args":["monthly-dev-1","The More You Gno: Gno.land Monthly Updates","\nWe made progress across the board at Gno.land last month, from onboarding more devs to receiving an influx of contributions to the Game of Realms contest. To encourage development and discourse, we set up a biweekly public developer call in addition to our biweekly Office Hours sessions. Anyone can join, ask questions, and give their suggestions on how to shape the Gno.land platform and become a contributor. Last month, we covered several pressing topics from Gno IDE and Gno.land website language, to GnoVM, IBC, and ICS. Jae also came back to the circuit in March with two IRL workshops for devs at side events during EthDenver and Game Developer Conference (GDC) in San Francisco.\n\n## Developer Updates\n\nYou can find the live streams of the new biweekly public developer calls on [Gno.land YouTube](https://www.youtube.com/@_gnoland/videos) as well as access the agendas on [GitHub](https://github.com/gnolang/meetings/blob/main/notes/2023_03_15_dev_call_notes.md). The main talking points this month were Gno IDE, Gno.land website language and UX, garbage collection, bug fixes, and how to bring IBC and ICS to the platform. We are working on all these issues concurrently but the order of release will be Gno.land mainnet, IBC, and then ICS (this is reflected in the DAG below).\n\n![Mini DAG](https://gateway.pinata.cloud/ipfs/QmNuJwMFtD5srnvxkQEGxAcQ7Vz9WzxULWGdEMCZgKkFFo?filename=mini-dag.png)\n\n## Gno.land Website Language\n\nWe want to add more features for developers, such as libraries to make writing interfaces better and more consistent. There is an open topic for frontend developers with typography skills and library developers to create a UI framework for markdown or a custom rendering system.\n\nInternally, our core team is working on improvements to Gno.land’s website, making it easier to navigate with shorter columns while ensuring the text is markdown centric and readable in plain text and the GitHub rendering machine. We hope to achieve this using CSS and having classes for vertical columns, without having to make an extension to the markdown parser.\n\n## Gno IDE\n\nGno.land developer experience team is working on a web-based Gno IDE for quickly building Gno realms and packages right on your browser by just visiting a web app. Gno IDE will provide much improved UX for everything around building a realm (including making the testing easier), and additional features like autocompletion in the editor. Gno IDE will contain all the features you would expect from an IDE as well as valuable APIs for devs building tools around Gno.land with the public Gno Infrastructure.\n\n[![Gno IDE](https://gateway.pinata.cloud/ipfs/QmSM4D4CVxSyeVru7cn59EXi3Jk1HVEbeTbeAKc1R7Ky7d?filename=gno-ide.png)](https://gateway.pinata.cloud/ipfs/QmSM4D4CVxSyeVru7cn59EXi3Jk1HVEbeTbeAKc1R7Ky7d?filename=gno-ide.png)\n\nGno IDE will have multiple modes to support different use cases. The normal mode will be used during everyday developments (as you’re familiar with from other code editors). The presentation mode is for high accessibility and readability. You can use it during video calls or physical workshops while projecting your screen to an audience. The third and perhaps most interesting mode is the embedded mode. Use this mode to embed the IDE into websites and blogs. This feature is especially useful for tutorials to test out sample code, run it on the real testnets, and play with it.\n\n## IBC and ICS\n\nAs depicted in the DAG above, Gno.land mainnet will launch first, followed by IBC and then ICS. We will focus on implementing IBC1, as we strongly believe in the ICS model and want to be a consumer of an existing Cosmos chain. We want a common ICS implementation that works across many hubs because Gno.land is a type of hub that will need its own ICS to scale while providing GnoVM on consumer chains on the Cosmos Hub. Our next step now is to find the best way to configure ICS for Gno.land and make GnoVM available as a consumer chain in the Cosmos Hub system.\n\nRegarding IBC, we will use the current implementation that was written for the Cosmos SDK and port that over to Tendermint2. We anticipate some issues along the way including security patches that need to be applied to our code base. There are multiple ongoing directions and discussions about how to bridge Gno.land’s smart contracts to IBC, which are essentially Interchain smart contract interactions.\n\nOne possibility is to have an API that submits events to a queue of outgoing events, and another queue to receive and consume events asynchronously. This mechanism could work for IBC2 to have rich inter-contract Interchain features, and the same API could work for Interchain plus smart contract interactions that require advanced options. We discussed a proposal to create a standard for Interchain contracts so that IBC2 could eventually be standardized eliminating limitations by applying it with an EVM, other languages, and CosmWasm.\n\nThis protocol could be based on Protobuf or a similar well-known syntax definition protocol so that we can push the Interchain to the next level. IBC2 will be safe and fast and replace vulnerable atomic bridges between multiple technologies. This is a major update that we are committed to developing and we need help identifying all the challenges involved. Working on IBC integration, separate from the Gno.land mainnet launch, will require significant time to understand how the light client system works. If you’re interested in taking on this task, let us know and we’ll set up a group. IBC will likely be the most important challenge of Game of Realms phase 2.\n\n## Garbage Collection\n\nCurrently, our work on garbage collection does not address the problem in the traditional Golang sense of dealing with memory efficiency. Instead, we are progressively optimizing and improving the main state tree by automating the clean-up of orphan nodes. The next phase will be targeting the official garbage collector component to begin work on memory management as we have some common Golang garbage collection challenges, but are identifying some uncommon ones too.\n\nWe need to consider elements like where to hold our objects because this is tied to releasing them in a concurrent lock-free way. We also need a good data structure. This is ongoing research as of now to implement a dedicated routine to synchronously clean stuff in a non-blocking way.\n\n## Game of Realms\n\nThis month, we have seen a massive uptick in contributions to Game of Realms phase one with a tidal wave of issues, general discussions, and PRs. One of the biggest things we worked on was adding support for MOD, which is a version of Go mod with an easier interface to manage your dependencies and version your dependencies. You can track the ongoing issue on GitHub [here](https://github.com/gnolang/gno/issues/390).\n\nThere have been some really strong contributions to the Evaluation DAO and governance module, as well as a big CLI refactor that went into our code base. We've also seen people contribute contracts like GRC 1155 or general improvements to existing realms, with many suggestions for fixing bugs. Finding bugs and reporting what people want is a good indication that the Gno.land platform is being picked up and gaining adoption.\n\nYou can find the Office Hours recordings that cover Game of Realms on YouTube [here](https://www.youtube.com/watch?v=JTmNg-b6Lcs).\n\n## Developer Events Stateside\n\nGno.land hosted a lively meetup during EthDenver last month where Gno.land founder and core dev Jae Kwon gave a talk for Solidity developers called “Gno.land, the Inevitable Next Generation Smart Contract Platform.\" He compared and contrasted Gno.land and Gnolang to Solidity, and showed Ethereum developers how the GnoVM shifts the smart contract paradigm. You can watch the [recording here](https://www.youtube.com/watch?v=IJ0xel8lr4c).\n\nAlso in March, Jae hosted a gaming workshop at a side event during the infamous Gaming Developer Conference (GDC) in San Francisco. “Gno.land for Game Developers, Building Your App in Web3,\" showed participants a sample gaming app built on the Gno.land platform and offered them the chance to try their hand at writing a smart contract for their app with Gno.\n\n## Virtual Events - How to Build a Forum\n\nCore tech lead at Gno.land Miloš Živković held a virtual workshop for Go devs called “How to Build a Forum.” He showed how Gnolang is a fast and simple way to build and launch smart contracts using the Gnolang interpreter virtual machine that interprets Gno and eliminates the need for any servers or ORNs.\n\nThe VM allows for the memory state of your Gno.land application to persist automatically after every transactional function call, which is a completely new way to handle transaction volume and memory recall. You can watch the [full tutorial here](https://github.com/gnolang/workshops).\n\n*We’d like the community to get involved in Gno.land’s monthly updates, so if you’re building on Gno.land and want to highlight your development, project, event, or idea, let us know and we’ll include your contribution.*\n","gnoland,gnovm,tm2"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"bGRlVlMVvyhYDK4a5yJ/OxmfJnRHH1Y0Q5rLzc6i/a1OCWzJCu6KUFu18Ui3FNhrIyjUNfbLeTLxr9xvvJ/WZA=="}],"memo":"from gnoblog-cli"}
{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModEditPost","args":["monthly-dev-1","The More You Gno: Gno.land Monthly Updates","\nWe made progress across the board at Gno.land last month, from onboarding more devs to receiving an influx of contributions to the Game of Realms contest. To encourage development and discourse, we set up a biweekly public developer call in addition to our biweekly Office Hours sessions. Anyone can join, ask questions, and give their suggestions on how to shape the Gno.land platform and become a contributor. Last month, we covered several pressing topics from Gno IDE and Gno.land website language, to GnoVM, IBC, and ICS. Jae also came back to the circuit in March with two IRL workshops for devs at side events during EthDenver and Game Developer Conference (GDC) in San Francisco.\n\n## Developer Updates\n\nYou can find the live streams of the new biweekly public developer calls on [Gno.land YouTube](https://www.youtube.com/@_gnoland/videos) as well as access the agendas on [GitHub](https://github.com/gnolang/meetings/blob/main/notes/2023_03_15_dev_call_notes.md). The main talking points this month were Gno IDE, Gno.land website language and UX, garbage collection, bug fixes, and how to bring IBC and ICS to the platform. We are working on all these issues concurrently but the order of release will be Gno.land mainnet, IBC, and then ICS (this is reflected in the DAG below).\n\n[![Gno.land mini DAG]](https://raw.githubusercontent.com/gnolang/blog-assets/main/6-myg-march/thumbs/mini-dag.png)](https://raw.githubusercontent.com/gnolang/blog-assets/main/6-myg-march/mini-dag.png)\n\n## Gno.land Website Language\n\nWe want to add more features for developers, such as libraries to make writing interfaces better and more consistent. There is an open topic for frontend developers with typography skills and library developers to create a UI framework for markdown or a custom rendering system.\n\nInternally, our core team is working on improvements to Gno.land’s website, making it easier to navigate with shorter columns while ensuring the text is markdown centric and readable in plain text and the GitHub rendering machine. We hope to achieve this using CSS and having classes for vertical columns, without having to make an extension to the markdown parser.\n\n## Gno IDE\n\nGno.land developer experience team is working on a web-based Gno IDE for quickly building Gno realms and packages right on your browser by just visiting a web app. Gno IDE will provide much improved UX for everything around building a realm (including making the testing easier), and additional features like autocompletion in the editor. Gno IDE will contain all the features you would expect from an IDE as well as valuable APIs for devs building tools around Gno.land with the public Gno Infrastructure.\n\n[![Gno IDE](https://raw.githubusercontent.com/gnolang/blog-assets/main/6-myg-march/thumbs/gno-ide.png)](https://raw.githubusercontent.com/gnolang/blog-assets/main/6-myg-march/gno-ide.png)\n\nGno IDE will have multiple modes to support different use cases. The normal mode will be used during everyday developments (as you’re familiar with from other code editors). The presentation mode is for high accessibility and readability. You can use it during video calls or physical workshops while projecting your screen to an audience. The third and perhaps most interesting mode is the embedded mode. Use this mode to embed the IDE into websites and blogs. This feature is especially useful for tutorials to test out sample code, run it on the real testnets, and play with it.\n\n## IBC and ICS\n\nAs depicted in the DAG above, Gno.land mainnet will launch first, followed by IBC and then ICS. We will focus on implementing IBC1, as we strongly believe in the ICS model and want to be a consumer of an existing Cosmos chain. We want a common ICS implementation that works across many hubs because Gno.land is a type of hub that will need its own ICS to scale while providing GnoVM on consumer chains on the Cosmos Hub. Our next step now is to find the best way to configure ICS for Gno.land and make GnoVM available as a consumer chain in the Cosmos Hub system.\n\nRegarding IBC, we will use the current implementation that was written for the Cosmos SDK and port that over to Tendermint2. We anticipate some issues along the way including security patches that need to be applied to our code base. There are multiple ongoing directions and discussions about how to bridge Gno.land’s smart contracts to IBC, which are essentially Interchain smart contract interactions.\n\nOne possibility is to have an API that submits events to a queue of outgoing events, and another queue to receive and consume events asynchronously. This mechanism could work for IBC2 to have rich inter-contract Interchain features, and the same API could work for Interchain plus smart contract interactions that require advanced options. We discussed a proposal to create a standard for Interchain contracts so that IBC2 could eventually be standardized eliminating limitations by applying it with an EVM, other languages, and CosmWasm.\n\nThis protocol could be based on Protobuf or a similar well-known syntax definition protocol so that we can push the Interchain to the next level. IBC2 will be safe and fast and replace vulnerable atomic bridges between multiple technologies. This is a major update that we are committed to developing and we need help identifying all the challenges involved. Working on IBC integration, separate from the Gno.land mainnet launch, will require significant time to understand how the light client system works. If you’re interested in taking on this task, let us know and we’ll set up a group. IBC will likely be the most important challenge of Game of Realms phase 2.\n\n## Garbage Collection\n\nCurrently, our work on garbage collection does not address the problem in the traditional Golang sense of dealing with memory efficiency. Instead, we are progressively optimizing and improving the main state tree by automating the clean-up of orphan nodes. The next phase will be targeting the official garbage collector component to begin work on memory management as we have some common Golang garbage collection challenges, but are identifying some uncommon ones too.\n\nWe need to consider elements like where to hold our objects because this is tied to releasing them in a concurrent lock-free way. We also need a good data structure. This is ongoing research as of now to implement a dedicated routine to synchronously clean stuff in a non-blocking way.\n\n## Game of Realms\n\nThis month, we have seen a massive uptick in contributions to Game of Realms phase one with a tidal wave of issues, general discussions, and PRs. One of the biggest things we worked on was adding support for MOD, which is a version of Go mod with an easier interface to manage your dependencies and version your dependencies. You can track the ongoing issue on GitHub [here](https://github.com/gnolang/gno/issues/390).\n\nThere have been some really strong contributions to the Evaluation DAO and governance module, as well as a big CLI refactor that went into our code base. We've also seen people contribute contracts like GRC 1155 or general improvements to existing realms, with many suggestions for fixing bugs. Finding bugs and reporting what people want is a good indication that the Gno.land platform is being picked up and gaining adoption.\n\nYou can find the Office Hours recordings that cover Game of Realms on YouTube [here](https://www.youtube.com/watch?v=JTmNg-b6Lcs).\n\n## Developer Events Stateside\n\nGno.land hosted a lively meetup during EthDenver last month where Gno.land founder and core dev Jae Kwon gave a talk for Solidity developers called “Gno.land, the Inevitable Next Generation Smart Contract Platform.\" He compared and contrasted Gno.land and Gnolang to Solidity, and showed Ethereum developers how the GnoVM shifts the smart contract paradigm. You can watch the [recording here](https://www.youtube.com/watch?v=IJ0xel8lr4c).\n\nAlso in March, Jae hosted a gaming workshop at a side event during the infamous Gaming Developer Conference (GDC) in San Francisco. “Gno.land for Game Developers, Building Your App in Web3,\" showed participants a sample gaming app built on the Gno.land platform and offered them the chance to try their hand at writing a smart contract for their app with Gno.\n\n## Virtual Events - How to Build a Forum\n\nCore tech lead at Gno.land Miloš Živković held a virtual workshop for Go devs called “How to Build a Forum.” He showed how Gnolang is a fast and simple way to build and launch smart contracts using the Gnolang interpreter virtual machine that interprets Gno and eliminates the need for any servers or ORNs.\n\nThe VM allows for the memory state of your Gno.land application to persist automatically after every transactional function call, which is a completely new way to handle transaction volume and memory recall. You can watch the [full tutorial here](https://github.com/gnolang/workshops).\n\n*We’d like the community to get involved in Gno.land’s monthly updates, so if you’re building on Gno.land and want to highlight your development, project, event, or idea, let us know and we’ll include your contribution.*\n","gnoland,gnovm,tm2"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"2KRAlnvdCgP8w3nmzQOH5k5vDebSxYx+hZve9M1k7vMjYy1UZOqd0si9BcFEYRJr1B/m9tIX6nV9R7TiUBUO1Q=="}],"memo":"from gnoblog-cli"}
{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModEditPost","args":["monthly-dev-1","The More You Gno: Gno.land Monthly Updates","\nWe made progress across the board at Gno.land last month, from onboarding more devs to receiving an influx of contributions to the Game of Realms contest. To encourage development and discourse, we set up a biweekly public developer call in addition to our biweekly Office Hours sessions. Anyone can join, ask questions, and give their suggestions on how to shape the Gno.land platform and become a contributor. Last month, we covered several pressing topics from Gno IDE and Gno.land website language, to GnoVM, IBC, and ICS. Jae also came back to the circuit in March with two IRL workshops for devs at side events during EthDenver and Game Developer Conference (GDC) in San Francisco.\n\n## Developer Updates\n\nYou can find the live streams of the new biweekly public developer calls on [Gno.land YouTube](https://www.youtube.com/@_gnoland/videos) as well as access the agendas on [GitHub](https://github.com/gnolang/meetings/blob/main/notes/2023_03_15_dev_call_notes.md). The main talking points this month were Gno IDE, Gno.land website language and UX, garbage collection, bug fixes, and how to bring IBC and ICS to the platform. We are working on all these issues concurrently but the order of release will be Gno.land mainnet, IBC, and then ICS (this is reflected in the DAG below).\n\n[![Gno.land mini DAG](https://raw.githubusercontent.com/gnolang/blog-assets/main/6-myg-march/thumbs/mini-dag.png)](https://raw.githubusercontent.com/gnolang/blog-assets/main/6-myg-march/mini-dag.png)\n\n## Gno.land Website Language\n\nWe want to add more features for developers, such as libraries to make writing interfaces better and more consistent. There is an open topic for frontend developers with typography skills and library developers to create a UI framework for markdown or a custom rendering system.\n\nInternally, our core team is working on improvements to Gno.land’s website, making it easier to navigate with shorter columns while ensuring the text is markdown centric and readable in plain text and the GitHub rendering machine. We hope to achieve this using CSS and having classes for vertical columns, without having to make an extension to the markdown parser.\n\n## Gno IDE\n\nGno.land developer experience team is working on a web-based Gno IDE for quickly building Gno realms and packages right on your browser by just visiting a web app. Gno IDE will provide much improved UX for everything around building a realm (including making the testing easier), and additional features like autocompletion in the editor. Gno IDE will contain all the features you would expect from an IDE as well as valuable APIs for devs building tools around Gno.land with the public Gno Infrastructure.\n\n[![Gno IDE](https://raw.githubusercontent.com/gnolang/blog-assets/main/6-myg-march/thumbs/gno-ide.png)](https://raw.githubusercontent.com/gnolang/blog-assets/main/6-myg-march/gno-ide.png)\n\nGno IDE will have multiple modes to support different use cases. The normal mode will be used during everyday developments (as you’re familiar with from other code editors). The presentation mode is for high accessibility and readability. You can use it during video calls or physical workshops while projecting your screen to an audience. The third and perhaps most interesting mode is the embedded mode. Use this mode to embed the IDE into websites and blogs. This feature is especially useful for tutorials to test out sample code, run it on the real testnets, and play with it.\n\n## IBC and ICS\n\nAs depicted in the DAG above, Gno.land mainnet will launch first, followed by IBC and then ICS. We will focus on implementing IBC1, as we strongly believe in the ICS model and want to be a consumer of an existing Cosmos chain. We want a common ICS implementation that works across many hubs because Gno.land is a type of hub that will need its own ICS to scale while providing GnoVM on consumer chains on the Cosmos Hub. Our next step now is to find the best way to configure ICS for Gno.land and make GnoVM available as a consumer chain in the Cosmos Hub system.\n\nRegarding IBC, we will use the current implementation that was written for the Cosmos SDK and port that over to Tendermint2. We anticipate some issues along the way including security patches that need to be applied to our code base. There are multiple ongoing directions and discussions about how to bridge Gno.land’s smart contracts to IBC, which are essentially Interchain smart contract interactions.\n\nOne possibility is to have an API that submits events to a queue of outgoing events, and another queue to receive and consume events asynchronously. This mechanism could work for IBC2 to have rich inter-contract Interchain features, and the same API could work for Interchain plus smart contract interactions that require advanced options. We discussed a proposal to create a standard for Interchain contracts so that IBC2 could eventually be standardized eliminating limitations by applying it with an EVM, other languages, and CosmWasm.\n\nThis protocol could be based on Protobuf or a similar well-known syntax definition protocol so that we can push the Interchain to the next level. IBC2 will be safe and fast and replace vulnerable atomic bridges between multiple technologies. This is a major update that we are committed to developing and we need help identifying all the challenges involved. Working on IBC integration, separate from the Gno.land mainnet launch, will require significant time to understand how the light client system works. If you’re interested in taking on this task, let us know and we’ll set up a group. IBC will likely be the most important challenge of Game of Realms phase 2.\n\n## Garbage Collection\n\nCurrently, our work on garbage collection does not address the problem in the traditional Golang sense of dealing with memory efficiency. Instead, we are progressively optimizing and improving the main state tree by automating the clean-up of orphan nodes. The next phase will be targeting the official garbage collector component to begin work on memory management as we have some common Golang garbage collection challenges, but are identifying some uncommon ones too.\n\nWe need to consider elements like where to hold our objects because this is tied to releasing them in a concurrent lock-free way. We also need a good data structure. This is ongoing research as of now to implement a dedicated routine to synchronously clean stuff in a non-blocking way.\n\n## Game of Realms\n\nThis month, we have seen a massive uptick in contributions to Game of Realms phase one with a tidal wave of issues, general discussions, and PRs. One of the biggest things we worked on was adding support for MOD, which is a version of Go mod with an easier interface to manage your dependencies and version your dependencies. You can track the ongoing issue on GitHub [here](https://github.com/gnolang/gno/issues/390).\n\nThere have been some really strong contributions to the Evaluation DAO and governance module, as well as a big CLI refactor that went into our code base. We've also seen people contribute contracts like GRC 1155 or general improvements to existing realms, with many suggestions for fixing bugs. Finding bugs and reporting what people want is a good indication that the Gno.land platform is being picked up and gaining adoption.\n\nYou can find the Office Hours recordings that cover Game of Realms on YouTube [here](https://www.youtube.com/watch?v=JTmNg-b6Lcs).\n\n## Developer Events Stateside\n\nGno.land hosted a lively meetup during EthDenver last month where Gno.land founder and core dev Jae Kwon gave a talk for Solidity developers called “Gno.land, the Inevitable Next Generation Smart Contract Platform.\" He compared and contrasted Gno.land and Gnolang to Solidity, and showed Ethereum developers how the GnoVM shifts the smart contract paradigm. You can watch the [recording here](https://www.youtube.com/watch?v=IJ0xel8lr4c).\n\nAlso in March, Jae hosted a gaming workshop at a side event during the infamous Gaming Developer Conference (GDC) in San Francisco. “Gno.land for Game Developers, Building Your App in Web3,\" showed participants a sample gaming app built on the Gno.land platform and offered them the chance to try their hand at writing a smart contract for their app with Gno.\n\n## Virtual Events - How to Build a Forum\n\nCore tech lead at Gno.land Miloš Živković held a virtual workshop for Go devs called “How to Build a Forum.” He showed how Gnolang is a fast and simple way to build and launch smart contracts using the Gnolang interpreter virtual machine that interprets Gno and eliminates the need for any servers or ORNs.\n\nThe VM allows for the memory state of your Gno.land application to persist automatically after every transactional function call, which is a completely new way to handle transaction volume and memory recall. You can watch the [full tutorial here](https://github.com/gnolang/workshops).\n\n*We’d like the community to get involved in Gno.land’s monthly updates, so if you’re building on Gno.land and want to highlight your development, project, event, or idea, let us know and we’ll include your contribution.*\n","gnoland,gnovm,tm2"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"vMO8QALXLATpVROZOD4tqzReA/R/zr58C4bwgUZR9Jc468arKN6+C2H7EqDafIkgYoqwk2Cf+hKI2+nrS5VO0g=="}],"memo":"from gnoblog-cli"}
{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModEditPost","args":["intro","Intro to Gnoland - The Smart Contract Platform to Improve Our Understanding of the World","\n_Welcome to Gno.land. This is the official site to learn about the Gnolang (Gno) programming language and the Gno.land smart contract platform, as well as understand the motivations behind Gno and our core values and mission. We’re starting a series of blog posts and holding regular community calls and AMAs so that you can stay up to date with upcoming developments and dive deeper into the Gno World Order. Stay tuned._\n\n## What Is Gno.land?\n\nGno.land (pronounced no-land) is a layer 1 smart contract platform invented by Jae Kwon, co-founder of Cosmos and Tendermint, to address multiple issues in the blockchain space — in particular, the ease of use and intuitiveness of smart contract programming platforms. Beyond offering succinctness, composability, expressivity, and completeness not found in any other smart contract platform, we aim to challenge the regime of information censorship that we find ourselves living in today.\n\nBy using the programming language Gnolang (Gno), an interpreted version of the widely-used Golang (Go) language, using a state-of-the-art VM written in Go, we want to lower the barrier to entry to web3 and make it simple for developers (particularly existing web2 developers) to write smart contracts and other blockchain applications without having to learn a programming language that is limited by design or exclusive to a single blockchain ecosystem.\n\n### Gnolang (Gno) Is Essential to Broader Adoption of Web3\n\nFor web3 to grow in a sustainable way, we need technological solutions that are designed for the blockchain with programming languages that are universally adopted, secure, composable, and complete. The main programming language currently used for creating smart contracts, Solidity, is designed for one purpose only (writing smart contracts) and lacks the completeness of a general-purpose language.\n\nSolidity removes many of the complexities that blockchain programming requires (such as memory management, ensuring that the code is deterministic, and understanding how the entire tech stack is implemented) allowing developers to quickly build succinct smart contracts. However, Solidity is only used for smart contracts on EVM-compatible blockchains (like Ethereum, Polygon, or EVMOS) and its design is limited by the limitations of the EVM. In addition, developers have to learn several languages if they want to understand the whole stack or work across different ecosystems.\n\nGo, on the other hand, is a well-designed complete programming language with its foundation based on composable structures, designed by the creators of Plan 9. This allows developers to rapidly accelerate application development and adopt a modular structure by reusing and reassembling existing modules without building from scratch. They can embed one structure inside another in an intuitive way while preserving localism, and the language specification is simple, successfully balancing practicality and minimalism.\n\nGo is widely used, especially among existing web2 developers. It’s easier to learn and can be used to program almost anything, such as GoEthereum or Tendermint. Every part of the Gno.land stack is written in Go so that one person can understand the entire system just by studying a relatively small code base. The Go language is so well designed that the Gnolang smart contract system will become the new gold standard for smart contract development and other blockchain (and even non-blockchain) applications.\n\n### Security Is a Built-in Feature of Go (Golang)\n\nBeyond object embedding, closures, importing of modules, composability of programs, and interfaces that allow you to implement a specific set of functions, Go supports secure programming through exported/non-exported fields, enabling “least-authority” design. It is easy to create objects and APIs that expose only what should be accessible to callers while hiding what should not be simply by the capitalization of letters, thus allowing a succinct representation of secure logic that can be called by multiple users.\n\nAnother major advantage of Go is that the language comes with an ecosystem of great tooling, like the compiler and third-party tools that statically analyze code. Gno inherits these advantages from Go directly to create a smart contract programming language that is safe and helps developers to write secure code relying on the compiler, parser, and interpreter to give warning alerts for common mistakes.\n\n### How Gnolang (Gno) Differs from Golang (Go)\n\n[![Go and Gno](https://gnolang.github.io/blog/2022-11-21_intro/thumbs/go-and-gno.png)](https://gnolang.github.io/blog/2022-11-21_intro/go-and-gno.png)\n\n_Image 1: Gnolang - Like Go but specific to the blockchain_\n\nGno is around 99% identical to Go and most people can code in Gno from day one, even minute one. The Gno.land programming environment comes with blockchain-specific standard libraries, but any code that doesn’t use the blockchain-specific logic can run in Go with minimal processing. On the other hand, some libraries that don’t make sense in the blockchain context are not available in the Gno.land programming environment, such as network or operating-system access.\n\nOtherwise, Gno loads and uses many standard libraries that power Go, so most of the parsing of the source code is the same. Under the hood, the Gno code is parsed into an abstract syntax tree (AST) and the AST itself is used in the interpreter, rather than byte code as in many virtual machines such as Java, Python, or WASM. This makes even the Gno VM accessible to any Go programmer. The novel design of the Gno VM interpreter allows  Gno to freeze and resume the program by persisting and loading the entire memory state. This allows (smart contract) programs to be succinct, as the programmer doesn’t have to serialize and deserialize objects to persist them into a database (unlike programming applications with the Cosmos SDK).\n\nThe composable nature of Go/Gno allows for type-checked interactions between contracts, making Gno.land safer and more powerful, as well as operationally cheaper and faster. Smart contracts on Gno.land will be light, simple, more focused, and easily interoperable — a network of interconnected contracts rather than siloed monoliths that limit interactions with other contracts.\n\n[![Gnolang code example](https://gnolang.github.io/blog/2022-11-21_intro/thumbs/code-example.jpg)](https://gnolang.github.io/blog/2022-11-21_intro/code-example.jpg)\n\n_Image 2: Code snippet from the Gno programming language_\n\nToday, Gno.land is the only blockchain instance in the world that supports Gno but tomorrow, there will be many chains with different names such as mydapp.zone, or mydao.xyz. Gno.land is the name of ONE chain and is not a name that will be used by other Gnolang-powered chains. Gno.land will remain a minimal hub with three main utilities:\n\n* Managing cross-Gnolang-chain fees/licenses\n* To be the (or an) official home for the best smart contracts\n* To provide new models of governance (w/ DAO modules)\n\n### Earning Rewards Through Proof-of-Contribution (PoC)\n\nThere are four main ways to earn rewards through PoC on the Gno.land chain:\n\n* Pre-defined tasks (technical or otherwise)\n* Pre-defined bounties\n* Retroactive bounties\n* Vesting-style rewards for core members\n\nBounties rewards (both pre-defined and retroactive) will be decided with “local rules,” through the agreement of the DAO with everything on-chain and transparent. If one human were to abuse the system, it would trigger and the bad actor would be slashed. We’ll go into depth on how you can earn rewards in an upcoming post.\n\n### Durable Solutions to Improve Our Understanding of the World\n\nOne of our inspirations for the Gno.land project is the gospels, which built a system of moral code that lasted for thousands of years. Part of Gno.land’s endurance will be having a minimal production implementation that becomes a reference for other implementations and a basis for education to elevate people's understanding of blockchains.\n\nGno.land aims to appeal to web developers, dApp developers, and blockchain builders to create solutions that help people improve their understanding of the world. With the barrage of misinformation delivered today from various factions, it’s impossible to separate the real from the fake. This causes a state of gridlock. We are living in a regime of information censorship spanning all important topics from climate change to global pandemics — a vast coordinated effort to prevent people from understanding the truth.\n\nBy just browsing Reddit, searching with Google, and scrolling through Facebook, Twitter, or Instagram, people are deliberately being [misled](https://twitter.com/lhfang/status/1587095890983936000) about key global issues that we all deserve clarity on. This is as malevolent as any type of censorship regime in the world — and we need to come together to challenge it and break the wall of censorship to achieve a functional democracy at last.\n\n### Gno.land’s Current Phase of Development\n\nGno.land is currently running in its third testnet and there will be several more testnets before the platform is production ready. Modern civilization wasn’t built in a day, and neither will Gno.land rush into committing to an exact launch date. However, the next development, an incentivized testnet called ‘Game of Realms’, is scheduled for Q1 2023.\n\nGame of Realms will be similar to ‘Game of Stakes’ on the Cosmos Hub and will reward the earliest and best contributors. If you would like to find out more about Game of Realms, Gno.land, Gnolang, or anything else,  join us for our first community call with Gno.land Founder, Jae Kwon on November 22nd, at 4pm UTC on our [Discord channel](https://discord.gg/YFtMjWwUN7). We look forward to seeing you.\n","gnoland,gnosh,gnot,permissionless,consensus,proof-of-contribution,dao,governance,ibc,democracy,freedom"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"uP0v2YPcXQdRUBLTh6fuw1ju8WSwuC97HforEfzouUkHM4S6R7JihnX0xfcES/EECen0o6A9TEeK0PGe8+76tQ=="}],"memo":"from gnoblog-cli"}
{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModAddPost","args":["intro","Intro to Gnoland - The Smart Contract Platform to Improve Our Understanding of the World","\n_Welcome to Gno.land. This is the official site to learn about the Gnolang (Gno) programming language and the Gno.land smart contract platform, as well as understand the motivations behind Gno and our core values and mission. We’re starting a series of blog posts and holding regular community calls and AMAs so that you can stay up to date with upcoming developments and dive deeper into the Gno World Order. Stay tuned._\n\n## What Is Gno.land?\n\nGno.land (pronounced no-land) is a layer 1 smart contract platform invented by Jae Kwon, co-founder of Cosmos and Tendermint, to address multiple issues in the blockchain space — in particular, the ease of use and intuitiveness of smart contract programming platforms. Beyond offering succinctness, composability, expressivity, and completeness not found in any other smart contract platform, we aim to challenge the regime of information censorship that we find ourselves living in today.\n\nBy using the programming language Gnolang (Gno), an interpreted version of the widely-used Golang (Go) language, using a state-of-the-art VM written in Go, we want to lower the barrier to entry to web3 and make it simple for developers (particularly existing web2 developers) to write smart contracts and other blockchain applications without having to learn a programming language that is limited by design or exclusive to a single blockchain ecosystem.\n\n### Gnolang (Gno) Is Essential to Broader Adoption of Web3\n\nFor web3 to grow in a sustainable way, we need technological solutions that are designed for the blockchain with programming languages that are universally adopted, secure, composable, and complete. The main programming language currently used for creating smart contracts, Solidity, is designed for one purpose only (writing smart contracts) and lacks the completeness of a general-purpose language.\n\nSolidity removes many of the complexities that blockchain programming requires (such as memory management, ensuring that the code is deterministic, and understanding how the entire tech stack is implemented) allowing developers to quickly build succinct smart contracts. However, Solidity is only used for smart contracts on EVM-compatible blockchains (like Ethereum, Polygon, or EVMOS) and its design is limited by the limitations of the EVM. In addition, developers have to learn several languages if they want to understand the whole stack or work across different ecosystems.\n\nGo, on the other hand, is a well-designed complete programming language with its foundation based on composable structures, designed by the creators of Plan 9. This allows developers to rapidly accelerate application development and adopt a modular structure by reusing and reassembling existing modules without building from scratch. They can embed one structure inside another in an intuitive way while preserving localism, and the language specification is simple, successfully balancing practicality and minimalism.\n\nGo is widely used, especially among existing web2 developers. It’s easier to learn and can be used to program almost anything, such as GoEthereum or Tendermint. Every part of the Gno.land stack is written in Go so that one person can understand the entire system just by studying a relatively small code base. The Go language is so well designed that the Gnolang smart contract system will become the new gold standard for smart contract development and other blockchain (and even non-blockchain) applications.\n\n### Security Is a Built-in Feature of Go (Golang)\n\nBeyond object embedding, closures, importing of modules, composability of programs, and interfaces that allow you to implement a specific set of functions, Go supports secure programming through exported/non-exported fields, enabling “least-authority” design. It is easy to create objects and APIs that expose only what should be accessible to callers while hiding what should not be simply by the capitalization of letters, thus allowing a succinct representation of secure logic that can be called by multiple users.\n\nAnother major advantage of Go is that the language comes with an ecosystem of great tooling, like the compiler and third-party tools that statically analyze code. Gno inherits these advantages from Go directly to create a smart contract programming language that is safe and helps developers to write secure code relying on the compiler, parser, and interpreter to give warning alerts for common mistakes.\n\n### How Gnolang (Gno) Differs from Golang (Go)\n\n[![Go and Gno](https://gnolang.github.io/blog/2022-11-21_intro/thumbs/go-and-gno.png)](https://gnolang.github.io/blog/2022-11-21_intro/go-and-gno.png)\n\n_Image 1: Gnolang - Like Go but specific to the blockchain_\n\nGno is around 99% identical to Go and most people can code in Gno from day one, even minute one. The Gno.land programming environment comes with blockchain-specific standard libraries, but any code that doesn’t use the blockchain-specific logic can run in Go with minimal processing. On the other hand, some libraries that don’t make sense in the blockchain context are not available in the Gno.land programming environment, such as network or operating-system access.\n\nOtherwise, Gno loads and uses many standard libraries that power Go, so most of the parsing of the source code is the same. Under the hood, the Gno code is parsed into an abstract syntax tree (AST) and the AST itself is used in the interpreter, rather than byte code as in many virtual machines such as Java, Python, or WASM. This makes even the Gno VM accessible to any Go programmer. The novel design of the Gno VM interpreter allows  Gno to freeze and resume the program by persisting and loading the entire memory state. This allows (smart contract) programs to be succinct, as the programmer doesn’t have to serialize and deserialize objects to persist them into a database (unlike programming applications with the Cosmos SDK).\n\nThe composable nature of Go/Gno allows for type-checked interactions between contracts, making Gno.land safer and more powerful, as well as operationally cheaper and faster. Smart contracts on Gno.land will be light, simple, more focused, and easily interoperable — a network of interconnected contracts rather than siloed monoliths that limit interactions with other contracts.\n\n[![Gnolang code example](https://gnolang.github.io/blog/2022-11-21_intro/thumbs/code-example.jpg)](https://gnolang.github.io/blog/2022-11-21_intro/code-example.jpg)\n\n_Image 2: Code snippet from the Gno programming language_\n\nToday, Gno.land is the only blockchain instance in the world that supports Gno but tomorrow, there will be many chains with different names such as mydapp.zone, or mydao.xyz. Gno.land is the name of ONE chain and is not a name that will be used by other Gnolang-powered chains. Gno.land will remain a minimal hub with three main utilities:\n\n* Managing cross-Gnolang-chain fees/licenses\n* To be the (or an) official home for the best smart contracts\n* To provide new models of governance (w/ DAO modules)\n\n### Earning Rewards Through Proof-of-Contribution (PoC)\n\nThere are four main ways to earn rewards through PoC on the Gno.land chain:\n\n* Pre-defined tasks (technical or otherwise)\n* Pre-defined bounties\n* Retroactive bounties\n* Vesting-style rewards for core members\n\nBounties rewards (both pre-defined and retroactive) will be decided with “local rules,” through the agreement of the DAO with everything on-chain and transparent. If one human were to abuse the system, it would trigger and the bad actor would be slashed. We’ll go into depth on how you can earn rewards in an upcoming post.\n\n### Durable Solutions to Improve Our Understanding of the World\n\nOne of our inspirations for the Gno.land project is the gospels, which built a system of moral code that lasted for thousands of years. Part of Gno.land’s endurance will be having a minimal production implementation that becomes a reference for other implementations and a basis for education to elevate people's understanding of blockchains.\n\nGno.land aims to appeal to web developers, dApp developers, and blockchain builders to create solutions that help people improve their understanding of the world. With the barrage of misinformation delivered today from various factions, it’s impossible to separate the real from the fake. This causes a state of gridlock. We are living in a regime of information censorship spanning all important topics from climate change to global pandemics — a vast coordinated effort to prevent people from understanding the truth.\n\nBy just browsing Reddit, searching with Google, and scrolling through Facebook, Twitter, or Instagram, people are deliberately being [misled](https://twitter.com/lhfang/status/1587095890983936000) about key global issues that we all deserve clarity on. This is as malevolent as any type of censorship regime in the world — and we need to come together to challenge it and break the wall of censorship to achieve a functional democracy at last.\n\n### Gno.land’s Current Phase of Development\n\nGno.land is currently running in its third testnet and there will be several more testnets before the platform is production ready. Modern civilization wasn’t built in a day, and neither will Gno.land rush into committing to an exact launch date. However, the next development, an incentivized testnet called ‘Game of Realms’, is scheduled for Q1 2023.\n\nGame of Realms will be similar to ‘Game of Stakes’ on the Cosmos Hub and will reward the earliest and best contributors. If you would like to find out more about Game of Realms, Gno.land, Gnolang, or anything else,  join us for our first community call with Gno.land Founder, Jae Kwon on November 22nd, at 4pm UTC on our [Discord channel](https://discord.gg/YFtMjWwUN7). We look forward to seeing you.\n","gnoland,gnosh,gnot,permissionless,consensus,proof-of-contribution,dao,governance,ibc,democracy,freedom"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"3Dw7zA4rQg4aiGQm2MiAKD5sJA/jNgUbPuj1OFks+9lSGTef5ory0z2++wkyAJ1jawq+EdZq1tRVDW5ajlHhEQ=="}],"memo":"from gnoblog-cli"}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g127jydsh6cms3lrtdenydxsckh23a8d6emqcvfa","to_address":"g1cwek2hs3pyxluvars2gp6p6a29em2axa8ntlr2","amount":"50000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApFD0bqBG+7AAM8XJGJXtPCQPf571XuNwriEn4trrXcK"},"signature":"fWbDYAEubAVuimYvIADbZd48Jlo1QfavcyS+MYb+m+8tqjm/NIKdiWVDptkfmf8U3Vgt4antXu9LRPB6zPmYZQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g127jydsh6cms3lrtdenydxsckh23a8d6emqcvfa","to_address":"g19mtntgcwr5eq9fu9gtuqqnwea9959kynd8434j","amount":"50000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApFD0bqBG+7AAM8XJGJXtPCQPf571XuNwriEn4trrXcK"},"signature":"n8oqJV15MrBfsdBO0l17H1EdyGSRFNGIocOIShsD31NO18mwJTRuaQNDRunqSUvj/cyW2WebnngRnBA+9rBJYQ=="}],"memo":""}
