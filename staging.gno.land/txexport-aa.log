{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"faucet","Path":"gno.land/r/faucettest2","Files":[{"Name":"admin.gno","Body":"package faucet\n\nimport (\n\t\"errors\"\n\t\"std\"\n)\n\nfunc AdminSetInPause(inPause bool) string {\n\tif err := assertIsAdmin(); err != nil {\n\t\treturn err.Error()\n\t}\n\tgInPause = inPause\n\treturn \"\"\n}\n\nfunc AdminSetMessage(message string) string {\n\tif err := assertIsAdmin(); err != nil {\n\t\treturn err.Error()\n\t}\n\tgMessage = message\n\treturn \"\"\n}\n\nfunc AdminSetTransferLimit(amount int64, denom string) string {\n\tif err := assertIsAdmin(); err != nil {\n\t\treturn err.Error()\n\t}\n\tlimit = std.Coins{std.Coin{Denom: denom, Amount: amount}}\n\treturn \"\"\n}\n\nfunc AdminSetAdminAddr(addr std.Address) string {\n\tif err := assertIsAdmin(); err != nil {\n\t\treturn err.Error()\n\t}\n\tgAdminAddr = addr\n\treturn \"\"\n}\n\nfunc AdminAddController(addr std.Address) string {\n\tif err := assertIsAdmin(); err != nil {\n\t\treturn err.Error()\n\t}\n\n\tadded := false\n\tisFull := true\n\tk := -1\n\tfor i, v := range gControllers {\n\n\t\tif v == addr {\n\t\t\tadded = true\n\t\t\treturn addr.String() + \" exists, no need to add.\"\n\t\t}\n\n\t\tif v == \"\" {\n\t\t\tisFull = false\n\t\t\tk = i\n\t\t\tbreak\n\t\t}\n\n\t}\n\n\tif isFull == true || k \u003c 0 {\n\t\treturn \"can not add more controllers than allowed\"\n\t}\n\n\tgControllers[k] = addr\n\n\treturn \"\"\n}\n\nfunc AdminRemoveController(addr std.Address) string {\n\tif err := assertIsAdmin(); err != nil {\n\t\treturn err.Error()\n\t}\n\n\tremoved := false\n\tfor i, v := range gControllers {\n\n\t\tif v == addr {\n\n\t\t\tgControllers[i] = \"\"\n\t\t\tremoved = true\n\t\t}\n\n\t}\n\n\tif removed == false {\n\n\t\treturn addr.String() + \" is not on the controller list\"\n\t}\n\treturn \"\"\n}\n\nfunc assertIsAdmin() error {\n\tcaller := std.GetOrigCaller()\n\tif caller != gAdminAddr {\n\t\treturn errors.New(\"restricted for admin\")\n\t}\n\treturn nil\n}\n"},{"Name":"faucet.gno","Body":"package faucet\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/ufmt\"\n)\n\nvar (\n\t// configurable by admin.\n\tgAdminAddr   std.Address    = \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"\n\tgControllers [3]std.Address = [3]std.Address{} // limit it to 3\n\n\tgInPause = false\n\tgMessage = \"# Community Faucet.\\n\\n\"\n\n\t// internal vars, for stats.\n\tgTotalTransferred std.Coins\n\tgTotalTransfers   = uint(0)\n\n\t// per account request limit 350 gnot\n\tlimit std.Coins = std.Coins{std.Coin{\"ugnot\", 350000000}}\n)\n\nfunc Transfer(to std.Address, send int64) string {\n\tif err := assertIsController(); err != nil {\n\t\treturn err.Error()\n\t}\n\n\tif gInPause {\n\t\treturn errors.New(\"faucet in pause\").Error()\n\t}\n\n\tvar sendCoins std.Coins\n\n\tif send \u003c= limit.AmountOf(\"ugnot\") {\n\n\t\tsendCoins = std.Coins{std.Coin{Denom: \"ugnot\", Amount: send}}\n\n\t} else {\n\n\t\treturn errors.New(\"Per request limit \" + limit.String() + \" exceed\").Error()\n\t}\n\n\tgTotalTransferred = gTotalTransferred.Add(sendCoins)\n\tgTotalTransfers++\n\n\tbanker := std.GetBanker(std.BankerTypeRealmSend)\n\tpkgaddr := std.GetOrigPkgAddr()\n\tbanker.SendCoins(pkgaddr, to, sendCoins)\n\treturn \"\"\n}\nfunc GetPerTransferLimit() int64 {\n\n\treturn limit.AmountOf(\"ugnot\")\n\n}\nfunc Render(path string) string {\n\tbanker := std.GetBanker(std.BankerTypeRealmSend)\n\tbalance := banker.GetCoins(std.GetOrigPkgAddr())\n\tdebug := false\n\tif strings.Contains(path, \":debug\") {\n\n\t\tpath = strings.TrimRight(path, \":debug\")\n\t\tdebug = true\n\n\t}\n\n\toutput := path + gMessage\n\tif gInPause {\n\t\toutput += \"Status: inactive.\\n\"\n\t} else {\n\t\toutput += \"Status: active.\\n\\n\"\n\t}\n\toutput += ufmt.Sprintf(\"Balance: %s.\\n\", balance.String())\n\toutput += ufmt.Sprintf(\"Total transfer: %s (in %d times).\\n\\n\", gTotalTransferred.String(), gTotalTransfers)\n\n\toutput += ufmt.Sprintf(\"Admin: %s\\n\\n \", gAdminAddr.String())\n\toutput += ufmt.Sprintf(\"Controller:\\n\\n \")\n\n\tfor _, v := range gControllers {\n\n\t\toutput += ufmt.Sprintf(\"%s  \", v.String())\n\n\t}\n\toutput += ufmt.Sprintf(\"\\n\\n\")\n\toutput += ufmt.Sprintf(\"Per request limit: %s\\n\\n\", limit.String())\n\n\treturn output\n}\n\nfunc assertIsController() error {\n\tcaller := std.GetOrigCaller()\n\n\tfor _, v := range gControllers {\n\t\tif caller == v {\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn errors.New(caller.String() + \" is not on the controller list\")\n}\n"},{"Name":"faucet_test.gno","Body":"package faucet\n\nimport (\n\t\"fmt\"\n\t\"std\"\n\t\"testing\"\n\n\t\"gno.land/p/testutils\"\n\t\"gno.land/r/faucet\"\n)\n\nfunc TestPackage(t *testing.T) {\n\tvar (\n\t\tadminaddr       = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\tfaucetaddr      = std.TestDerivePkgAddr(\"gno.land/r/faucet\")\n\t\tcontrolleraddr1 = testutils.TestAddress(\"controller1\")\n\t\tcontrolleraddr2 = testutils.TestAddress(\"controller2\")\n\t\tcontrolleraddr3 = testutils.TestAddress(\"controller3\")\n\t\tcontrolleraddr4 = testutils.TestAddress(\"controller4\")\n\n\t\ttest1addr = testutils.TestAddress(\"test1\")\n\t)\n\t// deposit 1000gnot to faucet contract\n\n\tstd.TestIssueCoins(faucetaddr, std.Coins{{\"ugnot\", 1000000000}})\n\tstd.TestSetOrigPkgAddr(faucetaddr)\n\tassertBalance(t, faucetaddr, 1000000000)\n\n\t// by default, balance is empty, and as a user I cannot call Transfer, or Admin commands.\n\n\tassertBalance(t, test1addr, 0)\n\tassertErr(t, faucet.Transfer(test1addr, 1000000))\n\tassertErr(t, faucet.AdminAddController(controlleraddr1))\n\tstd.TestSetOrigCaller(controlleraddr1)\n\tassertErr(t, faucet.Transfer(test1addr, 1000000))\n\n\t// as an admin, add the controller to contract and deposit more 2000gnot to contract\n\tstd.TestSetOrigCaller(adminaddr)\n\tstd.TestSetOrigSend(std.Coins{{\"ugnot\", 2000000000}}, nil)\n\tassertNoErr(t, faucet.AdminAddController(controlleraddr1))\n\tassertBalance(t, faucetaddr, 1000000000)\n\n\t// now, send some tokens as controller.\n\tstd.TestSetOrigCaller(controlleraddr1)\n\tassertNoErr(t, faucet.Transfer(test1addr, 1000000))\n\tassertBalance(t, test1addr, 1000000)\n\tassertNoErr(t, faucet.Transfer(test1addr, 1000000))\n\tassertBalance(t, test1addr, 2000000)\n\tassertBalance(t, faucetaddr, 998000000)\n\n\t// remove controller\n\t// as an admin, remove controller\n\tstd.TestSetOrigCaller(adminaddr)\n\tassertNoErr(t, faucet.AdminRemoveController(controlleraddr1))\n\tstd.TestSetOrigCaller(controlleraddr1)\n\tassertErr(t, faucet.Transfer(test1addr, 1000000))\n\n\t// add more than 3 controllers\n\n\tstd.TestSetOrigCaller(adminaddr)\n\tassertNoErr(t, faucet.AdminAddController(controlleraddr1))\n\tassertErr(t, faucet.AdminAddController(controlleraddr1))\n\tassertNoErr(t, faucet.AdminAddController(controlleraddr2))\n\tassertNoErr(t, faucet.AdminAddController(controlleraddr3))\n\tassertErr(t, faucet.AdminAddController(controlleraddr4))\n\n\t// send more than per transfer limit\n\tstd.TestSetOrigCaller(adminaddr)\n\tfaucet.AdminSetTransferLimit(300000000, \"ugnot\")\n\tstd.TestSetOrigCaller(controlleraddr1)\n\tassertErr(t, faucet.Transfer(test1addr, 301000000))\n\n\t// block transefer from the address not on the controllers list.\n\tstd.TestSetOrigCaller(controlleraddr4)\n\tassertErr(t, faucet.Transfer(test1addr, 1000000))\n\n}\n\nfunc assertErr(t *testing.T, err string) {\n\tt.Helper()\n\tif err == \"\" {\n\t\tt.Logf(\"info: got err: %v\", err)\n\t\tt.Errorf(\"expected an error, got nil.\")\n\t}\n}\n\nfunc assertNoErr(t *testing.T, err string) {\n\tt.Helper()\n\tif err != \"\" {\n\t\tt.Errorf(\"got err: %v.\", err)\n\t}\n}\n\nfunc assertBalance(t *testing.T, addr std.Address, expectedBal int64) {\n\tt.Helper()\n\n\tbanker := std.GetBanker(std.BankerTypeReadonly)\n\tcoins := banker.GetCoins(addr)\n\tgot := coins.AmountOf(\"ugnot\")\n\n\tif expectedBal != got {\n\t\tt.Errorf(\"invalid balance: expected %d, got %d.\", expectedBal, got)\n\t}\n}\n"}]},"deposit":"200000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"GKo+7Z4us2KCtZ3O1vMekWXp2FgR9S0HzXoGuhc3Exdv6ime1fSRdKn6HPihUk3SuTUGr3JnAipWd2aRAVRt1g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g14ykc8d4n2sr9lmlv80cgp2qu74emujyujvhe5w","amount":"800000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"o80Q0wCYidvsDAi8smrxxoK/Gn0rCKOmWYm30mYpu4hBz6EjG62CQTB1zgK3c/pRsXxKbHreB7H5LS9qRTDMeA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/faucettest2","func":"AdminAddController","args":["g14ykc8d4n2sr9lmlv80cgp2qu74emujyujvhe5w"]}],"fee":{"gas_wanted":"1000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"VuBuDHhnrDNNHsNnM4bCUF9ha0iMi3JBZu+vuZKYB8gufyTtcPuX6ibw1k8+mpcZX9skooXKbv6Ar6QuoqhWbw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14ykc8d4n2sr9lmlv80cgp2qu74emujyujvhe5w","send":"","pkg_path":"gno.land/r/faucettest2","func":"Transfer","args":["g1374xjte2vqs8numnhv8y6f26shwqh95zkeda3a","350000000"]}],"fee":{"gas_wanted":"800000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3yz20b89O47wbz+OyRY3ZeeLRx+DKc2g5RAZdKof6WW"},"signature":"IskVcXOO0GB+w5vvwA+ppVNaZq8j23xbpc75A1OLH/deo/wRJCSx4SINPRBe5GIuOiJbQuPjWs1xL3DUBPDx9A=="}],"memo":"disccord faucet"}
{"msg":[{"@type":"/vm.m_call","caller":"g14ykc8d4n2sr9lmlv80cgp2qu74emujyujvhe5w","send":"","pkg_path":"gno.land/r/faucettest2","func":"Transfer","args":["g1374xjte2vqs8numnhv8y6f26shwqh95zkeda3a","350000000"]}],"fee":{"gas_wanted":"800000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3yz20b89O47wbz+OyRY3ZeeLRx+DKc2g5RAZdKof6WW"},"signature":"7GJDAIewyba0taWQofD3GpvRBbSasGO7yI5Pur98r3FOntRfneVCu8iASwqwW7yf+8I1FCmGTb+YzhQEtvQsag=="}],"memo":"disccord faucet"}
{"msg":[{"@type":"/vm.m_call","caller":"g14ykc8d4n2sr9lmlv80cgp2qu74emujyujvhe5w","send":"","pkg_path":"gno.land/r/faucettest2","func":"Transfer","args":["g1374xjte2vqs8numnhv8y6f26shwqh95zkeda3a","350000000"]}],"fee":{"gas_wanted":"800000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3yz20b89O47wbz+OyRY3ZeeLRx+DKc2g5RAZdKof6WW"},"signature":"GGC77LHTFp2dNe011UImUaVmLQSz0GotYS+ZdHlwynBWgaDa4NyOqfnksDARyak1Q0h0yt7Kdinm/1h71dkNzg=="}],"memo":"disccord faucet"}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/faucettest2","func":"Transfer","args":["g1374xjte2vqs8numnhv8y6f26shwqh95zkeda3a","350000000"]}],"fee":{"gas_wanted":"800000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"Sj6xbuGevyssHuRWUN/RnItgLMYz6gLmqUcdWGuePyZFnYeuHf1JAIgv23V9GMFKFe0ZOX1vN0ecyaw9olaHow=="}],"memo":"disccord faucet"}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/faucettest2","func":"AdminAddController","args":["AdminAddController"]}],"fee":{"gas_wanted":"1000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"IZu6+WnMYx4nYxFf1oQuJ0VjtLvYLQcuBYNvSfYLzhFnEJZljYvUsOOesIGepX9TlzHgPL1uscIXgyS3NsR0Kg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14ykc8d4n2sr9lmlv80cgp2qu74emujyujvhe5w","send":"","pkg_path":"gno.land/r/faucettest2","func":"Transfer","args":["g1374xjte2vqs8numnhv8y6f26shwqh95zkeda3a","350000000"]}],"fee":{"gas_wanted":"800000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3yz20b89O47wbz+OyRY3ZeeLRx+DKc2g5RAZdKof6WW"},"signature":"BX2XHN2jBRUMoIYu4fqo3la+CRNo/Xb+ley8fIMItcxEkPe0+xy3lSCAkW19LX/KNXEnxKzeVOUobnnNBPjEKA=="}],"memo":"disccord faucet"}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/faucettest2","func":"Transfer","args":["g1374xjte2vqs8numnhv8y6f26shwqh95zkeda3a","350000000"]}],"fee":{"gas_wanted":"800000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"A3e5tNO1qY8ncpZ7nQgDMp3ZX32gMlNui6IM2mcPzm541qh9g6P6AlqArge9X03PYYvHOMfDvC14sRFNT4Eo8Q=="}],"memo":"disccord faucet"}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/faucettest2","func":"AdminRemoveController","args":["AdminAddController"]}],"fee":{"gas_wanted":"1000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"Dp7OyH+ZHUQHDdju8J+RuaJiwazqq7u6kziSUBmZFwdVwF8Ub8u9FFwY3KRwV9+LKTGnDvZC6DqvqQxotWvXhQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/faucettest2","func":"AdminAddController","args":["g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5"]}],"fee":{"gas_wanted":"1000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"68q/VAT67d9HOSDX2sVRw2IVWRF7ikTS3lsNUKxGamM82iwhUeJbDl1sYT83u3qeD7/09Bm+vRkMllLP1C6ONA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14ykc8d4n2sr9lmlv80cgp2qu74emujyujvhe5w","send":"","pkg_path":"gno.land/r/faucettest2","func":"Transfer","args":["g1374xjte2vqs8numnhv8y6f26shwqh95zkeda3a","350000000"]}],"fee":{"gas_wanted":"800000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3yz20b89O47wbz+OyRY3ZeeLRx+DKc2g5RAZdKof6WW"},"signature":"0GyFPJollMHf+z188iW1vZTrylH7j0R/uC4QPdvb2YdUhHgVSYQ0NghkO8CuJPkiFocqCP49IK/NHw3Q8HVxRg=="}],"memo":"disccord faucet"}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/faucettest2","func":"Transfer","args":["g1374xjte2vqs8numnhv8y6f26shwqh95zkeda3a","350000000"]}],"fee":{"gas_wanted":"800000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"3BBN2jD8TZJGcncPSQoPnb4V3CtSWGG6rZh5123NchJa4rwiOiJpEcrPgqFd8HjC7hQdQ6P1I/HuGj2Qpi54uQ=="}],"memo":"disccord faucet"}
ecp256k1","value":"ApFD0bqBG+7AAM8XJGJXtPCQPf571XuNwriEn4trrXcK"},"signature":"h0sOq/Xxj1g5t36Bs088byG5ZK97A0cWE/LkCMfguNBOCygwDHFpyUny7RXkT4KY5H0h5fIycY6Nf9iR7/Rauw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g127jydsh6cms3lrtdenydxsckh23a8d6emqcvfa","to_address":"g1gdvy5aemcqvc7cm5lng9mwj7vrctatpycp8sy6","amount":"50000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApFD0bqBG+7AAM8XJGJXtPCQPf571XuNwriEn4trrXcK"},"signature":"LVPCEGRts2R1b0oNvAzhYuGVZc4VQA5x4dY7k1gPQNp1+Nhv1GkXjSa+sJtlkfjJimk9i/TIoDLWb8Dt24hPhw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g127jydsh6cms3lrtdenydxsckh23a8d6emqcvfa","to_address":"g1zm3nl5gq357suhz4t00a8tj8zw4563qqvjje9s","amount":"50000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApFD0bqBG+7AAM8XJGJXtPCQPf571XuNwriEn4trrXcK"},"signature":"nz3Qi3+OuoIzaLbTcOyjkwGhYfEaOrqgfW1H1kBAhXkga3YKgTHfPCQEs1vKFEpLJ+u9gUS9mdIWjkF5QS13QQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g127jydsh6cms3lrtdenydxsckh23a8d6emqcvfa","to_address":"g1m4yfnu7dt7u4wf0j9gh608nzug2anyp5ve2xwt","amount":"50000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApFD0bqBG+7AAM8XJGJXtPCQPf571XuNwriEn4trrXcK"},"signature":"hLWfJZurleN1deUvxkG8G+Do1cC5UXFCLX0Oo5BjvoB0LJI4symLPo0Js7lmCd8hV957JUBq9gk8riM4a6tt2Q=="}],"memo":""}
