{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1k8p7x84gjcy0recfkzvfgljxyyxdlgu02y6w50","send":"","pkg_path":"gno.land/r/boards","func":"CreateBoard","args":["zeroo"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6sURdF72+imW+kYkFKR0lhx1XEPwHnXhsbvPzBpctfC"},"signature":"PgmUAhUjr9aWaRs0iJD7R8Y1toBo0zMhXJu7ZeF74gNalZV38iXn6FkR3hbN5pFCNzOmQRxbRhNaptbdKAAxyA=="}],"memo":""},"blockNum":"200131"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1k8p7x84gjcy0recfkzvfgljxyyxdlgu02y6w50","send":"","pkg_path":"gno.land/r/boards","func":"CreateBoard","args":["EnriqueSam"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6sURdF72+imW+kYkFKR0lhx1XEPwHnXhsbvPzBpctfC"},"signature":"QBDDcFavbZtXo5aVHOl0iu4JKKkOtmueqZFc7baZNT02vYIpnm+Yqxw2JwrGf20UV5LeInkDxBkB+735Jz7H/w=="}],"memo":""},"blockNum":"200169"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1pl3x96jqswtg3gx3ukf2dq4jpcdl4egqev6hg2","to_address":"g1pl3x96jqswtg3gx3ukf2dq4jpcdl4egqev6hg2","amount":"123000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArYHP8RjlnLQGQp/YsDRAu11djOFtCFZe4Oxwi36nLm3"},"signature":"9m2oXLllexd2UaTu72rNbEqbSu6CIyhGlh6pf+0aguVdVUn4RmrPXWg19UxFzBZP47820wPfAFiy+fQZ0ce4iw=="}],"memo":""},"blockNum":"200518"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1pl3x96jqswtg3gx3ukf2dq4jpcdl4egqev6hg2","to_address":"g1pl3x96jqswtg3gx3ukf2dq4jpcdl4egqev6hg2","amount":"11000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArYHP8RjlnLQGQp/YsDRAu11djOFtCFZe4Oxwi36nLm3"},"signature":"ieS71RbK2yHV1Vh1Z4m3hMxesTIPHxKZt/br0Y16nuEXwfONs1/jqp8tuJY5MMpPrq4UFv3Xnq645sNINjIR6g=="}],"memo":""},"blockNum":"200521"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1pl3x96jqswtg3gx3ukf2dq4jpcdl4egqev6hg2","to_address":"g1l3cc2erlr7rnapv30u528cpdm58vcvuxpc0jhx","amount":"300000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArYHP8RjlnLQGQp/YsDRAu11djOFtCFZe4Oxwi36nLm3"},"signature":"1VBox3189Kdj+ThLY8/ol6xVKDatNVuwuwhH+cmhKCBtevmPhzPIxaL+IUzutarMrTzU1f9dP6Oj95cnv8QGrg=="}],"memo":""},"blockNum":"200525"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1pl3x96jqswtg3gx3ukf2dq4jpcdl4egqev6hg2","to_address":"g1skheu5egtwxg9vq045x8phszn782d00kkpfyzz","amount":"22000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArYHP8RjlnLQGQp/YsDRAu11djOFtCFZe4Oxwi36nLm3"},"signature":"YzaZqPtX5O5RSdSrLH7Ppzt0D7nDYy1zSn56uYLFDSAvwQ9MT+KESJkNURkBWLw8Oh8eD28iofki2CQ6XgI0dA=="}],"memo":""},"blockNum":"200528"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1pl3x96jqswtg3gx3ukf2dq4jpcdl4egqev6hg2","to_address":"g1h8g2j7akkuu84v4slq000x334yw0qm0t684wy3","amount":"111000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArYHP8RjlnLQGQp/YsDRAu11djOFtCFZe4Oxwi36nLm3"},"signature":"GZcHVJyaUTGl5dXj+9cbarLhoSNOrAJI0+L3mD2rZAwqX3Rmq7gQ2G3ndaBO55uqb7YBendUpqp4JxXR2sLSzw=="}],"memo":""},"blockNum":"200531"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g1k8p7x84gjcy0recfkzvfgljxyyxdlgu02y6w50","amount":"200000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"2L+D7qSnS9TPVpvq2M5Lo/wSIuJ0KUpNRNJ5uQY9xKlyGQGmNsrfwhqZArkHGaLalVO5oAl3EZ7LEZXO+YDUsQ=="}],"memo":""},"blockNum":"200615"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/boards","func":"GetBoardIDFromName","args":["Hellow world"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"nBKrOZ+pszolnanRkOa10HlXGGm2ln234Hbva5Cmrw4vPYPoln61ndZfqWPz/hG/ZJOpUcZhCCxPKssJUBAaRg=="}],"memo":""},"blockNum":"200807"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"faucet","Path":"gno.land/r/faucettest","Files":[{"Name":"admin.gno","Body":"package faucet\n\nimport (\n\t\"errors\"\n\t\"std\"\n)\n\nfunc AdminSetInPause(inPause bool) string {\n\tif err := assertIsAdmin(); err != nil {\n\t\treturn err.Error()\n\t}\n\tgInPause = inPause\n\treturn \"\"\n}\n\nfunc AdminSetMessage(message string) string {\n\tif err := assertIsAdmin(); err != nil {\n\t\treturn err.Error()\n\t}\n\tgMessage = message\n\treturn \"\"\n}\n\nfunc AdminSetTransferLimit(amount int64, denom string) string {\n\tif err := assertIsAdmin(); err != nil {\n\t\treturn err.Error()\n\t}\n\tlimit = std.Coins{std.Coin{Denom: denom, Amount: amount}}\n\treturn \"\"\n}\n\nfunc AdminSetAdminAddr(addr std.Address) string {\n\tif err := assertIsAdmin(); err != nil {\n\t\treturn err.Error()\n\t}\n\tgAdminAddr = addr\n\treturn \"\"\n}\n\nfunc AdminAddController(addr std.Address) string {\n\tif err := assertIsAdmin(); err != nil {\n\t\treturn err.Error()\n\t}\n\n\tadded := false\n\tisFull := true\n\tk := -1\n\tfor i, v := range gControllers {\n\n\t\tif v == addr {\n\t\t\tadded = true\n\t\t\treturn addr.String() + \" exists, no need to add.\"\n\t\t}\n\n\t\tif v == \"\" {\n\t\t\tisFull = false\n\t\t\tk = i\n\t\t\tbreak\n\t\t}\n\n\t}\n\n\tif isFull == true || k \u003c 0 {\n\t\treturn \"can not add more controllers than allowed\"\n\t}\n\n\tgControllers[k] = addr\n\n\treturn \"\"\n}\n\nfunc AdminRemoveController(addr std.Address) string {\n\tif err := assertIsAdmin(); err != nil {\n\t\treturn err.Error()\n\t}\n\n\tremoved := false\n\tfor i, v := range gControllers {\n\n\t\tif v == addr {\n\n\t\t\tgControllers[i] = \"\"\n\t\t\tremoved = true\n\t\t}\n\n\t}\n\n\tif removed == false {\n\n\t\treturn addr.String() + \" is not on the controller list\"\n\t}\n\treturn \"\"\n}\n\nfunc assertIsAdmin() error {\n\tcaller := std.GetOrigCaller()\n\tif caller != gAdminAddr {\n\t\treturn errors.New(\"restricted for admin\")\n\t}\n\treturn nil\n}\n"},{"Name":"faucet.gno","Body":"package faucet\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/ufmt\"\n)\n\nvar (\n\t// configurable by admin.\n\tgAdminAddr   std.Address    = \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"\n\tgControllers [3]std.Address = [3]std.Address{} // limit it to 3\n\n\tgInPause = false\n\tgMessage = \"# Community Faucet.\\n\\n\"\n\n\t// internal vars, for stats.\n\tgTotalTransferred std.Coins\n\tgTotalTransfers   = uint(0)\n\n\t// per account request limit 350 gnot\n\tlimit std.Coins = std.Coins{std.Coin{\"ugnot\", 350000000}}\n)\n\nfunc Transfer(to std.Address, send int64) string {\n\tif err := assertIsController(); err != nil {\n\t\treturn err.Error()\n\t}\n\n\tif gInPause {\n\t\treturn errors.New(\"faucet in pause\").Error()\n\t}\n\n\tvar sendCoins std.Coins\n\n\tif send \u003c= limit.AmountOf(\"ugnot\") {\n\n\t\tsendCoins = std.Coins{std.Coin{Denom: \"ugnot\", Amount: send}}\n\n\t} else {\n\n\t\treturn errors.New(\"Per request limit \" + limit.String() + \" exceed\").Error()\n\t}\n\n\tgTotalTransferred = gTotalTransferred.Add(sendCoins)\n\tgTotalTransfers++\n\n\tbanker := std.GetBanker(std.BankerTypeRealmSend)\n\tpkgaddr := std.GetOrigPkgAddr()\n\tbanker.SendCoins(pkgaddr, to, sendCoins)\n\treturn \"\"\n}\nfunc GetPerTransferLimit() int64 {\n\n\treturn limit.AmountOf(\"ugnot\")\n\n}\nfunc Render(path string) string {\n\tbanker := std.GetBanker(std.BankerTypeRealmSend)\n\tbalance := banker.GetCoins(std.GetOrigPkgAddr())\n\tdebug := false\n\tif strings.Contains(path, \":debug\") {\n\n\t\tpath = strings.TrimRight(path, \":debug\")\n\t\tdebug = true\n\n\t}\n\n\toutput := path + gMessage\n\tif gInPause {\n\t\toutput += \"Status: inactive.\\n\"\n\t} else {\n\t\toutput += \"Status: active.\\n\\n\"\n\t}\n\toutput += ufmt.Sprintf(\"Balance: %s.\\n\", balance.String())\n\toutput += ufmt.Sprintf(\"Total transfer: %s (in %d times).\\n\\n\", gTotalTransferred.String(), gTotalTransfers)\n\n\t//if debug {\n\n\toutput += ufmt.Sprintf(\"Admin: %s\\n\\n, \", gAdminAddr.String())\n\toutput += ufmt.Sprintf(\"Controller: [\\n\\n\")\n\n\tfor _, v := range gControllers {\n\n\t\toutput += ufmt.Sprintf(\"%s  \", v.String())\n\n\t}\n\toutput += ufmt.Sprintf(\"]\\n\\n\")\n\toutput += ufmt.Sprintf(\"Per request limit: %s\\n\\n\", limit.String())\n\n\t//}\n\treturn output\n}\n\nfunc assertIsController() error {\n\tcaller := std.GetOrigCaller()\n\n\tfor _, v := range gControllers {\n\t\tif caller == v {\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn errors.New(caller.String() + \" is not on the controller list\")\n}\n"},{"Name":"faucet_test.gno","Body":"package faucet\n\nimport (\n\t\"fmt\"\n\t\"std\"\n\t\"testing\"\n\n\t\"gno.land/p/testutils\"\n\t\"gno.land/r/faucet\"\n)\n\nfunc TestPackage(t *testing.T) {\n\tvar (\n\t\tadminaddr       = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\tfaucetaddr      = std.TestDerivePkgAddr(\"gno.land/r/faucet\")\n\t\tcontrolleraddr1 = testutils.TestAddress(\"controller1\")\n\t\tcontrolleraddr2 = testutils.TestAddress(\"controller2\")\n\t\tcontrolleraddr3 = testutils.TestAddress(\"controller3\")\n\t\tcontrolleraddr4 = testutils.TestAddress(\"controller4\")\n\n\t\ttest1addr = testutils.TestAddress(\"test1\")\n\t)\n\t// deposit 1000gnot to faucet contract\n\n\tstd.TestIssueCoins(faucetaddr, std.Coins{{\"ugnot\", 1000000000}})\n\tstd.TestSetOrigPkgAddr(faucetaddr)\n\tassertBalance(t, faucetaddr, 1000000000)\n\n\t// by default, balance is empty, and as a user I cannot call Transfer, or Admin commands.\n\n\tassertBalance(t, test1addr, 0)\n\tassertErr(t, faucet.Transfer(test1addr, 1000000))\n\tassertErr(t, faucet.AdminAddController(controlleraddr1))\n\tstd.TestSetOrigCaller(controlleraddr1)\n\tassertErr(t, faucet.Transfer(test1addr, 1000000))\n\n\t// as an admin, add the controller to contract and deposit more 2000gnot to contract\n\tstd.TestSetOrigCaller(adminaddr)\n\tstd.TestSetOrigSend(std.Coins{{\"ugnot\", 2000000000}}, nil)\n\tassertNoErr(t, faucet.AdminAddController(controlleraddr1))\n\tassertBalance(t, faucetaddr, 1000000000)\n\n\t// now, send some tokens as controller.\n\tstd.TestSetOrigCaller(controlleraddr1)\n\tassertNoErr(t, faucet.Transfer(test1addr, 1000000))\n\tassertBalance(t, test1addr, 1000000)\n\tassertNoErr(t, faucet.Transfer(test1addr, 1000000))\n\tassertBalance(t, test1addr, 2000000)\n\tassertBalance(t, faucetaddr, 998000000)\n\n\t// remove controller\n\t// as an admin, remove controller\n\tstd.TestSetOrigCaller(adminaddr)\n\tassertNoErr(t, faucet.AdminRemoveController(controlleraddr1))\n\tstd.TestSetOrigCaller(controlleraddr1)\n\tassertErr(t, faucet.Transfer(test1addr, 1000000))\n\n\t// add more than 3 controllers\n\n\tstd.TestSetOrigCaller(adminaddr)\n\tassertNoErr(t, faucet.AdminAddController(controlleraddr1))\n\tassertErr(t, faucet.AdminAddController(controlleraddr1))\n\tassertNoErr(t, faucet.AdminAddController(controlleraddr2))\n\tassertNoErr(t, faucet.AdminAddController(controlleraddr3))\n\tassertErr(t, faucet.AdminAddController(controlleraddr4))\n\n\t// send more than per transfer limit\n\tstd.TestSetOrigCaller(adminaddr)\n\tfaucet.AdminSetTransferLimit(300000000, \"ugnot\")\n\tstd.TestSetOrigCaller(controlleraddr1)\n\tassertErr(t, faucet.Transfer(test1addr, 301000000))\n\n\t// block transefer from the address not on the controllers list.\n\tstd.TestSetOrigCaller(controlleraddr4)\n\tassertErr(t, faucet.Transfer(test1addr, 1000000))\n\n}\n\nfunc assertErr(t *testing.T, err string) {\n\tt.Helper()\n\tif err == \"\" {\n\t\tt.Logf(\"info: got err: %v\", err)\n\t\tt.Errorf(\"expected an error, got nil.\")\n\t}\n}\n\nfunc assertNoErr(t *testing.T, err string) {\n\tt.Helper()\n\tif err != \"\" {\n\t\tt.Errorf(\"got err: %v.\", err)\n\t}\n}\n\nfunc assertBalance(t *testing.T, addr std.Address, expectedBal int64) {\n\tt.Helper()\n\n\tbanker := std.GetBanker(std.BankerTypeReadonly)\n\tcoins := banker.GetCoins(addr)\n\tgot := coins.AmountOf(\"ugnot\")\n\n\tif expectedBal != got {\n\t\tt.Errorf(\"invalid balance: expected %d, got %d.\", expectedBal, got)\n\t}\n}\n"}]},"deposit":"200000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"oxX+FLjIFmS502uenJzhhyIX9YrBR2qSkf7WluP573B3Ai9Ihzf9mw5cACBg7jNFb0/FAl9+4rlhIt03jhwWoQ=="}],"memo":""},"blockNum":"200823"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"faucet","Path":"gno.land/r/faucettest","Files":[{"Name":"admin.gno","Body":"package faucet\n\nimport (\n\t\"errors\"\n\t\"std\"\n)\n\nfunc AdminSetInPause(inPause bool) string {\n\tif err := assertIsAdmin(); err != nil {\n\t\treturn err.Error()\n\t}\n\tgInPause = inPause\n\treturn \"\"\n}\n\nfunc AdminSetMessage(message string) string {\n\tif err := assertIsAdmin(); err != nil {\n\t\treturn err.Error()\n\t}\n\tgMessage = message\n\treturn \"\"\n}\n\nfunc AdminSetTransferLimit(amount int64, denom string) string {\n\tif err := assertIsAdmin(); err != nil {\n\t\treturn err.Error()\n\t}\n\tlimit = std.Coins{std.Coin{Denom: denom, Amount: amount}}\n\treturn \"\"\n}\n\nfunc AdminSetAdminAddr(addr std.Address) string {\n\tif err := assertIsAdmin(); err != nil {\n\t\treturn err.Error()\n\t}\n\tgAdminAddr = addr\n\treturn \"\"\n}\n\nfunc AdminAddController(addr std.Address) string {\n\tif err := assertIsAdmin(); err != nil {\n\t\treturn err.Error()\n\t}\n\n\tadded := false\n\tisFull := true\n\tk := -1\n\tfor i, v := range gControllers {\n\n\t\tif v == addr {\n\t\t\tadded = true\n\t\t\treturn addr.String() + \" exists, no need to add.\"\n\t\t}\n\n\t\tif v == \"\" {\n\t\t\tisFull = false\n\t\t\tk = i\n\t\t\tbreak\n\t\t}\n\n\t}\n\n\tif isFull == true || k \u003c 0 {\n\t\treturn \"can not add more controllers than allowed\"\n\t}\n\n\tgControllers[k] = addr\n\n\treturn \"\"\n}\n\nfunc AdminRemoveController(addr std.Address) string {\n\tif err := assertIsAdmin(); err != nil {\n\t\treturn err.Error()\n\t}\n\n\tremoved := false\n\tfor i, v := range gControllers {\n\n\t\tif v == addr {\n\n\t\t\tgControllers[i] = \"\"\n\t\t\tremoved = true\n\t\t}\n\n\t}\n\n\tif removed == false {\n\n\t\treturn addr.String() + \" is not on the controller list\"\n\t}\n\treturn \"\"\n}\n\nfunc assertIsAdmin() error {\n\tcaller := std.GetOrigCaller()\n\tif caller != gAdminAddr {\n\t\treturn errors.New(\"restricted for admin\")\n\t}\n\treturn nil\n}\n"},{"Name":"faucet.gno","Body":"package faucet\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/ufmt\"\n)\n\nvar (\n\t// configurable by admin.\n\tgAdminAddr   std.Address    = \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"\n\tgControllers [3]std.Address = [3]std.Address{} // limit it to 3\n\n\tgInPause = false\n\tgMessage = \"# Community Faucet.\\n\\n\"\n\n\t// internal vars, for stats.\n\tgTotalTransferred std.Coins\n\tgTotalTransfers   = uint(0)\n\n\t// per account request limit 350 gnot\n\tlimit std.Coins = std.Coins{std.Coin{\"ugnot\", 350000000}}\n)\n\nfunc Transfer(to std.Address, send int64) string {\n\tif err := assertIsController(); err != nil {\n\t\treturn err.Error()\n\t}\n\n\tif gInPause {\n\t\treturn errors.New(\"faucet in pause\").Error()\n\t}\n\n\tvar sendCoins std.Coins\n\n\tif send \u003c limit[0].Amount {\n\n\t\tsendCoins = std.Coins{std.Coin{Denom: \"ugnot\", Amount: send}}\n\n\t} else {\n\n\t\treturn errors.New(\"Per request limit \" + limit.String() + \" exceed\").Error()\n\t}\n\n\tgTotalTransferred = gTotalTransferred.Add(sendCoins)\n\tgTotalTransfers++\n\n\tbanker := std.GetBanker(std.BankerTypeRealmSend)\n\tpkgaddr := std.GetOrigPkgAddr()\n\tbanker.SendCoins(pkgaddr, to, sendCoins)\n\treturn \"\"\n}\nfunc GetPerTransferLimit() int64 {\n\n\treturn limit[0].Amount\n\n}\nfunc Render(path string) string {\n\tbanker := std.GetBanker(std.BankerTypeRealmSend)\n\tbalance := banker.GetCoins(std.GetOrigPkgAddr())\n\tdebug := false\n\tif strings.Contains(path, \":debug\") {\n\n\t\tpath = strings.TrimRight(path, \":debug\")\n\t\tdebug = true\n\n\t}\n\n\toutput := path + gMessage\n\tif gInPause {\n\t\toutput += \"Status: inactive.\\n\"\n\t} else {\n\t\toutput += \"Status: active.\\n\\n\"\n\t}\n\toutput += ufmt.Sprintf(\"Balance: %s.\\n\", balance.String())\n\toutput += ufmt.Sprintf(\"Total transfer: %s (in %d times).\\n\\n\", gTotalTransferred.String(), gTotalTransfers)\n\n\t//if debug {\n\n\toutput += ufmt.Sprintf(\"Admin: %s\\n\\n, \", gAdminAddr.String())\n\toutput += ufmt.Sprintf(\"Controller: [\\n\\n\")\n\n\tfor _, v := range gControllers {\n\n\t\toutput += ufmt.Sprintf(\"%s  \", v.String())\n\n\t}\n\toutput += ufmt.Sprintf(\"]\\n\\n\")\n\toutput += ufmt.Sprintf(\"Per request limit: %s\\n\\n\", limit.String())\n\n\t//}\n\treturn output\n}\n\nfunc assertIsController() error {\n\tcaller := std.GetOrigCaller()\n\n\tfor _, v := range gControllers {\n\t\tif caller == v {\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn errors.New(caller.String() + \" is not on the controller list\")\n}\n"},{"Name":"faucet_test.gno","Body":"package faucet\n\nimport (\n\t\"fmt\"\n\t\"std\"\n\t\"testing\"\n\n\t\"gno.land/p/testutils\"\n\t\"gno.land/r/faucet\"\n)\n\nfunc TestPackage(t *testing.T) {\n\tvar (\n\t\tadminaddr       = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\tfaucetaddr      = std.TestDerivePkgAddr(\"gno.land/r/faucet\")\n\t\tcontrolleraddr1 = testutils.TestAddress(\"controller1\")\n\t\tcontrolleraddr2 = testutils.TestAddress(\"controller2\")\n\t\tcontrolleraddr3 = testutils.TestAddress(\"controller3\")\n\t\tcontrolleraddr4 = testutils.TestAddress(\"controller4\")\n\n\t\ttest1addr = testutils.TestAddress(\"test1\")\n\t)\n\t// deposit 1000gnot to faucet contract\n\n\tstd.TestIssueCoins(faucetaddr, std.Coins{{\"ugnot\", 1000000000}})\n\tstd.TestSetOrigPkgAddr(faucetaddr)\n\tassertBalance(t, faucetaddr, 1000000000)\n\n\t// by default, balance is empty, and as a user I cannot call Transfer, or Admin commands.\n\n\tassertBalance(t, test1addr, 0)\n\tassertErr(t, faucet.Transfer(test1addr, 1000000))\n\tassertErr(t, faucet.AdminAddController(controlleraddr1))\n\tstd.TestSetOrigCaller(controlleraddr1)\n\tassertErr(t, faucet.Transfer(test1addr, 1000000))\n\n\t// as an admin, add the controller to contract and deposit more 2000gnot to contract\n\tstd.TestSetOrigCaller(adminaddr)\n\tstd.TestSetOrigSend(std.Coins{{\"ugnot\", 2000000000}}, nil)\n\tassertNoErr(t, faucet.AdminAddController(controlleraddr1))\n\tassertBalance(t, faucetaddr, 1000000000)\n\n\t// now, send some tokens as controller.\n\tstd.TestSetOrigCaller(controlleraddr1)\n\tassertNoErr(t, faucet.Transfer(test1addr, 1000000))\n\tassertBalance(t, test1addr, 1000000)\n\tassertNoErr(t, faucet.Transfer(test1addr, 1000000))\n\tassertBalance(t, test1addr, 2000000)\n\tassertBalance(t, faucetaddr, 998000000)\n\n\t// remove controller\n\t// as an admin, remove controller\n\tstd.TestSetOrigCaller(adminaddr)\n\tassertNoErr(t, faucet.AdminRemoveController(controlleraddr1))\n\tstd.TestSetOrigCaller(controlleraddr1)\n\tassertErr(t, faucet.Transfer(test1addr, 1000000))\n\n\t// add more than 3 controllers\n\n\tstd.TestSetOrigCaller(adminaddr)\n\tassertNoErr(t, faucet.AdminAddController(controlleraddr1))\n\tassertErr(t, faucet.AdminAddController(controlleraddr1))\n\tassertNoErr(t, faucet.AdminAddController(controlleraddr2))\n\tassertNoErr(t, faucet.AdminAddController(controlleraddr3))\n\tassertErr(t, faucet.AdminAddController(controlleraddr4))\n\n\t// send more than per transfer limit\n\tstd.TestSetOrigCaller(adminaddr)\n\tfaucet.AdminSetTransferLimit(300000000, \"ugnot\")\n\tstd.TestSetOrigCaller(controlleraddr1)\n\tassertErr(t, faucet.Transfer(test1addr, 301000000))\n\n\t// block transefer from the address not on the controllers list.\n\tstd.TestSetOrigCaller(controlleraddr4)\n\tassertErr(t, faucet.Transfer(test1addr, 1000000))\n\n}\n\nfunc assertErr(t *testing.T, err string) {\n\tt.Helper()\n\tif err == \"\" {\n\t\tt.Logf(\"info: got err: %v\", err)\n\t\tt.Errorf(\"expected an error, got nil.\")\n\t}\n}\n\nfunc assertNoErr(t *testing.T, err string) {\n\tt.Helper()\n\tif err != \"\" {\n\t\tt.Errorf(\"got err: %v.\", err)\n\t}\n}\n\nfunc assertBalance(t *testing.T, addr std.Address, expectedBal int64) {\n\tt.Helper()\n\n\tbanker := std.GetBanker(std.BankerTypeReadonly)\n\tcoins := banker.GetCoins(addr)\n\tgot := coins.AmountOf(\"ugnot\")\n\n\tif expectedBal != got {\n\t\tt.Errorf(\"invalid balance: expected %d, got %d.\", expectedBal, got)\n\t}\n}\n"}]},"deposit":"200000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"YVFhPp+WEn/+36BLDe1ln8swobVpqnBQ33IoLJcoaw9IDjyT4worVVj8ZjT/6xSe3pjUnSKAEzEK0FxTGNsN0g=="}],"memo":""},"blockNum":"200833"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","to_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","amount":"10000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"lmSi6DRWw8jeMxr2iJbYeCc+bP3gWt3Sd5EPtmqYFiEHIfGn17zSNv5f5rxovU5ISD5D74F9dFunmpzNpB/2zQ=="}],"memo":""},"blockNum":"201029"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g12r4axq0y368jc5paccqwm36lefac9es0cfrwth","to_address":"g1z2vppa6sdwqypy4sf5t29kjhesqumlxcjqfan3","amount":"2000000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Alwz58PpDDEhQFwbfGbxebsBDB5q8E+3LOEt44FRVysz"},"signature":"PT/g75I3uaffs61b0xAKOYm69iawAO/7H97BEihi5mFh1UqET8lqvin7sPzu80axicYO0+kjkfKBZTzBSwcBTw=="}],"memo":""},"blockNum":"201279"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g12r4axq0y368jc5paccqwm36lefac9es0cfrwth","send":"1000000ugnot","pkg_path":"gno.land/r/users","func":"Invite","args":["g1z2vppa6sdwqypy4sf5t29kjhesqumlxcjqfan3"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Alwz58PpDDEhQFwbfGbxebsBDB5q8E+3LOEt44FRVysz"},"signature":"BShHS+lj4gOboSOMngoUvSdvRyZUHeOQqQZ9qTe9FLIaDgG0V3DD0GYuWu0/yX/9Ru1Iaqjjg1GbvbgBdmalJg=="}],"memo":"Sent from https://gnoland.space"},"blockNum":"201290"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1z2vppa6sdwqypy4sf5t29kjhesqumlxcjqfan3","send":"10000ugnot","pkg_path":"gno.land/r/users","func":"Register","args":["g12r4axq0y368jc5paccqwm36lefac9es0cfrwth","teritori-core","Teritori Core"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Av4DsO+jZNmKjZHcdozf1oQ2VZ5/m7+A1S21lw+qB8ar"},"signature":"OgAqxBSZ0oyNUnqfL/1zdSfSJbm6wV/LFjEVC4MO66dzBhHOCohcyHTAcvh60GobpaESrJVeDv8adWutoceXFQ=="}],"memo":"Sent from https://gnoland.space"},"blockNum":"201294"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1z2vppa6sdwqypy4sf5t29kjhesqumlxcjqfan3","send":"100ugnot","pkg_path":"gno.land/r/users","func":"Register","args":["g12r4axq0y368jc5paccqwm36lefac9es0cfrwth","teritori-core","Teritori Core"]}],"fee":{"gas_wanted":"400000","gas_fee":"400000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Av4DsO+jZNmKjZHcdozf1oQ2VZ5/m7+A1S21lw+qB8ar"},"signature":"yGDoIqrkvI8BNoOxdcDPqmEZhX1qRdFcJMV882yllQdUxf0JylZrfPGvxOcndueuqZdcgjuZAwV6W84Ehr1tnQ=="}],"memo":""},"blockNum":"201316"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1z2vppa6sdwqypy4sf5t29kjhesqumlxcjqfan3","send":"100ugnot","pkg_path":"gno.land/r/users","func":"Register","args":["","teritori-core","Teritori Core"]}],"fee":{"gas_wanted":"400000","gas_fee":"400000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Av4DsO+jZNmKjZHcdozf1oQ2VZ5/m7+A1S21lw+qB8ar"},"signature":"519TrtsoWqjkbwLwusnvu3HfQsJElE98K99bhUEKCSE6wmCzjyga4290+M6uW99+z9DSPSFglKX4TxOv2jnJLg=="}],"memo":""},"blockNum":"201322"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1z2vppa6sdwqypy4sf5t29kjhesqumlxcjqfan3","send":"200000000ugnot","pkg_path":"gno.land/r/users","func":"Register","args":["","teritori-core","Teritori Core"]}],"fee":{"gas_wanted":"2000000","gas_fee":"200000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Av4DsO+jZNmKjZHcdozf1oQ2VZ5/m7+A1S21lw+qB8ar"},"signature":"PQPxmaD37TIK04rFP6/I87XNrKLYLA5GcI3UJUA80Sgs/zc8G8qDQC5lEvhtbi96C3zP4ZD/6qSWyIXWqd1CAQ=="}],"memo":""},"blockNum":"201325"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1z2vppa6sdwqypy4sf5t29kjhesqumlxcjqfan3","send":"200000000ugnot","pkg_path":"gno.land/r/users","func":"Register","args":["","teritori_core","Teritori Core"]}],"fee":{"gas_wanted":"2000000","gas_fee":"200000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Av4DsO+jZNmKjZHcdozf1oQ2VZ5/m7+A1S21lw+qB8ar"},"signature":"aTCiEFAzR/sGzh2Lr+rD41J/NgsoSop4sa+6MQNR9/II3qMHiJvjg4L5MgfRMM4e8dONgSp23WKYT8CA0LJjzQ=="}],"memo":""},"blockNum":"201327"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1z2vppa6sdwqypy4sf5t29kjhesqumlxcjqfan3","send":"200000000ugnot","pkg_path":"gno.land/r/users","func":"Register","args":["","teritori_core","Teritori Core"]}],"fee":{"gas_wanted":"2000000","gas_fee":"200000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Av4DsO+jZNmKjZHcdozf1oQ2VZ5/m7+A1S21lw+qB8ar"},"signature":"0TunpYqWDrVL+gC3a6VEQyET//jQrx66F/EZijijSv0KOMdU3cZL5DMg5bBD3yk8S1ab+uP44y5gbMrQ2QbfJQ=="}],"memo":""},"blockNum":"201333"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1z2vppa6sdwqypy4sf5t29kjhesqumlxcjqfan3","send":"","pkg_path":"gno.land/r/users","func":"Register","args":["","teritori_core","Teritori Core"]}],"fee":{"gas_wanted":"2000000","gas_fee":"200000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Av4DsO+jZNmKjZHcdozf1oQ2VZ5/m7+A1S21lw+qB8ar"},"signature":"SyA9tmIMCz8CFjDbJXA1V5vJFOqUoWrgjpgFvDRro0E29C0OkZgSvMk4ZoaXwBWzPMFuRrlKZkpJAHU/EEn1tQ=="}],"memo":""},"blockNum":"201336"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1z2vppa6sdwqypy4sf5t29kjhesqumlxcjqfan3","send":"200000000ugnot","pkg_path":"gno.land/r/users","func":"Register","args":["","teritori_core","Teritori Core"]}],"fee":{"gas_wanted":"200000","gas_fee":"200000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Av4DsO+jZNmKjZHcdozf1oQ2VZ5/m7+A1S21lw+qB8ar"},"signature":"TUXWym5h6umoRX01xm0g2z6ADbjgx47V2F9iMYzKB6J08FwskqhfelJOoIOgG/7/hAKs+crwAPrz6L25QhLShw=="}],"memo":""},"blockNum":"201338"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g1ff0y5v65yevves2nfn5h0jfm7a3t3xmk7wwral","amount":"1991000002ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"yuXavdsB8tusRbvxWSzhrAN7JvOLMXbwRBA8wG23/JkARwPYkQVC8+P428s0IkiEhihMBmJ7aoXiFLHybBtYmg=="}],"memo":""},"blockNum":"201791"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g12r4axq0y368jc5paccqwm36lefac9es0cfrwth","to_address":"g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e","amount":"500000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Alwz58PpDDEhQFwbfGbxebsBDB5q8E+3LOEt44FRVysz"},"signature":"ixS8051+NIWA2u8M2fTvr8w/lmijw2UYG9AHMOcRSZxjZ03CR6Zr3i6KaGPkmBE6nG+6DIGJPwKcqIIz4QAh0w=="}],"memo":""},"blockNum":"201806"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ff0y5v65yevves2nfn5h0jfm7a3t3xmk7wwral","send":"","pkg_path":"gno.land/r/boards","func":"CreateBoard","args":["DemosB"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3mMOaFLKbBIcKCZ6fnubAtn49Gjauqonq/wgAasPjRG"},"signature":"z7kgSZKM+vGGrpQxAlpD3nRC/9rmOWeCyC+sGCZdmLE9SPMy3nmWCoa/Rz4BwBALho2H9uG9sVTdDetxuucD2A=="}],"memo":""},"blockNum":"201830"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e","send":"","pkg_path":"gno.land/r/boards","func":"CreateBoard","args":["slashbin"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap96kZn7jX9lTBIXj95YZLdTtm95hu57+VNVKCoECbFI"},"signature":"MlzWC23KqTlS0FwBrYP4ZOYky2zEhi+YBPIeth5xL9wk5GnfthoZ4Br1QcwabpRqWKm0PiLzZ4RyH4MaU/R6eA=="}],"memo":""},"blockNum":"202622"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e","send":"100000000ugnot","pkg_path":"gno.land/r/boards","func":"CreateBoard","args":["slashbin"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap96kZn7jX9lTBIXj95YZLdTtm95hu57+VNVKCoECbFI"},"signature":"iAK5KMn+uh+DSZih+WzYErGUMnM78OeaLjGGO6dYeSc8FaC9C9Ga4ZRWm33Dg5NM8fOMNZUFD4UQo7RO0zLung=="}],"memo":""},"blockNum":"202630"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e","send":"100000000ugnot","pkg_path":"gno.land/r/boards","func":"CreateBoard","args":["slashbin"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap96kZn7jX9lTBIXj95YZLdTtm95hu57+VNVKCoECbFI"},"signature":"nKfaQKwB3iXwQIRRsRqUnEx5QXFYPFz0UQsEAzxfE15WxVKpOcF43tjHHEv6o7f5pRCMZQlP6ZsX01QtlQyuNQ=="}],"memo":""},"blockNum":"202635"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e","send":"100000000ugnot","pkg_path":"gno.land/r/boards","func":"CreateBoard","args":["slashbin"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap96kZn7jX9lTBIXj95YZLdTtm95hu57+VNVKCoECbFI"},"signature":"ZBWmLJUBuTtea8L4w3+F1MqtuQaWJmX2w1j1HEmPscBhk0mzvprSVbZyDseOUhxcgHu9Gu+rqsJEY6fE9bjMhQ=="}],"memo":""},"blockNum":"202638"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e","send":"100000000ugnot","pkg_path":"gno.land/r/boards","func":"CreateBoard","args":["slashbin"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap96kZn7jX9lTBIXj95YZLdTtm95hu57+VNVKCoECbFI"},"signature":"kMugdhzEImpLCSGFuaDts4XtdMLtWs+pWkpjnPqtUahEWMWqVNj/RcOGJY/M/daIBJn78nddE1q1mtgu7huENA=="}],"memo":""},"blockNum":"202815"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e","send":"","pkg_path":"gno.land/r/boards","func":"CreateBoard","args":["slashbin"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap96kZn7jX9lTBIXj95YZLdTtm95hu57+VNVKCoECbFI"},"signature":"8ijuWzZ6VSFOgz05YnnZi+34ZrKI1BBBzYdANr0AW+B4TGzPCZJ2ZfCoWR9aqHae9T+HJWPHwHKWxnc+A4pFsg=="}],"memo":""},"blockNum":"202977"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e","send":"","pkg_path":"gno.land/r/boards","func":"CreateBoard","args":["slashbin"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap96kZn7jX9lTBIXj95YZLdTtm95hu57+VNVKCoECbFI"},"signature":"xs0lrqvhjx3xSHdhQzomDjFFcPclh8tjfbt1UYTWoOVM8B4KaD9z4edsg3cBbWRdmZx2AMT0vi5CCjFvOQ8eyA=="}],"memo":""},"blockNum":"203005"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g19yltltjed5688sullftzurhdshmjwtm8vlqdr2","send":"","pkg_path":"gno.land/r/boards","func":"CreateBoard","args":["kayzer"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoXFomwlVbbLZSPKTPFbYTS1JX/eNqYPtzLcd7f/VcK8"},"signature":"h4HXm7PbGVZQ6cJLPopOYvMRONAoJrZsGNdi2uYJENtCGCBYW4GV+Di7/mVZEHR+bzgUCCP5LITOB54j02dgaA=="}],"memo":""},"blockNum":"203088"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e","send":"","pkg_path":"gno.land/r/boards","func":"CreateThread","args":["1461","Hire me","https://twitter.com/slashbin_fr"]}],"fee":{"gas_wanted":"500000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap96kZn7jX9lTBIXj95YZLdTtm95hu57+VNVKCoECbFI"},"signature":"Q2QA6OUKxSmr6jOptE856khhOhsrRtnX9ECXAm8VXeZTStEU3emjyKNTG5E+dzrHicegAAkjJeQnQzpqgRIzag=="}],"memo":""},"blockNum":"203171"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e","send":"","pkg_path":"gno.land/r/boards","func":"CreateThread","args":["1461","Hire me","https://twitter.com/slashbin_fr"]}],"fee":{"gas_wanted":"5500000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap96kZn7jX9lTBIXj95YZLdTtm95hu57+VNVKCoECbFI"},"signature":"vG8qEf2wwsSeDrsphfyB/Hii4nWbkY9y+t5al8cUk50R3XNDlXzCjKfVrdGNOHqa2TYXl1bPxmoodOS7oQef1Q=="}],"memo":""},"blockNum":"203174"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e","send":"","pkg_path":"gno.land/r/boards","func":"GetBoardIDFromName","args":["slashbin"]}],"fee":{"gas_wanted":"500000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap96kZn7jX9lTBIXj95YZLdTtm95hu57+VNVKCoECbFI"},"signature":"f8nf8ArSskF+LK+pZT9ymrKRppnDYITGrhwkAlAJGjJOvIYpUmGQO4CUboOiMRLHkKQsAbFkWn8DBuHKIPipMQ=="}],"memo":""},"blockNum":"203178"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e","send":"","pkg_path":"gno.land/r/boards","func":"CreateReply","args":["1461","1","1","https://github.com/slashbinslashnoname/gnoland_cheatsheet"]}],"fee":{"gas_wanted":"500000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap96kZn7jX9lTBIXj95YZLdTtm95hu57+VNVKCoECbFI"},"signature":"NAhi258so65oWjMX4Qyt82BytBfv+/wkGvcdXDaWW4kXbzeFLRYUAB8zVPlAGFuCJB+70dlzMvKVS2r6YmNNJA=="}],"memo":""},"blockNum":"203307"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e","send":"","pkg_path":"gno.land/r/boards","func":"CreateReply","args":["1461","1","1","https://github.com/slashbinslashnoname/gnoland_cheatsheet"]}],"fee":{"gas_wanted":"500000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap96kZn7jX9lTBIXj95YZLdTtm95hu57+VNVKCoECbFI"},"signature":"fcT9t+jkCDQDV48PYgfcbrEw/fQ4ARVTKlORLZhoQrQejTVSIfKsXBVvTTNC8HrI+91wRSYBQwVtvq/QfQToHg=="}],"memo":""},"blockNum":"203312"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e","send":"","pkg_path":"gno.land/r/boards","func":"CreateReply","args":["1461","1","1","reply 1"]}],"fee":{"gas_wanted":"500000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap96kZn7jX9lTBIXj95YZLdTtm95hu57+VNVKCoECbFI"},"signature":"CLujuWRj6NpRu7D/h8SbBiNBpgp1/E2zqppfHnIChmxESmamzc4DEPHXP6JdLKOwiGvg2cGz2ShV43G/8XvQaw=="}],"memo":""},"blockNum":"203314"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e","send":"1ugnot","pkg_path":"gno.land/r/boards","func":"CreateReply","args":["1461","1","1","reply 1"]}],"fee":{"gas_wanted":"500000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap96kZn7jX9lTBIXj95YZLdTtm95hu57+VNVKCoECbFI"},"signature":"hWM8y8Q+SfT5Jdna0l/PynafHoFDAcrJfBxTpU/XBNQGMvoiolIYMBa9SRdYmQLx7egAX1gxh3/S/HEeHVxBFg=="}],"memo":""},"blockNum":"203317"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e","send":"1ugnot","pkg_path":"gno.land/r/boards","func":"CreateReply","args":["1461","1","1",""]}],"fee":{"gas_wanted":"500000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap96kZn7jX9lTBIXj95YZLdTtm95hu57+VNVKCoECbFI"},"signature":"B5YuVBu/jMwd5zC8LLF3ykop/9o8FEaKUAqmjOHOq29CAR33A493qN9KY0cICxPWm9963kYXznjZ8kfnji+tNQ=="}],"memo":""},"blockNum":"203319"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e","send":"","pkg_path":"gno.land/r/boards","func":"CreateReply","args":["1461","1","1",""]}],"fee":{"gas_wanted":"500000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap96kZn7jX9lTBIXj95YZLdTtm95hu57+VNVKCoECbFI"},"signature":"803JQeboEcgZ89oEjM3pzlk0csm4kDhLx7/cgPev1Bs3p75x1rkCLjNIwd3bCp3M/ix7AiGyKILQCpAF4SBDhw=="}],"memo":""},"blockNum":"203324"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e","send":"","pkg_path":"gno.land/r/boards","func":"CreateReply","args":["1461","1","1",""]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap96kZn7jX9lTBIXj95YZLdTtm95hu57+VNVKCoECbFI"},"signature":"9BpUfNXj93t+i4eiR8kb1F/T8S0pCXltvzXxUDvHHSNhnJNwPHtDWgUqDKEXcy4SOh2BHEtPdttm4NnJRnkqog=="}],"memo":""},"blockNum":"203329"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e","send":"","pkg_path":"gno.land/r/boards","func":"CreateReply","args":["1461","1","1","https://github.com/slashbinslashnoname/gnoland_cheatsheet"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap96kZn7jX9lTBIXj95YZLdTtm95hu57+VNVKCoECbFI"},"signature":"LP3NzU6cNl+sfU+LJV/8ufhJy6/Kze0nSokx/D4ZQQcks8SQ0Zr3upxR7xG4HL9K7ED5M9DXVgDZsEaAMzDkoQ=="}],"memo":""},"blockNum":"203331"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e","send":"","pkg_path":"gno.land/r/boards","func":"DeletePost","args":["1461","1","2","bug"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap96kZn7jX9lTBIXj95YZLdTtm95hu57+VNVKCoECbFI"},"signature":"XS6DUDUMweWjhMTniuoNfzAdZuo45t6tqJPvPViqPpU0BWBMMDh+LqD9GdkJVjDzaZPy/rqKecwpMPDtpQSwlg=="}],"memo":""},"blockNum":"203337"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e","send":"","pkg_path":"gno.land/r/boards","func":"EditPost","args":["1461","1","1","Github","My github is easy : slashbinslashnoname"]}],"fee":{"gas_wanted":"500000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap96kZn7jX9lTBIXj95YZLdTtm95hu57+VNVKCoECbFI"},"signature":"GvLGwDCfLH+PvhjljdkIoDbenoI5MO3J6NoCnqzXcK83lRi+OZGL9BurnWXHboQTizP/XTRXfVDpwzjN9eCk3g=="}],"memo":""},"blockNum":"203340"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e","send":"","pkg_path":"gno.land/r/boards","func":"EditPost","args":["1461","1","1","Github","My github is easy : slashbinslashnoname"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap96kZn7jX9lTBIXj95YZLdTtm95hu57+VNVKCoECbFI"},"signature":"4nm6yJkDzNRAA72nJ8Qvp1LPLFubPudJ5SQlLUVsKhBvWOTfAHnyWRPNOerCQFq8x/4XqgeqYgCRKzkI4XoNNw=="}],"memo":""},"blockNum":"203342"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e","send":"","pkg_path":"gno.land/r/boards","func":"EditPost","args":["1461","1","1","Github","# Gnoland Cheatsheet\n\nGithub : github.com/slashbinslashnoname/gnoland_cheatsheet\n\nYou need gnokey to make queries `./gnokey query` and transactions `./gnokey maketx`.\nYou can build and install gnokey following this tutorial : https://gnoland.space/start/create-wallet\n\n## Parameters\nFor testnet \"test2\"\n\nI used to send transactions with these parameters.\n* Min fee : 1ugnot\n* Gas : 15000000 (reimbursed if not used)\n\n\n\n## Account\n\n\n\n### List accounts\n\nUseful to get your address\n\n```\n./gnokey list\n```\n\nThe address used in this tutorial is `g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e`. Change it by your own address :slightly_smiling_face: \n\n\n### Query account \n\nUseful to get the sequence of your transactions and your account number\n\n```\n./gnokey query \"auth/accounts/g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e\" --remote test2.gno.land:36657\n\nheight: 0\ndata: {\n  \"BaseAccount\": {\n    \"address\": \"g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e\",\n    \"coins\": \"489988991ugnot\",\n    \"public_key\": {\n      \"@type\": \"/tm.PubKeySecp256k1\",\n      \"value\": \"Ap96kZn7jX9lTBIXj95YZLdTtm95hu57+VNVKCoECbFI\"\n    },\n    \"account_number\": \"660936\",\n    \"sequence\": \"18\"\n  }\n}\n```\n\n\n\n## Board\n\n\n### Create a board\n\nChange `args` and Account named `g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e` with data parsed in previous steps.\n\n\u003e Args\n\u003e Title : slashbin\n\u003e \n\u003e Account\n\u003e Number : 660936\n\u003e Sequence : 18\n\n\n```\n*** Create Board Transaction\n\n./gnokey maketx call g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e --pkgpath \"gno.land/r/boards\" --func CreateBoard --args \"slashbin\" --chainid \"test2\" --send 100000000ugnot --gas-fee 1ugnot --gas-wanted 4000000 \u003e createboard.unsigned.txt\n\n*** Sign transaction \n\n./gnokey sign g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e --txpath createboard.unsigned.txt --chainid \"test2\" --number 660936 --sequence 18 \u003e createboard.signed.txt\n\n*** Broadcast Transaction\n\n./gnokey broadcast createboard.signed.txt --remote test2.gno.land:36657\n```\n\n\nOther solution with autosign : \n\n```\n\n./gnokey maketx call g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e --pkgpath \"gno.land/r/boards\" --func CreateBoard --args \"slashbin\" --chainid \"test2\" --broadcast true --send 100000000ugnot --gas-fee 1ugnot --gas-wanted 4000000 --remote \"test2.gno.land:36657\"\n```\n\n## Create a Thread\n\nYou first need to get the Board ID\n\n### Get the Board ID\n\nPushing a transaction (cost gas)\n```\n./gnokey maketx call g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e --pkgpath \"gno.land/r/boards\" --func \"GetBoardIDFromName\" --gas-fee 1ugnot --gas-wanted 4000000  --broadcast true --chainid test2 --args \"slashbin\" --remote test2.gno.land:36657\n```\n\nMaking a simple query (doesn't cost gas)\n\n\u003e Notice the newline \n, used to pass multiple instructions.   \n```\n./gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"slashbin\\\")\" --remote test2.gno.land:36657\n```\n\n### Create a thread on the Board\n\nUse the args gotten previously (`1461` in our example) \n\n\u003e Title : *Hire me*\n\u003e Content : *https://twitter.com/slashbin_fr*\n\n\n```\n./gnokey maketx call g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --gas-fee 1000ugnot --gas-wanted 4000000 --broadcast true --chainid test2 --args \"1461\" --args \"Hire me\" --args \"https://twitter.com/slashbin_fr\" --remote test2.gno.land:36657\n```\n\n### Render the Board\n\n\u003e Notice that we got rid of the newline \n, it works well too  \n\n```\n./gnokey query \"vm/qrender\" --data \"gno.land/r/boards            \nslashbin\" --remote test2.gno.land:36657\n```\n\n\n### Create a reply\n\n\u003e Notice the higher gas fee. I used the next step to verify why the transaction was not validated.\n```\n./gnokey maketx call g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --gas-fee 1ugnot --gas-wanted 5000000  --broadcast true --chainid test2 --args \"1461\" --args \"1\" --args \"1\" --args \"https://github.com/slashbinslashnoname/gnoland_cheatsheet\" --remote test2.gno.land:36657\n```\n\n\n## Verifying your transaction\n\n\nYou can verify your transaction by using rpc.gno.tools with the tx.height used to debug your transaction.\n\nhttps://rpc.gno.tools/tx_search?query=\"tx.height=202977\"\n\n\n## Outro\n\nNext tutorial will learn you how to deploy a very simple smartcontract.\n\nI hope you enjoyed this tutorial.\n\nYou can reach me at twitter.com/slashbin_fr and you already have my Gnoland account :smiley_cat: :black_heart: "]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap96kZn7jX9lTBIXj95YZLdTtm95hu57+VNVKCoECbFI"},"signature":"d+0c/lcWbIGDECA8Vfy2iuMuZZdx0vo29cb9dCDC9zUp7sZdjJzreVsiVwG2brufqkZdXHc4gTeELpNksZv6RQ=="}],"memo":""},"blockNum":"203345"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e","send":"","pkg_path":"gno.land/r/boards","func":"EditPost","args":["1461","1","1","Golang Cheatsheet","\nGithub : github.com/slashbinslashnoname/gnoland_cheatsheet\n\nYou need gnokey to make queries `./gnokey query` and transactions `./gnokey maketx`.\nYou can build and install gnokey following this tutorial : https://gnoland.space/start/create-wallet\n\n## Parameters\nFor testnet \"test2\"\n\nI used to send transactions with these parameters.\n* Min fee : 1ugnot\n* Gas : 15000000 (reimbursed if not used)\n\n\n\n## Account\n\n\n\n### List accounts\n\nUseful to get your address\n\n```\n./gnokey list\n```\n\nThe address used in this tutorial is `g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e`. Change it by your own address :slightly_smiling_face: \n\n\n### Query account \n\nUseful to get the sequence of your transactions and your account number\n\n```\n./gnokey query \"auth/accounts/g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e\" --remote test2.gno.land:36657\n\nheight: 0\ndata: {\n  \"BaseAccount\": {\n    \"address\": \"g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e\",\n    \"coins\": \"489988991ugnot\",\n    \"public_key\": {\n      \"@type\": \"/tm.PubKeySecp256k1\",\n      \"value\": \"Ap96kZn7jX9lTBIXj95YZLdTtm95hu57+VNVKCoECbFI\"\n    },\n    \"account_number\": \"660936\",\n    \"sequence\": \"18\"\n  }\n}\n```\n\n\n\n## Board\n\n\n### Create a board\n\nChange `args` and Account named `g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e` with data parsed in previous steps.\n\n\u003e Args\n\u003e Title : slashbin\n\u003e \n\u003e Account\n\u003e Number : 660936\n\u003e Sequence : 18\n\n\n```\n*** Create Board Transaction\n\n./gnokey maketx call g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e --pkgpath \"gno.land/r/boards\" --func CreateBoard --args \"slashbin\" --chainid \"test2\" --send 100000000ugnot --gas-fee 1ugnot --gas-wanted 4000000 \u003e createboard.unsigned.txt\n\n*** Sign transaction \n\n./gnokey sign g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e --txpath createboard.unsigned.txt --chainid \"test2\" --number 660936 --sequence 18 \u003e createboard.signed.txt\n\n*** Broadcast Transaction\n\n./gnokey broadcast createboard.signed.txt --remote test2.gno.land:36657\n```\n\n\nOther solution with autosign : \n\n```\n\n./gnokey maketx call g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e --pkgpath \"gno.land/r/boards\" --func CreateBoard --args \"slashbin\" --chainid \"test2\" --broadcast true --send 100000000ugnot --gas-fee 1ugnot --gas-wanted 4000000 --remote \"test2.gno.land:36657\"\n```\n\n## Create a Thread\n\nYou first need to get the Board ID\n\n### Get the Board ID\n\nPushing a transaction (cost gas)\n```\n./gnokey maketx call g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e --pkgpath \"gno.land/r/boards\" --func \"GetBoardIDFromName\" --gas-fee 1ugnot --gas-wanted 4000000  --broadcast true --chainid test2 --args \"slashbin\" --remote test2.gno.land:36657\n```\n\nMaking a simple query (doesn't cost gas)\n\n\u003e Notice the newline \n, used to pass multiple instructions.   \n```\n./gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"slashbin\\\")\" --remote test2.gno.land:36657\n```\n\n### Create a thread on the Board\n\nUse the args gotten previously (`1461` in our example) \n\n\u003e Title : *Hire me*\n\u003e Content : *https://twitter.com/slashbin_fr*\n\n\n```\n./gnokey maketx call g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --gas-fee 1000ugnot --gas-wanted 4000000 --broadcast true --chainid test2 --args \"1461\" --args \"Hire me\" --args \"https://twitter.com/slashbin_fr\" --remote test2.gno.land:36657\n```\n\n### Render the Board\n\n\u003e Notice that we got rid of the newline \n, it works well too  \n\n```\n./gnokey query \"vm/qrender\" --data \"gno.land/r/boards            \nslashbin\" --remote test2.gno.land:36657\n```\n\n\n### Create a reply\n\n\u003e Notice the higher gas fee. I used the next step to verify why the transaction was not validated.\n```\n./gnokey maketx call g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --gas-fee 1ugnot --gas-wanted 5000000  --broadcast true --chainid test2 --args \"1461\" --args \"1\" --args \"1\" --args \"https://github.com/slashbinslashnoname/gnoland_cheatsheet\" --remote test2.gno.land:36657\n```\n\n\n## Verifying your transaction\n\n\nYou can verify your transaction by using rpc.gno.tools with the tx.height used to debug your transaction.\n\nhttps://rpc.gno.tools/tx_search?query=\"tx.height=202977\"\n\n\n## Outro\n\nNext tutorial will learn you how to deploy a very simple smartcontract.\n\nI hope you enjoyed this tutorial.\n\nYou can reach me at twitter.com/slashbin_fr and you already have my Gnoland account :smiley_cat: :black_heart: "]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap96kZn7jX9lTBIXj95YZLdTtm95hu57+VNVKCoECbFI"},"signature":"6wTPOxVryicwPgMEQRToePMWirgqyqc2WkZuP5SOaY0LCgUMV6uG6g+N212dHDIM7MylskrTkC2QZldPfFFnNg=="}],"memo":""},"blockNum":"203347"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g19yltltjed5688sullftzurhdshmjwtm8vlqdr2","send":"","pkg_path":"gno.land/r/boards","func":"CreateBoard","args":["kayzer"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoXFomwlVbbLZSPKTPFbYTS1JX/eNqYPtzLcd7f/VcK8"},"signature":"g/60VqVtnY9kxEE9PQVloSPnHuu7WYfOJfHTMp15PEIS6FjR88b2Iu57hB0/qG4tWPNR9hRqoQhHFtY67rypdA=="}],"memo":""},"blockNum":"204658"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","to_address":"g1845s27cnxzp0e09zzzn4cfufm2ndhluqfsecvj","amount":"300000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"9otPiSexeI9pukcFJhcyWAPi2xheRHiqk2Ns8/KQVm4WLo1J8TyiHCMgu3HM8iW9Rw9glbrfAsCO6jkwc+SBfQ=="}],"memo":""},"blockNum":"205137"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/boards","func":"CreateThread","args":["2","ETH HD Wallet","## ETH Wallet\n\n```go\npackage wallet\n\nimport (\n\t\"crypto/ecdsa\"\n\t\"errors\"\n\t\"fmt\"\n\n\t\"github.com/btcsuite/btcd/chaincfg\"\n\t\"github.com/btcsuite/btcutil/hdkeychain\"\n\t\"github.com/ethereum/go-ethereum/accounts\"\n\t\"github.com/ethereum/go-ethereum/common\"\n\t\"github.com/ethereum/go-ethereum/common/hexutil\"\n\t\"github.com/ethereum/go-ethereum/crypto\"\n\t\"github.com/tyler-smith/go-bip32\"\n\t\"github.com/tyler-smith/go-bip39\"\n)\n\ntype Wallet struct {\n\tmnemonic    string\n\tpath        string\n\troot        *hdkeychain.ExtendedKey\n\textendedKey *hdkeychain.ExtendedKey\n\tprivateKey  *ecdsa.PrivateKey\n\tpublicKey   *ecdsa.PublicKey\n}\n\ntype Config struct {\n\tMnemonic string\n\tPath     string\n}\n\nfunc New(config *Config) (*Wallet, error) {\n\tif config.Path == \"\" {\n\t\tconfig.Path = `m/44'/60'/0'/0`\n\t}\n\n\tif config.Mnemonic == \"\" {\n\t\treturn nil, errors.New(\"mnemonic is required\")\n\t}\n\n\tseed := bip39.NewSeed(config.Mnemonic, \"\")\n\tdpath, err := accounts.ParseDerivationPath(config.Path)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tmasterKey, err := hdkeychain.NewMaster(seed, \u0026chaincfg.MainNetParams)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tkey := masterKey\n\n\tfor _, n := range dpath {\n\t\tkey, err = key.Child(n)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\tprivateKey, err := key.ECPrivKey()\n\tprivateKeyECDSA := privateKey.ToECDSA()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tpublicKey := privateKeyECDSA.Public()\n\tpublicKeyECDSA, ok := publicKey.(*ecdsa.PublicKey)\n\tif !ok {\n\t\treturn nil, errors.New(\"failed ot get public key\")\n\t}\n\n\twallet := \u0026Wallet{\n\t\tmnemonic:    config.Mnemonic,\n\t\tpath:        config.Path,\n\t\troot:        masterKey,\n\t\textendedKey: key,\n\t\tprivateKey:  privateKeyECDSA,\n\t\tpublicKey:   publicKeyECDSA,\n\t}\n\n\treturn wallet, nil\n}\n\nfunc (s Wallet) Derive(index interface{}) (*Wallet, error) {\n\tvar idx uint32\n\tswitch v := index.(type) {\n\tcase int:\n\t\tidx = uint32(v)\n\tcase int8:\n\t\tidx = uint32(v)\n\tcase int16:\n\t\tidx = uint32(v)\n\tcase int32:\n\t\tidx = uint32(v)\n\tcase int64:\n\t\tidx = uint32(v)\n\tcase uint:\n\t\tidx = uint32(v)\n\tcase uint8:\n\t\tidx = uint32(v)\n\tcase uint16:\n\t\tidx = uint32(v)\n\tcase uint32:\n\t\tidx = v\n\tcase uint64:\n\t\tidx = uint32(v)\n\tdefault:\n\t\treturn nil, errors.New(\"unsupported index type\")\n\t}\n\n\taddress, err := s.extendedKey.Child(idx)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tprivateKey, err := address.ECPrivKey()\n\tprivateKeyECDSA := privateKey.ToECDSA()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tpublicKey := privateKeyECDSA.Public()\n\tpublicKeyECDSA, ok := publicKey.(*ecdsa.PublicKey)\n\tif !ok {\n\t\treturn nil, errors.New(\"failed ot get public key\")\n\t}\n\n\tpath := fmt.Sprintf(\"%s/%v\", s.path, idx)\n\n\twallet := \u0026Wallet{\n\t\tpath:        path,\n\t\troot:        s.extendedKey,\n\t\textendedKey: address,\n\t\tprivateKey:  privateKeyECDSA,\n\t\tpublicKey:   publicKeyECDSA,\n\t}\n\n\treturn wallet, nil\n}\n\nfunc (s Wallet) PrivateKey() *ecdsa.PrivateKey {\n\treturn s.privateKey\n}\n\nfunc (s Wallet) PrivateKeyBytes() []byte {\n\treturn crypto.FromECDSA(s.PrivateKey())\n}\n\nfunc (s Wallet) PrivateKeyHex() string {\n\treturn hexutil.Encode(s.PrivateKeyBytes())[2:]\n}\n\nfunc (s Wallet) PublicKey() *ecdsa.PublicKey {\n\treturn s.publicKey\n}\n\nfunc (s Wallet) PublicKeyBytes() []byte {\n\treturn crypto.FromECDSAPub(s.PublicKey())\n}\n\nfunc (s Wallet) PublicKeyHex() string {\n\treturn hexutil.Encode(s.PublicKeyBytes())[4:]\n}\n\nfunc (s Wallet) Address() common.Address {\n\treturn crypto.PubkeyToAddress(*s.publicKey)\n}\n\nfunc (s Wallet) AddressHex() string {\n\treturn s.Address().Hex()\n}\n\nfunc (s Wallet) Path() string {\n\treturn s.path\n}\n\nfunc (s Wallet) Mnemonic() string {\n\treturn s.mnemonic\n}\n\nfunc NewMnemonic() (string, error) {\n\tentropy, err := bip39.NewEntropy(128)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn bip39.NewMnemonic(entropy)\n}\n\nfunc NewSeed() ([]byte, error) {\n\treturn bip32.NewSeed()\n\n}\n```\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"GOYzaCM9HT7xHVoVroF16ZR1taP1c4DgWd2JkfkZymVurmBSjUKgQ1iKcEGCMQvSkpcugnWQ2UiwRTfJn69LDA=="}],"memo":""},"blockNum":"206491"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1qgr7980ry7f6rqr9cs6d45y09k5u6dzhjksksn","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"7Tmsnfi6RFxZyHyvXeiKrE8yYsWmUUUrY5W0TvDOMidMsV2IYKi5E/Mmd1x9A2yYbcghhcqVW6X13NirFMsRUg=="}],"memo":""},"blockNum":"206788"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1qgr7980ry7f6rqr9cs6d45y09k5u6dzhjksksn","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"A8cJrwahpN9AAoSVBBKyU+ZixM5dZz70QydLUAEcpHkdsHvGt1EZHNOdMSzbRB836EnxR3G6pRNt605VSIGLlg=="}],"memo":""},"blockNum":"207088"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1qgr7980ry7f6rqr9cs6d45y09k5u6dzhjksksn","amount":"1000000ugnot"}],"fee":{"gas_wanted":"30000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"uwBHNkAYDbo9WqmqnRymZfSQ5j8PznRm7qBATV3DZhBu1NU8L+/HiPBvsLJZrc6GyyVve18aPywSOeQ4hLoYDw=="}],"memo":""},"blockNum":"207129"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1qgr7980ry7f6rqr9cs6d45y09k5u6dzhjksksn","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"Rws8NM//C17P/13HcCTnjrcsn1dT9hg0C8rQj6apTIgEOMUnmRc6MUo+Zk7mjjRF5znitigYfltcg1yntyARpg=="}],"memo":""},"blockNum":"207736"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1qgr7980ry7f6rqr9cs6d45y09k5u6dzhjksksn","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"FqErZooZ713rzCrpZLj1PWeuIxQ6l+qOXKSvvVVlavotHv51Hq2+8wXdyRt2WlDmL9E1PWkI+//dqaiN9Kn3HQ=="}],"memo":""},"blockNum":"207742"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1qgr7980ry7f6rqr9cs6d45y09k5u6dzhjksksn","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"hhSWqNj8rDIMFESnBYcR9iNncnFzHO8Q7TYGnjAkmJoLRPaQG82UM26wIqBdnoYXlJKCLodkVOtH28L50Y/llg=="}],"memo":""},"blockNum":"207744"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e","package":{"Name":"demo","Path":"gno.land/r/slashcoin","Files":[{"Name":"--broadcast","Body":""},{"Name":"contract.gno","Body":"package demo\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/grc/grc20\"\n)\n\n// Slashcoin is public and mintable. Inherit grc20.IGRC20\nvar Slashcoin grc20.IGRC20\n\nfunc init() {\n\t// generate minter and mint some tokens to test1.\n\tconst test1 = std.Address(\"g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e\")\n\tminter := grc20.NewAdminToken(\"Slashcoin\", \"SLASH\", 18)\n\tminter.Mint(test1, 1000000)\n\n\t// publicly expose an unprivileged implementation of IGRC20.\n\tSlashcoin = minter.GRC20()\n}\n\n"},{"Name":"contract_test.gno","Body":"package demo\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"gno.land/p/testutils\"\n)\n\nfunc Test(t *testing.T) {\n\ttest1 := std.Address(\"g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e\")\n\ttest2 := std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\n\tstd.TestSetOrigCaller(test1)\n\n\t// check token name.\n\t{\n\t\tgot := Slashcoin.GetName()\n\t\texpected := \"Slashcoin\"\n\t\tif strings.TrimSpace(got) != strings.TrimSpace(expected) {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t// check token symbol.\n\t{\n\t\tgot := Slashcoin.GetSymbol()\n\t\texpected := \"SLASH\"\n\t\tif strings.TrimSpace(got) != strings.TrimSpace(expected) {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t// check token Decimals.\n\t{\n\t\tgot := Slashcoin.GetDecimals()\n\n\t\texpected := 18\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t// check token Supply.\n\t{\n\t\tgot := Slashcoin.TotalSupply()\n\t\texpected := 1000000\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\n\t// ACCOUNTS\n\n\n\t// check balance of test1.\n\t{\n\t\tgot, _ := Slashcoin.BalanceOf(test1)\n\t\texpected := 1000000\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %d, got %d.\", expected, got)\n\t\t}\n\t}\n\n\t// transfer tokens to test2.\n\t_ = Slashcoin.Transfer(test2, 1000)\n\n\t// check balance of test1.\n\t{\n\t\tgot, _ := Slashcoin.BalanceOf(test1)\n\t\texpected := 999000\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %d, got %d.\", expected, got)\n\t\t}\n\t}\n\n\t// check balance of test2.\n\t{\n\t\tgot, _ := Slashcoin.BalanceOf(test2)\n\t\texpected := 1000\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %d, got %d.\", expected, got)\n\t\t}\n\t}\n\n\n\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap96kZn7jX9lTBIXj95YZLdTtm95hu57+VNVKCoECbFI"},"signature":"o1r6M8womMARgaXRMeZKikE32IfHldF5wwE+RTmqYuphBhNSZjHjItT6PpDAkTSfwm8Gz7T68ziPakXFn6MLbg=="}],"memo":""},"blockNum":"208547"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e","package":{"Name":"demo","Path":"github.com/slashbinslashnoname/gno-grc20","Files":[{"Name":"--broadcast","Body":""},{"Name":"contract.gno","Body":"package demo\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/grc/grc20\"\n)\n\n// Slashcoin is public and mintable. Inherit grc20.IGRC20\nvar Slashcoin grc20.IGRC20\n\nfunc init() {\n\t// generate minter and mint some tokens to test1.\n\tconst test1 = std.Address(\"g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e\")\n\tminter := grc20.NewAdminToken(\"Slashcoin\", \"SLASH\", 18)\n\tminter.Mint(test1, 1000000)\n\n\t// publicly expose an unprivileged implementation of IGRC20.\n\tSlashcoin = minter.GRC20()\n}\n\n"},{"Name":"contract_test.gno","Body":"package demo\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"gno.land/p/testutils\"\n)\n\nfunc Test(t *testing.T) {\n\ttest1 := std.Address(\"g1ah79e3txw2kd2e8dscr2y2ucr888lm3qwm3v6e\")\n\ttest2 := std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\n\tstd.TestSetOrigCaller(test1)\n\n\t// check token name.\n\t{\n\t\tgot := Slashcoin.GetName()\n\t\texpected := \"Slashcoin\"\n\t\tif strings.TrimSpace(got) != strings.TrimSpace(expected) {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t// check token symbol.\n\t{\n\t\tgot := Slashcoin.GetSymbol()\n\t\texpected := \"SLASH\"\n\t\tif strings.TrimSpace(got) != strings.TrimSpace(expected) {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t// check token Decimals.\n\t{\n\t\tgot := Slashcoin.GetDecimals()\n\n\t\texpected := 18\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t// check token Supply.\n\t{\n\t\tgot := Slashcoin.TotalSupply()\n\t\texpected := 1000000\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\n\t// ACCOUNTS\n\n\n\t// check balance of test1.\n\t{\n\t\tgot, _ := Slashcoin.BalanceOf(test1)\n\t\texpected := 1000000\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %d, got %d.\", expected, got)\n\t\t}\n\t}\n\n\t// transfer tokens to test2.\n\t_ = Slashcoin.Transfer(test2, 1000)\n\n\t// check balance of test1.\n\t{\n\t\tgot, _ := Slashcoin.BalanceOf(test1)\n\t\texpected := 999000\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %d, got %d.\", expected, got)\n\t\t}\n\t}\n\n\t// check balance of test2.\n\t{\n\t\tgot, _ := Slashcoin.BalanceOf(test2)\n\t\texpected := 1000\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %d, got %d.\", expected, got)\n\t\t}\n\t}\n\n\n\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap96kZn7jX9lTBIXj95YZLdTtm95hu57+VNVKCoECbFI"},"signature":"wPOaR212Bt8m9R6rLVdmeAWv9EEQkj3WOWqiWLrGao5P68JZt/J5ZK0pP4RDnXFBeVXvnlM4L1/Gzw1WdPVuug=="}],"memo":""},"blockNum":"208549"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","to_address":"g1qh0ah6kzznnt762dr0zskqvz7k99w5mrdsejs3","amount":"1000000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"SUOtpAeZznPLDjgDaXanCHrN+D2N9vh9HZb5WhQ074M5gJxGaVOpj/VBkc9lu8OY3KUTzmNX4exgDaxnGQ2ZUg=="}],"memo":""},"blockNum":"209122"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1fnakf9vrd6uqn8qdmp88yam4p0ngy572answ9f","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"205000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3cWVULHSHC1mwK8o1vfJHKfNMvLEvKU/sHPQoFWRoey"},"signature":"hNSfj+9K27ggSlIt7cNixjZy8wfAQwpjNd6nlZnLh64fc3QhXR3dY5wXrjoIFBgxTEZQEvhFxdUfVmGk1XF17A=="}],"memo":""},"blockNum":"209485"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"Xv3LsbWzXwWfmmMEri6sdEeqfpKiy7G5eKKmluPnziQlgAJtyXNGDA2rghaeStUdTzN10g8me2TUqU9VgX0gEQ=="}],"memo":""},"blockNum":"209565"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"Mqw0eIc9OwldpzSunegv6dUdt+mcQVmTOoHhFlYttvE/5mpKyTZeDIimkWxovhIM/2eW9QMUPLIlCAQgqtg/xQ=="}],"memo":""},"blockNum":"209568"}
